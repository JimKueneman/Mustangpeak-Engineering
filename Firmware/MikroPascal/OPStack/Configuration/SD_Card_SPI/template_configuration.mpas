// *****************************************************************************
//
// This file is the template for the application to define how the Configuration
// Memory Protocol accesses Configuration Memory
//
// In order for these to be called you must define the node/vnode implements the
// Configuration Address Space in several places.
// In the template_node and template_vnode files
// 1) Protocol Identification Protocol (PIP) must define Configuration Memory Protocol exists (USER_PIV_SUPPORTED_PROTOCOLS)
// 2) USER_CONFIGMEM_LOWEST_SPACE must be low enough to cover the MSI_CONFIG value
//
// SD Card SPI based
// *****************************************************************************

unit template_configuration;

{$I Options.inc}

uses
  opstack_debug,
  opstack_defines,
  opstack_types,
  template_node;
  
procedure TemplateConfiguration_Initialize;
procedure TemplateConfiguration_100ms_Timer;

function ConfigurationCallback_ReadConfiguration(ConfigAddress: DWord; ReadCount: Word; DatagramData: PByte): Word;
function ConfigurationCallback_WriteConfiguration(ConfigAddress: DWord; WriteCount: Word; DatagramData: PByte): Word;

function ConfigurationCallback_ReadAcdiUser(ConfigAddress: DWord; ReadCount: Word; ConfigData: PByte): Word;
function ConfigurationCallback_WriteAcdiUser(ConfigAddress: DWord; WriteCount: Word; ConfigData: PByte): Word;

procedure MCU_SetSPI2Speed(High: Boolean); external;


type
  TSD_Card_Rec = record
    Inserted: Boolean;
 //   DatabaseFileHandle: Integer;
    RootDir:      array[2] of char;       // Includes null
    DatabaseFile: array[17] of char;      // Includes null
    FDI_Path:     array[8] of char;       // Included null
    Default_FDI:  array[13] of char;     // Includes null         Short Filename only
    ClockSpeedHi: Boolean;
  //  ConfigBuffer: array[512] of byte;
  end;
  
  TOnOPStack_SD_CardChange = procedure(var SD_Card: TSD_Card_Rec);

var
  CS_Card_Detect_bit: sbit; sfr; external;
  CS_Card_Detect_Direction_bit: sbit; sfr; external;
  
  SD_Card: TSD_Card_Rec;
  
  OnSD_CardChange: ^TOnOPStack_SD_CardChange; external;

implementation

const
  SPI_SPEED_LOW = 0;
  SPI_SPEED_HIGH = 1;
  SPI_SPEED_EVE = 2;

// *****************************************************************************
//  procedure TemplateConfiguration_Initialize
//     Parameters: :
//     Returns:
//     Description:
// *****************************************************************************
procedure TemplateConfiguration_Initialize;
begin
  CS_Card_Detect_bit := 1;
  CS_Card_Detect_Direction_bit := 0;  // Output
  SD_Card.Inserted := False;
  SD_Card.ClockSpeedHi := False;
 // SD_Card.DatabaseFileHandle := -1;
  SD_Card.RootDir := '\';
  SD_Card.DatabaseFile := 'database.dat';
  SD_Card.FDI_Path := 'FDI';
  SD_Card.Default_FDI := 'default.xml';
end;

// *****************************************************************************
//  procedure TemplateConfiguration_1s_Timer
//     Parameters: :
//     Returns:
//     Description:
// *****************************************************************************
procedure TemplateConfiguration_100ms_Timer;
var
  FileSize, ConfigMemSize: DWord;
  Buffer: array[USER_CONFIGURATION_MEMORY_SIZE] of Char;
  i: Integer;
  hFile: Short;
begin
  if CS_Card_Detect_bit = 0 then
  begin
    if not SD_Card.Inserted then
    begin
      DebugLine('Detected Insertion');
      MCU_SetSPI2Speed(SPI_SPEED_LOW);
      SD_Card.Inserted := FAT32_Init = 0;
      
      if SD_Card.Inserted then
        DebugLine('SD Card Initialized' )
      else begin
        IntToStr(FAT32_GetError, Buffer);
        DebugLine('SD Card not Initialized: Error = ' + Buffer);
      end;
      
      MCU_SetSPI2Speed(SPI_SPEED_HIGH);
      if SD_Card.Inserted then
      begin
        if (FAT32_ChangeDir(@SD_Card.RootDir) = 0) then
        begin
          if FAT32_Exists(@SD_Card.DatabaseFile) = 0 then
          begin
            DebugLine('Creating database');
            hFile := FAT32_Open(@SD_Card.DatabaseFile, FILE_WRITE_F32);
          end;
          
          if FAT32_Exists(@SD_Card.DatabaseFile) = 1 then
          begin
            if FAT32_Size(@SD_Card.DatabaseFile, @FileSize) = 0 then
            begin
              for i := 0 to USER_CONFIGURATION_MEMORY_SIZE - 1 do
                Buffer[i] := 0;
              ConfigMemSize := USER_MAX_NODE_COUNT * USER_CONFIGURATION_MEMORY_SIZE;
              hFile := FAT32_Open(@SD_Card.DatabaseFile, FILE_APPEND_F32);
              if hFile > -1 then
              begin
                while FileSize < ConfigMemSize do
                begin
                  FAT32_Write(hFile, @Buffer, USER_CONFIGURATION_MEMORY_SIZE);
                  FileSize := FileSize + USER_CONFIGURATION_MEMORY_SIZE;
                end
              end;
              FAT32_Close(hFile);
              
              LongWordToStr(FileSize, Buffer);
              DebugLine('Size: ' + Buffer);
              DebugLine('SD Card Inserted, Initialized');
            end;
          end
        end;
        if OnSD_CardChange <> nil then
          OnSD_CardChange(SD_Card);
      end
    end
  end else
  begin
    if SD_Card.Inserted then
    begin
      DebugLine('Detected Removal');
      if hFile > -1 then
        FAT32_Close(hFile);
      SD_Card.Inserted := False;
      if OnSD_CardChange <> nil then
        OnSD_CardChange(SD_Card);
      DebugLine('Closed')
    end
  end;
end;

  // *****************************************************************************
  //  procedure ConfigurationCallback_ReadConfiguration
  //     Parameters: : ConfigAddress:  The offset into the flat address space to
  //                                   start reading from
  //                   ReadCount    :  The number of bytes to read
  //                   DatagramData :  Pointer to the start of the Datagram Array
  //                                   were to write the data to
  //     Returns:    The number of bytes actually read;
  //     Description: Override to read from the configuration memory (could be
  //                  SPI EEPROM, internal EEPROM, files, etc)
  // *****************************************************************************
function ConfigurationCallback_ReadConfiguration(ConfigAddress: DWord; ReadCount: Word; DatagramData: PByte): Word;
var
  hFile: Short;
  Success: Boolean;
  i: Integer;
begin
  Result := 0;
  Success := False;
  if SD_Card.Inserted then
    if FAT32_ChangeDir(@SD_Card.RootDir) = 0 then
    begin
      hFile := FAT32_Open(@SD_Card.DatabaseFile, FILE_READ_F32);
      if hFile > -1 then
      begin
        FAT32_Seek(hFile, ConfigAddress);
        if FAT32_Read(hFile, DatagramData, ReadCount) > -1 then
          Result := ReadCount;
        FAT32_Close(hFile);
        Success := True;
      end;
    end;
    
  if not Success then
  begin
    for i := 0 to ReadCount - 1 do
    begin
      DatagramData^ := #0;
      Inc(DatagramData);
    end
  end
end;

// *****************************************************************************
//  procedure ConfigurationCallback_WriteConfiguration
//     Parameters: : ConfigAddress:  The offset into the flat address space to
//                                   start writing from
//                   ReadCount    :  The number of bytes to write
//                   DatagramData :  Pointer to the start of the Datagram Array
//                                   were to write the data to
//     Returns:    The number of bytes actually written;
//     Description: Override to write from the configuration memory (could be
//                  SPI EEPROM, internal EEPROM, files, etc)
// *****************************************************************************
function ConfigurationCallback_WriteConfiguration(ConfigAddress: DWord; WriteCount: Word; DatagramData: PByte): Word;
var
  hFile: Short;
begin
  Result := 0;
  if SD_Card.Inserted then
    if FAT32_ChangeDir(@SD_Card.RootDir) = 0 then
    begin
      hFile := FAT32_Open(@SD_Card.DatabaseFile, FILE_WRITE_F32);
      if hFile > -1 then
      begin
        FAT32_Seek(hFile, ConfigAddress);
        if FAT32_Write(hFile, DatagramData, WriteCount) > -1 then
          Result := WriteCount;
        FAT32_Close(hFile);
      end;
    end;
end;

// *****************************************************************************
//  procedure ConfigurationCallback_ReadAcdiUser
//     Parameters: : ConfigAddress:  The offset into the flat address space to
//                                   start reading from
//                   ReadCount    :  The number of bytes to read
//                   DatagramData :  Pointer to the start of the Datagram Array
//                                   were to write the data to
//     Returns:    The number of bytes actually read;
//     Description: Override to read from the configuration memory (could be
//                  SPI EEPROM, internal EEPROM, files, etc)
// *****************************************************************************
function ConfigurationCallback_ReadAcdiUser(ConfigAddress: DWord; ReadCount: Word; ConfigData: PByte): Word;
begin
  // Here we use the same configuration memory for the AcdiUser strings as normal configuration memory
  // that data starts after the user strings
  // The user can completly override this if desired, the library has filled in
  // The first 128 Bytes of the Configuration Memory are for the User Strings in this example
  // (Version ID + 63 + 64) as defined in the Template_Node and Template_VNode files
   Result := ConfigurationCallback_ReadConfiguration(ConfigAddress, ReadCount, ConfigData)
end;

// *****************************************************************************
//  procedure ConfigurationCallback_WriteAcdiUser
//     Parameters: : ConfigAddress:  Is the _beginning_ of the block of configruation memory
//                                   for the node or vNode (offset 0)
//                   ReadCount    :  The number of bytes to read
//                   DatagramData :  Pointer to the start of the Datagram Array
//                                   were to write the data to
//     Returns:    The number of bytes actually written;
//     Description: Override to read from the configuration memory (could be
//                  SPI EEPROM, internal EEPROM, files, etc)
// *****************************************************************************
function ConfigurationCallback_WriteAcdiUser(ConfigAddress: DWord; WriteCount: Word; ConfigData: PByte): Word;
begin
  // Here we use the same configuration memory for the AcdiUser strings as normal configuration memory
  // that data starts after the user strings
  // The user can completly override this if desired, the library has filled in
  // The first 128 Bytes of the Configuration Memory are for the User Strings in this example
  // (Version ID + 63 + 64)  as defined in the Template_Node and Template_VNode files
   Result := ConfigurationCallback_WriteConfiguration(ConfigAddress, WriteCount, ConfigData)
end;

end.