unit bootloader_common;

// Version 0.1
//
// The contents of this file are subject to the Mozilla Public License
// Version 1.1 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Alternatively, you may redistribute this library, use and/or modify it under the terms of the
// GNU Lesser General Public License as published by the Free Software Foundation;
// either version 2.1 of the License, or (at your option) any later version.
// You may obtain a copy of the LGPL at http://www.gnu.org/copyleft/.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
// specific language governing rights and limitations under the License.
//
// The initial developer of this code is Jim Kueneman <jimkueneman@yahoo.com> and Vcc
//

{$IFDEF FPC}
{$mode objfpc}{$H+}

interface
{$ENDIF}

uses
  bootloader_common_defines,
  bootloader_user;

{$I options_user.inc}

const
  MAX_MESSAGE_OVERHEAD = 3; // Largest Message is the Write Partial Block with the WriteBlock Size of Data + CommandByte + CountWord

const
  // $FF is reserved
  CMD_LINK               = $EF;
  CMD_UNLINK             = $EE;
  CMD_SYNC               = $ED;
  CMD_REQEUST_FLASH_DATA = $80;
  CMD_SET_ADDRESS        = $02;
  CMD_RESET              = $81;
  CMD_ERASE_BLOCKS       = $10;
  CMD_WRITE_BLOCK        = $30;
  CMD_WRITE              = $31;
  CMD_PARAMETERLESS_MASK = $80;  // Messages with no paramters have the high bit set

  CMD_SET_ADDRESS_WRITE  = $00;
  CMD_SET_ADDRESS_ERASE  = $01;

const
  {$IFDEF P32}USER_BOOTLOADER_ADDRESS = $9D000000 + (((__FLASH_SIZE - USER_BOOTLOADER_SIZE) div USER_BOOTLOADER_ERASE_BLOCK) * USER_BOOTLOADER_ERASE_BLOCK);{$ENDIF}
  {$IFDEF P33}USER_BOOTLOADER_ADDRESS = ((((__FLASH_SIZE div 3)*2)-USER_BOOTLOADER_SIZE) div ((USER_BOOTLOADER_ERASE_BLOCK div 3)*2))*((USER_BOOTLOADER_ERASE_BLOCK div 3)*2);{$ENDIF}
  {$IFDEF P30}USER_BOOTLOADER_ADDRESS = ((((__FLASH_SIZE div 3)*2)-USER_BOOTLOADER_SIZE) div ((USER_BOOTLOADER_ERASE_BLOCK div 3)*2))*((USER_BOOTLOADER_ERASE_BLOCK div 3)*2);{$ENDIF}
  {$IFDEF P24}USER_BOOTLOADER_ADDRESS = ((((__FLASH_SIZE div 3)*2)-USER_BOOTLOADER_SIZE) div ((USER_BOOTLOADER_ERASE_BLOCK div 3)*2))*((USER_BOOTLOADER_ERASE_BLOCK div 3)*2);{$ENDIF}
  {$IFDEF P16}USER_BOOTLOADER_ADDRESS = (((__FLASH_SIZE - USER_BOOTLOADER_SIZE) div USER_BOOTLOADER_ERASE_BLOCK) * USER_BOOTLOADER_ERASE_BLOCK);{$ENDIF}
type
  PByte = ^Byte;
  PWord = ^Word;
  PDWord = ^DWord;

type
  TRevision = array[0..1] of Byte;

const
  BOOTINFO_REC_SIZE = 61;

type
  TBootInfo = record
    StructSize: Word;     // Size of this Structure     2+(6*4)+1+2+32=57
    EraseBlockSize: DWord;
    WriteBufferSize: DWord;
    ProgramFlashSize: DWord;
    BootloaderAddress: DWord;
    BootloaderSize: DWord;
    ConfigurationAddress: DWord;
    McuFamily: Byte;
    Revision: TRevision;
    ApplicationName: string[32];
  end;

type
  TCurrentAddresses = record
    Write: DWord;
    Erase: DWord;
  end;
  
const
  RAW_BUFFER_LEN = USER_BOOTLOADER_WRITE_BLOCK + MAX_MESSAGE_OVERHEAD;
  
type
  TRawBuffer = array[0..RAW_BUFFER_LEN - 1] of Byte;
  
{$IFDEF P32}
// MIPS Memory Helpers
 // Translate back and forth from Kernal to Physical address
 function _KVA_TO_PA(Address: DWord): DWord;  //  ((v) & 0x1fffffff)
 function _PA_TO_KVA0(Address: DWord): DWord; // ((pa) | 0x80000000)
 function _PA_TO_KVA1(Address: DWord): DWord; //((pa) | 0xa0000000)
 // Translate between Kernal addresses
 function _KVA0_TO_KVA1(Address: DWord): DWord; // ((v) | 0x20000000)
 function _KVA1_TO_KVA0(Address: DWord): DWord; // ((v) & ~0x20000000)
 // Tests for Kernal addresses
function  _IS_KVA(Address: DWord): Boolean;  //     ((int)(v) < 0)
function  _IS_KVA0(Address: DWord): Boolean;  //       (((unsigned)(v) >> 29) == 0x4)
function  _IS_KVA1(Address: DWord): Boolean;  //       (((unsigned)(v) >> 29) == 0x5)
function  _IS_KVA01(Address: DWord): Boolean;  //     (((unsigned)(v) >> 30) == 0x2)
{$ENDIF}

// Pointer Helpers
function Address2DWord_LittleEndian(addr_ : ^byte) : DWord;
function Address2Word_LittleEndian(addr_ : ^byte) : Word;
function Address2DWord_BigEndian(addr_ : ^byte) : DWord;
function Address2Word_BigEndian(addr_ : ^byte) : Word;


implementation

{$IFDEF P32}
 // Translate back and forth from Kernal to Physical address
 function _KVA_TO_PA(Address: DWord): DWord;  //  ((v) & 0x1fffffff)
 begin
   Result := Address and $1FFFFFFF
 end;

 function _PA_TO_KVA0(Address: DWord): DWord; // ((pa) | 0x80000000)
 begin
   Result := Address or $80000000
 end;

 function _PA_TO_KVA1(Address: DWord): DWord; //((pa) | 0xa0000000)
 begin
   Result := Address or $A0000000
 end;

 // Translate between Kernal addresses
 function _KVA0_TO_KVA1(Address: DWord): DWord; // ((v) | 0x20000000)
 begin
   Result := Address or $20000000
 end;

 function _KVA1_TO_KVA0(Address: DWord): DWord; // ((v) & ~0x20000000)
 begin
   Result := Address and not $20000000
 end;

 // Tests for Kernal addresses
function  _IS_KVA(Address: DWord): Boolean;  //     ((int)(v) < 0)
begin
  Result := Integer(Address) < 0
end;

function  _IS_KVA0(Address: DWord): Boolean;  //       (((unsigned)(v) >> 29) == 0x4)
begin
  Result := Address shr 29 = 4
end;

function  _IS_KVA1(Address: DWord): Boolean;  //       (((unsigned)(v) >> 29) == 0x5)
begin
  Result := Address shr 29 = 5
end;

function  _IS_KVA01(Address: DWord): Boolean;  //     (((unsigned)(v) >> 30) == 0x2)
begin
  Result := Address shr 29 = 2
end;
{$ENDIF}

function Address2DWord_LittleEndian(addr_ : ^byte) : DWord;
begin
  Result := 0;
  Highest(result) := addr_^;
  inc(Addr_);
  Higher(result):= addr_^;
  inc(Addr_);
  Hi(result) := addr_^;
  inc(Addr_);
  Lo(result) := addr_^;
end;

function Address2Word_LittleEndian(addr_ : ^byte) : Word;
begin
  Result := 0;
  Hi(result) := addr_^;
  inc(Addr_);
  Lo(result) := addr_^;
end;

function Address2DWord_BigEndian(addr_ : ^byte) : DWord;
begin
  Lo(result) := addr_^;
  inc(Addr_);
  Hi(result):= addr_^;
  inc(Addr_);
  Higher(result) := addr_^;
  inc(Addr_);
  Highest(result) := addr_^;
end;

function Address2Word_BigEndian(addr_ : ^byte) : Word;
begin
  Lo(result) := addr_^;
  inc(Addr_);
  Hi(result) := addr_^;
end;

end.