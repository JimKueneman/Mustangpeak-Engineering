unit EveWifiNode_driver;

uses EveWifiNode_types, EveWifiNode_objects, EveWifiNode_resources, EveWifiNode_events_code;


// Extern memory interface
// MMC/SD Connections
var Mmc_Chip_Select_Direction: sbit at TRISD12_bit;
var Mmc_Chip_Select:           sbit at LATD12_bit;
// end of MMC/SD
// VTFT Get Data globals
var rfHandle:    short;
var rfName:      string[14];
var rfStartSect: dword;
// end of VTFT Get Data
// End of extern memory interface

// TFT module connections
var FT800_RST: sbit at LATD0_bit;
var FT800_CS: sbit at LATD1_bit;
var FT800_RST_Direction: sbit at TRISD0_bit;
var FT800_CS_Direction: sbit at TRISD1_bit;
// ~TFT module connections


// Text alignment
// Usage: internally used by VTFT stack
const taNone:    TTextAlign = 0;
const taLeft:    TTextAlign = 1;
const taCenter:  TTextAlign = 2;
const taRight:   TTextAlign = 3;
const taCenterX: TTextAlign = 4;
const taCenterY: TTextAlign = 5;
const taRightX:  TTextAlign = 6;
// ~Text alignment

// Object type constants
// Usage: VTFT stack internally
const VTFT_OT_LABEL:     byte = 4;
const VTFT_OT_EVEBUTTON: byte = 36;
const VTFT_OT_EVETEXT:   byte = 40;
// ~Object type constants

// Event type constants
// Usage: OnEvent
const VTFT_EVT_UP:    byte = 0;
const VTFT_EVT_DOWN:  byte = 1;
const VTFT_EVT_CLICK: byte = 2;
const VTFT_EVT_PRESS: byte = 3;
// ~Event type constants

// Sound action constants
// Usage: sound event action property and ProcessEvent
const VTFT_SNDACT_NONE: byte = 0;
const VTFT_SNDACT_PLAY: byte = 1;
const VTFT_SNDACT_STOP: byte = 2;
// ~Sound action constants

// Resource loading constants.
// Usage: DrawScreenO and LoadCurrentScreenResToGRAM
const VTFT_LOAD_RES_NONE:    byte = 0x00; // do not load g-ram resources
const VTFT_LOAD_RES_STATIC:  byte = 0x01; // load g-ram resources for static objects
const VTFT_LOAD_RES_DYNAMIC: byte = 0x02; // load g-ram resources for dynamic objects
const VTFT_LOAD_RES_ALL:     byte = 0x03; // load g-ram resources for all objects
// ~Resource loading constants

// Display effect constants
// Usage: DrawScreenO
const VTFT_DISPLAY_EFF_NONE:        byte = 0x00; // no effect when switching between screens
const VTFT_DISPLAY_EFF_LIGHTS_FADE: byte = 0x04; // backlight: fade out before, fade in after drawing new screen
const VTFT_DISPLAY_EFF_LIGHTS_OFF:  byte = 0x08; // backlight: turn off before, turn on after drawing new screen
// ~Display effect constants

// Stack flags
// Usage: internally used by VTFT stack
const VTFT_INT_REPAINT_ON_DOWN:     byte = 1 shl 0;
const VTFT_INT_REPAINT_ON_UP:       byte = 1 shl 1;
const VTFT_INT_BRING_TO_FRONT:      byte = 1 shl 2;
const VTFT_INT_INTRINSIC_CLICK_EFF: byte = 1 shl 3;
// ~Stack flags

// Default configuration parameters
const VTFT_FT800_CONFIG_DISPLAY: TFT800Display =
(
  48000000,        // Frequency          = main clock frequency
  0,               // OutRenderMode      = 0 normal, 1 write, 2 read
  0,               // RenderReadScanLine = scanline for read render mode
  0,               // RenderWriteTrigger = trigger for write render mode (read only)
  525,             // hCycle             = number if horizontal cycles for display
  43,              // hOffset            = horizontal offset from starting signal
  480,             // hSize              = width resolution
  0,               // hSync0             = hsync falls
  41,              // hSync1             = hsync rise
  286,             // vCycle             = number of vertical cycles for display
  12,              // vOffset            = vertical offset from start signal
  272,             // vSize              = height resolution
  0,               // vSync0             = vsync falls
  10,              // vSync1             = vsync rise
  0,               // Rotate             = rotate display
  0x01B6,          // OutBits            = output bits resolution
  0,               // OutDither          = output number of bits
  0x0000,          // OutSwizzle         = output swizzle
  0,               // OutCSpread         = output clock spread enable
  1,               // PClockPolarity     = clock polarity: 0 - rising edge, 1 - falling edge
  5                // PClock             = clock prescaler of FT800: - 0 means disable and >0 means 48MHz/pclock
);

const VTFT_FT800_CONFIG_TOUCH: TFT800Touch =
(
  3,               // TouchMode        = touch screen mode (2 bits): 0 - off, 1 - oneshot, 2 - frame, 3 - continuous
  1,               // TouchADCMode     = touch screen adc mode (1 bit): 0 - singleended, 1 - differential
  6000,            // TouchCharge      = Touchscreen charge time, units of 6 clocks
  3,               // TouchSettle      = touch screen settle time - 4 bits
  7,               // TouchOversample  = touch screen oversample - 4 bits
  2000             // TouchRZThreshold = Touchscreen resistance threshold
);

const VTFT_FT800_CONFIG_GPIO: TFT800GPIO =
(
  0xFC,            // GPIODIR = GPIO direction: 1 - output, 0 - input (8bit wide)
  0xFF             // GPIO    = GPIO data latch
);

const VTFT_FT800_CONFIG_PWM: TFT800PWM =
(
  250,             // Freq = PWM frequency - 14 bits
  64               // Duty = PWM duty cycle, 0 to 128 is the range
);

const VTFT_FT800_CONFIG_INTERRUPT: TFT800Interrupt =
(
  0,               // Flags  = interrupt flags (read only)
  0,               // Enable = global interrupt enable: 1 - enabled, 0 - disabled
  255              // Mask   = interrupt mask value (individual interrupt enable): 1 - masked/disabled, 0 - enabled
);

const VTFT_FT800_CONFIG_SOUND: TFT800Sound =
(
  0,               // Volume
  0,               // Effect
  0,               // Pitch
  0                // Play
);

const VTFT_FT800_CONFIG_AUDIO: TFT800Audio =
(
  0,               // Volume
  0,               // StartAddress
  0,               // Length
  8000,            // Frequency
  0,               // Format
  0,               // Loop = audio playback mode
  0                // Play
);
// ~Default configuration parameters


var CurrentScreen: ^TScreen;
var TouchS: TTouchStat;

// Routine declarations
procedure DrawScreenO(aScreen: ^TScreen; aOptions: byte);
procedure DrawScreen(aScreen: ^TScreen);
procedure DrawLabel(ALabel: TLabelPtr);
procedure DrawEveButton(AEveButton: TEveButtonPtr);
procedure DrawEveText(AEveText: TEveTextPtr);
procedure ProcessVTFTStack();
procedure InitVTFTStack();
// ~Routine declarations


implementation

function IsInsideObject(AObjInfo: TObjInfoPtr; X: word; Y: word): byte;
var ptrPressRect:   TRectPtr;
    ptrPressCircle: TRectPtr;
begin
  Result := 0;

  ptrPressRect   := 0;
  ptrPressCircle := 0;

  if ((AObjInfo^.HitX = X) and (AObjInfo^.HitY = Y)) then
  begin
    Result := 1;
    Exit;
  end;

  case (AObjInfo^.Type_) of
    // Label
    VTFT_OT_LABEL: begin
      ptrPressRect := TRectPtr(TPointer(@TLabelPtr(AObjInfo^.Obj)^.Left));
    end;
    // EveButton
    VTFT_OT_EVEBUTTON: begin
      ptrPressRect := TRectPtr(TPointer(@TEveButtonPtr(AObjInfo^.Obj)^.Left));
    end;
    // EveText
    VTFT_OT_EVETEXT: begin
      ptrPressRect := TRectPtr(TPointer(@TEveTextPtr(AObjInfo^.Obj)^.Left));
    end;
  end;

  if (ptrPressRect) then
  begin
    if (ptrPressRect^.Left <= X) then
      if (ptrPressRect^.Top  <= Y) then
        if (ptrPressRect^.Left+ptrPressRect^.Width-1 >= X) then
          if (ptrPressRect^.Top+ptrPressRect^.Height-1 >= Y) then
            Result := 1;
  end
  else if (ptrPressCircle) then
  begin
    if (ptrPressCircle^.Left <= X) then
      if (ptrPressCircle^.Top  <= Y) then
        if (ptrPressCircle^.Left+ptrPressCircle^.Width*2-1 >= X) then
          if (ptrPressCircle^.Top+ptrPressCircle^.Width*2-1 >= Y) then
            Result := 1;
  end
end;

procedure DrawLabel(ALabel: TLabelPtr);
begin
  if (ALabel^.Visible) then
  begin
    if (ALabel^.FontHandle >= 16) then
      FT800_Canvas_FontSystem(ALabel^.FontHandle, ALabel^.Font_Color, ALabel^.Opacity)
    else
      FT800_Canvas_FontExt(ALabel^.FontHandle, ALabel^.FontName, ALabel^.Source, ALabel^.Font_Color, ALabel^.Opacity);

    if (ALabel^.Tag) then
      FT800_Canvas_Tag(ALabel^.Tag);

    FT800_Screen_TextPos(ALabel^.Left, ALabel^.Top, ALabel^.Caption);
  end;
end;

procedure DrawEveButton(AEveButton: TEveButtonPtr);
var drawOptions: dword;
begin
  if (AEveButton^.Visible) then
  begin
    if ((VTFT_OT_EVEBUTTON = TouchS.ActObjInfo.Type_) and (AEveButton = TEveButtonPtr(TouchS.ActObjInfo.Obj))) then
      FT800_Canvas_BrushGradient(_FT800_BRUSH_STYLE_SOLID, _FT800_BRUSH_GR_BOTTOM_TO_TOP, AEveButton^.Press_Color, AEveButton^.Press_ColorTo, AEveButton^.Opacity)
    else
      FT800_Canvas_BrushGradient(_FT800_BRUSH_STYLE_SOLID, _FT800_BRUSH_GR_BOTTOM_TO_TOP, AEveButton^.Color, AEveButton^.ColorTo, AEveButton^.Opacity);

    if (AEveButton^.FontHandle >= 16) then
      FT800_Canvas_FontSystem(AEveButton^.FontHandle, AEveButton^.Font_Color, AEveButton^.Opacity)
    else
      FT800_Canvas_FontExt(AEveButton^.FontHandle, AEveButton^.FontName, AEveButton^.Source, AEveButton^.Font_Color, AEveButton^.Opacity);

    if (AEveButton^.Tag) then
      FT800_Canvas_Tag(AEveButton^.Tag);

    drawOptions := 0;
    if (AEveButton^.Flat) then
      drawOptions := drawOptions or _FT800_CP_DRAW_OPT_FLAT;
    FT800_Canvas_CPGraphics_DrawingOptions(drawOptions);

    FT800_Screen_ButtonCP(AEveButton^.Left, AEveButton^.Top, AEveButton^.Width, AEveButton^.Height, AEveButton^.Caption);
  end;
end;

procedure DrawEveText(AEveText: TEveTextPtr);
var drawOptions: dword;
begin
  if (AEveText^.Visible) then
  begin
    if (AEveText^.FontHandle >= 16) then
      FT800_Canvas_FontSystem(AEveText^.FontHandle, AEveText^.Font_Color, AEveText^.Opacity)
    else
      FT800_Canvas_FontExt(AEveText^.FontHandle, AEveText^.FontName, AEveText^.Source, AEveText^.Font_Color, AEveText^.Opacity);

    if (AEveText^.Tag) then
      FT800_Canvas_Tag(AEveText^.Tag);

    drawOptions := 0;
    if (AEveText^.TextAlign = taCenter) then
      drawOptions := drawOptions or _FT800_CP_DRAW_OPT_CENTER
    else if (AEveText^.TextAlign = taCenterX) then
      drawOptions := drawOptions or _FT800_CP_DRAW_OPT_CENTERX
    else if (AEveText^.TextAlign = taCenterY) then
      drawOptions := drawOptions or _FT800_CP_DRAW_OPT_CENTERY
    else if (AEveText^.TextAlign = taRightX) then
      drawOptions := drawOptions or _FT800_CP_DRAW_OPT_RIGHTX;
    FT800_Canvas_CPGraphics_DrawingOptions(drawOptions);

    FT800_Screen_TextCP(AEveText^.Left, AEveText^.Top, AEveText^.Caption);
  end;
end;

procedure DrawObject(aObj: TPointer; aObjType: byte);
var drawHandler: TDrawHandler;
begin
  drawHandler := TDrawHandler(DrawHandlerTable[aObjType]);
  if (drawHandler) then
    drawHandler(aObj);
end;

procedure DrawScreenO(aScreen: ^TScreen; aOptions: byte);
var cOrder, saveOrder: byte;
var actObjOrder: integer;
var pwmDuty: byte;
  // counter variables
var cntLabel:     byte;
var cntEveButton: byte;
var cntEveText:   byte;
  // pointer variables
var pLabel:     ^code far ^TLabel;
var pEveButton: ^code far ^TEveButton;
var pEveText:   ^code far ^TEveText;
begin
  // process screen switching effects
  if (aOptions and VTFT_DISPLAY_EFF_LIGHTS_FADE) then
  begin
    FT800_PWM_Get(0, @pwmDuty);
    FT800_PWM_FadeOut(pwmDuty, 0, (word(pwmDuty)+31) div 32, 1);
  end
  else if (aOptions and VTFT_DISPLAY_EFF_LIGHTS_OFF) then
  begin
    FT800_PWM_Get(0, @pwmDuty);
    FT800_PWM_Duty(0);
  end;

  if (CurrentScreen <> aScreen) then
    // clear active object when drawing to new screen
    memset(@TouchS.ActObjInfo, 0, sizeof(TObjInfo));

  CurrentScreen := aScreen;

  // init counter variables
  cntLabel     := CurrentScreen^.LabelsCount;
  cntEveButton := CurrentScreen^.EveButtonsCount;
  cntEveText   := CurrentScreen^.EveTextsCount;
  // init pointer variables
  pLabel     := CurrentScreen^.Labels;
  pEveButton := CurrentScreen^.EveButtons;
  pEveText   := CurrentScreen^.EveTexts;

  FT800_Screen_BeginUpdateCP();
  FT800_Canvas_BrushSingleColor(_FT800_BRUSH_STYLE_SOLID, CurrentScreen^.Color, 255);
  FT800_Canvas_Tag(0);
  FT800_Screen_Clear(_FT800_CLEAR_ALL);
  FT800_CP_CmdStop();

  actObjOrder := -1;
  if (TouchS.ActObjInfo.Obj) then
    if (TouchS.ActObjInfo.Flags and VTFT_INT_BRING_TO_FRONT) then
      actObjOrder := TouchS.ActObjInfo.Order;

  cOrder := 0;
  while (cOrder < CurrentScreen^.ObjectsCount) do
  begin
    saveOrder := cOrder;
    if (pLabel) then
    begin
      while (pLabel^^.Order = cOrder) do
      begin
        if (actObjOrder <> cOrder) then // draw pressed object at the end
          DrawLabel(pLabel^);
        Inc(cOrder);
        Inc(pLabel);
        Dec(cntLabel);
        if (cntLabel = 0) then
        begin
          pLabel := 0;
          break;
        end;
      end;
      if (saveOrder <> cOrder) then
        continue;
    end;

    if (pEveButton) then
    begin
      while (pEveButton^^.Order = cOrder) do
      begin
        if (actObjOrder <> cOrder) then // draw pressed object at the end
          DrawEveButton(pEveButton^);
        Inc(cOrder);
        Inc(pEveButton);
        Dec(cntEveButton);
        if (cntEveButton = 0) then
        begin
          pEveButton := 0;
          break;
        end;
      end;
      if (saveOrder <> cOrder) then
        continue;
    end;

    if (pEveText) then
    begin
      while (pEveText^^.Order = cOrder) do
      begin
        if (actObjOrder <> cOrder) then // draw pressed object at the end
          DrawEveText(pEveText^);
        Inc(cOrder);
        Inc(pEveText);
        Dec(cntEveText);
        if (cntEveText = 0) then
        begin
          pEveText := 0;
          break;
        end;
      end;
      if (saveOrder <> cOrder) then
        continue;
    end;

    Inc(cOrder);
  end;

  // draw pressed object now
  if (TouchS.ActObjInfo.Obj) then
    DrawObject(TouchS.ActObjInfo.Obj, TouchS.ActObjInfo.Type_);

  FT800_Screen_EndUpdate();
  FT800_Screen_Show();

  // process screen switching effects
  if (aOptions and VTFT_DISPLAY_EFF_LIGHTS_FADE) then
    FT800_PWM_FadeIn(0, pwmDuty, 1, 3)
  else if (aOptions and VTFT_DISPLAY_EFF_LIGHTS_OFF) then
    FT800_PWM_Duty(pwmDuty);

end;

procedure DrawScreen(aScreen: ^TScreen);
begin
  if (aScreen <> CurrentScreen) then
    DrawScreenO(aScreen, VTFT_LOAD_RES_ALL or VTFT_DISPLAY_EFF_LIGHTS_FADE)
  else
    DrawScreenO(aScreen, VTFT_LOAD_RES_NONE);
end;

function GetActiveObjectByXY(X: integer; Y: integer; AObjInfo: TObjInfoPtr): byte;
var i: byte;
    hiOrder: integer;
var pLabel:     ^TLabel;
var pEveButton: ^TEveButton;
var pEveText:   ^TEveText;
var ptrO: ^code far ^byte;
begin
  // clear current object info
  memset(TBytePtr(AObjInfo), 0, sizeof(TObjInfo));

  // Find object with highest order at specified position.
  // Objects lists are sorted by object order ascending.
  hiOrder := -1;

  // Label
  i    := CurrentScreen^.LabelsCount;
  ptrO := CurrentScreen^.Labels+CurrentScreen^.LabelsCount-1;
  while (i) do
  begin
    pLabel := TLabelPtr(ptrO^);
    if (pLabel^.Order < hiOrder) then
      break;
    if (pLabel^.Active) then
    begin
      if (pLabel^.Left <= X) then
        if (pLabel^.Top  <= Y) then
          if (pLabel^.Left+pLabel^.Width-1 >= X) then
            if (pLabel^.Top+pLabel^.Height-1 >= Y) then
            begin
              AObjInfo^.Obj   := TPointer(pLabel);
              AObjInfo^.Type_ := VTFT_OT_LABEL;
              AObjInfo^.Order := pLabel^.Order;
              AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;

              hiOrder         := pLabel^.Order;

              break;
            end;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  // EveButton
  i    := CurrentScreen^.EveButtonsCount;
  ptrO := CurrentScreen^.EveButtons+CurrentScreen^.EveButtonsCount-1;
  while (i) do
  begin
    pEveButton := TEveButtonPtr(ptrO^);
    if (pEveButton^.Order < hiOrder) then
      break;
    if (pEveButton^.Active) then
    begin
      if (pEveButton^.Left <= X) then
        if (pEveButton^.Top  <= Y) then
          if (pEveButton^.Left+pEveButton^.Width-1 >= X) then
            if (pEveButton^.Top+pEveButton^.Height-1 >= Y) then
            begin
              AObjInfo^.Obj   := TPointer(pEveButton);
              AObjInfo^.Type_ := VTFT_OT_EVEBUTTON;
              AObjInfo^.Order := pEveButton^.Order;
              AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;
              if ((pEveButton^.Press_Color <> pEveButton^.Color) or
                  (pEveButton^.Press_ColorTo <> pEveButton^.ColorTo)) then
                AObjInfo^.Flags := AObjInfo^.Flags or VTFT_INT_REPAINT_ON_DOWN or VTFT_INT_REPAINT_ON_UP;

              hiOrder         := pEveButton^.Order;

              break;
            end;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  // EveText
  i    := CurrentScreen^.EveTextsCount;
  ptrO := CurrentScreen^.EveTexts+CurrentScreen^.EveTextsCount-1;
  while (i) do
  begin
    pEveText := TEveTextPtr(ptrO^);
    if (pEveText^.Order < hiOrder) then
      break;
    if (pEveText^.Active) then
    begin
      if (pEveText^.Left <= X) then
        if (pEveText^.Top  <= Y) then
          if (pEveText^.Left+pEveText^.Width-1 >= X) then
            if (pEveText^.Top+pEveText^.Height-1 >= Y) then
            begin
              AObjInfo^.Obj   := TPointer(pEveText);
              AObjInfo^.Type_ := VTFT_OT_EVETEXT;
              AObjInfo^.Order := pEveText^.Order;
              AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;

              hiOrder         := pEveText^.Order;

              break;
            end;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  if (AObjInfo^.Obj) then
  begin
    AObjInfo^.HitX := X;
    AObjInfo^.HitY := Y;
    Result := 1;
  end
  else 
  begin
    Result := 0;
  end;
end;

function GetActiveObjectByTag(ATag: byte; AObjInfo: TObjInfoPtr): byte;
var i: byte;
var pLabel:     ^TLabel;
var pEveButton: ^TEveButton;
var pEveText:   ^TEveText;
var ptrO: ^code far ^byte;
begin
  // clear current object info
  memset(TBytePtr(AObjInfo), 0, sizeof(TObjInfo));

  // Find object with specified tag value.

  // Label
  i    := CurrentScreen^.LabelsCount;
  ptrO := CurrentScreen^.Labels+CurrentScreen^.LabelsCount-1;
  while (i) do
  begin
    pLabel := TLabelPtr(ptrO^);
    if (pLabel^.Tag = ATag) then
    begin
      if (pLabel^.Active) then
      begin
        AObjInfo^.Obj   := TPointer(pLabel);
        AObjInfo^.Type_ := VTFT_OT_LABEL;
        AObjInfo^.Order := pLabel^.Order;
        AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;
      end;
      break;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  // EveButton
  i    := CurrentScreen^.EveButtonsCount;
  ptrO := CurrentScreen^.EveButtons+CurrentScreen^.EveButtonsCount-1;
  while (i) do
  begin
    pEveButton := TEveButtonPtr(ptrO^);
    if (pEveButton^.Tag = ATag) then
    begin
      if (pEveButton^.Active) then
      begin
        AObjInfo^.Obj   := TPointer(pEveButton);
        AObjInfo^.Type_ := VTFT_OT_EVEBUTTON;
        AObjInfo^.Order := pEveButton^.Order;
        AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;
        if ((pEveButton^.Press_Color <> pEveButton^.Color) or
            (pEveButton^.Press_ColorTo <> pEveButton^.ColorTo)) then
          AObjInfo^.Flags := AObjInfo^.Flags or VTFT_INT_REPAINT_ON_DOWN or VTFT_INT_REPAINT_ON_UP;
      end;
      break;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  // EveText
  i    := CurrentScreen^.EveTextsCount;
  ptrO := CurrentScreen^.EveTexts+CurrentScreen^.EveTextsCount-1;
  while (i) do
  begin
    pEveText := TEveTextPtr(ptrO^);
    if (pEveText^.Tag = ATag) then
    begin
      if (pEveText^.Active) then
      begin
        AObjInfo^.Obj   := TPointer(pEveText);
        AObjInfo^.Type_ := VTFT_OT_EVETEXT;
        AObjInfo^.Order := pEveText^.Order;
        AObjInfo^.Flags := VTFT_INT_BRING_TO_FRONT;
      end;
      break;
    end;
    Dec(ptrO);
    Dec(i);
  end;

  if (AObjInfo^.Obj) then
  begin
    AObjInfo^.HitTag := ATag;
    Result := 1;
  end
  else 
  begin
    Result := 0;
  end;
end;

procedure ProcessEvent(pEvent: ^TEvent);
begin
  if (pEvent) then
  begin
    if (pEvent^.Sound.SndAct = VTFT_SNDACT_PLAY) then
      FT800_Sound_SetAndPlay(pEvent^.Sound.Effect, pEvent^.Sound.Pitch, pEvent^.Sound.Volume)
    else if (pEvent^.Sound.SndAct = VTFT_SNDACT_STOP) then
      FT800_Sound_Stop();
    if (pEvent^.Action) then
      pEvent^.Action();
  end;
end;

procedure ProcessCEvent(pEventC: ^TCEvent);
begin
  if (pEventC) then
  begin
    if (pEventC^.Sound.SndAct = VTFT_SNDACT_PLAY) then
      FT800_Sound_SetAndPlay(pEventC^.Sound.Effect, pEventC^.Sound.Pitch, pEventC^.Sound.Volume)
    else if (pEventC^.Sound.SndAct = VTFT_SNDACT_STOP) then
      FT800_Sound_Stop();
    if (pEventC^.Action) then
      pEventC^.Action();
  end;
end;

procedure OnEvent(AObjInfo: TObjInfoPtr; AEventType: byte);
var ppEvent: ^^TEvent;
    pEvent:   ^TEvent;
begin
  pEvent := 0;

  case (AObjInfo^.Type_) of
    // Label
    VTFT_OT_LABEL: begin
      ppEvent := (@TLabelPtr(AObjInfo^.Obj)^.OnUp);
      ppEvent := ppEvent + AEventType;
      pEvent  := ppEvent^;
    end;
    // EveButton
    VTFT_OT_EVEBUTTON: begin
      ppEvent := (@TEveButtonPtr(AObjInfo^.Obj)^.OnUp);
      ppEvent := ppEvent + AEventType;
      pEvent  := ppEvent^;
    end;
    // EveText
    VTFT_OT_EVETEXT: begin
      ppEvent := (@TEveTextPtr(AObjInfo^.Obj)^.OnUp);
      ppEvent := ppEvent + AEventType;
      pEvent  := ppEvent^;
    end;
  end; // end switch

  if (pEvent) then
    ProcessEvent(pEvent);
end;

procedure Process_TP_Press();
begin
  // Screen Event
  if (CurrentScreen^.Active) then
    if ((CurrentScreen^.SniffObjectEvents) or (TouchS.ActObjInfo.Obj = 0)) then
      ProcessEvent(CurrentScreen^.OnPress);

  // Object Event
  if (TouchS.ActObjInfo.Obj = 0) then
    Exit;

  OnEvent(@TouchS.ActObjInfo, VTFT_EVT_PRESS);
end;

procedure Process_TP_Up();
var isClick: byte;
    actObj: TObjInfo;
begin
  // Screen Event
  if (CurrentScreen^.Active) then
    if ((CurrentScreen^.SniffObjectEvents) or (TouchS.ActObjInfo.Obj = 0)) then
      ProcessEvent(CurrentScreen^.OnUp);

  actObj := TouchS.ActObjInfo;
  // Cler active object info
  memset(TBytePtr(@TouchS.ActObjInfo), 0, sizeof(TObjInfo));

  // Object Event
  if (actObj.Obj = 0) then
    Exit;

  isClick := IsInsideObject(@actObj, TouchS.X, TouchS.Y);

  if (actObj.Flags and VTFT_INT_REPAINT_ON_UP) then
    DrawScreen(CurrentScreen);

  OnEvent(@actObj, VTFT_EVT_UP);
  if (isClick) then
    OnEvent(@actObj, VTFT_EVT_CLICK);
end;

procedure Process_TP_Down();
begin
  // Search for active object
  if (TouchS.Tag) then        // objects must not have zero for tag value
  begin
    if (TouchS.Tag <> 255) then // can not search objects by default tag value
      GetActiveObjectByTag(TouchS.Tag, @TouchS.ActObjInfo);
    if (TouchS.ActObjInfo.Obj = 0) then // object not found by tag, search by coordinates
      GetActiveObjectByXY(TouchS.X, TouchS.Y, @TouchS.ActObjInfo);
  end;

  // Screen Event
  if (CurrentScreen^.Active) then
    if ((CurrentScreen^.SniffObjectEvents) or (TouchS.ActObjInfo.Obj = 0)) then
      ProcessEvent(CurrentScreen^.OnDown);

  // Object Event
  if (TouchS.ActObjInfo.Obj = 0) then
    Exit;

  if (TouchS.ActObjInfo.Flags and VTFT_INT_REPAINT_ON_DOWN) then
    DrawScreen(CurrentScreen);

  OnEvent(@TouchS.ActObjInfo, VTFT_EVT_DOWN);
end;

procedure Process_TP_TagChange();
begin
  // Screen Event
  if (CurrentScreen^.Active) then
    ProcessEvent(CurrentScreen^.OnTagChange);
end;

procedure ProcessVTFTStack();
var Tag, oldTag: byte;
    X, Y: word;
begin
  oldTag := TouchS.Tag;

  if (FT800_Touch_GetTagXY(@X, @Y) = 1) then
  begin
    FT800_Touch_GetTag(@Tag);

    TouchS.Tag := Tag;
    TouchS.X := X;
    TouchS.Y := Y;

    if (TouchS.Pressed = 0) then
    begin
      TouchS.Pressed := 1;
      Process_TP_Down();
    end;

    Process_TP_Press();
  end
  else if (TouchS.Pressed) then
  begin
    Process_TP_Up();

    TouchS.Tag := 0;
    TouchS.X   := X;
    TouchS.Y   := Y;

    TouchS.Pressed := 0;
  end;

  if (oldTag <> TouchS.Tag) then
    Process_TP_TagChange();
end;

procedure InitObjects();
begin
  // Screen1: Init block start
  Screen1.Color             := 0x5AEB;
  Screen1.Width             := 480;
  Screen1.Height            := 272;
  Screen1.ObjectsCount      := 8;
  Screen1.LabelsCount       := 5;
  Screen1.Labels            := @Screen1_Labels;
  Screen1.EveButtonsCount   := 2;
  Screen1.EveButtons        := @Screen1_EveButtons;
  Screen1.EveTextsCount     := 1;
  Screen1.EveTexts          := @Screen1_EveTexts;
  Screen1.DynResStart       := 0;
  Screen1.Active            := 1;
  Screen1.SniffObjectEvents := 0;
  Screen1.OnUp              := 0;
  Screen1.OnDown            := 0;
  Screen1.OnTagChange       := 0;
  Screen1.OnPress           := 0;

  LabelIP.OwnerScreen := @Screen1;
  LabelIP.Order       := 0;
  LabelIP.Visible     := 1;
  LabelIP.Opacity     := 255;
  LabelIP.Tag         := 255;
  LabelIP.Left        := 9;
  LabelIP.Top         := 26;
  LabelIP.Width       := 71;
  LabelIP.Height      := 15;
  LabelIP_Caption     := 'IP: ??:??:??:??';
  LabelIP.Caption     := @LabelIP_Caption;
  LabelIP.FontName    := 26;
  LabelIP.Font_Color  := 0x0000;
  LabelIP.FontHandle  := 26;
  LabelIP.Source      := -1;
  LabelIP.Active      := 1;
  LabelIP.OnUp        := 0;
  LabelIP.OnDown      := 0;
  LabelIP.OnClick     := 0;
  LabelIP.OnPress     := 0;

  LabelMAC.OwnerScreen := @Screen1;
  LabelMAC.Order       := 1;
  LabelMAC.Visible     := 1;
  LabelMAC.Opacity     := 255;
  LabelMAC.Tag         := 255;
  LabelMAC.Left        := 5;
  LabelMAC.Top         := 10;
  LabelMAC.Width       := 112;
  LabelMAC.Height      := 15;
  LabelMAC_Caption     := 'MAC: ??:??:??:??:??:??';
  LabelMAC.Caption     := @LabelMAC_Caption;
  LabelMAC.FontName    := 26;
  LabelMAC.Font_Color  := 0x0000;
  LabelMAC.FontHandle  := 26;
  LabelMAC.Source      := -1;
  LabelMAC.Active      := 1;
  LabelMAC.OnUp        := 0;
  LabelMAC.OnDown      := 0;
  LabelMAC.OnClick     := 0;
  LabelMAC.OnPress     := 0;

  LabelMask.OwnerScreen := @Screen1;
  LabelMask.Order       := 2;
  LabelMask.Visible     := 1;
  LabelMask.Opacity     := 255;
  LabelMask.Tag         := 255;
  LabelMask.Left        := 8;
  LabelMask.Top         := 41;
  LabelMask.Width       := 89;
  LabelMask.Height      := 15;
  LabelMask_Caption     := 'Mask: ??:??:??:??';
  LabelMask.Caption     := @LabelMask_Caption;
  LabelMask.FontName    := 26;
  LabelMask.Font_Color  := 0x0000;
  LabelMask.FontHandle  := 26;
  LabelMask.Source      := -1;
  LabelMask.Active      := 1;
  LabelMask.OnUp        := 0;
  LabelMask.OnDown      := 0;
  LabelMask.OnClick     := 0;
  LabelMask.OnPress     := 0;

  LabelGateway.OwnerScreen := @Screen1;
  LabelGateway.Order       := 3;
  LabelGateway.Visible     := 1;
  LabelGateway.Opacity     := 255;
  LabelGateway.Tag         := 255;
  LabelGateway.Left        := 7;
  LabelGateway.Top         := 55;
  LabelGateway.Width       := 105;
  LabelGateway.Height      := 15;
  LabelGateway_Caption     := 'Gateway: ??:??:??:??';
  LabelGateway.Caption     := @LabelGateway_Caption;
  LabelGateway.FontName    := 26;
  LabelGateway.Font_Color  := 0x0000;
  LabelGateway.FontHandle  := 26;
  LabelGateway.Source      := -1;
  LabelGateway.Active      := 1;
  LabelGateway.OnUp        := 0;
  LabelGateway.OnDown      := 0;
  LabelGateway.OnClick     := 0;
  LabelGateway.OnPress     := 0;

  LabelStatus.OwnerScreen := @Screen1;
  LabelStatus.Order       := 4;
  LabelStatus.Visible     := 1;
  LabelStatus.Opacity     := 255;
  LabelStatus.Tag         := 255;
  LabelStatus.Left        := 8;
  LabelStatus.Top         := 72;
  LabelStatus.Width       := 67;
  LabelStatus.Height      := 15;
  LabelStatus_Caption     := 'Status: 0x00';
  LabelStatus.Caption     := @LabelStatus_Caption;
  LabelStatus.FontName    := 26;
  LabelStatus.Font_Color  := 0x0000;
  LabelStatus.FontHandle  := 26;
  LabelStatus.Source      := -1;
  LabelStatus.Active      := 1;
  LabelStatus.OnUp        := 0;
  LabelStatus.OnDown      := 0;
  LabelStatus.OnClick     := 0;
  LabelStatus.OnPress     := 0;

  EveButtonDisconnect.OwnerScreen   := @Screen1;
  EveButtonDisconnect.Order         := 5;
  EveButtonDisconnect.Visible       := 1;
  EveButtonDisconnect.Opacity       := 255;
  EveButtonDisconnect.Tag           := 255;
  EveButtonDisconnect.Left          := 350;
  EveButtonDisconnect.Top           := 65;
  EveButtonDisconnect.Width         := 101;
  EveButtonDisconnect.Height        := 41;
  EveButtonDisconnect.Color         := 0x03DA;
  EveButtonDisconnect.Press_Color   := 0x7E3F;
  EveButtonDisconnect.ColorTo       := 0x7E3F;
  EveButtonDisconnect.Press_ColorTo := 0x03DA;
  EveButtonDisconnect_Caption       := 'Disconnect';
  EveButtonDisconnect.Caption       := @EveButtonDisconnect_Caption;
  EveButtonDisconnect.FontName      := 26;
  EveButtonDisconnect.Font_Color    := 0x0000;
  EveButtonDisconnect.FontHandle    := 26;
  EveButtonDisconnect.Source        := -1;
  EveButtonDisconnect.Flat          := 0;
  EveButtonDisconnect.Active        := 1;
  EveButtonDisconnect.OnUp          := 0;
  EveButtonDisconnect.OnDown        := 0;
  EveButtonDisconnect.OnClick       := @EveButtonDisconnect_OnClick;
  EveButtonDisconnect.OnPress       := 0;
  EveButtonDisconnect_OnClick.Action       := @EveButtonDisconnectOnClick;
  EveButtonDisconnect_OnClick.Sound.SndAct := VTFT_SNDACT_NONE;
  EveButtonDisconnect_OnClick.Sound.Effect := _FT800_SOUND_XYLOPHONE;
  EveButtonDisconnect_OnClick.Sound.Pitch  := _FT800_SOUND_PITCH_A5;
  EveButtonDisconnect_OnClick.Sound.Volume := 255;

  EveButtonConnect.OwnerScreen   := @Screen1;
  EveButtonConnect.Order         := 6;
  EveButtonConnect.Visible       := 1;
  EveButtonConnect.Opacity       := 255;
  EveButtonConnect.Tag           := 255;
  EveButtonConnect.Left          := 351;
  EveButtonConnect.Top           := 14;
  EveButtonConnect.Width         := 100;
  EveButtonConnect.Height        := 42;
  EveButtonConnect.Color         := 0x03DA;
  EveButtonConnect.Press_Color   := 0x7E3F;
  EveButtonConnect.ColorTo       := 0x7E3F;
  EveButtonConnect.Press_ColorTo := 0x03DA;
  EveButtonConnect_Caption       := 'Connect';
  EveButtonConnect.Caption       := @EveButtonConnect_Caption;
  EveButtonConnect.FontName      := 26;
  EveButtonConnect.Font_Color    := 0x0000;
  EveButtonConnect.FontHandle    := 26;
  EveButtonConnect.Source        := -1;
  EveButtonConnect.Flat          := 0;
  EveButtonConnect.Active        := 1;
  EveButtonConnect.OnUp          := 0;
  EveButtonConnect.OnDown        := 0;
  EveButtonConnect.OnClick       := @EveButtonConnect_OnClick;
  EveButtonConnect.OnPress       := 0;
  EveButtonConnect_OnClick.Action       := @EveButtonConnectOnClick;
  EveButtonConnect_OnClick.Sound.SndAct := VTFT_SNDACT_NONE;
  EveButtonConnect_OnClick.Sound.Effect := _FT800_SOUND_XYLOPHONE;
  EveButtonConnect_OnClick.Sound.Pitch  := _FT800_SOUND_PITCH_A5;
  EveButtonConnect_OnClick.Sound.Volume := 255;

  EveTextStatusBar.OwnerScreen := @Screen1;
  EveTextStatusBar.Order       := 7;
  EveTextStatusBar.Visible     := 1;
  EveTextStatusBar.Opacity     := 255;
  EveTextStatusBar.Tag         := 255;
  EveTextStatusBar.Left        := 4;
  EveTextStatusBar.Top         := 253;
  EveTextStatusBar.Width       := 50;
  EveTextStatusBar.Height      := 15;
  EveTextStatusBar_Caption     := 'Welcome';
  EveTextStatusBar.Caption     := @EveTextStatusBar_Caption;
  EveTextStatusBar.TextAlign   := taNone;
  EveTextStatusBar.FontName    := 26;
  EveTextStatusBar.Font_Color  := 0x0000;
  EveTextStatusBar.FontHandle  := 26;
  EveTextStatusBar.Source      := -1;
  EveTextStatusBar.Active      := 1;
  EveTextStatusBar.OnUp        := 0;
  EveTextStatusBar.OnDown      := 0;
  EveTextStatusBar.OnClick     := 0;
  EveTextStatusBar.OnPress     := 0;

end;

procedure Init_MCU(); begin
  // 80 Mhz
  PLLPRE_0_bit := 0;
  PLLPRE_1_bit := 0;
  PLLPRE_2_bit := 0;
  PLLPRE_3_bit := 0;
  PLLPRE_4_bit := 0;
  PLLFBD := 38;

  PLLPOST_0_bit := 0;
  PLLPOST_1_bit := 0;

  // Setup FT800 SPI interface
  Unlock_IOLOCK();
  PPS_Mapping_NoLock(69, _OUTPUT, _SDO3);     // Set pin RD5 to be Output, and map SD03 to it
  PPS_Mapping_NoLock(67, _OUTPUT, _SCK3OUT);  // Set pin RD3 to be Output, and map SCK3 to it
  PPS_Mapping_NoLock(68, _INPUT,  _SDI3);     // Set pin RD4 to be Input,  and map SDI3 to it
  Lock_IOLOCK(); 

  SPI3_Init_Advanced(_SPI_MASTER,             // Initialize SPI1 module
                     _SPI_8_BIT,              // master_mode    = _SPI_MASTER
                     _SPI_PRESCALE_SEC_1,     // data_mode      = _SPI_8_BIT
                     _SPI_PRESCALE_PRI_4,     // sec. prescaler = _SPI_PRESCALE_SEC_1
                     _SPI_SS_DISABLE,         // pri. prescaler = _SPI_PRESCALE_PRI_4
                     _SPI_DATA_SAMPLE_MIDDLE, // slave_select   = _SPI_SS_DISABLE (Only for slave mod)
                     _SPI_CLK_IDLE_LOW,       // data_sample    = _SPI_DATA_SAMPLE_END
                     _SPI_IDLE_2_ACTIVE);     // clock_idle     = _SPI_CLK_IDLE_HIGH
                                              // edge           = _SPI_ACTIVE_2_IDLE
end;

function VTFT_GetExtData(fPos : dword; bytesToGet : dword; pBytesGot : ^dword): ^byte;
  var  scOffset : word;
begin
  pBytesGot^ := 0;
  SPI_Set_Active(@SPI1_Read, @SPI1_Write);

  if (rfHandle < 0) then begin
    result := 0; // return with nil if handle was bad.
    exit;
  end;

  // We will utilize some of the fat32 implied features
  // (such as built in sector buffer) to reduce ram memory consumpiton.
  // You can't use this approach if this buffer is going to be used
  // from another thread (i.e. using fat32 routines in interrupt...)
  // In that case or if you have plenty of ram memory use separate
  // as large as possible data buffer.
  f32_sector.fSectNum := rfStartSect + fPos div 512;
  Mmc_Read_Sector(f32_sector.fSectNum, f32_sector.fSect);

  // 512 bytes sector buffer implied.
  scOffset := fPos mod 512;
  if(bytesToGet > 512-scOffset) then
    pBytesGot^ := 512-scOffset
  else
    pBytesGot^ := bytesToGet;

  SPI_Set_Active(@SPI3_Read, @SPI3_Write);
  result := @f32_sector.fSect + scOffset;
end;

procedure Init_Ext_Mem();
begin
  rfHandle    := -1;
  rfName      := 'EveWifiN.RES';
  rfStartSect := 0;

  // ensure ft800 is not selected (because of shared SPI lines)
  // adjust this code to suite hw configuration
  FT800_CS_Direction := 0;
  FT800_CS := 1;

  // Setup MMC SPI interface
  Unlock_IOLOCK();
  PPS_Mapping_NoLock(104, _OUTPUT, _SDO1);     // Set pin RF8 to be Output, and map SD01 to it
  PPS_Mapping_NoLock(79, _OUTPUT, _SCK1OUT);   // Set pin RD15 to be Output, and map SCK1 to it
  PPS_Mapping_NoLock(98, _INPUT,  _SDI1);      // Set pin RF2 to be Input,  and map SDI1 to it
  Lock_IOLOCK();

  // Init MMC SPI interface at low speed - 5Mhz
  SPI1_Init_Advanced(_SPI_MASTER,                   // Initialize SPI1 module
                     _SPI_8_BIT,                    // master_mode    = _SPI_MASTER
                     _SPI_PRESCALE_SEC_4,           // data_mode      = _SPI_8_BIT
                     _SPI_PRESCALE_PRI_4,           // sec. prescaler = _SPI_PRESCALE_SEC_1
                     _SPI_SS_DISABLE,               // pri. prescaler = _SPI_PRESCALE_PRI_4
                     _SPI_DATA_SAMPLE_MIDDLE,       // slave_select   = _SPI_SS_DISABLE (Only for slave mod)
                     _SPI_CLK_IDLE_LOW,             // data_sample    = _SPI_DATA_SAMPLE_END
                     _SPI_IDLE_2_ACTIVE);           // clock_idle     = _SPI_CLK_IDLE_HIGH
                                                    // edge           = _SPI_ACTIVE_2_IDLE

  // Init FAT32 stack
  if (FAT32_Init() = 0) then begin
    // Reinitialize SPI at higher speed - 20Mhz
    SPI1_Init_Advanced(_SPI_MASTER,                   // Initialize SPI1 module
                       _SPI_8_BIT,                    // master_mode    = _SPI_MASTER
                       _SPI_PRESCALE_SEC_1,           // data_mode      = _SPI_8_BIT
                       _SPI_PRESCALE_PRI_4,           // sec. prescaler = _SPI_PRESCALE_SEC_1
                       _SPI_SS_DISABLE,               // pri. prescaler = _SPI_PRESCALE_PRI_4
                       _SPI_DATA_SAMPLE_MIDDLE,       // slave_select   = _SPI_SS_DISABLE (Only for slave mod)
                       _SPI_CLK_IDLE_LOW,             // data_sample    = _SPI_DATA_SAMPLE_END
                       _SPI_IDLE_2_ACTIVE);           // clock_idle     = _SPI_CLK_IDLE_HIGH
                                                      // edge           = _SPI_ACTIVE_2_IDLE

    // Open resource file for read
    rfHandle    := FAT32_Open(@rfName, 0x01);
    rfStartSect := FAT32_ClustToSect(fat32_fdesc[rfHandle]._1stClust);
  end;
end;

procedure InitVTFTStack();
type TFT800PWMPtr            = ^TFT800PWM;
     TFT800GPIOPtr           = ^TFT800GPIO;
     TFT800AudioPtr          = ^TFT800Audio;
     TFT800SoundPtr          = ^TFT800Sound;
     TFT800TouchPtr          = ^TFT800Touch;
     TFT800DisplayPtr        = ^TFT800Display;
     TFT800InterruptPtr      = ^TFT800Interrupt;

var   cfgBuff: array[sizeof(TFT800Display)] of byte;
const calText = 'Touch blinking point on the screen!';
begin
  Init_MCU();

  Init_Ext_Mem();

  SPI_Set_Active(@SPI3_Read, @SPI3_Write);

  // Init all dynamic objects
  InitObjects();

  // Init FT800 controller core and library stack
  FT800_Init();

  FT800_Core_ClockSource(_FT800_CLK_SOURCE_EXTERNAL);
  FT800_Core_ClockPLL(_FT800_CLK_PLL_48MHz);

  // Internal modules setup
  TFT800DisplayPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_DISPLAY;
  FT800_Display_SetConfig(TFT800DisplayPtr(@cfgBuff));

  TFT800AudioPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_AUDIO;
  FT800_Audio_SetConfig(TFT800AudioPtr(@cfgBuff));

  TFT800SoundPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_SOUND;
  FT800_Sound_SetConfig(TFT800SoundPtr(@cfgBuff));

  TFT800InterruptPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_INTERRUPT;
  FT800_Interrupt_SetConfig(TFT800InterruptPtr(@cfgBuff));

  TFT800PWMPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_PWM;
  FT800_PWM_SetConfig(TFT800PWMPtr(@cfgBuff));

  TFT800GPIOPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_GPIO;
  FT800_GPIO_SetConfig(TFT800GPIOPtr(@cfgBuff));

  TFT800TouchPtr(@cfgBuff)^ := VTFT_FT800_CONFIG_TOUCH;
  FT800_Touch_SetConfig(TFT800TouchPtr(@cfgBuff));

  FT800_Touch_Calibrate(_FT800_FONT_ROBOTO_SIZE_10,  @calText);

  // External memory setup
  FT800_Register_GetExtData(@VTFT_GetExtData);

  // Init globals
  memset(@TouchS, 0, sizeof(TTouchStat));
  CurrentScreen := 0;

  // Draw start screen
  DrawScreen(@Screen1);
end;
end.