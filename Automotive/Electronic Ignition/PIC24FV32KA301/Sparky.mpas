program Sparky;

{ Declarations section }

{$DEFINE UART}

const
    {****** Engine Parameters *******}
  // Engine cycles
  ENGINE_CYCLE = 4;
  // Number of Cylinders (assuming not a dual point distributor)
  CYLINDERS = 8;
  // Revolutions per Cycle
  REV_PER_CYCLE = ENGINE_CYCLE/2;
  
  { ****** Sofer parameters to define limits for decision logic in the program ******}
  // Below this and we say we stalled and restart the Statemachine
  STALL_RPM = 50;
  // Above this and it is a bad measurement of RPM
  MAX_RPM = 7000;
  // Above this and we move to the Running State
  
  
  // Coil Parameters
  COIL_MAG_L                     = 0.008;      // Henries
  COIL_R                         = 1.5;        // Ohms
  COIL_DESIRED_I                 = 4.5;        // Amps
  COIL_PRIMIARY_V                = 14;         // Volts
  COIL_CHARGE_TIME_MULTIPLIER    = 5;          // To deal with accell and decell and predicting when the next pulse will come need to extent the pulse to ensure no dropouts
  RPM_LIMIT                      = 7000;       // Shuts off the IGBT above this RPM
  RPM_STALL                      = 70;         // Shuts off the IGBT below the RPM
  FIRING_CRANKSHAFT_DEGREES      = 15;         // Number of Degrees to wait for the cycle to finish firing
  DWELL_CRANKSHAFT_DEGREES       = 30;         // Number of Degrees the cycle is not firing

  {****** MCU Setup Parameters ******}
  // Frequency the CPU is running
  OSCILLATORFREQ = 32e6;
  // How many cycles of the Oscillator for each master timer cycle
  CLOCKDIVIDER = 2;
  // Frequency of the master timer cloc
  CLOCK_FREQ = real( OSCILLATORFREQ/CLOCKDIVIDER);
  // The period of a single clock timer tick (in seconds)
  CLOCK_PERIOD = real( 1/CLOCK_FREQ);

  // Coil Calculated Parameters
  COIL_CHARGE_TIME = COIL_DESIRED_I * COIL_MAG_L/COIL_PRIMIARY_V;
  
  // Dwell Start Timer Calculated Parameters
  MAX_DWELL_PERIOD = COIL_CHARGE_TIME * COIL_CHARGE_TIME_MULTIPLIER * 2;      // Never have the IGBT on for more than 2x of the Charge time
  MAX_DWELL_COUNT = dWord(MAX_DWELL_PERIOD/CLOCK_PERIOD);

  // DWELL numbers
  FIRING_DISTRIBUTOR_DEGREES = FIRING_CRANKSHAFT_DEGREES * REV_PER_CYCLE;
  DWELL_DISTRIBUTOR_DEGREES = DWELL_CRANKSHAFT_DEGREES * REV_PER_CYCLE;
  
    // How long between pin change notification before we claim the engine has stalled
  STALL_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE /(STALL_RPM*CYLINDERS));
  // Time to blank if the RPM made no sense at all during cranking
  DEFAULT_CRANKING_RPM = 200;
  DEFAULT_CRANKING_BLANK_PERIOD = real( 60 * REV_PER_CYCLE/(DEFAULT_CRANKING_RPM*CYLINDERS));
  
  // Advance numbers
  NUMBER_OF_ADVANCE_POINTS = 4;
  
  // Smoothing RPM Filter Depth and How many valid RPM spark pulses detected in the pin change notification to
  // move on in the Stat machine before moving out of Cranking
  RPM_FILTER_LEN = 8;
  
  TACH_HI = 0;
  TACH_LO = 1;

type
  FilterInfoRec = record
    // RPM Averaging array and index counter
    Distributor_Period_Filter_Array: array[RPM_FILTER_LEN] of real;
    Distributor_Period_Filter_Counter: Integer;
    PeriodAverage: real;
    RPM_Filter_Array: array[RPM_FILTER_LEN] of real;
    RPMAverage: real;
  end;
  
var
  RPM_Global, SecondsPerDegree_Global, AdvancePeriod_Global, Distributor_Period_Global: real;
  Max_Dwell_Exceeded_Global: Boolean;
  s1: string[128];
  FilterInfo: FilterInfoRec;

  TimingCurveRPM    : array[NUMBER_OF_ADVANCE_POINTS] of real;
  TimingCurveDegrees: array[NUMBER_OF_ADVANCE_POINTS] of real;

   HeartbeatPort: word at PORTB;
   HeartbeatLatch: word at LATB;
   HeartbeatTRIS: word at TRISB;
   HeartbeatTRIS_bit: sbit at TRISB7_bit;
   HeartbeatLatch_Bit: sbit at LATB7_bit;

   FiTechTachPort: word at PORTB;
   TachOutLatch: word at LATB;
   TachOutTRIS: word at TRISB;
   TachOutTRIS_bit: sbit at TRISB9_bit;
   TachOutLatch_Bit: sbit at LATB9_bit;

   IGBTPort: word at PORTB;
   IGBTLatch: word at LATB;
   IGBTTRIS: word at TRISB;
   IGBTTRIS_bit: sbit at TRISB12_bit;
   IGBTLatch_bit: sbit at LATB12_bit;

   TriggerPort: word at PORTA;
   TriggerLatch: word at LATA;
   TriggerTRIS: word at TRISA;
   TriggerTRIS_bit: sbit at TRISA0_bit;
   TriggerLatch_bit: sbit at LATA0_bit;
const
  TRIGGER_PIN_OFFSET = B0;
   
{$IFDEF UART}
{
procedure PrintState;
var
  Buffer: array[6] of char;
begin
  IntToStr(State, Buffer);
  UART_Write_Text(Buffer);
  UART2_Write(#13);
end;
 }
 
 procedure PrintReal(Value: real);
var
  Buffer: array[23] of char;
begin
  FloatToStr(Value, Buffer);
  UART2_Write_Text(Buffer);
end;

procedure PrintRealLine(Value: real);
begin
  PrintReal(Value);
  UART2_Write(#13);
end;

{$ENDIF}

// Converts an RPM into a Period Time between each cyclinder firing in Seconds
function RPM_To_Distributor_Period(RPM: real): real;
begin
  Result := 0.0;
  if RPM > 0 then
    Result := real( 60 * REV_PER_CYCLE / (RPM * CYLINDERS ));
end;

// Converts a Period of Time between cylinder firings into RPM
function Distributor_Period_To_RPM(Distributor_Period: real): real;
begin
  Result := 0.0;
  if Distributor_Period > 0.0 then
    Result := real( 60 / Distributor_Period / CYLINDERS * REV_PER_CYCLE)
end;

// Converts a DWORD Timer Count to actual elapsed time (seconds) scaled by the Timer Divider (used 1, 8, 32, 64, etc)
function TimerCounts_To_Time(TimerCounts: DWORD; Divider: Word): real;
begin
  Result := real( TimerCounts) * CLOCK_PERIOD ///* real( Divider);
end;

// Converts time (seconds) to a DWORD Timer Count using the passed Timer Divider (1, 8, 32, 64, etc)
function Time_To_TimerCounts(Time: real; Divider: Word): DWORD;
begin
  Result := DWORD( Time / (CLOCK_PERIOD * real( Divider)))
end;

// Calculates the average of the items in the Distributor Period Array
procedure CalculateFilterAverages;
var
  i: Integer;
begin
  FilterInfo.PeriodAverage := 0.0;
  FilterInfo.RPMAverage := 0.0;
  for i := 0 to RPM_FILTER_LEN - 1 do
  begin
    FilterInfo.PeriodAverage := FilterInfo.PeriodAverage + FilterInfo.Distributor_Period_Filter_Array[i];
    FilterInfo.RPMAverage := FilterInfo.RPMAverage + FilterInfo.RPM_Filter_Array[i];
  end;
  FilterInfo.PeriodAverage := FilterInfo.PeriodAverage / RPM_FILTER_LEN;
  FilterInfo.RPMAverage := FilterInfo.RPMAverage / RPM_FILTER_LEN
end;

procedure UpdateDistributorArrayAndAverage(NewDistributorTime, NewRPM: real);
begin
  // Insert the lastest item in the array
  FilterInfo.Distributor_Period_Filter_Array[FilterInfo.Distributor_Period_Filter_Counter] := NewDistributorTime;
  FilterInfo.RPM_Filter_Array[FilterInfo.Distributor_Period_Filter_Counter] := NewRPM;
  Inc(FilterInfo.Distributor_Period_Filter_Counter);
  // Update the array counter
  if FilterInfo.Distributor_Period_Filter_Counter >= RPM_FILTER_LEN then
    FilterInfo.Distributor_Period_Filter_Counter := 0;
  CalculateFilterAverages;
end;

function DistributorTime_For_Degree(CurrentRPM: real): real;   //  sec/degree
var
  SecondsPerDegree_Local: real;
begin
   Result := 0.0;                                // RevolutionsPerSec := RPM/60;
  if CurrentRPM > 0.0 then                       // DegreesPerSecond := 360*RevolutionsPerSec;  360_Degrees/Revolution  *  Revolution/Sec = Degrees/Sec
    Result := REV_PER_CYCLE / (6 * CurrentRPM);  // 1/DegreesPerSecond  = 1/(360*RevolutionsPerSec) = 1/(360*RPM/60) = 1/(360/60*RPM) = 1/(6*RPM)
end;

function CrankshaftTime_For_Degree(CurrentRPM: real): real;   //  sec/degree
var
  SecondsPerDegree_Local: real;
begin
   Result := 0.0;                    // RevolutionsPerSec := RPM/60;
  if CurrentRPM > 0.0 then           // DegreesPerSecond := 360*RevolutionsPerSec;  360_Degrees/Revolution  *  Revolution/Sec = Degrees/Sec
    Result := 1 / (6 * CurrentRPM);  // 1/DegreesPerSecond  = 1/(360*RevolutionsPerSec) = 1/(360*RPM/60) = 1/(360/60*RPM) = 1/(6*RPM)
end;

function DistributorTime_For_Degrees(CurrentRPM, Degrees: real): real;  // sec/degree * Degrees
begin
  Result := DistributorTime_For_Degree(CurrentRPM) * Degrees
end;

function CrankshaftTime_For_Degrees(CurrentRPM, Degrees: real): real;
begin
  Result := CrankshaftTime_For_Degree(CurrentRPM) * Degrees
end;

// If we get here we did not detect an edge for longer than the minimum RPM so we
// flag it as a stall and shut off.
procedure interrupt_Timer3_RPM_Measurement(); iv IVT_ADDR_T3INTERRUPT;
begin
  T3IF_bit := 0;                 // Reset Interrupt Flag
  RPM_Global := 0.0;
  // Shutoff IGBT
  IGBTLatch_bit := 0;
  // Turn off the Advance Timer
  TON_T4CON_bit := 0;
  UART2_Write_Text('Stall: IRQ');
  UART2_Write(#13);
end;

procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  TimerCount, Dwell_Delay_Count, TimingAdvanceCount, BaseTimingCounts: dword;
  TimingAdvanceTime, TimingAdvanceDegrees, Slope, SecPerDegree: real;
  i, TimingCurveIndex: Integer;
begin
   PortCopy := TriggerPort;    // Clear all changes
  
  // Detect rising edges only
  if PortCopy.TRIGGER_PIN_OFFSET = 1 then
  begin
  
    HeartbeatLatch_Bit := 1;

    // Capture it contents
    LoWord(TimerCount) := TMR2;
    HiWord(TimerCount) := TMR3HLD;
    // Reset the RPM Timer
    TMR3HLD := $0000;
    TMR2 := $0000;

    // Calculate the time between
    Distributor_Period_Global := TimerCounts_To_Time(TimerCount, 1);
    // Calcuate the RPM based on the last sensor signal
    RPM_Global := Distributor_Period_To_RPM(Distributor_Period_Global);
    // Update the averaging buffer
    UpdateDistributorArrayAndAverage(Distributor_Period_Global, RPM_Global);

    SecPerDegree := DistributorTime_For_Degree(RPM_Global);
    TimingAdvanceTime := SecPerDegree * 22.5;
    BaseTimingCounts := Time_To_TimerCounts(FilterInfo.PeriodAverage - TimingAdvanceTime - 400e-6, 1);
    
    TON_T4CON_bit := 0;
    PR4 := LoWord(BaseTimingCounts);
    PR5 := HiWord(BaseTimingCounts);
    TMR5HLD := $0000;
    TMR4 := $0000;
    TON_T4CON_bit := 1;
    
    HeartbeatLatch_Bit := 0;
    

    {
    // Are we too low or too high?
    if (RPM_Global < RPM_STALL) or (RPM_Global > RPM_LIMIT) then
      RPM_Global := 0.0;

    if RPM_Global > 0.0 then
    begin
      // Now figure out where we are on the Advance Curve based on the RPM
      TimingCurveIndex := NUMBER_OF_ADVANCE_POINTS;  // Assume above highest RPM; Note this is OUTSIDE of the range for the array
      i := 1;
      while i < NUMBER_OF_ADVANCE_POINTS do
      begin
        if RPM_Global < TimingCurveRPM[i] then
        begin
          TimingCurveIndex := i;
          Break;
        end;
        Inc(i);
      end;

      // If we are below the max advance need to calculate it from the Timing Curve Map
      if TimingCurveIndex < NUMBER_OF_ADVANCE_POINTS then
      begin
        // Guard against a zero denominator.  If this happens the array has of the same RPM in 2 positions which is an error
        if TimingCurveRPM[TimingCurveIndex] - TimingCurveRPM[TimingCurveIndex-1] <> 0 then
        begin
          Slope := (TimingCurveDegrees[TimingCurveIndex] - TimingCurveDegrees[TimingCurveIndex-1])/(TimingCurveRPM[TimingCurveIndex] - TimingCurveRPM[TimingCurveIndex-1]);
          TimingAdvanceDegrees := -(Slope * (TimingCurveRPM[TimingCurveIndex-1] - RPM_Global) - TimingCurveDegrees[TimingCurveIndex-1]);  // y1 = -(m(x-x1)-y)
        end else
          TimingAdvanceDegrees := TimingCurveDegrees[TimingCurveIndex];
      end else
        TimingAdvanceDegrees := TimingCurveDegrees[NUMBER_OF_ADVANCE_POINTS-1];
                                                     // RevolutionsPerSec := RPM/60;
                                                     // DegreesPerSecond := 360*RevolutionsPerSec;  360_Degrees/Revolution  *  Revolution/Sec = Degrees/Sec
      SecondsPerDegree_Global := 1/(6*RPM_Global);   // 1/DegreesPerSecond  = 1/(360*RevolutionsPerSec) = 1/(360*RPM/60) = 1/(360/60*RPM) = 1/(6*RPM)

      // Get the timing shift for this particular RPM and convert it to a time for this pulse
      AdvancePeriod_Global := SecondsPerDegree_Global * (TimingCurveDegrees[NUMBER_OF_ADVANCE_POINTS-1] - TimingAdvanceDegrees);
      // How far to shift the trigger for advance
      // Note that the dynamic way we are doing this that when we are full advanced we have a 0 count shift
      TimingAdvanceCount := DWORD( AdvancePeriod_Global / CLOCK_PERIOD);
      // Timer Setup
      TON_T1CON_bit := 0;          // OFF
      TMR1 := 0;
      T1IF_bit := 0;               // clear T1IF
      PR1 := TimingAdvanceCount div 64;
      if PR1 = 0 then
        PR1 := 1;
      TON_T1CON_bit := 1;          // ON
    end;  }
  end;

  // Some free debounce guarding by putting this many micro seconds past entry
  CNIF_bit := 0;
end;

procedure interrupt_Advance_Timer1(); iv IVT_ADDR_T1INTERRUPT;
var
  Dwell_Delay_Period, Dynamic_Dwell_Delay_Period: real;
  Dwell_Delay_Count: DWORD;
begin
        (*
  // Shutoff IGBT
  IGBTLatch_bit := 0;

  // Calculate when to turn the IGBT on to start charging
  // Dynamically change the amount of time we let the cyclinder combustion to complete
  // Note there is NO assumption on when the next trigger will come other than
  // using the last period to calcuate the RPM to get the Seconds Per Degree
  // This was save from the Pin Change Notification Interrupt
  Dwell_Delay_Period := (FIRING_DISTRIBUTOR_DEGREES * SecondsPerDegree_Global); { - Time_it_took_to_get_from_the_entry_of_this_function_to_here:} // TODO
  
  Dwell_Delay_Period := Dwell_Delay_Period - AdvancePeriod_Global;

  if Distributor_Period_Global - Dwell_Delay_Period > COIL_CHARGE_TIME then
  begin
    // This assumes a fixed RPM and Distributor_Period.  If the rate of change is fast enough
    // This will fail spectacularly with either the trigger comes before the IGBT is turned on
    // (acceleration) or the IGBT comes on way too early and the trigger is delayed (deceleration)
    // The charge time is way to much do something to shorten it to a reasonable value.
    Dynamic_Dwell_Delay_Period := Distributor_Period_Global - (COIL_CHARGE_TIME_MULTIPLIER * COIL_CHARGE_TIME);
    if Dynamic_Dwell_Delay_Period > Dwell_Delay_Period then
      Dwell_Delay_Period := Dynamic_Dwell_Delay_Period;
  end;

  // Convert the Period (seconds) into counts based on the clock frequency)
  Dwell_Delay_Count :=  DWORD( Dwell_Delay_Period/(CLOCK_PERIOD));

  // Load up the Dwell timer and start it off
  Max_Dwell_Exceeded_Global := False;
  TON_T4CON_bit := 0;                // OFF
  PR4 := LoWord(Dwell_Delay_Count);
  PR5 := HiWord(Dwell_Delay_Count);
  TMR5HLD := $0000;
  TMR4 := $0000;
  T5IF_bit := 0;                     // Reset Interrupt Flag
  TON_T4CON_bit := 1;                // ON
 
  TON_T1CON_bit := 0;        // OFF    *)
  T1IF_bit := 0;             // clear T1IF
end;


procedure interrupt_Timer5_Dwell_Delay(); iv IVT_ADDR_T5INTERRUPT;
begin 
  IGBTLatch_bit := 1;
  Delay_us(100);
  IGBTLatch_bit := 0;
  TON_T4CON_bit := 0;                // OFF
  
  {

    // The time to wait until the IGBT is turned on just before the next distributor trigger
    // was loaded in the last distributor trigger and we should not turn on the IGBT

    // Turn on the IGBT, the next Pin Change will turn it off, unless we detect that the
    // IGBT has been on way to long then turn it back off and reset for a new try
    if Max_Dwell_Exceeded_Global then
      IGBTLatch_bit := 0
    else
      IGBTLatch_bit := 1;

      
    // Load up the Dwell timer with a time that the longest the IGBT should ever be on and start it off
    // This is a safety trap to ensure we don't stick the IGBT on
    TON_T4CON_bit := 0;                // OFF
    PR4 := LoWord(MAX_DWELL_COUNT);
    PR5 := HiWord(MAX_DWELL_COUNT);
    TMR5HLD := $0000;
    TMR4 := $0000;
    TON_T4CON_bit := 1;                // ON

    Max_Dwell_Exceeded_Global := True;   // Pin Change will clear this or if this interrupt is entered before that something is wrong and we will shut off the IGBT
      }
  T5IF_bit := 0;  // Reset the interrupt Flag
  
end;

var
  i: Integer;

begin
  { Main program }
  ANSA := 0;        // Make them all Digital
  ANSB := 0;
  
  HeartbeatLatch_bit := 0;
  HeartbeatTRIS_bit := 0; // Output
  
  IGBTLatch_bit := 0; // Keep the IGBT off
  IGBTTRIS_bit := 0; // Output
  
  TachOutLatch_Bit := TACH_LO; // Keep the Tach off
  TachOutTRIS_bit := 0; // Output
  
  TriggerTRIS_bit := 1; // Input


  // Clock Setup
  CLKDIV := 0;                      // Set both dividers to 1:1 and don't use the DOZE to reset dividers (power saving feature)

  // Initializze Variables
  RPM_Global := 0.0;
  Max_Dwell_Exceeded_Global := True;               // Start Safe

  // Build my Advance table
  TimingCurveRPM[0] := 70.0;     TimingCurveDegrees[0] := 0.0;
  TimingCurveRPM[1] := 1200.0;  TimingCurveDegrees[1] := 0.0;
  TimingCurveRPM[2] := 2000.0;  TimingCurveDegrees[2] := 0.0;
  TimingCurveRPM[3] := 2500.0;  TimingCurveDegrees[3] := 60.0;


  // Timer Setup
  TMR1 := 0;
  TON_T1CON_bit := 0;          // OFF
  TCKPS_0_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_bit := 1;
  IPC0 := IPC0 or 0x1000;      // interrupt priority level = 1
  T1IF_bit := 0;               // clear T1IF
  T1IE_bit := 1;               // enable Timer1 interrupts
 // TON_T1CON_bit := 1;          // ON
  
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 0;                // OFF
  TON_T3CON_bit := 0;                // OFF
  T32_T2CON_bit := 1;                // 32 Bit mode
  TCS_T2CON_bit := 0;                // Internal source
  TGATE_T2CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T2CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T2CON_bit := 0;
  IPC2 := IPC2 or 0x1000;            // interrupt priority level = 1
  PR2 := LoWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  PR3 := HiWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  TMR3HLD := 0;
  TMR2 := 0;
  // Upper Timer fires the interrupts
  T3IP_0_bit := 1;                   // priority
  T3IP_1_bit := 0;
  T3IP_2_bit := 0;
  T3IF_bit := 0;                     // clear T1IF
  T3IE_bit := 1;                     // enable Timer1 interrupts
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 1;                // ON
  
  // Lower Timer controls the setup Setup
  TON_T4CON_bit := 0;                // OFF
  TON_T5CON_bit := 0;                // OFF
  T32_T4CON_bit := 1;                // 32 Bit mode
  TCS_T4CON_bit := 0;                // Internal source
  TGATE_T4CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T4CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T4CON_bit := 0;
  IPC7 := IPC7 or 0x1000;            // interrupt priority level = 1
  PR4 := LoWord(MAX_DWELL_COUNT);
  PR5 := HiWord(MAX_DWELL_COUNT);
  TMR5HLD := 0;
  TMR4 := 0;
  // Upper Timer fires the interrupts
  T5IP_0_bit := 1;                   // priority
  T5IP_1_bit := 0;
  T5IP_2_bit := 0;
  T5IF_bit := 0;                     // clear T1IF
  T5IE_bit := 1;                     // enable Timer1 interrupts

  // Setup the UART
  UART2_Init(115200);
  Delay_ms(100);
  UART2_Write_Text('Starting');
  
  // Pin change Notification  DO THIS LAST
  CN2IE_bit := 1;   // Pin Change Notification Interrupt on A0
  CNIP_0_bit := 1;  // Interrupt priority = 7
  CNIP_1_bit := 1;
  CNIP_2_bit := 1;
  CNIF_bit := 0;    // Clear Pin Change Interrupt flag
  CNIE_bit := 1;    // Enable all Pin Change Interrupts
  
  while true do
  begin        // Waitin for Pin Change Interrupt
    if UART2_Data_Ready > 0 then
    begin
      UART2_Read;
    end;
    Delay_ms(100);
    PrintReal(RPM_Global);
    UART2_Write_Text('; ');
    PrintRealLine(FilterInfo.RPMAverage);
  //  IGBTLatch_bit := not IGBTLatch_bit;
  //  TachOutLatch_Bit := not TachOutLatch_Bit;
  end;
end.