program DoublePulse;

{ Declarations section }

{$DEFINE UART}

const
  {****** MCU Setup Parameters ******}
  // Frequency the CPU is running
  OSCILLATORFREQ = 32e6;
  // How many cycles of the Oscillator for each master timer cycle
  CLOCKDIVIDER = 2;
  // Frequency of the master timer cloc
  CLOCK_FREQ = real( OSCILLATORFREQ/CLOCKDIVIDER);
  // The period of a single clock timer tick (in seconds)
  CLOCK_PERIOD = real( 1/CLOCK_FREQ);

  {****** Engine Parameters *******}
  // Engine cycles
  ENGINE_CYCLE = 4;
  // Number of Cylinders (assuming not a dual point distributor)
  CYLINDERS = 8;
  // Revolutions per Cycle
  REV_PER_CYCLE = ENGINE_CYCLE/2;

  { ****** Sofer parameters to define limits for decision logic in the program ******}
  // Below this and we say we stalled and restart the Statemachine
  STALL_RPM = 50;
  // Above this and it is a bad measurement of RPM
  MAX_RPM = 7000;
  // Above this and we move to the Running State
  MIN_RUNNING_RPM = 400;
  // How many fake RPM triggers to give the FiTech on startup
  FAKE_RPM_COUNT = 0;
  // What RPM to use for the Fake RPM signal
  FAKE_RPM = real( 7000);
  // Smoothing RPM Filter Depth and How many valid RPM spark pulses detected in the pin change notification to
  // move on in the Stat machine before moving out of Cranking
  RPM_FILTER_LEN = 8;
  // How much of a distributor spark period to blank out before looking for the next pin change notification
  BLANK_PERCENT = 0.40;
  // How long between pin change notification before we claim the engine has stalled
  STALL_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE /(STALL_RPM*CYLINDERS));
  // Time to blank if the RPM made no sense at all during cranking
  DEFAULT_CRANKING_RPM = 200;
  DEFAULT_CRANKING_BLANK_PERIOD = real( 60 * REV_PER_CYCLE/(DEFAULT_CRANKING_RPM*CYLINDERS));

  // Statemachine states
  STATE_STALLED = 0;               // Engine is not running
  STATE_STABLIZE_CRANKING = 1;     // Engine is cranking but waiting for the a stable set of pin change notification to occur
  STATE_FAKE_RPM = 2;              // Send the FiTech some fake higher RPM signals to get it to shoot fuel sooner
  STATE_CRANKING = 3;              // Cranking normally but not averaging the pin change notifications yet
  STATE_RUNNING = 4;               // RPM indicates we started so start averaging the pin change notification for the FiTech Output
  STATE_DEBUG = 5;                 // Special Test State
  
  TACH_LO = 1;                     // Pin output for a Tach Lo output (common collector amplifier)
  TACH_HI = 0;                     // Pin output for a Tach Hi output (common collector amplifier)

  COILNEG = B0;    // Bit 0        // The Pin index in the associated Port for the Coil Negative Input
  TACHOUT = B9;    // Bit 9        // The Pin index in the associated Port for the Tach Output

type
  TFilterInfoRec = record
    // RPM Averaging array and index counter
    Distributor_Period_Filter_Array: array[RPM_FILTER_LEN] of real;
    Distributor_Period_Filter_Counter: Integer;
    CurrentAverage: real;
    Previous_Distributor_Period: real;
    Distrbutor_Period_ShortError, Distrbutor_Period_LongError: LongInt;
    StableCrankingError: LongInt;
  end;
  
  TParameters = record
    BlankingPercent: real;
  end;
  
  TDebug = record
    Active: Boolean;
    Trigger: Boolean;
    PulseCount: Integer;
    RPM: LongInt;
  end;
  
var
  CoilNeg_Port: Word at PORTA;
  CoilNeg_Pin: sbit at LATA0_bit;
  CoilNeg_TRIS: sbit at TRISA0_bit;

  TachPort: Word at PORTB;
  TachOut_Pin: sbit at LATB9_bit;
  TachOut_TRIS: sbit at TRISB9_bit;

  HeartBeat_Port: Word at PORTA;
  HeartBeat_Pin: sbit at LATA3_bit;
  HeartBeat_TRIS: sbit at TRISA3_bit;

  Debug_Port: Word at PORTA;
  Debug_Pin: sbit at LATA2_bit;
  Debug_TRIS: sbit at TRISA2_bit;

  State,
  Stable_Cranking_RPM_Count_Global: Integer;
  Last_RPM_Global: real;
  PeriodErrorLogging, RPMLogging, StateLogging, RealtimeRPMLogging, StallIRQLogging: Boolean;
  
  FilterInfo: TFilterInfoRec;
  Parameters: TParameters;
  Debug: TDebug;

{$IFDEF UART}
procedure PrintLine(var Buffer: array[128] of char);
begin
  UART_Write_Text(Buffer);
  UART2_Write(#13);
end;

procedure PrintState;
var
  Buffer: array[6] of char;
begin
  IntToStr(State, Buffer);
  PrintLine(Buffer);
end;

procedure PrintRPM;
var
  Buffer: array[23] of char;
begin
  FloatToStr(Last_RPM_Global, Buffer);
  PrintLine(Buffer);
end;

procedure PrintDistributorPeriodErrors;
var
  Buffer: array[10] of char;
begin
  LongWordToStr(FilterInfo.Distrbutor_Period_ShortError, Buffer);
  UART2_Write_Text('Short T: ');
  PrintLine(Buffer);
  LongWordToStr(FilterInfo.Distrbutor_Period_LongError, Buffer);
  UART2_Write_Text('Long T: ');
  PrintLine(Buffer);
  LongWordToStr(FilterInfo.StableCrankingError, Buffer);
  UART2_Write_Text('Stable Cranking Error: ');
  PrintLine(Buffer);
end;

procedure PrintHelp;
begin
  PrintLine('0 : Disables all Logging');
  PrintLine('s,S : State Logging');
  PrintLine('r,R : Toggle RPM Logging');
  PrintLine('t,T : Toggle Realtime RPM Logging (can cause interrupt timing overrun issues)');
  PrintLine('p,P : Toggle Peroid Error Logging');
  PrintLine('c,C : Clear Distrbutor_Period_Errors counter');
  PrintLine('i,I : Stall Interrupt Logging');
  PrintLine('b,B : Set Blanking Percent send as 10 (10%), 50 (50%) etc');
  PrintLine('d   : Sets the RPM for a debug set of pulses to the FiTech, must use FOUR character i.e. "d4500" for 4500 RPM');
  PrintLine('D   : Sets the number of RPM cycles to fire the FiTech THEN EXECUTES IT, must use four characters i.e. D0010 for 10 cycles');
end;

{$ENDIF}
// Converts an RPM into a Period Time between each cyclinder firing in Seconds
function RPM_To_Distributor_Period(RPM: real): real;
begin
  Result := 0.0;
  if RPM > 0 then
    Result := real( 60 * REV_PER_CYCLE / (RPM * CYLINDERS ));
end;

// Converts a Period of Time between cylinder firings into RPM
function Distributor_Period_To_RPM(Distributor_Period: real): real;
begin
  Result := 0.0;
  if Distributor_Period > 0.0 then
    Result := real( 60 / Distributor_Period / CYLINDERS * REV_PER_CYCLE)
end;

// Converts a DWORD Timer Count to actual elapsed time (seconds) scaled by the Timer Divider (used 1, 8, 32, 64, etc)
function TimerCounts_To_Time(TimerCounts: DWORD; Divider: Word): real;
begin
  Result := real( TimerCounts) * CLOCK_PERIOD * real( Divider);
end;

// Converts time (seconds) to a DWORD Timer Count using the passed Timer Divider (1, 8, 32, 64, etc)
function Time_To_TimerCounts(Time: real; Divider: Word): DWORD;
begin
  Result := DWORD( Time / (CLOCK_PERIOD * real( Divider)))
end;

// Calculates the average of the items in the Distributor Period Array
function AverageDistributorPeriod: real;
var
  i: Integer;
begin
  Result := 0.0;
  for i := 0 to RPM_FILTER_LEN - 1 do
    Result := Result + FilterInfo.Distributor_Period_Filter_Array[i];
  Result := Result / RPM_FILTER_LEN
end;

procedure UpdateDistributorArrayAndAverage(NewDistributorTime: real);
begin
  // Insert the lastest item in the array
  FilterInfo.Distributor_Period_Filter_Array[FilterInfo.Distributor_Period_Filter_Counter] := NewDistributorTime;
  Inc(FilterInfo.Distributor_Period_Filter_Counter);
  // Update the array counter
  if FilterInfo.Distributor_Period_Filter_Counter >= RPM_FILTER_LEN then
    FilterInfo.Distributor_Period_Filter_Counter := 0;
  FilterInfo.CurrentAverage := AverageDistributorPeriod;
end;

// Sends the delayed blanking pulse to the FiTech and stalls the CN Interrupt for the blanking
procedure TriggerOutput_With_Wait(BlankingTime: real);
begin
  TachOut_Pin := TACH_Hi;
  Delay_Cyc_Long( Time_To_TimerCounts(BlankingTime * Parameters.BlankingPercent, 1));  // Just a bit more than 15 degrees dwell (out of 45
  TachOut_Pin := TACH_LO;
end;

procedure interrupt_TMR3_RPM_Measurment_And_Stall_Timer(); iv IVT_ADDR_T3INTERRUPT;
begin
  // Reset the RPM/Stall Timer; Keep looking for stalls as that is the only way to enter this
  TMR3HLD := $0000;
  TMR2 := $0000;
  State := STATE_STALLED;
  Last_RPM_Global := 0.0;          
  {$IFDEF UART}if StallIRQLogging then PrintLine('Stall Detected - IRQ');{$ENDIF}
  T3IF_bit := 0;                 // Reset Interrupt Flag
end;

procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  i: Integer;
  LastDistributorPeriod: real;
  DistributorPeriodTimerCount: DWord;
begin
  PortCopy := CoilNeg_Port;    // Clear all changes
  // Detect rising edges only
  if PortCopy.COILNEG = 1 then
  begin
    // Capture it contents
    LoWord(DistributorPeriodTimerCount) := TMR2;
    HiWord(DistributorPeriodTimerCount) := TMR3HLD;
    // Reset the RPM/Stall Timer
    TMR3HLD := $0000;
    TMR2 := $0000;
    // Makes sure it can't jump to the stall interrupt
    T3IF_bit := 0;

    if State = STATE_STALLED then
    begin
      Last_RPM_Global := 0.0;
      LastDistributorPeriod := 0.0;
    end else
    begin
      LastDistributorPeriod := TimerCounts_To_Time(DistributorPeriodTimerCount, 1);
      Last_RPM_Global := Distributor_Period_To_RPM(LastDistributorPeriod);
    end;
    
    if (FilterInfo.Previous_Distributor_Period < (LastDistributorPeriod * 0.90)) then
      Inc(FilterInfo.Distrbutor_Period_ShortError);
    if (FilterInfo.Previous_Distributor_Period > (LastDistributorPeriod * 1.10)) then
      Inc(FilterInfo.Distrbutor_Period_LongError);
    
    {$IFDEF UART}if RealtimeRPMLogging then PrintRPM;{$ENDIF}

    case State of
      STATE_STALLED :
        begin
          Stable_Cranking_RPM_Count_Global := 0;
          FilterInfo.Distributor_Period_Filter_Counter := 0;
          Last_RPM_Global := 0.0;
          FilterInfo.StableCrankingError := 0;
          {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          State := STATE_STABLIZE_CRANKING;
          {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
        end;
      STATE_STABLIZE_CRANKING :
        begin
          // Decision point for if this was a valid signal
          if (Last_RPM_Global > STALL_RPM) and (Last_RPM_Global < MAX_RPM) then  // Are we cranking in a stable place yet?
          begin
            UpdateDistributorArrayAndAverage(LastDistributorPeriod);
            Delay_Cyc_Long( Time_To_TimerCounts(LastDistributorPeriod * Parameters.BlankingPercent, 1));
            Inc(Stable_Cranking_RPM_Count_Global)
          end else
          begin
            Delay_Cyc_Long( Time_To_TimerCounts(DEFAULT_CRANKING_BLANK_PERIOD * Parameters.BlankingPercent, 1));
            Dec(Stable_Cranking_RPM_Count_Global);
            Inc(FilterInfo.StableCrankingError);
          end;
          // Did we reach the correct number of stable pulses to move on?
          if Stable_Cranking_RPM_Count_Global >= RPM_FILTER_LEN then
          begin
            State := STATE_FAKE_RPM;
            {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          end;
        end;
      STATE_FAKE_RPM :
        begin
          for i := 0 to FAKE_RPM_COUNT -1 do
          begin
            TachOut_Pin := TACH_Hi;
            Delay_Cyc_Long( Time_To_TimerCounts(RPM_To_Distributor_Period(FAKE_RPM * Parameters.BlankingPercent), 1));
            TachOut_Pin := TACH_Lo;
            Delay_Cyc_Long( Time_To_TimerCounts(RPM_To_Distributor_Period(FAKE_RPM * (1-Parameters.BlankingPercent)), 1));
          end;
          State := STATE_CRANKING;
          {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
        end;
      STATE_CRANKING :
        begin
          UpdateDistributorArrayAndAverage(LastDistributorPeriod);
          TriggerOutput_With_Wait(LastDistributorPeriod);
          if Last_RPM_Global > MIN_RUNNING_RPM then
          begin
            State := STATE_RUNNING;
            {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          end;
        end;
      STATE_RUNNING :
        begin
          UpdateDistributorArrayAndAverage(LastDistributorPeriod);
          TriggerOutput_With_Wait(FilterInfo.CurrentAverage);
        end;
      STATE_DEBUG :
        begin
          PrintLine('Cranking while in Debug Mode');
      end else
        State := STATE_STALLED;     // State is messed up, start over
    end;    // Case
  end;
  FilterInfo.Previous_Distributor_Period := LastDistributorPeriod;
  // Some free debounce guarding by putting this at the end
  CNIF_bit := 0;
end;


var
  StrBuffer: array[128] of Char;
  DelimiterStr: string[1];
  TempR: real;
  DebugPeriod, DebugBlankPeriod: real;
  i: Integer;
begin
  { Main program }
  ANSA := 0;        // Make them all Digital
  ANSB := 0;

  State := STATE_STALLED;
  StateLogging := False;
  RPMLogging := False;
  PeriodErrorLogging := False;
  RealtimeRPMLogging := False;
  StallIRQLogging := FAlse;
  FilterInfo.Distributor_Period_Filter_Counter := 0;
  FilterInfo.CurrentAverage := 0.0;
  FilterInfo.Distrbutor_Period_ShortError := 0;
  FilterInfo.Distrbutor_Period_LongError := 0;
  FilterInfo.StableCrankingError := 0;
  
  Parameters.BlankingPercent := BLANK_PERCENT;
  
  Debug.Active := False;
  Debug.Trigger := False;
  Debug.PulseCount := 0;
  Debug.RPM := 0;

  TachOut_Pin := TACH_LO;   // Set it low
  HeartBeat_Pin := 0;
  Debug_Pin := 0;

  CoilNeg_TRIS := 1;   // Input
  TachOut_TRIS := 0;   // Tach Output
  HeartBeat_TRIS := 0; // Output
  Debug_TRIS := 0;

  // Clock Setup
  CLKDIV := 0;                      // Set both dividers to 1:1 and don't use the DOZE to reset dividers (power saving feature)
  
  // RPM Timer
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 0;                // OFF
  TON_T3CON_bit := 0;                // OFF
  T32_T2CON_bit := 1;                // 32 Bit mode
  TCS_T2CON_bit := 0;                // Internal source
  TGATE_T2CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T2CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T2CON_bit := 0;
  IPC2 := IPC2 or 0x1000;            // interrupt priority level = 1
  PR2 := LoWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  PR3 := HiWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  TMR3HLD := 0;
  TMR2 := 0;
  // Upper Timer fires the interrupts
  T3IP_0_bit := 1;                   // priority
  T3IP_1_bit := 0;
  T3IP_2_bit := 0;
  T3IF_bit := 0;                     // clear T1IF
  T3IE_bit := 1;                     // enable Timer1 interrupts
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 1;                // ON

  {$IFDEF UART}
  UART2_Init(115200);
  Delay_ms(100);

  UART2_Write_Text('STALL_DISTRIBUTOR_PERIOD=');
  FloatToStr(STALL_DISTRIBUTOR_PERIOD, StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD)=');
  LongWordToStr(DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD), StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('PRL=');
  WordToStr(TMR2, StrBuffer);
  UART2_Write_Text(StrBuffer);
  UART_Write_Text('  PRH=');
  WordToStr(TMR3HLD, StrBuffer);
  UART_Write_Text(StrBuffer);
  UART2_Write(#13);
  
  PrintHelp;
  {$ENDIF}

  // ALWAYS DO THIS LAST
  // Pin change Notification
  CN2IE_bit := 1;  // Pin Change Notification Interrupt on RA0
  CNIP_0_bit := 1;  // Interrupt priority = 7
  CNIP_1_bit := 1;
  CNIP_2_bit := 1;
  CNIF_bit := 0;    // Clear Pin Change Interrupt flag
  CNIE_bit := 1;    // Enable all Pin Change Interrupts


  while true do
  begin
    Delay_ms(100);
    {$IFDEF UART}
    if UART2_Data_Ready then
    begin
      case UART2_Read of
        '0' :
          begin
            StateLogging := False;
            PeriodErrorLogging := False;
            RealtimeRPMLogging := False;
            StallIRQLogging := False;
            RPMLogging := False;
          end;
        's', 'S' :
          begin
            StateLogging := not StateLogging;
            if StateLogging then PrintLine('State Logging ON') else
              PrintLine('State Logging OFF');
          end;
        'c', 'C' : 
          begin
            FilterInfo.Distrbutor_Period_ShortError := 0;
            FilterInfo.Distrbutor_Period_LongError := 0;
            PrintLine('Counts Cleared');
          end;
        'b', 'B' :
          begin
            DelimiterStr[0] := #13;
            DelimiterStr[1] := $00;
            PrintLine('Reading Blanking Value');
            UART2_Read_Text(StrBuffer, DelimiterStr, 2);
            UART2_Write_Text('Read: ');
            PrintLine(StrBuffer);
            TempR := real( StrToInt(StrBuffer)) * 0.01;
            if TempR > 0.05 then
            begin
              Parameters.BlankingPercent := TempR;  // This could cause a burp if the interrupt uses it
              UART2_Write_Text('New Blanking Value ');
              FloatToStr(Parameters.BlankingPercent * 100, StrBuffer);
              UART2_Write_Text(StrBuffer);
              PrintLine('%');
            end else
            begin
              PrintLine('Value Read was too small must be greater than 5%');
              FloatToStr(Parameters.BlankingPercent * 100, StrBuffer);
              UART2_Write_Text(StrBuffer);
              PrintLine('%');
            end;
          end;
        'p', 'P' :
          begin
            PeriodErrorLogging := not PeriodErrorLogging;
            if PeriodErrorLogging then PrintLine('Period Error Logging ON') else
              PrintLine('Period Error Logging OFF');
          end;
        'r', 'R' :
          begin
            RPMLogging := not RPMLogging;
            if RPMLogging then PrintLine('RPM Logging ON') else
              PrintLine('RPM Logging OFF');
          end;
        't', 'T' :
          begin
            RealtimeRPMLogging := not RealtimeRPMLogging;
            if RealtimeRPMLogging then PrintLine('RealTime RPM Logging ON') else
              PrintLine('RealTime RPM Logging OFF');
          end;
        'i', 'I' :
          begin
            StallIRQLogging := not StallIRQLogging;
            if StallIRQLogging then PrintLine('RealTime RPM Logging ON') else
              PrintLine('RealTime RPM Logging OFF');
          end;
        'd' :
          begin
            DelimiterStr[0] := #13;
            DelimiterStr[1] := $00;
            PrintLine('Reading Debug RPM');
            UART2_Read_Text(StrBuffer, DelimiterStr, 4);
            UART2_Write_Text('Read: ');
            PrintLine(StrBuffer);
            Debug.RPM := StrToInt(StrBuffer);
          end;
        'D' :
          begin
            DelimiterStr[0] := #13;
            DelimiterStr[1] := $00;
            PrintLine('Reading Debug RPM Pulse Count');
            UART2_Read_Text(StrBuffer, DelimiterStr, 4);
            UART2_Write_Text('Read: ');
            PrintLine(StrBuffer);
            Debug.PulseCount := StrToInt(StrBuffer);
            
            if State = STATE_STALLED then
            begin
              PrintLine('Executing Debug Sequence');
              DebugPeriod := RPM_To_Distributor_Period(real (Debug.RPM));
              DebugBlankPeriod := DebugPeriod * Parameters.BlankingPercent;
              for i := 0 to Debug.PulseCount - 1 do
              begin
                TriggerOutput_With_Wait(DebugBlankPeriod);
                Delay_Cyc_Long( Time_To_TimerCounts(DebugPeriod-DebugBlankPeriod, 1));
              end;
            end else
              PrintLine('Can''t run Debug with Engine Running');
          end;
        '?', 'h', 'H' : 
          begin
            PrintHelp;
          end;
      end;
    end;
    
    If RPMLogging then
      PrintRPM;
    if StateLogging then
      PrintState;
    if PeriodErrorLogging then
      PrintDistributorPeriodErrors;
    {$ENDIF}
    // Waitin for Pin Change Interrupt
    HeartBeat_Pin := not HeartBeat_Pin;
  end;
end.