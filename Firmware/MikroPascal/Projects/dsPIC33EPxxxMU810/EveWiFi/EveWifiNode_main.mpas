{*
 * Project name:
     MyProject.vtft
 * Generated by:
     Visual TFT
 * Date of creation
     6/13/2019
 * Test configuration:
     MCU:             P33EP512MU810
     Dev.Board:       EasyPIC_Fusion_v7_dsPIC_FT800
                      http://www.mikroe.com/easypic-fusion/
     Oscillator:      80000000 Hz
     SW:              mikroPascal PRO for dsPIC
 *}

program EveWifiNode_main;

uses
  EveWifiNode_events_code;

var
  Channels : array[11] of byte;
  myMacAdd : array[6]  of byte;
  myMaskAdd : array[4] of byte;
  myIpAdd : array[4] of byte;
  myGatewayAdd : array[4] of byte;

  wifiTmr, netStatusTmr  : word;

  ScanResultCount: Char;
  ErrorCode: Byte;

  i: Integer;


var
  Net_Wireless_MCW1001_Chip_RST           : sbit at RC3_bit;
  Net_Wireless_MCW1001_Chip_RST_Direction : sbit at TRISC3_bit;


var
  wifiTmr, netStatusTmr : word; external;           // timer prescaler
  
procedure Timer1Int(); iv IVT_ADDR_T1INTERRUPT;
begin
  RF5_bit := not RF5_bit;
  netStatusTmr := netStatusTmr + 1;
  Net_Wireless_MCW1001_Time := Net_Wireless_MCW1001_Time + 1;
  T1IF_bit := 0 ;                     // clear timer1 overflow flag
end;

////////////////////////////////////////////////////////////////////////////////
// Interrupt routine for UART module
procedure interrupt(); iv IVT_ADDR_U1RXINTERRUPT;
begin
  Net_Wireless_MCW1001_Receive();       // Need to release the blocking calls with their data.....
  U1RXIF_bit := 0;                      // ensure interrupt not pending
end;

begin

  netStatusTmr := 0;
  wifiTmr := 0;
  IsConnected := False;
  
  ActiveScreen := @Screen1;
  StatusBar := @EveTextStatusBar;
  
//********************************************************************
// Setup MCU
//********************************************************************
  // Initialization of timer..............
  IPC0   := IPC0 or 0x1000;   // Interrupt priority level = 1
  T1IF_bit := 0;             // Clear T1IF
  T1IE_bit := 1;             // Enable Timer1 interrupts

  T1CON := 0x8000;           // Timer1 ON
  TCKPS_1_bit := 1;          // internal clock FCY, prescaler 1:64
  TCKPS_0_bit := 1;             // Enable Timer1 interrupts

  U1STA.B7 := 0;
  NSTDIS_bit := 1;                      // no nesting of interrupts
  U1RXIF_bit := 0;                      // ensure interrupt not pending
  U1RXIE_bit := 1;                      // enable intterupt

  PPS_Mapping(108, _INPUT,  _U1RX);      // RF12
  PPS_Mapping(109, _OUTPUT, _U1TX);      // RF13
 
  UART1_Init(115200);
  Delay_ms(1000);
  
  TRISF5_bit := 0; //output;
  RF5_bit := 0;

//********************************************************************
// Setup EVE
//********************************************************************
  InitVTFTStack();
 
//********************************************************************
// Setup Network
//********************************************************************

  Channels[0] := 9;

  myMacAdd[0] := 0x22;
  myMacAdd[1] := 0x33;
  myMacAdd[2] := 0x44;
  myMacAdd[3] := 0x55;
  myMacAdd[4] := 0x44;
  myMacAdd[5] := 0x22;
  
  myMaskADD[0] := 0xFF;
  myMaskADD[1] := 0xFF;
  myMaskADD[2] := 0xFF;
  myMaskADD[3] := 0x00;
  
  myIpADD[0] := 0x0A;    // 10
  myIpADD[1] := 0x00;
  myIpADD[2] := 0x03;    // 3
  myIpADD[3] := 0x09;    // 9
  
  myGatewayAdd[0] := 0x0A;   // 10
  myGatewayAdd[1] := 0x00;
  myGatewayAdd[2] := 0x03;
  myGatewayAdd[3] := 0x01;


  netStatusTmr := 0;
  wifiTmr := 0;
  
  ReadAndDisplayWiFiInfo();
  
  Net_Wireless_MCW1001_HwReset();
  Delay_ms(2000);  // Right way is to wait for the ASYNC Startup Event
   
  UpdateStatusBar('Initializing', True);
  
  Net_Wireless_MCW1001_SetMode(_NET_WIRELESS_MCW1001_CP_1, _NET_WIRELESS_MCW1001_MODE_INFRASTRUCTURE);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetArpTime(1);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetMAC(myMacAdd);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetNetworkMask(myMaskAdd);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetIP(myIpAdd);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetGatewayIP(myGatewayAdd);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetRegionalDomain(_NET_WIRELESS_MCW1001_REGIONAL_DOMAIN_FCC);
  Delay_ms(50);
  Net_Wireless_MCW1001_SetSSID(_NET_WIRELESS_MCW1001_CP_1, 'sonoita01');
  Delay_ms(50);
  Net_Wireless_MCW1001_SetChannelList(1, Channels);     // Faster to just look at the channel my SSDI is on
  Delay_ms(50);
  Net_Wireless_MCW1001_SetSecurity_WPA(_NET_WIRELESS_MCW1001_CP_1, _NET_WIRELESS_MCW1001_WPA_PSK2, 'KylieKaelyn');
  Delay_ms(50);
  Net_Wireless_MCW1001_SetRetryCount(10, 5);
  Delay_ms(50);
  
  ReadAndDisplayWiFiInfo();
  
  UpdateStatusBar('Scanning for Access Points', True);
  
  ErrorCode := Net_Wireless_MCW1001_ScanStart(0xFF, ScanResultCount);
  UpdateStatusBarWithErrorAndScanCount(ErrorCode, ScanResultCount, True);

  for i := 1 to ScanResultCount do
  begin
    ErrorCode := Net_Wireless_MCW1001_GetScanResult(i);    // ONE INDEXED!!!!!
    UpdateStatusBarWithErrorCode(ErrorCode, True);
  end;
  
  UpdateStatusBar('Ready to Login', False);

  while (True) do
  begin
    ProcessVTFTStack();
  end;

end.