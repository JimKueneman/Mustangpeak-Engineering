;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/27/2015 10:43:45 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x00000004540A  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x005832  	22578
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x005810  	22544
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x540A	0x22570F  	MOV	#9584, W15
0x540C	0x27FFF0  	MOV	#32767, W0
0x540E	0xB7A020  	MOV	WREG, SPLIM
0x5410	0x202010  	MOV	#513, W0
0x5412	0xB7A032  	MOV	WREG, DSRPAG
0x5414	0x200040  	MOV	#4, W0
0x5416	0xB72044  	IOR	CORCON
0x5418	0xFA0016  	LNK	#22
;ENC624J600_Exampe.mpas,78 :: 		begin
;ENC624J600_Exampe.mpas,82 :: 		OneSecondCounter := 0;
0x541A	0x781F8A  	PUSH	W10
0x541C	0x781F8B  	PUSH	W11
0x541E	0x781F8C  	PUSH	W12
0x5420	0x781F8D  	PUSH	W13
0x5422	0xEF2000  	CLR	W0
0x5424	0x8883F0  	MOV	W0, _OneSecondCounter
;ENC624J600_Exampe.mpas,86 :: 		PLLFBD := 68;             // PLL multiplier M=70
0x5426	0x200440  	MOV	#68, W0
0x5428	0xB7A746  	MOV	WREG, PLLFBD
;ENC624J600_Exampe.mpas,87 :: 		CLKDIV := 0x0000;         // PLL prescaler N1=2, PLL postscaler N2=2
0x542A	0xEF2744  	CLR	CLKDIV
;ENC624J600_Exampe.mpas,88 :: 		while OSCCON.0 = 1 do;                                                        // wait for it to take effect
L__main16:
0x542C	0xAF0742  	BTSC	OSCCON, #0
0x542E	0x37FFFE  	BRA	L__main16
;ENC624J600_Exampe.mpas,90 :: 		ANSELA := 0x00;           // Convert all I/O pins to digital
0x5430	0xEF2E0E  	CLR	ANSELA
;ENC624J600_Exampe.mpas,91 :: 		ANSELB := 0x00;
0x5432	0xEF2E1E  	CLR	ANSELB
;ENC624J600_Exampe.mpas,92 :: 		ANSELC := 0x00;
0x5434	0xEF2E2E  	CLR	ANSELC
;ENC624J600_Exampe.mpas,93 :: 		ANSELD := 0x00;
0x5436	0xEF2E3E  	CLR	ANSELD
;ENC624J600_Exampe.mpas,94 :: 		ANSELE := 0x00;
0x5438	0xEF2E4E  	CLR	ANSELE
;ENC624J600_Exampe.mpas,95 :: 		ANSELG := 0x00;
0x543A	0xEF2E6E  	CLR	ANSELG
;ENC624J600_Exampe.mpas,97 :: 		PPS_Mapping(70, _OUTPUT, _SCK1OUT);                                           // Set RP70 to the SPI1 Clock Receive RD6
0x543C	0xB3C06C  	MOV.B	#6, W12
0x543E	0xEF2016  	CLR	W11
0x5440	0xB3C46A  	MOV.B	#70, W10
0x5442	0x07FE77  	RCALL	_PPS_Mapping
;ENC624J600_Exampe.mpas,98 :: 		PPS_Mapping(69, _OUTPUT, _SDO1);                                              // Set RP69 to the SPI1 SDO           RD5
0x5444	0xB3C05C  	MOV.B	#5, W12
0x5446	0xEF2016  	CLR	W11
0x5448	0xB3C45A  	MOV.B	#69, W10
0x544A	0x07FE73  	RCALL	_PPS_Mapping
;ENC624J600_Exampe.mpas,99 :: 		PPS_Mapping(68, _INPUT, _SDI1);                                               // Set RP68 to the SPI1 SDI           RD4
0x544C	0xB3C26C  	MOV.B	#38, W12
0x544E	0xB3C01B  	MOV.B	#1, W11
0x5450	0xB3C44A  	MOV.B	#68, W10
0x5452	0x07FE6F  	RCALL	_PPS_Mapping
;ENC624J600_Exampe.mpas,101 :: 		CNIED0_bit := 1;        // Pin Change  interrupt
0x5454	0xA80E38  	BSET	CNIED0_bit, BitPos(CNIED0_bit+0)
;ENC624J600_Exampe.mpas,111 :: 		_SPI_IDLE_2_ACTIVE);
0x5456	0x20002D  	MOV	#2, W13
0x5458	0x20018C  	MOV	#24, W12
0x545A	0xEF2016  	CLR	W11
0x545C	0x20020A  	MOV	#32, W10
0x545E	0x201000  	MOV	#256, W0
0x5460	0x781F80  	PUSH	W0
0x5462	0xEF2000  	CLR	W0
0x5464	0x781F80  	PUSH	W0
0x5466	0xEF2000  	CLR	W0
0x5468	0x781F80  	PUSH	W0
0x546A	0xEF2000  	CLR	W0
0x546C	0x781F80  	PUSH	W0
0x546E	0x07FF61  	RCALL	_SPI1_Init_Advanced
0x5470	0xB1008F  	SUB	#8, W15
;ENC624J600_Exampe.mpas,112 :: 		SPI_Set_Active(@SPI1_Read, @SPI1_Write); // Sets the SPI1 module active
0x5472	0x2FFFFB  	MOV	#lo_addr(_SPI1_Write), W11
0x5474	0x2FFFFA  	MOV	#lo_addr(_SPI1_Read), W10
0x5476	0x07FF74  	RCALL	_SPI_Set_Active
;ENC624J600_Exampe.mpas,113 :: 		Delay_ms(100);
0x5478	0x200168  	MOV	#22, W8
0x547A	0x25CCC7  	MOV	#23756, W7
L__main20:
0x547C	0xED200E  	DEC	W7
0x547E	0x3AFFFE  	BRA NZ	L__main20
0x5480	0xED2010  	DEC	W8
0x5482	0x3AFFFC  	BRA NZ	L__main20
0x5484	0x000000  	NOP
0x5486	0x000000  	NOP
;ENC624J600_Exampe.mpas,115 :: 		PPS_Mapping(100, _INPUT, _U1RX);                                      // Set RPI100 to the UART Receive
0x5488	0xB3C22C  	MOV.B	#34, W12
0x548A	0xB3C01B  	MOV.B	#1, W11
0x548C	0xB3C64A  	MOV.B	#100, W10
0x548E	0x07FE51  	RCALL	_PPS_Mapping
;ENC624J600_Exampe.mpas,116 :: 		PPS_Mapping(101, _OUTPUT, _U1TX);                                     // Set RP101 to the UART Transmit
0x5490	0xB3C01C  	MOV.B	#1, W12
0x5492	0xEF2016  	CLR	W11
0x5494	0xB3C65A  	MOV.B	#101, W10
0x5496	0x07FE4D  	RCALL	_PPS_Mapping
;ENC624J600_Exampe.mpas,117 :: 		UART1_Init(230400);                       // Initialize UART module a
0x5498	0x28400A  	MOV	#33792, W10
0x549A	0x20003B  	MOV	#3, W11
0x549C	0x07FED2  	RCALL	_UART1_Init
;ENC624J600_Exampe.mpas,118 :: 		Delay_ms(100);                            // Wait for UART module to stabilize
0x549E	0x200168  	MOV	#22, W8
0x54A0	0x25CCC7  	MOV	#23756, W7
L__main22:
0x54A2	0xED200E  	DEC	W7
0x54A4	0x3AFFFE  	BRA NZ	L__main22
0x54A6	0xED2010  	DEC	W8
0x54A8	0x3AFFFC  	BRA NZ	L__main22
0x54AA	0x000000  	NOP
0x54AC	0x000000  	NOP
;ENC624J600_Exampe.mpas,122 :: 		TCS_T2CON_bit := 0;       // internal cycle clock
0x54AE	0xA92110  	BCLR	TCS_T2CON_bit, BitPos(TCS_T2CON_bit+0)
;ENC624J600_Exampe.mpas,123 :: 		T2IP_0_bit := 1;          // Timer 2 Interrupt Priority = 5   (1 means off)
0x54B0	0xA88843  	BSET	T2IP_0_bit, BitPos(T2IP_0_bit+0)
;ENC624J600_Exampe.mpas,124 :: 		T2IP_1_bit := 0;
0x54B2	0xA9A843  	BCLR	T2IP_1_bit, BitPos(T2IP_1_bit+0)
;ENC624J600_Exampe.mpas,125 :: 		T2IP_2_bit := 1;
0x54B4	0xA8C843  	BSET	T2IP_2_bit, BitPos(T2IP_2_bit+0)
;ENC624J600_Exampe.mpas,126 :: 		TCKPS_0_T2CON_bit := 1;   // 256 Prescaler
0x54B6	0xA88110  	BSET	TCKPS_0_T2CON_bit, BitPos(TCKPS_0_T2CON_bit+0)
;ENC624J600_Exampe.mpas,127 :: 		TCKPS_1_T2CON_bit := 1;
0x54B8	0xA8A110  	BSET	TCKPS_1_T2CON_bit, BitPos(TCKPS_1_T2CON_bit+0)
;ENC624J600_Exampe.mpas,128 :: 		PR2 := 27344;             // Clock ticks every (1/140MHz * 2 * 256 * 27344 = 100.00091ms interrupts
0x54BA	0x26AD00  	MOV	#27344, W0
0x54BC	0xB7A10C  	MOV	WREG, PR2
;ENC624J600_Exampe.mpas,129 :: 		T2IF_bit := 0;            // Clear T2IF
0x54BE	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;ENC624J600_Exampe.mpas,130 :: 		T2IE_bit := 1;            // Enable the Interrupt
0x54C0	0xA8E820  	BSET	T2IE_bit, BitPos(T2IE_bit+0)
;ENC624J600_Exampe.mpas,131 :: 		TON_T2CON_bit := 1;       // Turn on 100ms Timer
0x54C2	0xA8E111  	BSET	TON_T2CON_bit, BitPos(TON_T2CON_bit+0)
;ENC624J600_Exampe.mpas,134 :: 		LATB6_bit := 0;
0x54C4	0xA9CE14  	BCLR	LATB6_bit, BitPos(LATB6_bit+0)
;ENC624J600_Exampe.mpas,135 :: 		LATB7_bit := 0;
0x54C6	0xA9EE14  	BCLR	LATB7_bit, BitPos(LATB7_bit+0)
;ENC624J600_Exampe.mpas,136 :: 		TRISB6_bit := 0; // Output
0x54C8	0xA9CE10  	BCLR	TRISB6_bit, BitPos(TRISB6_bit+0)
;ENC624J600_Exampe.mpas,137 :: 		TRISB7_bit := 0; // Output
0x54CA	0xA9EE10  	BCLR	TRISB7_bit, BitPos(TRISB7_bit+0)
;ENC624J600_Exampe.mpas,140 :: 		eth_ip_addr[0] := 192; eth_ip_addr[1] := 168; eth_ip_addr[2] := 0; eth_ip_addr[3] := 44;
0x54CC	0x210881  	MOV	#lo_addr(_eth_ip_addr), W1
0x54CE	0xB3CC00  	MOV.B	#192, W0
0x54D0	0x784880  	MOV.B	W0, [W1]
0x54D2	0x210891  	MOV	#lo_addr(_eth_ip_addr+1), W1
0x54D4	0xB3CA80  	MOV.B	#168, W0
0x54D6	0x784880  	MOV.B	W0, [W1]
0x54D8	0x2108A1  	MOV	#lo_addr(_eth_ip_addr+2), W1
0x54DA	0xEF2000  	CLR	W0
0x54DC	0x784880  	MOV.B	W0, [W1]
0x54DE	0x2108B1  	MOV	#lo_addr(_eth_ip_addr+3), W1
0x54E0	0xB3C2C0  	MOV.B	#44, W0
0x54E2	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,141 :: 		eth_dns_addr[0] := 192; eth_dns_addr[1] := 168; eth_dns_addr[2] := 0; eth_dns_addr[3] :=1;
0x54E4	0x210841  	MOV	#lo_addr(_eth_dns_addr), W1
0x54E6	0xB3CC00  	MOV.B	#192, W0
0x54E8	0x784880  	MOV.B	W0, [W1]
0x54EA	0x210851  	MOV	#lo_addr(_eth_dns_addr+1), W1
0x54EC	0xB3CA80  	MOV.B	#168, W0
0x54EE	0x784880  	MOV.B	W0, [W1]
0x54F0	0x210861  	MOV	#lo_addr(_eth_dns_addr+2), W1
0x54F2	0xEF2000  	CLR	W0
0x54F4	0x784880  	MOV.B	W0, [W1]
0x54F6	0x210871  	MOV	#lo_addr(_eth_dns_addr+3), W1
0x54F8	0xB3C010  	MOV.B	#1, W0
0x54FA	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,142 :: 		eth_mask[0] := 255; eth_mask[1] := 255; eth_mask[2] := 255; eth_mask[3] := 0;
0x54FC	0x210801  	MOV	#lo_addr(_eth_mask), W1
0x54FE	0xB3CFF0  	MOV.B	#255, W0
0x5500	0x784880  	MOV.B	W0, [W1]
0x5502	0x210811  	MOV	#lo_addr(_eth_mask+1), W1
0x5504	0xB3CFF0  	MOV.B	#255, W0
0x5506	0x784880  	MOV.B	W0, [W1]
0x5508	0x210821  	MOV	#lo_addr(_eth_mask+2), W1
0x550A	0xB3CFF0  	MOV.B	#255, W0
0x550C	0x784880  	MOV.B	W0, [W1]
0x550E	0x210831  	MOV	#lo_addr(_eth_mask+3), W1
0x5510	0xEF2000  	CLR	W0
0x5512	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,143 :: 		eth_gateway[0] := 192; eth_gateway[1] := 168; eth_gateway[2] := 0; eth_gateway[3] := 1;
0x5514	0x2107A1  	MOV	#lo_addr(_eth_gateway), W1
0x5516	0xB3CC00  	MOV.B	#192, W0
0x5518	0x784880  	MOV.B	W0, [W1]
0x551A	0x2107B1  	MOV	#lo_addr(_eth_gateway+1), W1
0x551C	0xB3CA80  	MOV.B	#168, W0
0x551E	0x784880  	MOV.B	W0, [W1]
0x5520	0x2107C1  	MOV	#lo_addr(_eth_gateway+2), W1
0x5522	0xEF2000  	CLR	W0
0x5524	0x784880  	MOV.B	W0, [W1]
0x5526	0x2107D1  	MOV	#lo_addr(_eth_gateway+3), W1
0x5528	0xB3C010  	MOV.B	#1, W0
0x552A	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,144 :: 		eth_ntp_addr[0] := 132; eth_ntp_addr[1] := 163; eth_ntp_addr[2] := 4; eth_ntp_addr[3] := 100;
0x552C	0x2101E1  	MOV	#lo_addr(_eth_ntp_addr), W1
0x552E	0xB3C840  	MOV.B	#132, W0
0x5530	0x784880  	MOV.B	W0, [W1]
0x5532	0x2101F1  	MOV	#lo_addr(_eth_ntp_addr+1), W1
0x5534	0xB3CA30  	MOV.B	#163, W0
0x5536	0x784880  	MOV.B	W0, [W1]
0x5538	0x210201  	MOV	#lo_addr(_eth_ntp_addr+2), W1
0x553A	0xB3C040  	MOV.B	#4, W0
0x553C	0x784880  	MOV.B	W0, [W1]
0x553E	0x210211  	MOV	#lo_addr(_eth_ntp_addr+3), W1
0x5540	0xB3C640  	MOV.B	#100, W0
0x5542	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,145 :: 		eth_mac[0] := 0xA0; eth_mac[1] := 0x27; {Don't set the bottom bits} eth_mac[2] := 0x6F; eth_mac[3] := 0xFA; eth_mac[4] := 0xD6; eth_mac[5] := 0xA5;
0x5544	0x210181  	MOV	#lo_addr(_eth_mac), W1
0x5546	0xB3CA00  	MOV.B	#160, W0
0x5548	0x784880  	MOV.B	W0, [W1]
0x554A	0x210191  	MOV	#lo_addr(_eth_mac+1), W1
0x554C	0xB3C270  	MOV.B	#39, W0
0x554E	0x784880  	MOV.B	W0, [W1]
0x5550	0x2101A1  	MOV	#lo_addr(_eth_mac+2), W1
0x5552	0xB3C6F0  	MOV.B	#111, W0
0x5554	0x784880  	MOV.B	W0, [W1]
0x5556	0x2101B1  	MOV	#lo_addr(_eth_mac+3), W1
0x5558	0xB3CFA0  	MOV.B	#250, W0
0x555A	0x784880  	MOV.B	W0, [W1]
0x555C	0x2101C1  	MOV	#lo_addr(_eth_mac+4), W1
0x555E	0xB3CD60  	MOV.B	#214, W0
0x5560	0x784880  	MOV.B	W0, [W1]
0x5562	0x2101D1  	MOV	#lo_addr(_eth_mac+5), W1
0x5564	0xB3CA50  	MOV.B	#165, W0
0x5566	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,147 :: 		UART1_Write_Text('Initializing LAN!'+CRLF);
0x5568	0x4700E0  	ADD	W14, #0, W1
0x556A	0xB3C490  	MOV.B	#73, W0
0x556C	0x785880  	MOV.B	W0, [W1++]
0x556E	0xB3C6E0  	MOV.B	#110, W0
0x5570	0x785880  	MOV.B	W0, [W1++]
0x5572	0xB3C690  	MOV.B	#105, W0
0x5574	0x785880  	MOV.B	W0, [W1++]
0x5576	0xB3C740  	MOV.B	#116, W0
0x5578	0x785880  	MOV.B	W0, [W1++]
0x557A	0xB3C690  	MOV.B	#105, W0
0x557C	0x785880  	MOV.B	W0, [W1++]
0x557E	0xB3C610  	MOV.B	#97, W0
0x5580	0x785880  	MOV.B	W0, [W1++]
0x5582	0xB3C6C0  	MOV.B	#108, W0
0x5584	0x785880  	MOV.B	W0, [W1++]
0x5586	0xB3C690  	MOV.B	#105, W0
0x5588	0x785880  	MOV.B	W0, [W1++]
0x558A	0xB3C7A0  	MOV.B	#122, W0
0x558C	0x785880  	MOV.B	W0, [W1++]
0x558E	0xB3C690  	MOV.B	#105, W0
0x5590	0x785880  	MOV.B	W0, [W1++]
0x5592	0xB3C6E0  	MOV.B	#110, W0
0x5594	0x785880  	MOV.B	W0, [W1++]
0x5596	0xB3C670  	MOV.B	#103, W0
0x5598	0x785880  	MOV.B	W0, [W1++]
0x559A	0xB3C200  	MOV.B	#32, W0
0x559C	0x785880  	MOV.B	W0, [W1++]
0x559E	0xB3C4C0  	MOV.B	#76, W0
0x55A0	0x785880  	MOV.B	W0, [W1++]
0x55A2	0xB3C410  	MOV.B	#65, W0
0x55A4	0x785880  	MOV.B	W0, [W1++]
0x55A6	0xB3C4E0  	MOV.B	#78, W0
0x55A8	0x785880  	MOV.B	W0, [W1++]
0x55AA	0xB3C210  	MOV.B	#33, W0
0x55AC	0x785880  	MOV.B	W0, [W1++]
0x55AE	0xB3C0D0  	MOV.B	#13, W0
0x55B0	0x785880  	MOV.B	W0, [W1++]
0x55B2	0xB3C0A0  	MOV.B	#10, W0
0x55B4	0x785880  	MOV.B	W0, [W1++]
0x55B6	0xB3C000  	MOV.B	#0, W0
0x55B8	0x785880  	MOV.B	W0, [W1++]
0x55BA	0x470060  	ADD	W14, #0, W0
0x55BC	0x780500  	MOV	W0, W10
0x55BE	0x07FD59  	RCALL	_UART1_Write_Text
;ENC624J600_Exampe.mpas,148 :: 		use_user_MAC := True;
0x55C0	0x2FFFF0  	MOV	#65535, W0
0x55C2	0x8880B0  	MOV	W0, _use_user_MAC
;ENC624J600_Exampe.mpas,149 :: 		Eth_Init_;
0x55C4	0x07FBAC  	RCALL	_Eth_Init_
;ENC624J600_Exampe.mpas,150 :: 		UART1_Write_Text('Wait for LAN!'+CRLF);
0x55C6	0x4700E0  	ADD	W14, #0, W1
0x55C8	0xB3C570  	MOV.B	#87, W0
0x55CA	0x785880  	MOV.B	W0, [W1++]
0x55CC	0xB3C610  	MOV.B	#97, W0
0x55CE	0x785880  	MOV.B	W0, [W1++]
0x55D0	0xB3C690  	MOV.B	#105, W0
0x55D2	0x785880  	MOV.B	W0, [W1++]
0x55D4	0xB3C740  	MOV.B	#116, W0
0x55D6	0x785880  	MOV.B	W0, [W1++]
0x55D8	0xB3C200  	MOV.B	#32, W0
0x55DA	0x785880  	MOV.B	W0, [W1++]
0x55DC	0xB3C660  	MOV.B	#102, W0
0x55DE	0x785880  	MOV.B	W0, [W1++]
0x55E0	0xB3C6F0  	MOV.B	#111, W0
0x55E2	0x785880  	MOV.B	W0, [W1++]
0x55E4	0xB3C720  	MOV.B	#114, W0
0x55E6	0x785880  	MOV.B	W0, [W1++]
0x55E8	0xB3C200  	MOV.B	#32, W0
0x55EA	0x785880  	MOV.B	W0, [W1++]
0x55EC	0xB3C4C0  	MOV.B	#76, W0
0x55EE	0x785880  	MOV.B	W0, [W1++]
0x55F0	0xB3C410  	MOV.B	#65, W0
0x55F2	0x785880  	MOV.B	W0, [W1++]
0x55F4	0xB3C4E0  	MOV.B	#78, W0
0x55F6	0x785880  	MOV.B	W0, [W1++]
0x55F8	0xB3C210  	MOV.B	#33, W0
0x55FA	0x785880  	MOV.B	W0, [W1++]
0x55FC	0xB3C0D0  	MOV.B	#13, W0
0x55FE	0x785880  	MOV.B	W0, [W1++]
0x5600	0xB3C0A0  	MOV.B	#10, W0
0x5602	0x785880  	MOV.B	W0, [W1++]
0x5604	0xB3C000  	MOV.B	#0, W0
0x5606	0x785880  	MOV.B	W0, [W1++]
0x5608	0x470060  	ADD	W14, #0, W0
0x560A	0x780500  	MOV	W0, W10
0x560C	0x07FD32  	RCALL	_UART1_Write_Text
;ENC624J600_Exampe.mpas,151 :: 		if Wait_for_LAN(False) then
0x560E	0xEF2014  	CLR	W10
0x5610	0x07FEBC  	RCALL	_Wait_for_LAN
0x5612	0xE20000  	CP0	W0
0x5614	0x32002B  	BRA Z	L__main25
L__main77:
;ENC624J600_Exampe.mpas,153 :: 		Eth_EnableReception(True);
0x5616	0x2FFFFA  	MOV	#65535, W10
0x5618	0x07FEE3  	RCALL	_Eth_EnableReception
;ENC624J600_Exampe.mpas,154 :: 		UART1_Write_Text('Ethernet Ready!'+CRLF);
0x561A	0x4700E0  	ADD	W14, #0, W1
0x561C	0xB3C450  	MOV.B	#69, W0
0x561E	0x785880  	MOV.B	W0, [W1++]
0x5620	0xB3C740  	MOV.B	#116, W0
0x5622	0x785880  	MOV.B	W0, [W1++]
0x5624	0xB3C680  	MOV.B	#104, W0
0x5626	0x785880  	MOV.B	W0, [W1++]
0x5628	0xB3C650  	MOV.B	#101, W0
0x562A	0x785880  	MOV.B	W0, [W1++]
0x562C	0xB3C720  	MOV.B	#114, W0
0x562E	0x785880  	MOV.B	W0, [W1++]
0x5630	0xB3C6E0  	MOV.B	#110, W0
0x5632	0x785880  	MOV.B	W0, [W1++]
0x5634	0xB3C650  	MOV.B	#101, W0
0x5636	0x785880  	MOV.B	W0, [W1++]
0x5638	0xB3C740  	MOV.B	#116, W0
0x563A	0x785880  	MOV.B	W0, [W1++]
0x563C	0xB3C200  	MOV.B	#32, W0
0x563E	0x785880  	MOV.B	W0, [W1++]
0x5640	0xB3C520  	MOV.B	#82, W0
0x5642	0x785880  	MOV.B	W0, [W1++]
0x5644	0xB3C650  	MOV.B	#101, W0
0x5646	0x785880  	MOV.B	W0, [W1++]
0x5648	0xB3C610  	MOV.B	#97, W0
0x564A	0x785880  	MOV.B	W0, [W1++]
0x564C	0xB3C640  	MOV.B	#100, W0
0x564E	0x785880  	MOV.B	W0, [W1++]
0x5650	0xB3C790  	MOV.B	#121, W0
0x5652	0x785880  	MOV.B	W0, [W1++]
0x5654	0xB3C210  	MOV.B	#33, W0
0x5656	0x785880  	MOV.B	W0, [W1++]
0x5658	0xB3C0D0  	MOV.B	#13, W0
0x565A	0x785880  	MOV.B	W0, [W1++]
0x565C	0xB3C0A0  	MOV.B	#10, W0
0x565E	0x785880  	MOV.B	W0, [W1++]
0x5660	0xB3C000  	MOV.B	#0, W0
0x5662	0x785880  	MOV.B	W0, [W1++]
0x5664	0x470060  	ADD	W14, #0, W0
0x5666	0x780500  	MOV	W0, W10
0x5668	0x07FD04  	RCALL	_UART1_Write_Text
;ENC624J600_Exampe.mpas,155 :: 		end else
0x566A	0x37002A  	BRA	L__main26
L__main25:
;ENC624J600_Exampe.mpas,156 :: 		UART1_Write_Text('Ethernet Failed!'+CRLF);
0x566C	0x4700E0  	ADD	W14, #0, W1
0x566E	0xB3C450  	MOV.B	#69, W0
0x5670	0x785880  	MOV.B	W0, [W1++]
0x5672	0xB3C740  	MOV.B	#116, W0
0x5674	0x785880  	MOV.B	W0, [W1++]
0x5676	0xB3C680  	MOV.B	#104, W0
0x5678	0x785880  	MOV.B	W0, [W1++]
0x567A	0xB3C650  	MOV.B	#101, W0
0x567C	0x785880  	MOV.B	W0, [W1++]
0x567E	0xB3C720  	MOV.B	#114, W0
0x5680	0x785880  	MOV.B	W0, [W1++]
0x5682	0xB3C6E0  	MOV.B	#110, W0
0x5684	0x785880  	MOV.B	W0, [W1++]
0x5686	0xB3C650  	MOV.B	#101, W0
0x5688	0x785880  	MOV.B	W0, [W1++]
0x568A	0xB3C740  	MOV.B	#116, W0
0x568C	0x785880  	MOV.B	W0, [W1++]
0x568E	0xB3C200  	MOV.B	#32, W0
0x5690	0x785880  	MOV.B	W0, [W1++]
0x5692	0xB3C460  	MOV.B	#70, W0
0x5694	0x785880  	MOV.B	W0, [W1++]
0x5696	0xB3C610  	MOV.B	#97, W0
0x5698	0x785880  	MOV.B	W0, [W1++]
0x569A	0xB3C690  	MOV.B	#105, W0
0x569C	0x785880  	MOV.B	W0, [W1++]
0x569E	0xB3C6C0  	MOV.B	#108, W0
0x56A0	0x785880  	MOV.B	W0, [W1++]
0x56A2	0xB3C650  	MOV.B	#101, W0
0x56A4	0x785880  	MOV.B	W0, [W1++]
0x56A6	0xB3C640  	MOV.B	#100, W0
0x56A8	0x785880  	MOV.B	W0, [W1++]
0x56AA	0xB3C210  	MOV.B	#33, W0
0x56AC	0x785880  	MOV.B	W0, [W1++]
0x56AE	0xB3C0D0  	MOV.B	#13, W0
0x56B0	0x785880  	MOV.B	W0, [W1++]
0x56B2	0xB3C0A0  	MOV.B	#10, W0
0x56B4	0x785880  	MOV.B	W0, [W1++]
0x56B6	0xB3C000  	MOV.B	#0, W0
0x56B8	0x785880  	MOV.B	W0, [W1++]
0x56BA	0x470060  	ADD	W14, #0, W0
0x56BC	0x780500  	MOV	W0, W10
0x56BE	0x07FCD9  	RCALL	_UART1_Write_Text
L__main26:
;ENC624J600_Exampe.mpas,160 :: 		while true do
L__main28:
;ENC624J600_Exampe.mpas,162 :: 		Eth_DoPacket;
0x56C0	0x07FD41  	RCALL	_Eth_DoPacket
;ENC624J600_Exampe.mpas,163 :: 		delay_us(50);     // it is possible to call TOO fast and overwhelm the ENC... 1.2u between SPI calls was too fast...
0x56C2	0x202BC7  	MOV	#700, W7
L__main32:
0x56C4	0xED200E  	DEC	W7
0x56C6	0x3AFFFE  	BRA NZ	L__main32
0x56C8	0x000000  	NOP
0x56CA	0x000000  	NOP
;ENC624J600_Exampe.mpas,164 :: 		if UART1_Data_Ready = 1 then
0x56CC	0x07FE97  	RCALL	_UART1_Data_Ready
0x56CE	0xE10061  	CP	W0, #1
0x56D0	0x3A0098  	BRA NZ	L__main35
L__main78:
;ENC624J600_Exampe.mpas,166 :: 		case UART1_Read of
0x56D2	0x07FE81  	RCALL	_UART1_Read
0x56D4	0x980F20  	MOV	W0, [W14+20]
;ENC624J600_Exampe.mpas,167 :: 		'1' : begin
0x56D6	0x200311  	MOV	#49, W1
0x56D8	0xE10001  	CP	W0, W1
0x56DA	0x3A000F  	BRA NZ	L__main40
L__main79:
;ENC624J600_Exampe.mpas,168 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 200;
0x56DC	0x210221  	MOV	#lo_addr(_TestIP), W1
0x56DE	0xB3CC00  	MOV.B	#192, W0
0x56E0	0x784880  	MOV.B	W0, [W1]
0x56E2	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x56E4	0xB3CA80  	MOV.B	#168, W0
0x56E6	0x784880  	MOV.B	W0, [W1]
0x56E8	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x56EA	0xEF2000  	CLR	W0
0x56EC	0x784880  	MOV.B	W0, [W1]
0x56EE	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x56F0	0xB3CC80  	MOV.B	#200, W0
0x56F2	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,169 :: 		MapAndPrint(TestIP);
0x56F4	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x56F6	0x07FBF5  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,170 :: 		end;
0x56F8	0x370084  	BRA	L__main37
L__main40:
;ENC624J600_Exampe.mpas,171 :: 		'2' : begin
0x56FA	0x200321  	MOV	#50, W1
0x56FC	0x90082E  	MOV	[W14+20], W0
0x56FE	0xE10001  	CP	W0, W1
0x5700	0x3A000F  	BRA NZ	L__main43
L__main80:
;ENC624J600_Exampe.mpas,172 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 247;     // XP VM
0x5702	0x210221  	MOV	#lo_addr(_TestIP), W1
0x5704	0xB3CC00  	MOV.B	#192, W0
0x5706	0x784880  	MOV.B	W0, [W1]
0x5708	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x570A	0xB3CA80  	MOV.B	#168, W0
0x570C	0x784880  	MOV.B	W0, [W1]
0x570E	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x5710	0xEF2000  	CLR	W0
0x5712	0x784880  	MOV.B	W0, [W1]
0x5714	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x5716	0xB3CF70  	MOV.B	#247, W0
0x5718	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,173 :: 		MapAndPrint(TestIP);
0x571A	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x571C	0x07FBE2  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,174 :: 		end;
0x571E	0x370071  	BRA	L__main37
L__main43:
;ENC624J600_Exampe.mpas,175 :: 		'3' : begin
0x5720	0x200331  	MOV	#51, W1
0x5722	0x90082E  	MOV	[W14+20], W0
0x5724	0xE10001  	CP	W0, W1
0x5726	0x3A000F  	BRA NZ	L__main46
L__main81:
;ENC624J600_Exampe.mpas,176 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 2;      // Time Capsule
0x5728	0x210221  	MOV	#lo_addr(_TestIP), W1
0x572A	0xB3CC00  	MOV.B	#192, W0
0x572C	0x784880  	MOV.B	W0, [W1]
0x572E	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x5730	0xB3CA80  	MOV.B	#168, W0
0x5732	0x784880  	MOV.B	W0, [W1]
0x5734	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x5736	0xEF2000  	CLR	W0
0x5738	0x784880  	MOV.B	W0, [W1]
0x573A	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x573C	0xB3C020  	MOV.B	#2, W0
0x573E	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,177 :: 		MapAndPrint(TestIP);
0x5740	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x5742	0x07FBCF  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,178 :: 		end;
0x5744	0x37005E  	BRA	L__main37
L__main46:
;ENC624J600_Exampe.mpas,179 :: 		'4' : begin
0x5746	0x200341  	MOV	#52, W1
0x5748	0x90082E  	MOV	[W14+20], W0
0x574A	0xE10001  	CP	W0, W1
0x574C	0x3A000F  	BRA NZ	L__main49
L__main82:
;ENC624J600_Exampe.mpas,180 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 1;
0x574E	0x210221  	MOV	#lo_addr(_TestIP), W1
0x5750	0xB3CC00  	MOV.B	#192, W0
0x5752	0x784880  	MOV.B	W0, [W1]
0x5754	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x5756	0xB3CA80  	MOV.B	#168, W0
0x5758	0x784880  	MOV.B	W0, [W1]
0x575A	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x575C	0xEF2000  	CLR	W0
0x575E	0x784880  	MOV.B	W0, [W1]
0x5760	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x5762	0xB3C010  	MOV.B	#1, W0
0x5764	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,181 :: 		MapAndPrint(TestIP);
0x5766	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x5768	0x07FBBC  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,182 :: 		end;
0x576A	0x37004B  	BRA	L__main37
L__main49:
;ENC624J600_Exampe.mpas,183 :: 		'5' : begin
0x576C	0x200351  	MOV	#53, W1
0x576E	0x90082E  	MOV	[W14+20], W0
0x5770	0xE10001  	CP	W0, W1
0x5772	0x3A000F  	BRA NZ	L__main52
L__main83:
;ENC624J600_Exampe.mpas,184 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 233;   // Does not exist
0x5774	0x210221  	MOV	#lo_addr(_TestIP), W1
0x5776	0xB3CC00  	MOV.B	#192, W0
0x5778	0x784880  	MOV.B	W0, [W1]
0x577A	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x577C	0xB3CA80  	MOV.B	#168, W0
0x577E	0x784880  	MOV.B	W0, [W1]
0x5780	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x5782	0xEF2000  	CLR	W0
0x5784	0x784880  	MOV.B	W0, [W1]
0x5786	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x5788	0xB3CE90  	MOV.B	#233, W0
0x578A	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,185 :: 		MapAndPrint(TestIP);
0x578C	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x578E	0x07FBA9  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,186 :: 		end;
0x5790	0x370038  	BRA	L__main37
L__main52:
;ENC624J600_Exampe.mpas,187 :: 		'6' : begin
0x5792	0x200361  	MOV	#54, W1
0x5794	0x90082E  	MOV	[W14+20], W0
0x5796	0xE10001  	CP	W0, W1
0x5798	0x3A000F  	BRA NZ	L__main55
L__main84:
;ENC624J600_Exampe.mpas,188 :: 		TestIP[0] := 132; TestIP[1] := 163; TestIP[2] := 4; TestIP[3] := 101;   // NIST Time Server
0x579A	0x210221  	MOV	#lo_addr(_TestIP), W1
0x579C	0xB3C840  	MOV.B	#132, W0
0x579E	0x784880  	MOV.B	W0, [W1]
0x57A0	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x57A2	0xB3CA30  	MOV.B	#163, W0
0x57A4	0x784880  	MOV.B	W0, [W1]
0x57A6	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x57A8	0xB3C040  	MOV.B	#4, W0
0x57AA	0x784880  	MOV.B	W0, [W1]
0x57AC	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x57AE	0xB3C650  	MOV.B	#101, W0
0x57B0	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,189 :: 		MapAndPrint(TestIP);
0x57B2	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x57B4	0x07FB96  	RCALL	_MapAndPrint
;ENC624J600_Exampe.mpas,190 :: 		end;
0x57B6	0x370025  	BRA	L__main37
L__main55:
;ENC624J600_Exampe.mpas,191 :: 		'7' : begin
0x57B8	0x200371  	MOV	#55, W1
0x57BA	0x90082E  	MOV	[W14+20], W0
0x57BC	0xE10001  	CP	W0, W1
0x57BE	0x3A0002  	BRA NZ	L__main58
L__main85:
;ENC624J600_Exampe.mpas,192 :: 		NtpRequest;
0x57C0	0x07FDD4  	RCALL	_NtpRequest
;ENC624J600_Exampe.mpas,193 :: 		end;
0x57C2	0x37001F  	BRA	L__main37
L__main58:
;ENC624J600_Exampe.mpas,194 :: 		'q' : begin
0x57C4	0x200711  	MOV	#113, W1
0x57C6	0x90082E  	MOV	[W14+20], W0
0x57C8	0xE10001  	CP	W0, W1
0x57CA	0x3A000F  	BRA NZ	L__main61
L__main86:
;ENC624J600_Exampe.mpas,195 :: 		TestIP[0] := 192; TestIP[1] := 168; TestIP[2] := 0; TestIP[3] := 200;
0x57CC	0x210221  	MOV	#lo_addr(_TestIP), W1
0x57CE	0xB3CC00  	MOV.B	#192, W0
0x57D0	0x784880  	MOV.B	W0, [W1]
0x57D2	0x210231  	MOV	#lo_addr(_TestIP+1), W1
0x57D4	0xB3CA80  	MOV.B	#168, W0
0x57D6	0x784880  	MOV.B	W0, [W1]
0x57D8	0x210241  	MOV	#lo_addr(_TestIP+2), W1
0x57DA	0xEF2000  	CLR	W0
0x57DC	0x784880  	MOV.B	W0, [W1]
0x57DE	0x210251  	MOV	#lo_addr(_TestIP+3), W1
0x57E0	0xB3CC80  	MOV.B	#200, W0
0x57E2	0x784880  	MOV.B	W0, [W1]
;ENC624J600_Exampe.mpas,196 :: 		PingAndPrint(TestIP);
0x57E4	0x21022A  	MOV	#lo_addr(_TestIP), W10
0x57E6	0x07FC12  	RCALL	_PingAndPrint
;ENC624J600_Exampe.mpas,197 :: 		end;
0x57E8	0x37000C  	BRA	L__main37
L__main61:
;ENC624J600_Exampe.mpas,198 :: 		'c' : begin
0x57EA	0x200631  	MOV	#99, W1
0x57EC	0x90082E  	MOV	[W14+20], W0
0x57EE	0xE10001  	CP	W0, W1
0x57F0	0x3A0002  	BRA NZ	L__main64
L__main87:
;ENC624J600_Exampe.mpas,199 :: 		Eth_PrintArpCache;
0x57F2	0x07FC7B  	RCALL	_Eth_PrintArpCache
;ENC624J600_Exampe.mpas,200 :: 		end;
0x57F4	0x370006  	BRA	L__main37
L__main64:
;ENC624J600_Exampe.mpas,201 :: 		'd' : begin
0x57F6	0x200641  	MOV	#100, W1
0x57F8	0x90082E  	MOV	[W14+20], W0
0x57FA	0xE10001  	CP	W0, W1
0x57FC	0x3A0002  	BRA NZ	L__main67
L__main88:
;ENC624J600_Exampe.mpas,202 :: 		Eth_PrintPingCache;
0x57FE	0x07FC87  	RCALL	_Eth_PrintPingCache
;ENC624J600_Exampe.mpas,203 :: 		end;
0x5800	0x370000  	BRA	L__main37
L__main67:
L__main37:
;ENC624J600_Exampe.mpas,205 :: 		end
L__main35:
;ENC624J600_Exampe.mpas,206 :: 		end;
0x5802	0x37FF5E  	BRA	L__main28
;ENC624J600_Exampe.mpas,207 :: 		end.
L_end_main:
0x5804	0x7806CF  	POP	W13
0x5806	0x78064F  	POP	W12
0x5808	0x7805CF  	POP	W11
0x580A	0x78054F  	POP	W10
0x580C	0xFA8000  	ULNK
L__main_end_loop:
0x580E	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_PPS_Mapping:
0x5132	0xFA0000  	LNK	#0
;__Lib_PPS_p33EP512MU810.mpas,460 :: 		
;__Lib_PPS_p33EP512MU810.mpas,461 :: 		
0x5134	0x781F8D  	PUSH	W13
0x5136	0x20001D  	MOV	#1, W13
0x5138	0x07EFC7  	RCALL	__Lib_PPS_p33EP512MU810__PPS_Mapping
; Result start address is: 2 (W1)
0x513A	0x780080  	MOV	W0, W1
;__Lib_PPS_p33EP512MU810.mpas,462 :: 		
0x513C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_PPS_Mapping:
0x513E	0x7806CF  	POP	W13
0x5140	0xFA8000  	ULNK
0x5142	0x060000  	RETURN
; end of _PPS_Mapping
__Lib_PPS_p33EP512MU810__PPS_Mapping:
0x30C8	0xFA0002  	LNK	#2
;__Lib_PPS_p33EP512MU810.mpas,218 :: 		
;__Lib_PPS_p33EP512MU810.mpas,219 :: 		
0x30CA	0x200FF0  	MOV	#255, W0
0x30CC	0x980700  	MOV	W0, [W14+0]
;__Lib_PPS_p33EP512MU810.mpas,220 :: 		
0x30CE	0xE15C60  	CP.B	W11, #0
0x30D0	0x3A00BC  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping4
L___Lib_PPS_p33EP512MU810__PPS_Mapping584:
;__Lib_PPS_p33EP512MU810.mpas,222 :: 		
0x30D2	0xE16861  	CP	W13, #1
0x30D4	0x3A0001  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping7
L___Lib_PPS_p33EP512MU810__PPS_Mapping585:
;__Lib_PPS_p33EP512MU810.mpas,223 :: 		
0x30D6	0x07F9B7  	RCALL	_Unlock_IOLOCK
L___Lib_PPS_p33EP512MU810__PPS_Mapping7:
;__Lib_PPS_p33EP512MU810.mpas,225 :: 		
0x30D8	0xB3C400  	MOV.B	#64, W0
0x30DA	0xE15400  	CP.B	W10, W0
0x30DC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping12
L___Lib_PPS_p33EP512MU810__PPS_Mapping586:
0x30DE	0x206800  	MOV	#lo_addr(RPOR0), W0
0x30E0	0x78480C  	MOV.B	W12, [W0]
0x30E2	0x3700B0  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping12:
;__Lib_PPS_p33EP512MU810.mpas,226 :: 		
0x30E4	0xB3C410  	MOV.B	#65, W0
0x30E6	0xE15400  	CP.B	W10, W0
0x30E8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping15
L___Lib_PPS_p33EP512MU810__PPS_Mapping587:
0x30EA	0x206810  	MOV	#lo_addr(RPOR0+1), W0
0x30EC	0x78480C  	MOV.B	W12, [W0]
0x30EE	0x3700AA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping15:
;__Lib_PPS_p33EP512MU810.mpas,227 :: 		
0x30F0	0xB3C420  	MOV.B	#66, W0
0x30F2	0xE15400  	CP.B	W10, W0
0x30F4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping18
L___Lib_PPS_p33EP512MU810__PPS_Mapping588:
0x30F6	0x206820  	MOV	#lo_addr(RPOR1), W0
0x30F8	0x78480C  	MOV.B	W12, [W0]
0x30FA	0x3700A4  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping18:
;__Lib_PPS_p33EP512MU810.mpas,228 :: 		
0x30FC	0xB3C430  	MOV.B	#67, W0
0x30FE	0xE15400  	CP.B	W10, W0
0x3100	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping21
L___Lib_PPS_p33EP512MU810__PPS_Mapping589:
0x3102	0x206830  	MOV	#lo_addr(RPOR1+1), W0
0x3104	0x78480C  	MOV.B	W12, [W0]
0x3106	0x37009E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping21:
;__Lib_PPS_p33EP512MU810.mpas,229 :: 		
0x3108	0xB3C440  	MOV.B	#68, W0
0x310A	0xE15400  	CP.B	W10, W0
0x310C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping24
L___Lib_PPS_p33EP512MU810__PPS_Mapping590:
0x310E	0x206840  	MOV	#lo_addr(RPOR2), W0
0x3110	0x78480C  	MOV.B	W12, [W0]
0x3112	0x370098  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping24:
;__Lib_PPS_p33EP512MU810.mpas,230 :: 		
0x3114	0xB3C450  	MOV.B	#69, W0
0x3116	0xE15400  	CP.B	W10, W0
0x3118	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping27
L___Lib_PPS_p33EP512MU810__PPS_Mapping591:
0x311A	0x206850  	MOV	#lo_addr(RPOR2+1), W0
0x311C	0x78480C  	MOV.B	W12, [W0]
0x311E	0x370092  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping27:
;__Lib_PPS_p33EP512MU810.mpas,231 :: 		
0x3120	0xB3C460  	MOV.B	#70, W0
0x3122	0xE15400  	CP.B	W10, W0
0x3124	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping30
L___Lib_PPS_p33EP512MU810__PPS_Mapping592:
0x3126	0x206860  	MOV	#lo_addr(RPOR3), W0
0x3128	0x78480C  	MOV.B	W12, [W0]
0x312A	0x37008C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping30:
;__Lib_PPS_p33EP512MU810.mpas,232 :: 		
0x312C	0xB3C470  	MOV.B	#71, W0
0x312E	0xE15400  	CP.B	W10, W0
0x3130	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping33
L___Lib_PPS_p33EP512MU810__PPS_Mapping593:
0x3132	0x206870  	MOV	#lo_addr(RPOR3+1), W0
0x3134	0x78480C  	MOV.B	W12, [W0]
0x3136	0x370086  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping33:
;__Lib_PPS_p33EP512MU810.mpas,233 :: 		
0x3138	0xB3C4F0  	MOV.B	#79, W0
0x313A	0xE15400  	CP.B	W10, W0
0x313C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping36
L___Lib_PPS_p33EP512MU810__PPS_Mapping594:
0x313E	0x206880  	MOV	#lo_addr(RPOR4), W0
0x3140	0x78480C  	MOV.B	W12, [W0]
0x3142	0x370080  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping36:
;__Lib_PPS_p33EP512MU810.mpas,234 :: 		
0x3144	0xB3C500  	MOV.B	#80, W0
0x3146	0xE15400  	CP.B	W10, W0
0x3148	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping39
L___Lib_PPS_p33EP512MU810__PPS_Mapping595:
0x314A	0x206890  	MOV	#lo_addr(RPOR4+1), W0
0x314C	0x78480C  	MOV.B	W12, [W0]
0x314E	0x37007A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping39:
;__Lib_PPS_p33EP512MU810.mpas,235 :: 		
0x3150	0xB3C520  	MOV.B	#82, W0
0x3152	0xE15400  	CP.B	W10, W0
0x3154	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping42
L___Lib_PPS_p33EP512MU810__PPS_Mapping596:
0x3156	0x2068A0  	MOV	#lo_addr(RPOR5), W0
0x3158	0x78480C  	MOV.B	W12, [W0]
0x315A	0x370074  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping42:
;__Lib_PPS_p33EP512MU810.mpas,236 :: 		
0x315C	0xB3C540  	MOV.B	#84, W0
0x315E	0xE15400  	CP.B	W10, W0
0x3160	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping45
L___Lib_PPS_p33EP512MU810__PPS_Mapping597:
0x3162	0x2068B0  	MOV	#lo_addr(RPOR5+1), W0
0x3164	0x78480C  	MOV.B	W12, [W0]
0x3166	0x37006E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping45:
;__Lib_PPS_p33EP512MU810.mpas,237 :: 		
0x3168	0xB3C550  	MOV.B	#85, W0
0x316A	0xE15400  	CP.B	W10, W0
0x316C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping48
L___Lib_PPS_p33EP512MU810__PPS_Mapping598:
0x316E	0x2068C0  	MOV	#lo_addr(RPOR6), W0
0x3170	0x78480C  	MOV.B	W12, [W0]
0x3172	0x370068  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping48:
;__Lib_PPS_p33EP512MU810.mpas,238 :: 		
0x3174	0xB3C570  	MOV.B	#87, W0
0x3176	0xE15400  	CP.B	W10, W0
0x3178	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping51
L___Lib_PPS_p33EP512MU810__PPS_Mapping599:
0x317A	0x2068D0  	MOV	#lo_addr(RPOR6+1), W0
0x317C	0x78480C  	MOV.B	W12, [W0]
0x317E	0x370062  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping51:
;__Lib_PPS_p33EP512MU810.mpas,239 :: 		
0x3180	0xB3C600  	MOV.B	#96, W0
0x3182	0xE15400  	CP.B	W10, W0
0x3184	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping54
L___Lib_PPS_p33EP512MU810__PPS_Mapping600:
0x3186	0x2068E0  	MOV	#lo_addr(RPOR7), W0
0x3188	0x78480C  	MOV.B	W12, [W0]
0x318A	0x37005C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping54:
;__Lib_PPS_p33EP512MU810.mpas,240 :: 		
0x318C	0xB3C610  	MOV.B	#97, W0
0x318E	0xE15400  	CP.B	W10, W0
0x3190	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping57
L___Lib_PPS_p33EP512MU810__PPS_Mapping601:
0x3192	0x2068F0  	MOV	#lo_addr(RPOR7+1), W0
0x3194	0x78480C  	MOV.B	W12, [W0]
0x3196	0x370056  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping57:
;__Lib_PPS_p33EP512MU810.mpas,241 :: 		
0x3198	0xB3C620  	MOV.B	#98, W0
0x319A	0xE15400  	CP.B	W10, W0
0x319C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping60
L___Lib_PPS_p33EP512MU810__PPS_Mapping602:
0x319E	0x206900  	MOV	#lo_addr(RPOR8), W0
0x31A0	0x78480C  	MOV.B	W12, [W0]
0x31A2	0x370050  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping60:
;__Lib_PPS_p33EP512MU810.mpas,242 :: 		
0x31A4	0xB3C630  	MOV.B	#99, W0
0x31A6	0xE15400  	CP.B	W10, W0
0x31A8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping63
L___Lib_PPS_p33EP512MU810__PPS_Mapping603:
0x31AA	0x206910  	MOV	#lo_addr(RPOR8+1), W0
0x31AC	0x78480C  	MOV.B	W12, [W0]
0x31AE	0x37004A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping63:
;__Lib_PPS_p33EP512MU810.mpas,243 :: 		
0x31B0	0xB3C640  	MOV.B	#100, W0
0x31B2	0xE15400  	CP.B	W10, W0
0x31B4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping66
L___Lib_PPS_p33EP512MU810__PPS_Mapping604:
0x31B6	0x206920  	MOV	#lo_addr(RPOR9), W0
0x31B8	0x78480C  	MOV.B	W12, [W0]
0x31BA	0x370044  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping66:
;__Lib_PPS_p33EP512MU810.mpas,244 :: 		
0x31BC	0xB3C650  	MOV.B	#101, W0
0x31BE	0xE15400  	CP.B	W10, W0
0x31C0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping69
L___Lib_PPS_p33EP512MU810__PPS_Mapping605:
0x31C2	0x206930  	MOV	#lo_addr(RPOR9+1), W0
0x31C4	0x78480C  	MOV.B	W12, [W0]
0x31C6	0x37003E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping69:
;__Lib_PPS_p33EP512MU810.mpas,245 :: 		
0x31C8	0xB3C680  	MOV.B	#104, W0
0x31CA	0xE15400  	CP.B	W10, W0
0x31CC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping72
L___Lib_PPS_p33EP512MU810__PPS_Mapping606:
0x31CE	0x206960  	MOV	#lo_addr(RPOR11), W0
0x31D0	0x78480C  	MOV.B	W12, [W0]
0x31D2	0x370038  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping72:
;__Lib_PPS_p33EP512MU810.mpas,246 :: 		
0x31D4	0xB3C6C0  	MOV.B	#108, W0
0x31D6	0xE15400  	CP.B	W10, W0
0x31D8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping75
L___Lib_PPS_p33EP512MU810__PPS_Mapping607:
0x31DA	0x206970  	MOV	#lo_addr(RPOR11+1), W0
0x31DC	0x78480C  	MOV.B	W12, [W0]
0x31DE	0x370032  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping75:
;__Lib_PPS_p33EP512MU810.mpas,247 :: 		
0x31E0	0xB3C6D0  	MOV.B	#109, W0
0x31E2	0xE15400  	CP.B	W10, W0
0x31E4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping78
L___Lib_PPS_p33EP512MU810__PPS_Mapping608:
0x31E6	0x206980  	MOV	#lo_addr(RPOR12), W0
0x31E8	0x78480C  	MOV.B	W12, [W0]
0x31EA	0x37002C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping78:
;__Lib_PPS_p33EP512MU810.mpas,248 :: 		
0x31EC	0xB3C700  	MOV.B	#112, W0
0x31EE	0xE15400  	CP.B	W10, W0
0x31F0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping81
L___Lib_PPS_p33EP512MU810__PPS_Mapping609:
0x31F2	0x206990  	MOV	#lo_addr(RPOR12+1), W0
0x31F4	0x78480C  	MOV.B	W12, [W0]
0x31F6	0x370026  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping81:
;__Lib_PPS_p33EP512MU810.mpas,249 :: 		
0x31F8	0xB3C710  	MOV.B	#113, W0
0x31FA	0xE15400  	CP.B	W10, W0
0x31FC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping84
L___Lib_PPS_p33EP512MU810__PPS_Mapping610:
0x31FE	0x2069A0  	MOV	#lo_addr(RPOR13), W0
0x3200	0x78480C  	MOV.B	W12, [W0]
0x3202	0x370020  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping84:
;__Lib_PPS_p33EP512MU810.mpas,250 :: 		
0x3204	0xB3C760  	MOV.B	#118, W0
0x3206	0xE15400  	CP.B	W10, W0
0x3208	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping87
L___Lib_PPS_p33EP512MU810__PPS_Mapping611:
0x320A	0x2069B0  	MOV	#lo_addr(RPOR13+1), W0
0x320C	0x78480C  	MOV.B	W12, [W0]
0x320E	0x37001A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping87:
;__Lib_PPS_p33EP512MU810.mpas,251 :: 		
0x3210	0xB3C780  	MOV.B	#120, W0
0x3212	0xE15400  	CP.B	W10, W0
0x3214	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping90
L___Lib_PPS_p33EP512MU810__PPS_Mapping612:
0x3216	0x2069C0  	MOV	#lo_addr(RPOR14), W0
0x3218	0x78480C  	MOV.B	W12, [W0]
0x321A	0x370014  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping90:
;__Lib_PPS_p33EP512MU810.mpas,252 :: 		
0x321C	0xB3C7D0  	MOV.B	#125, W0
0x321E	0xE15400  	CP.B	W10, W0
0x3220	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping93
L___Lib_PPS_p33EP512MU810__PPS_Mapping613:
0x3222	0x2069D0  	MOV	#lo_addr(RPOR14+1), W0
0x3224	0x78480C  	MOV.B	W12, [W0]
0x3226	0x37000E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping93:
;__Lib_PPS_p33EP512MU810.mpas,253 :: 		
0x3228	0xB3C7E0  	MOV.B	#126, W0
0x322A	0xE15400  	CP.B	W10, W0
0x322C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping96
L___Lib_PPS_p33EP512MU810__PPS_Mapping614:
0x322E	0x2069E0  	MOV	#lo_addr(RPOR15), W0
0x3230	0x78480C  	MOV.B	W12, [W0]
0x3232	0x370008  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping96:
;__Lib_PPS_p33EP512MU810.mpas,254 :: 		
0x3234	0xB3C7F0  	MOV.B	#127, W0
0x3236	0xE15400  	CP.B	W10, W0
0x3238	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping99
L___Lib_PPS_p33EP512MU810__PPS_Mapping615:
0x323A	0x2069F0  	MOV	#lo_addr(RPOR15+1), W0
0x323C	0x78480C  	MOV.B	W12, [W0]
;__Lib_PPS_p33EP512MU810.mpas,255 :: 		
0x323E	0x370002  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping9
L___Lib_PPS_p33EP512MU810__PPS_Mapping99:
0x3240	0xEF2000  	CLR	W0
0x3242	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_p33EP512MU810__PPS_Mapping9:
;__Lib_PPS_p33EP512MU810.mpas,257 :: 		
0x3244	0xE16861  	CP	W13, #1
0x3246	0x3A0001  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping101
L___Lib_PPS_p33EP512MU810__PPS_Mapping616:
;__Lib_PPS_p33EP512MU810.mpas,258 :: 		
0x3248	0x07F907  	RCALL	_Lock_IOLOCK
L___Lib_PPS_p33EP512MU810__PPS_Mapping101:
;__Lib_PPS_p33EP512MU810.mpas,259 :: 		
L___Lib_PPS_p33EP512MU810__PPS_Mapping4:
;__Lib_PPS_p33EP512MU810.mpas,261 :: 		
0x324A	0xE15C61  	CP.B	W11, #1
0x324C	0x3A01BC  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping104
L___Lib_PPS_p33EP512MU810__PPS_Mapping617:
;__Lib_PPS_p33EP512MU810.mpas,263 :: 		
0x324E	0xE16861  	CP	W13, #1
0x3250	0x3A0001  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping107
L___Lib_PPS_p33EP512MU810__PPS_Mapping618:
;__Lib_PPS_p33EP512MU810.mpas,264 :: 		
0x3252	0x07F8F9  	RCALL	_Unlock_IOLOCK
L___Lib_PPS_p33EP512MU810__PPS_Mapping107:
;__Lib_PPS_p33EP512MU810.mpas,267 :: 		
0x3254	0xE16460  	CP.B	W12, #0
0x3256	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping112
L___Lib_PPS_p33EP512MU810__PPS_Mapping619:
0x3258	0x206A10  	MOV	#lo_addr(RPINR0+1), W0
0x325A	0x78480A  	MOV.B	W10, [W0]
0x325C	0x3701B1  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping112:
;__Lib_PPS_p33EP512MU810.mpas,268 :: 		
0x325E	0xE16461  	CP.B	W12, #1
0x3260	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping115
L___Lib_PPS_p33EP512MU810__PPS_Mapping620:
0x3262	0x206A20  	MOV	#lo_addr(RPINR1), W0
0x3264	0x78480A  	MOV.B	W10, [W0]
0x3266	0x3701AC  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping115:
;__Lib_PPS_p33EP512MU810.mpas,269 :: 		
0x3268	0xE16462  	CP.B	W12, #2
0x326A	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping118
L___Lib_PPS_p33EP512MU810__PPS_Mapping621:
0x326C	0x206A30  	MOV	#lo_addr(RPINR1+1), W0
0x326E	0x78480A  	MOV.B	W10, [W0]
0x3270	0x3701A7  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping118:
;__Lib_PPS_p33EP512MU810.mpas,270 :: 		
0x3272	0xE16463  	CP.B	W12, #3
0x3274	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping121
L___Lib_PPS_p33EP512MU810__PPS_Mapping622:
0x3276	0x206A40  	MOV	#lo_addr(RPINR2), W0
0x3278	0x78480A  	MOV.B	W10, [W0]
0x327A	0x3701A2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping121:
;__Lib_PPS_p33EP512MU810.mpas,271 :: 		
0x327C	0xE16464  	CP.B	W12, #4
0x327E	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping124
L___Lib_PPS_p33EP512MU810__PPS_Mapping623:
0x3280	0x206A60  	MOV	#lo_addr(RPINR3), W0
0x3282	0x78480A  	MOV.B	W10, [W0]
0x3284	0x37019D  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping124:
;__Lib_PPS_p33EP512MU810.mpas,272 :: 		
0x3286	0xE16465  	CP.B	W12, #5
0x3288	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping127
L___Lib_PPS_p33EP512MU810__PPS_Mapping624:
0x328A	0x206A70  	MOV	#lo_addr(RPINR3+1), W0
0x328C	0x78480A  	MOV.B	W10, [W0]
0x328E	0x370198  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping127:
;__Lib_PPS_p33EP512MU810.mpas,273 :: 		
0x3290	0xE16466  	CP.B	W12, #6
0x3292	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping130
L___Lib_PPS_p33EP512MU810__PPS_Mapping625:
0x3294	0x206A80  	MOV	#lo_addr(RPINR4), W0
0x3296	0x78480A  	MOV.B	W10, [W0]
0x3298	0x370193  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping130:
;__Lib_PPS_p33EP512MU810.mpas,274 :: 		
0x329A	0xE16467  	CP.B	W12, #7
0x329C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping133
L___Lib_PPS_p33EP512MU810__PPS_Mapping626:
0x329E	0x206A90  	MOV	#lo_addr(RPINR4+1), W0
0x32A0	0x78480A  	MOV.B	W10, [W0]
0x32A2	0x37018E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping133:
;__Lib_PPS_p33EP512MU810.mpas,275 :: 		
0x32A4	0xE16468  	CP.B	W12, #8
0x32A6	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping136
L___Lib_PPS_p33EP512MU810__PPS_Mapping627:
0x32A8	0x206AA0  	MOV	#lo_addr(RPINR5), W0
0x32AA	0x78480A  	MOV.B	W10, [W0]
0x32AC	0x370189  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping136:
;__Lib_PPS_p33EP512MU810.mpas,276 :: 		
0x32AE	0xE16469  	CP.B	W12, #9
0x32B0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping139
L___Lib_PPS_p33EP512MU810__PPS_Mapping628:
0x32B2	0x206AB0  	MOV	#lo_addr(RPINR5+1), W0
0x32B4	0x78480A  	MOV.B	W10, [W0]
0x32B6	0x370184  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping139:
;__Lib_PPS_p33EP512MU810.mpas,277 :: 		
0x32B8	0xE1646A  	CP.B	W12, #10
0x32BA	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping142
L___Lib_PPS_p33EP512MU810__PPS_Mapping629:
0x32BC	0x206AC0  	MOV	#lo_addr(RPINR6), W0
0x32BE	0x78480A  	MOV.B	W10, [W0]
0x32C0	0x37017F  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping142:
;__Lib_PPS_p33EP512MU810.mpas,278 :: 		
0x32C2	0xE1646B  	CP.B	W12, #11
0x32C4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping145
L___Lib_PPS_p33EP512MU810__PPS_Mapping630:
0x32C6	0x206AD0  	MOV	#lo_addr(RPINR6+1), W0
0x32C8	0x78480A  	MOV.B	W10, [W0]
0x32CA	0x37017A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping145:
;__Lib_PPS_p33EP512MU810.mpas,279 :: 		
0x32CC	0xE1646C  	CP.B	W12, #12
0x32CE	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping148
L___Lib_PPS_p33EP512MU810__PPS_Mapping631:
0x32D0	0x206AE0  	MOV	#lo_addr(RPINR7), W0
0x32D2	0x78480A  	MOV.B	W10, [W0]
0x32D4	0x370175  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping148:
;__Lib_PPS_p33EP512MU810.mpas,280 :: 		
0x32D6	0xE1646D  	CP.B	W12, #13
0x32D8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping151
L___Lib_PPS_p33EP512MU810__PPS_Mapping632:
0x32DA	0x206AF0  	MOV	#lo_addr(RPINR7+1), W0
0x32DC	0x78480A  	MOV.B	W10, [W0]
0x32DE	0x370170  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping151:
;__Lib_PPS_p33EP512MU810.mpas,281 :: 		
0x32E0	0xE1646E  	CP.B	W12, #14
0x32E2	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping154
L___Lib_PPS_p33EP512MU810__PPS_Mapping633:
0x32E4	0x206B00  	MOV	#lo_addr(RPINR8), W0
0x32E6	0x78480A  	MOV.B	W10, [W0]
0x32E8	0x37016B  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping154:
;__Lib_PPS_p33EP512MU810.mpas,282 :: 		
0x32EA	0xE1646F  	CP.B	W12, #15
0x32EC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping157
L___Lib_PPS_p33EP512MU810__PPS_Mapping634:
0x32EE	0x206B10  	MOV	#lo_addr(RPINR8+1), W0
0x32F0	0x78480A  	MOV.B	W10, [W0]
0x32F2	0x370166  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping157:
;__Lib_PPS_p33EP512MU810.mpas,283 :: 		
0x32F4	0xE16470  	CP.B	W12, #16
0x32F6	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping160
L___Lib_PPS_p33EP512MU810__PPS_Mapping635:
0x32F8	0x206B20  	MOV	#lo_addr(RPINR9), W0
0x32FA	0x78480A  	MOV.B	W10, [W0]
0x32FC	0x370161  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping160:
;__Lib_PPS_p33EP512MU810.mpas,284 :: 		
0x32FE	0xE16471  	CP.B	W12, #17
0x3300	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping163
L___Lib_PPS_p33EP512MU810__PPS_Mapping636:
0x3302	0x206B30  	MOV	#lo_addr(RPINR9+1), W0
0x3304	0x78480A  	MOV.B	W10, [W0]
0x3306	0x37015C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping163:
;__Lib_PPS_p33EP512MU810.mpas,285 :: 		
0x3308	0xE16472  	CP.B	W12, #18
0x330A	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping166
L___Lib_PPS_p33EP512MU810__PPS_Mapping637:
0x330C	0x206B40  	MOV	#lo_addr(RPINR10), W0
0x330E	0x78480A  	MOV.B	W10, [W0]
0x3310	0x370157  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping166:
;__Lib_PPS_p33EP512MU810.mpas,286 :: 		
0x3312	0xE16473  	CP.B	W12, #19
0x3314	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping169
L___Lib_PPS_p33EP512MU810__PPS_Mapping638:
0x3316	0x206B50  	MOV	#lo_addr(RPINR10+1), W0
0x3318	0x78480A  	MOV.B	W10, [W0]
0x331A	0x370152  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping169:
;__Lib_PPS_p33EP512MU810.mpas,287 :: 		
0x331C	0xE16474  	CP.B	W12, #20
0x331E	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping172
L___Lib_PPS_p33EP512MU810__PPS_Mapping639:
0x3320	0x206B60  	MOV	#lo_addr(RPINR11), W0
0x3322	0x78480A  	MOV.B	W10, [W0]
0x3324	0x37014D  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping172:
;__Lib_PPS_p33EP512MU810.mpas,288 :: 		
0x3326	0xE16475  	CP.B	W12, #21
0x3328	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping175
L___Lib_PPS_p33EP512MU810__PPS_Mapping640:
0x332A	0x206B70  	MOV	#lo_addr(RPINR11+1), W0
0x332C	0x78480A  	MOV.B	W10, [W0]
0x332E	0x370148  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping175:
;__Lib_PPS_p33EP512MU810.mpas,289 :: 		
0x3330	0xE16476  	CP.B	W12, #22
0x3332	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping178
L___Lib_PPS_p33EP512MU810__PPS_Mapping641:
0x3334	0x206B80  	MOV	#lo_addr(RPINR12), W0
0x3336	0x78480A  	MOV.B	W10, [W0]
0x3338	0x370143  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping178:
;__Lib_PPS_p33EP512MU810.mpas,290 :: 		
0x333A	0xE16477  	CP.B	W12, #23
0x333C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping181
L___Lib_PPS_p33EP512MU810__PPS_Mapping642:
0x333E	0x206B90  	MOV	#lo_addr(RPINR12+1), W0
0x3340	0x78480A  	MOV.B	W10, [W0]
0x3342	0x37013E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping181:
;__Lib_PPS_p33EP512MU810.mpas,291 :: 		
0x3344	0xE16478  	CP.B	W12, #24
0x3346	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping184
L___Lib_PPS_p33EP512MU810__PPS_Mapping643:
0x3348	0x206BA0  	MOV	#lo_addr(RPINR13), W0
0x334A	0x78480A  	MOV.B	W10, [W0]
0x334C	0x370139  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping184:
;__Lib_PPS_p33EP512MU810.mpas,292 :: 		
0x334E	0xE16479  	CP.B	W12, #25
0x3350	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping187
L___Lib_PPS_p33EP512MU810__PPS_Mapping644:
0x3352	0x206BB0  	MOV	#lo_addr(RPINR13+1), W0
0x3354	0x78480A  	MOV.B	W10, [W0]
0x3356	0x370134  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping187:
;__Lib_PPS_p33EP512MU810.mpas,293 :: 		
0x3358	0xE1647A  	CP.B	W12, #26
0x335A	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping190
L___Lib_PPS_p33EP512MU810__PPS_Mapping645:
0x335C	0x206BC0  	MOV	#lo_addr(RPINR14), W0
0x335E	0x78480A  	MOV.B	W10, [W0]
0x3360	0x37012F  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping190:
;__Lib_PPS_p33EP512MU810.mpas,294 :: 		
0x3362	0xE1647B  	CP.B	W12, #27
0x3364	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping193
L___Lib_PPS_p33EP512MU810__PPS_Mapping646:
0x3366	0x206BD0  	MOV	#lo_addr(RPINR14+1), W0
0x3368	0x78480A  	MOV.B	W10, [W0]
0x336A	0x37012A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping193:
;__Lib_PPS_p33EP512MU810.mpas,295 :: 		
0x336C	0xE1647C  	CP.B	W12, #28
0x336E	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping196
L___Lib_PPS_p33EP512MU810__PPS_Mapping647:
0x3370	0x206BE0  	MOV	#lo_addr(RPINR15), W0
0x3372	0x78480A  	MOV.B	W10, [W0]
0x3374	0x370125  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping196:
;__Lib_PPS_p33EP512MU810.mpas,296 :: 		
0x3376	0xE1647D  	CP.B	W12, #29
0x3378	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping199
L___Lib_PPS_p33EP512MU810__PPS_Mapping648:
0x337A	0x206BF0  	MOV	#lo_addr(RPINR15+1), W0
0x337C	0x78480A  	MOV.B	W10, [W0]
0x337E	0x370120  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping199:
;__Lib_PPS_p33EP512MU810.mpas,297 :: 		
0x3380	0xE1647E  	CP.B	W12, #30
0x3382	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping202
L___Lib_PPS_p33EP512MU810__PPS_Mapping649:
0x3384	0x206C00  	MOV	#lo_addr(RPINR16), W0
0x3386	0x78480A  	MOV.B	W10, [W0]
0x3388	0x37011B  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping202:
;__Lib_PPS_p33EP512MU810.mpas,298 :: 		
0x338A	0xE1647F  	CP.B	W12, #31
0x338C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping205
L___Lib_PPS_p33EP512MU810__PPS_Mapping650:
0x338E	0x206C10  	MOV	#lo_addr(RPINR16+1), W0
0x3390	0x78480A  	MOV.B	W10, [W0]
0x3392	0x370116  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping205:
;__Lib_PPS_p33EP512MU810.mpas,299 :: 		
0x3394	0xB3C200  	MOV.B	#32, W0
0x3396	0xE16400  	CP.B	W12, W0
0x3398	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping208
L___Lib_PPS_p33EP512MU810__PPS_Mapping651:
0x339A	0x206C20  	MOV	#lo_addr(RPINR17), W0
0x339C	0x78480A  	MOV.B	W10, [W0]
0x339E	0x370110  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping208:
;__Lib_PPS_p33EP512MU810.mpas,300 :: 		
0x33A0	0xB3C210  	MOV.B	#33, W0
0x33A2	0xE16400  	CP.B	W12, W0
0x33A4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping211
L___Lib_PPS_p33EP512MU810__PPS_Mapping652:
0x33A6	0x206C30  	MOV	#lo_addr(RPINR17+1), W0
0x33A8	0x78480A  	MOV.B	W10, [W0]
0x33AA	0x37010A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping211:
;__Lib_PPS_p33EP512MU810.mpas,301 :: 		
0x33AC	0xB3C220  	MOV.B	#34, W0
0x33AE	0xE16400  	CP.B	W12, W0
0x33B0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping214
L___Lib_PPS_p33EP512MU810__PPS_Mapping653:
0x33B2	0x206C40  	MOV	#lo_addr(RPINR18), W0
0x33B4	0x78480A  	MOV.B	W10, [W0]
0x33B6	0x370104  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping214:
;__Lib_PPS_p33EP512MU810.mpas,302 :: 		
0x33B8	0xB3C230  	MOV.B	#35, W0
0x33BA	0xE16400  	CP.B	W12, W0
0x33BC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping217
L___Lib_PPS_p33EP512MU810__PPS_Mapping654:
0x33BE	0x206C50  	MOV	#lo_addr(RPINR18+1), W0
0x33C0	0x78480A  	MOV.B	W10, [W0]
0x33C2	0x3700FE  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping217:
;__Lib_PPS_p33EP512MU810.mpas,303 :: 		
0x33C4	0xB3C240  	MOV.B	#36, W0
0x33C6	0xE16400  	CP.B	W12, W0
0x33C8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping220
L___Lib_PPS_p33EP512MU810__PPS_Mapping655:
0x33CA	0x206C60  	MOV	#lo_addr(RPINR19), W0
0x33CC	0x78480A  	MOV.B	W10, [W0]
0x33CE	0x3700F8  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping220:
;__Lib_PPS_p33EP512MU810.mpas,304 :: 		
0x33D0	0xB3C250  	MOV.B	#37, W0
0x33D2	0xE16400  	CP.B	W12, W0
0x33D4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping223
L___Lib_PPS_p33EP512MU810__PPS_Mapping656:
0x33D6	0x206C70  	MOV	#lo_addr(RPINR19+1), W0
0x33D8	0x78480A  	MOV.B	W10, [W0]
0x33DA	0x3700F2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping223:
;__Lib_PPS_p33EP512MU810.mpas,305 :: 		
0x33DC	0xB3C260  	MOV.B	#38, W0
0x33DE	0xE16400  	CP.B	W12, W0
0x33E0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping226
L___Lib_PPS_p33EP512MU810__PPS_Mapping657:
0x33E2	0x206C80  	MOV	#lo_addr(RPINR20), W0
0x33E4	0x78480A  	MOV.B	W10, [W0]
0x33E6	0x3700EC  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping226:
;__Lib_PPS_p33EP512MU810.mpas,306 :: 		
0x33E8	0xB3C270  	MOV.B	#39, W0
0x33EA	0xE16400  	CP.B	W12, W0
0x33EC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping229
L___Lib_PPS_p33EP512MU810__PPS_Mapping658:
0x33EE	0x206C90  	MOV	#lo_addr(RPINR20+1), W0
0x33F0	0x78480A  	MOV.B	W10, [W0]
0x33F2	0x3700E6  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping229:
;__Lib_PPS_p33EP512MU810.mpas,307 :: 		
0x33F4	0xB3C280  	MOV.B	#40, W0
0x33F6	0xE16400  	CP.B	W12, W0
0x33F8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping232
L___Lib_PPS_p33EP512MU810__PPS_Mapping659:
0x33FA	0x206CA0  	MOV	#lo_addr(RPINR21), W0
0x33FC	0x78480A  	MOV.B	W10, [W0]
0x33FE	0x3700E0  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping232:
;__Lib_PPS_p33EP512MU810.mpas,308 :: 		
0x3400	0xB3C290  	MOV.B	#41, W0
0x3402	0xE16400  	CP.B	W12, W0
0x3404	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping235
L___Lib_PPS_p33EP512MU810__PPS_Mapping660:
0x3406	0x206CE0  	MOV	#lo_addr(RPINR23), W0
0x3408	0x78480A  	MOV.B	W10, [W0]
0x340A	0x3700DA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping235:
;__Lib_PPS_p33EP512MU810.mpas,309 :: 		
0x340C	0xB3C2A0  	MOV.B	#42, W0
0x340E	0xE16400  	CP.B	W12, W0
0x3410	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping238
L___Lib_PPS_p33EP512MU810__PPS_Mapping661:
0x3412	0x206D00  	MOV	#lo_addr(RPINR24), W0
0x3414	0x78480A  	MOV.B	W10, [W0]
0x3416	0x3700D4  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping238:
;__Lib_PPS_p33EP512MU810.mpas,310 :: 		
0x3418	0xB3C2B0  	MOV.B	#43, W0
0x341A	0xE16400  	CP.B	W12, W0
0x341C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping241
L___Lib_PPS_p33EP512MU810__PPS_Mapping662:
0x341E	0x206D10  	MOV	#lo_addr(RPINR24+1), W0
0x3420	0x78480A  	MOV.B	W10, [W0]
0x3422	0x3700CE  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping241:
;__Lib_PPS_p33EP512MU810.mpas,311 :: 		
0x3424	0xB3C2C0  	MOV.B	#44, W0
0x3426	0xE16400  	CP.B	W12, W0
0x3428	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping244
L___Lib_PPS_p33EP512MU810__PPS_Mapping663:
0x342A	0x206D20  	MOV	#lo_addr(RPINR25), W0
0x342C	0x78480A  	MOV.B	W10, [W0]
0x342E	0x3700C8  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping244:
;__Lib_PPS_p33EP512MU810.mpas,312 :: 		
0x3430	0xB3C2D0  	MOV.B	#45, W0
0x3432	0xE16400  	CP.B	W12, W0
0x3434	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping247
L___Lib_PPS_p33EP512MU810__PPS_Mapping664:
0x3436	0x206D40  	MOV	#lo_addr(RPINR26), W0
0x3438	0x78480A  	MOV.B	W10, [W0]
0x343A	0x3700C2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping247:
;__Lib_PPS_p33EP512MU810.mpas,313 :: 		
0x343C	0xB3C2E0  	MOV.B	#46, W0
0x343E	0xE16400  	CP.B	W12, W0
0x3440	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping250
L___Lib_PPS_p33EP512MU810__PPS_Mapping665:
0x3442	0x206D50  	MOV	#lo_addr(RPINR26+1), W0
0x3444	0x78480A  	MOV.B	W10, [W0]
0x3446	0x3700BC  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping250:
;__Lib_PPS_p33EP512MU810.mpas,314 :: 		
0x3448	0xB3C2F0  	MOV.B	#47, W0
0x344A	0xE16400  	CP.B	W12, W0
0x344C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping253
L___Lib_PPS_p33EP512MU810__PPS_Mapping666:
0x344E	0x206D60  	MOV	#lo_addr(RPINR27), W0
0x3450	0x78480A  	MOV.B	W10, [W0]
0x3452	0x3700B6  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping253:
;__Lib_PPS_p33EP512MU810.mpas,315 :: 		
0x3454	0xB3C300  	MOV.B	#48, W0
0x3456	0xE16400  	CP.B	W12, W0
0x3458	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping256
L___Lib_PPS_p33EP512MU810__PPS_Mapping667:
0x345A	0x206D70  	MOV	#lo_addr(RPINR27+1), W0
0x345C	0x78480A  	MOV.B	W10, [W0]
0x345E	0x3700B0  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping256:
;__Lib_PPS_p33EP512MU810.mpas,316 :: 		
0x3460	0xB3C310  	MOV.B	#49, W0
0x3462	0xE16400  	CP.B	W12, W0
0x3464	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping259
L___Lib_PPS_p33EP512MU810__PPS_Mapping668:
0x3466	0x206D80  	MOV	#lo_addr(RPINR28), W0
0x3468	0x78480A  	MOV.B	W10, [W0]
0x346A	0x3700AA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping259:
;__Lib_PPS_p33EP512MU810.mpas,317 :: 		
0x346C	0xB3C320  	MOV.B	#50, W0
0x346E	0xE16400  	CP.B	W12, W0
0x3470	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping262
L___Lib_PPS_p33EP512MU810__PPS_Mapping669:
0x3472	0x206D90  	MOV	#lo_addr(RPINR28+1), W0
0x3474	0x78480A  	MOV.B	W10, [W0]
0x3476	0x3700A4  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping262:
;__Lib_PPS_p33EP512MU810.mpas,318 :: 		
0x3478	0xB3C330  	MOV.B	#51, W0
0x347A	0xE16400  	CP.B	W12, W0
0x347C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping265
L___Lib_PPS_p33EP512MU810__PPS_Mapping670:
0x347E	0x206DA0  	MOV	#lo_addr(RPINR29), W0
0x3480	0x78480A  	MOV.B	W10, [W0]
0x3482	0x37009E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping265:
;__Lib_PPS_p33EP512MU810.mpas,319 :: 		
0x3484	0xB3C340  	MOV.B	#52, W0
0x3486	0xE16400  	CP.B	W12, W0
0x3488	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping268
L___Lib_PPS_p33EP512MU810__PPS_Mapping671:
0x348A	0x206DB0  	MOV	#lo_addr(RPINR29+1), W0
0x348C	0x78480A  	MOV.B	W10, [W0]
0x348E	0x370098  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping268:
;__Lib_PPS_p33EP512MU810.mpas,320 :: 		
0x3490	0xB3C350  	MOV.B	#53, W0
0x3492	0xE16400  	CP.B	W12, W0
0x3494	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping271
L___Lib_PPS_p33EP512MU810__PPS_Mapping672:
0x3496	0x206DC0  	MOV	#lo_addr(RPINR30), W0
0x3498	0x78480A  	MOV.B	W10, [W0]
0x349A	0x370092  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping271:
;__Lib_PPS_p33EP512MU810.mpas,321 :: 		
0x349C	0xB3C360  	MOV.B	#54, W0
0x349E	0xE16400  	CP.B	W12, W0
0x34A0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping274
L___Lib_PPS_p33EP512MU810__PPS_Mapping673:
0x34A2	0x206DE0  	MOV	#lo_addr(RPINR31), W0
0x34A4	0x78480A  	MOV.B	W10, [W0]
0x34A6	0x37008C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping274:
;__Lib_PPS_p33EP512MU810.mpas,322 :: 		
0x34A8	0xB3C370  	MOV.B	#55, W0
0x34AA	0xE16400  	CP.B	W12, W0
0x34AC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping277
L___Lib_PPS_p33EP512MU810__PPS_Mapping674:
0x34AE	0x206DF0  	MOV	#lo_addr(RPINR31+1), W0
0x34B0	0x78480A  	MOV.B	W10, [W0]
0x34B2	0x370086  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping277:
;__Lib_PPS_p33EP512MU810.mpas,323 :: 		
0x34B4	0xB3C380  	MOV.B	#56, W0
0x34B6	0xE16400  	CP.B	W12, W0
0x34B8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping280
L___Lib_PPS_p33EP512MU810__PPS_Mapping675:
0x34BA	0x206E00  	MOV	#lo_addr(RPINR32), W0
0x34BC	0x78480A  	MOV.B	W10, [W0]
0x34BE	0x370080  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping280:
;__Lib_PPS_p33EP512MU810.mpas,324 :: 		
0x34C0	0xB3C390  	MOV.B	#57, W0
0x34C2	0xE16400  	CP.B	W12, W0
0x34C4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping283
L___Lib_PPS_p33EP512MU810__PPS_Mapping676:
0x34C6	0x206E20  	MOV	#lo_addr(RPINR33), W0
0x34C8	0x78480A  	MOV.B	W10, [W0]
0x34CA	0x37007A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping283:
;__Lib_PPS_p33EP512MU810.mpas,325 :: 		
0x34CC	0xB3C3A0  	MOV.B	#58, W0
0x34CE	0xE16400  	CP.B	W12, W0
0x34D0	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping286
L___Lib_PPS_p33EP512MU810__PPS_Mapping677:
0x34D2	0x206E30  	MOV	#lo_addr(RPINR33+1), W0
0x34D4	0x78480A  	MOV.B	W10, [W0]
0x34D6	0x370074  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping286:
;__Lib_PPS_p33EP512MU810.mpas,326 :: 		
0x34D8	0xB3C3B0  	MOV.B	#59, W0
0x34DA	0xE16400  	CP.B	W12, W0
0x34DC	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping289
L___Lib_PPS_p33EP512MU810__PPS_Mapping678:
0x34DE	0x206E40  	MOV	#lo_addr(RPINR34), W0
0x34E0	0x78480A  	MOV.B	W10, [W0]
0x34E2	0x37006E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping289:
;__Lib_PPS_p33EP512MU810.mpas,327 :: 		
0x34E4	0xB3C3C0  	MOV.B	#60, W0
0x34E6	0xE16400  	CP.B	W12, W0
0x34E8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping292
L___Lib_PPS_p33EP512MU810__PPS_Mapping679:
0x34EA	0x206E50  	MOV	#lo_addr(RPINR34+1), W0
0x34EC	0x78480A  	MOV.B	W10, [W0]
0x34EE	0x370068  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping292:
;__Lib_PPS_p33EP512MU810.mpas,328 :: 		
0x34F0	0xB3C3D0  	MOV.B	#61, W0
0x34F2	0xE16400  	CP.B	W12, W0
0x34F4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping295
L___Lib_PPS_p33EP512MU810__PPS_Mapping680:
0x34F6	0x206E60  	MOV	#lo_addr(RPINR35), W0
0x34F8	0x78480A  	MOV.B	W10, [W0]
0x34FA	0x370062  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping295:
;__Lib_PPS_p33EP512MU810.mpas,329 :: 		
0x34FC	0xB3C3E0  	MOV.B	#62, W0
0x34FE	0xE16400  	CP.B	W12, W0
0x3500	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping298
L___Lib_PPS_p33EP512MU810__PPS_Mapping681:
0x3502	0x206E70  	MOV	#lo_addr(RPINR35+1), W0
0x3504	0x78480A  	MOV.B	W10, [W0]
0x3506	0x37005C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping298:
;__Lib_PPS_p33EP512MU810.mpas,330 :: 		
0x3508	0xB3C3F0  	MOV.B	#63, W0
0x350A	0xE16400  	CP.B	W12, W0
0x350C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping301
L___Lib_PPS_p33EP512MU810__PPS_Mapping682:
0x350E	0x206E80  	MOV	#lo_addr(RPINR36), W0
0x3510	0x78480A  	MOV.B	W10, [W0]
0x3512	0x370056  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping301:
;__Lib_PPS_p33EP512MU810.mpas,331 :: 		
0x3514	0xB3C400  	MOV.B	#64, W0
0x3516	0xE16400  	CP.B	W12, W0
0x3518	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping304
L___Lib_PPS_p33EP512MU810__PPS_Mapping683:
0x351A	0x206E90  	MOV	#lo_addr(RPINR36+1), W0
0x351C	0x78480A  	MOV.B	W10, [W0]
0x351E	0x370050  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping304:
;__Lib_PPS_p33EP512MU810.mpas,332 :: 		
0x3520	0xB3C410  	MOV.B	#65, W0
0x3522	0xE16400  	CP.B	W12, W0
0x3524	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping307
L___Lib_PPS_p33EP512MU810__PPS_Mapping684:
0x3526	0x206EA0  	MOV	#lo_addr(RPINR37), W0
0x3528	0x78480A  	MOV.B	W10, [W0]
0x352A	0x37004A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping307:
;__Lib_PPS_p33EP512MU810.mpas,333 :: 		
0x352C	0xB3C420  	MOV.B	#66, W0
0x352E	0xE16400  	CP.B	W12, W0
0x3530	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping310
L___Lib_PPS_p33EP512MU810__PPS_Mapping685:
0x3532	0x206F40  	MOV	#lo_addr(RPINR42), W0
0x3534	0x78480A  	MOV.B	W10, [W0]
0x3536	0x370044  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping310:
;__Lib_PPS_p33EP512MU810.mpas,334 :: 		
0x3538	0xB3C430  	MOV.B	#67, W0
0x353A	0xE16400  	CP.B	W12, W0
0x353C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping313
L___Lib_PPS_p33EP512MU810__PPS_Mapping686:
0x353E	0x206F50  	MOV	#lo_addr(RPINR42+1), W0
0x3540	0x78480A  	MOV.B	W10, [W0]
0x3542	0x37003E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping313:
;__Lib_PPS_p33EP512MU810.mpas,335 :: 		
0x3544	0xB3C440  	MOV.B	#68, W0
0x3546	0xE16400  	CP.B	W12, W0
0x3548	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping316
L___Lib_PPS_p33EP512MU810__PPS_Mapping687:
0x354A	0x206F60  	MOV	#lo_addr(RPINR43), W0
0x354C	0x78480A  	MOV.B	W10, [W0]
0x354E	0x370038  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping316:
;__Lib_PPS_p33EP512MU810.mpas,336 :: 		
0x3550	0xB3C450  	MOV.B	#69, W0
0x3552	0xE16400  	CP.B	W12, W0
0x3554	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping319
L___Lib_PPS_p33EP512MU810__PPS_Mapping688:
0x3556	0x206ED0  	MOV	#lo_addr(RPINR38+1), W0
0x3558	0x78480A  	MOV.B	W10, [W0]
0x355A	0x370032  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping319:
;__Lib_PPS_p33EP512MU810.mpas,337 :: 		
0x355C	0xB3C460  	MOV.B	#70, W0
0x355E	0xE16400  	CP.B	W12, W0
0x3560	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping322
L___Lib_PPS_p33EP512MU810__PPS_Mapping689:
0x3562	0x206EE0  	MOV	#lo_addr(RPINR39), W0
0x3564	0x78480A  	MOV.B	W10, [W0]
0x3566	0x37002C  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping322:
;__Lib_PPS_p33EP512MU810.mpas,338 :: 		
0x3568	0xB3C470  	MOV.B	#71, W0
0x356A	0xE16400  	CP.B	W12, W0
0x356C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping325
L___Lib_PPS_p33EP512MU810__PPS_Mapping690:
0x356E	0x206EF0  	MOV	#lo_addr(RPINR39+1), W0
0x3570	0x78480A  	MOV.B	W10, [W0]
0x3572	0x370026  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping325:
;__Lib_PPS_p33EP512MU810.mpas,339 :: 		
0x3574	0xB3C480  	MOV.B	#72, W0
0x3576	0xE16400  	CP.B	W12, W0
0x3578	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping328
L___Lib_PPS_p33EP512MU810__PPS_Mapping691:
0x357A	0x206F00  	MOV	#lo_addr(RPINR40), W0
0x357C	0x78480A  	MOV.B	W10, [W0]
0x357E	0x370020  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping328:
;__Lib_PPS_p33EP512MU810.mpas,340 :: 		
0x3580	0xB3C490  	MOV.B	#73, W0
0x3582	0xE16400  	CP.B	W12, W0
0x3584	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping331
L___Lib_PPS_p33EP512MU810__PPS_Mapping692:
0x3586	0x206F10  	MOV	#lo_addr(RPINR40+1), W0
0x3588	0x78480A  	MOV.B	W10, [W0]
0x358A	0x37001A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping331:
;__Lib_PPS_p33EP512MU810.mpas,341 :: 		
0x358C	0xB3C4A0  	MOV.B	#74, W0
0x358E	0xE16400  	CP.B	W12, W0
0x3590	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping334
L___Lib_PPS_p33EP512MU810__PPS_Mapping693:
0x3592	0x206F20  	MOV	#lo_addr(RPINR41), W0
0x3594	0x78480A  	MOV.B	W10, [W0]
0x3596	0x370014  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping334:
;__Lib_PPS_p33EP512MU810.mpas,342 :: 		
0x3598	0xB3C4B0  	MOV.B	#75, W0
0x359A	0xE16400  	CP.B	W12, W0
0x359C	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping337
L___Lib_PPS_p33EP512MU810__PPS_Mapping694:
0x359E	0x206F30  	MOV	#lo_addr(RPINR41+1), W0
0x35A0	0x78480A  	MOV.B	W10, [W0]
0x35A2	0x37000E  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping337:
;__Lib_PPS_p33EP512MU810.mpas,343 :: 		
0x35A4	0xB3C4C0  	MOV.B	#76, W0
0x35A6	0xE16400  	CP.B	W12, W0
0x35A8	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping340
L___Lib_PPS_p33EP512MU810__PPS_Mapping695:
0x35AA	0x206EB0  	MOV	#lo_addr(RPINR37+1), W0
0x35AC	0x78480A  	MOV.B	W10, [W0]
0x35AE	0x370008  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping340:
;__Lib_PPS_p33EP512MU810.mpas,344 :: 		
0x35B0	0xB3C4D0  	MOV.B	#77, W0
0x35B2	0xE16400  	CP.B	W12, W0
0x35B4	0x3A0003  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping343
L___Lib_PPS_p33EP512MU810__PPS_Mapping696:
0x35B6	0x206EC0  	MOV	#lo_addr(RPINR38), W0
0x35B8	0x78480A  	MOV.B	W10, [W0]
;__Lib_PPS_p33EP512MU810.mpas,345 :: 		
0x35BA	0x370002  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping109
L___Lib_PPS_p33EP512MU810__PPS_Mapping343:
0x35BC	0xEF2000  	CLR	W0
0x35BE	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_p33EP512MU810__PPS_Mapping109:
;__Lib_PPS_p33EP512MU810.mpas,347 :: 		
0x35C0	0xE16861  	CP	W13, #1
0x35C2	0x3A0001  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping345
L___Lib_PPS_p33EP512MU810__PPS_Mapping697:
;__Lib_PPS_p33EP512MU810.mpas,348 :: 		
0x35C4	0x07F749  	RCALL	_Lock_IOLOCK
L___Lib_PPS_p33EP512MU810__PPS_Mapping345:
;__Lib_PPS_p33EP512MU810.mpas,349 :: 		
L___Lib_PPS_p33EP512MU810__PPS_Mapping104:
;__Lib_PPS_p33EP512MU810.mpas,364 :: 		
0x35C6	0xE15470  	CP.B	W10, #16
0x35C8	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping350
L___Lib_PPS_p33EP512MU810__PPS_Mapping698:
0x35CA	0xAE0016  	BTSS	W11, #0
0x35CC	0xA90E00  	BCLR	TRISA0_bit, BitPos(TRISA0_bit+0)
0x35CE	0xAF0016  	BTSC	W11, #0
0x35D0	0xA80E00  	BSET	TRISA0_bit, BitPos(TRISA0_bit+0)
0x35D2	0x370259  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping350:
;__Lib_PPS_p33EP512MU810.mpas,365 :: 		
0x35D4	0xE15471  	CP.B	W10, #17
0x35D6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping353
L___Lib_PPS_p33EP512MU810__PPS_Mapping699:
0x35D8	0xAE0016  	BTSS	W11, #0
0x35DA	0xA92E00  	BCLR	TRISA1_bit, BitPos(TRISA1_bit+0)
0x35DC	0xAF0016  	BTSC	W11, #0
0x35DE	0xA82E00  	BSET	TRISA1_bit, BitPos(TRISA1_bit+0)
0x35E0	0x370252  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping353:
;__Lib_PPS_p33EP512MU810.mpas,366 :: 		
0x35E2	0xE15472  	CP.B	W10, #18
0x35E4	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping356
L___Lib_PPS_p33EP512MU810__PPS_Mapping700:
0x35E6	0xAE0016  	BTSS	W11, #0
0x35E8	0xA94E00  	BCLR	TRISA2_bit, BitPos(TRISA2_bit+0)
0x35EA	0xAF0016  	BTSC	W11, #0
0x35EC	0xA84E00  	BSET	TRISA2_bit, BitPos(TRISA2_bit+0)
0x35EE	0x37024B  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping356:
;__Lib_PPS_p33EP512MU810.mpas,367 :: 		
0x35F0	0xE15473  	CP.B	W10, #19
0x35F2	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping359
L___Lib_PPS_p33EP512MU810__PPS_Mapping701:
0x35F4	0xAE0016  	BTSS	W11, #0
0x35F6	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
0x35F8	0xAF0016  	BTSC	W11, #0
0x35FA	0xA86E00  	BSET	TRISA3_bit, BitPos(TRISA3_bit+0)
0x35FC	0x370244  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping359:
;__Lib_PPS_p33EP512MU810.mpas,368 :: 		
0x35FE	0xE15474  	CP.B	W10, #20
0x3600	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping362
L___Lib_PPS_p33EP512MU810__PPS_Mapping702:
0x3602	0xAE0016  	BTSS	W11, #0
0x3604	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
0x3606	0xAF0016  	BTSC	W11, #0
0x3608	0xA88E00  	BSET	TRISA4_bit, BitPos(TRISA4_bit+0)
0x360A	0x37023D  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping362:
;__Lib_PPS_p33EP512MU810.mpas,369 :: 		
0x360C	0xE15475  	CP.B	W10, #21
0x360E	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping365
L___Lib_PPS_p33EP512MU810__PPS_Mapping703:
0x3610	0xAE0016  	BTSS	W11, #0
0x3612	0xA9AE00  	BCLR	TRISA5_bit, BitPos(TRISA5_bit+0)
0x3614	0xAF0016  	BTSC	W11, #0
0x3616	0xA8AE00  	BSET	TRISA5_bit, BitPos(TRISA5_bit+0)
0x3618	0x370236  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping365:
;__Lib_PPS_p33EP512MU810.mpas,370 :: 		
0x361A	0xE15476  	CP.B	W10, #22
0x361C	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping368
L___Lib_PPS_p33EP512MU810__PPS_Mapping704:
0x361E	0xAE0016  	BTSS	W11, #0
0x3620	0xA9CE00  	BCLR	TRISA6_bit, BitPos(TRISA6_bit+0)
0x3622	0xAF0016  	BTSC	W11, #0
0x3624	0xA8CE00  	BSET	TRISA6_bit, BitPos(TRISA6_bit+0)
0x3626	0x37022F  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping368:
;__Lib_PPS_p33EP512MU810.mpas,371 :: 		
0x3628	0xE15477  	CP.B	W10, #23
0x362A	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping371
L___Lib_PPS_p33EP512MU810__PPS_Mapping705:
0x362C	0xAE0016  	BTSS	W11, #0
0x362E	0xA9EE00  	BCLR	TRISA7_bit, BitPos(TRISA7_bit+0)
0x3630	0xAF0016  	BTSC	W11, #0
0x3632	0xA8EE00  	BSET	TRISA7_bit, BitPos(TRISA7_bit+0)
0x3634	0x370228  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping371:
;__Lib_PPS_p33EP512MU810.mpas,373 :: 		
0x3636	0xE1547E  	CP.B	W10, #30
0x3638	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping374
L___Lib_PPS_p33EP512MU810__PPS_Mapping706:
0x363A	0xAE0016  	BTSS	W11, #0
0x363C	0xA9CE01  	BCLR	TRISA14_bit, BitPos(TRISA14_bit+0)
0x363E	0xAF0016  	BTSC	W11, #0
0x3640	0xA8CE01  	BSET	TRISA14_bit, BitPos(TRISA14_bit+0)
0x3642	0x370221  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping374:
;__Lib_PPS_p33EP512MU810.mpas,374 :: 		
0x3644	0xE1547F  	CP.B	W10, #31
0x3646	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping377
L___Lib_PPS_p33EP512MU810__PPS_Mapping707:
0x3648	0xAE0016  	BTSS	W11, #0
0x364A	0xA9EE01  	BCLR	TRISA15_bit, BitPos(TRISA15_bit+0)
0x364C	0xAF0016  	BTSC	W11, #0
0x364E	0xA8EE01  	BSET	TRISA15_bit, BitPos(TRISA15_bit+0)
0x3650	0x37021A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping377:
;__Lib_PPS_p33EP512MU810.mpas,376 :: 		
0x3652	0xB3C2F0  	MOV.B	#47, W0
0x3654	0xE15400  	CP.B	W10, W0
0x3656	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping380
L___Lib_PPS_p33EP512MU810__PPS_Mapping708:
0x3658	0xAE0016  	BTSS	W11, #0
0x365A	0xA9EE11  	BCLR	TRISB15_bit, BitPos(TRISB15_bit+0)
0x365C	0xAF0016  	BTSC	W11, #0
0x365E	0xA8EE11  	BSET	TRISB15_bit, BitPos(TRISB15_bit+0)
0x3660	0x370212  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping380:
;__Lib_PPS_p33EP512MU810.mpas,377 :: 		
0x3662	0xB3C2E0  	MOV.B	#46, W0
0x3664	0xE15400  	CP.B	W10, W0
0x3666	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping383
L___Lib_PPS_p33EP512MU810__PPS_Mapping709:
0x3668	0xAE0016  	BTSS	W11, #0
0x366A	0xA9CE11  	BCLR	TRISB14_bit, BitPos(TRISB14_bit+0)
0x366C	0xAF0016  	BTSC	W11, #0
0x366E	0xA8CE11  	BSET	TRISB14_bit, BitPos(TRISB14_bit+0)
0x3670	0x37020A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping383:
;__Lib_PPS_p33EP512MU810.mpas,378 :: 		
0x3672	0xB3C2D0  	MOV.B	#45, W0
0x3674	0xE15400  	CP.B	W10, W0
0x3676	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping386
L___Lib_PPS_p33EP512MU810__PPS_Mapping710:
0x3678	0xAE0016  	BTSS	W11, #0
0x367A	0xA9AE11  	BCLR	TRISB13_bit, BitPos(TRISB13_bit+0)
0x367C	0xAF0016  	BTSC	W11, #0
0x367E	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
0x3680	0x370202  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping386:
;__Lib_PPS_p33EP512MU810.mpas,379 :: 		
0x3682	0xB3C2C0  	MOV.B	#44, W0
0x3684	0xE15400  	CP.B	W10, W0
0x3686	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping389
L___Lib_PPS_p33EP512MU810__PPS_Mapping711:
0x3688	0xAE0016  	BTSS	W11, #0
0x368A	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
0x368C	0xAF0016  	BTSC	W11, #0
0x368E	0xA88E11  	BSET	TRISB12_bit, BitPos(TRISB12_bit+0)
0x3690	0x3701FA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping389:
;__Lib_PPS_p33EP512MU810.mpas,380 :: 		
0x3692	0xB3C2B0  	MOV.B	#43, W0
0x3694	0xE15400  	CP.B	W10, W0
0x3696	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping392
L___Lib_PPS_p33EP512MU810__PPS_Mapping712:
0x3698	0xAE0016  	BTSS	W11, #0
0x369A	0xA96E11  	BCLR	TRISB11_bit, BitPos(TRISB11_bit+0)
0x369C	0xAF0016  	BTSC	W11, #0
0x369E	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
0x36A0	0x3701F2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping392:
;__Lib_PPS_p33EP512MU810.mpas,381 :: 		
0x36A2	0xB3C2A0  	MOV.B	#42, W0
0x36A4	0xE15400  	CP.B	W10, W0
0x36A6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping395
L___Lib_PPS_p33EP512MU810__PPS_Mapping713:
0x36A8	0xAE0016  	BTSS	W11, #0
0x36AA	0xA94E11  	BCLR	TRISB10_bit, BitPos(TRISB10_bit+0)
0x36AC	0xAF0016  	BTSC	W11, #0
0x36AE	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
0x36B0	0x3701EA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping395:
;__Lib_PPS_p33EP512MU810.mpas,382 :: 		
0x36B2	0xB3C290  	MOV.B	#41, W0
0x36B4	0xE15400  	CP.B	W10, W0
0x36B6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping398
L___Lib_PPS_p33EP512MU810__PPS_Mapping714:
0x36B8	0xAE0016  	BTSS	W11, #0
0x36BA	0xA92E11  	BCLR	TRISB9_bit, BitPos(TRISB9_bit+0)
0x36BC	0xAF0016  	BTSC	W11, #0
0x36BE	0xA82E11  	BSET	TRISB9_bit, BitPos(TRISB9_bit+0)
0x36C0	0x3701E2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping398:
;__Lib_PPS_p33EP512MU810.mpas,383 :: 		
0x36C2	0xB3C280  	MOV.B	#40, W0
0x36C4	0xE15400  	CP.B	W10, W0
0x36C6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping401
L___Lib_PPS_p33EP512MU810__PPS_Mapping715:
0x36C8	0xAE0016  	BTSS	W11, #0
0x36CA	0xA90E11  	BCLR	TRISB8_bit, BitPos(TRISB8_bit+0)
0x36CC	0xAF0016  	BTSC	W11, #0
0x36CE	0xA80E11  	BSET	TRISB8_bit, BitPos(TRISB8_bit+0)
0x36D0	0x3701DA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping401:
;__Lib_PPS_p33EP512MU810.mpas,384 :: 		
0x36D2	0xB3C270  	MOV.B	#39, W0
0x36D4	0xE15400  	CP.B	W10, W0
0x36D6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping404
L___Lib_PPS_p33EP512MU810__PPS_Mapping716:
0x36D8	0xAE0016  	BTSS	W11, #0
0x36DA	0xA9EE10  	BCLR	TRISB7_bit, BitPos(TRISB7_bit+0)
0x36DC	0xAF0016  	BTSC	W11, #0
0x36DE	0xA8EE10  	BSET	TRISB7_bit, BitPos(TRISB7_bit+0)
0x36E0	0x3701D2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping404:
;__Lib_PPS_p33EP512MU810.mpas,385 :: 		
0x36E2	0xB3C260  	MOV.B	#38, W0
0x36E4	0xE15400  	CP.B	W10, W0
0x36E6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping407
L___Lib_PPS_p33EP512MU810__PPS_Mapping717:
0x36E8	0xAE0016  	BTSS	W11, #0
0x36EA	0xA9CE10  	BCLR	TRISB6_bit, BitPos(TRISB6_bit+0)
0x36EC	0xAF0016  	BTSC	W11, #0
0x36EE	0xA8CE10  	BSET	TRISB6_bit, BitPos(TRISB6_bit+0)
0x36F0	0x3701CA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping407:
;__Lib_PPS_p33EP512MU810.mpas,386 :: 		
0x36F2	0xB3C250  	MOV.B	#37, W0
0x36F4	0xE15400  	CP.B	W10, W0
0x36F6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping410
L___Lib_PPS_p33EP512MU810__PPS_Mapping718:
0x36F8	0xAE0016  	BTSS	W11, #0
0x36FA	0xA9AE10  	BCLR	TRISB5_bit, BitPos(TRISB5_bit+0)
0x36FC	0xAF0016  	BTSC	W11, #0
0x36FE	0xA8AE10  	BSET	TRISB5_bit, BitPos(TRISB5_bit+0)
0x3700	0x3701C2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping410:
;__Lib_PPS_p33EP512MU810.mpas,387 :: 		
0x3702	0xB3C240  	MOV.B	#36, W0
0x3704	0xE15400  	CP.B	W10, W0
0x3706	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping413
L___Lib_PPS_p33EP512MU810__PPS_Mapping719:
0x3708	0xAE0016  	BTSS	W11, #0
0x370A	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
0x370C	0xAF0016  	BTSC	W11, #0
0x370E	0xA88E10  	BSET	TRISB4_bit, BitPos(TRISB4_bit+0)
0x3710	0x3701BA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping413:
;__Lib_PPS_p33EP512MU810.mpas,388 :: 		
0x3712	0xB3C230  	MOV.B	#35, W0
0x3714	0xE15400  	CP.B	W10, W0
0x3716	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping416
L___Lib_PPS_p33EP512MU810__PPS_Mapping720:
0x3718	0xAE0016  	BTSS	W11, #0
0x371A	0xA96E10  	BCLR	TRISB3_bit, BitPos(TRISB3_bit+0)
0x371C	0xAF0016  	BTSC	W11, #0
0x371E	0xA86E10  	BSET	TRISB3_bit, BitPos(TRISB3_bit+0)
0x3720	0x3701B2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping416:
;__Lib_PPS_p33EP512MU810.mpas,389 :: 		
0x3722	0xB3C220  	MOV.B	#34, W0
0x3724	0xE15400  	CP.B	W10, W0
0x3726	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping419
L___Lib_PPS_p33EP512MU810__PPS_Mapping721:
0x3728	0xAE0016  	BTSS	W11, #0
0x372A	0xA94E10  	BCLR	TRISB2_bit, BitPos(TRISB2_bit+0)
0x372C	0xAF0016  	BTSC	W11, #0
0x372E	0xA84E10  	BSET	TRISB2_bit, BitPos(TRISB2_bit+0)
0x3730	0x3701AA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping419:
;__Lib_PPS_p33EP512MU810.mpas,390 :: 		
0x3732	0xB3C210  	MOV.B	#33, W0
0x3734	0xE15400  	CP.B	W10, W0
0x3736	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping422
L___Lib_PPS_p33EP512MU810__PPS_Mapping722:
0x3738	0xAE0016  	BTSS	W11, #0
0x373A	0xA92E10  	BCLR	TRISB1_bit, BitPos(TRISB1_bit+0)
0x373C	0xAF0016  	BTSC	W11, #0
0x373E	0xA82E10  	BSET	TRISB1_bit, BitPos(TRISB1_bit+0)
0x3740	0x3701A2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping422:
;__Lib_PPS_p33EP512MU810.mpas,391 :: 		
0x3742	0xB3C200  	MOV.B	#32, W0
0x3744	0xE15400  	CP.B	W10, W0
0x3746	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping425
L___Lib_PPS_p33EP512MU810__PPS_Mapping723:
0x3748	0xAE0016  	BTSS	W11, #0
0x374A	0xA90E10  	BCLR	TRISB0_bit, BitPos(TRISB0_bit+0)
0x374C	0xAF0016  	BTSC	W11, #0
0x374E	0xA80E10  	BSET	TRISB0_bit, BitPos(TRISB0_bit+0)
0x3750	0x37019A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping425:
;__Lib_PPS_p33EP512MU810.mpas,393 :: 		
0x3752	0xB3C310  	MOV.B	#49, W0
0x3754	0xE15400  	CP.B	W10, W0
0x3756	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping428
L___Lib_PPS_p33EP512MU810__PPS_Mapping724:
0x3758	0xAE0016  	BTSS	W11, #0
0x375A	0xA92E20  	BCLR	TRISC1_bit, BitPos(TRISC1_bit+0)
0x375C	0xAF0016  	BTSC	W11, #0
0x375E	0xA82E20  	BSET	TRISC1_bit, BitPos(TRISC1_bit+0)
0x3760	0x370192  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping428:
;__Lib_PPS_p33EP512MU810.mpas,394 :: 		
0x3762	0xB3C320  	MOV.B	#50, W0
0x3764	0xE15400  	CP.B	W10, W0
0x3766	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping431
L___Lib_PPS_p33EP512MU810__PPS_Mapping725:
0x3768	0xAE0016  	BTSS	W11, #0
0x376A	0xA94E20  	BCLR	TRISC2_bit, BitPos(TRISC2_bit+0)
0x376C	0xAF0016  	BTSC	W11, #0
0x376E	0xA84E20  	BSET	TRISC2_bit, BitPos(TRISC2_bit+0)
0x3770	0x37018A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping431:
;__Lib_PPS_p33EP512MU810.mpas,395 :: 		
0x3772	0xB3C330  	MOV.B	#51, W0
0x3774	0xE15400  	CP.B	W10, W0
0x3776	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping434
L___Lib_PPS_p33EP512MU810__PPS_Mapping726:
0x3778	0xAE0016  	BTSS	W11, #0
0x377A	0xA96E20  	BCLR	TRISC3_bit, BitPos(TRISC3_bit+0)
0x377C	0xAF0016  	BTSC	W11, #0
0x377E	0xA86E20  	BSET	TRISC3_bit, BitPos(TRISC3_bit+0)
0x3780	0x370182  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping434:
;__Lib_PPS_p33EP512MU810.mpas,396 :: 		
0x3782	0xB3C340  	MOV.B	#52, W0
0x3784	0xE15400  	CP.B	W10, W0
0x3786	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping437
L___Lib_PPS_p33EP512MU810__PPS_Mapping727:
0x3788	0xAE0016  	BTSS	W11, #0
0x378A	0xA98E20  	BCLR	TRISC4_bit, BitPos(TRISC4_bit+0)
0x378C	0xAF0016  	BTSC	W11, #0
0x378E	0xA88E20  	BSET	TRISC4_bit, BitPos(TRISC4_bit+0)
0x3790	0x37017A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping437:
;__Lib_PPS_p33EP512MU810.mpas,398 :: 		
0x3792	0xB3C3E0  	MOV.B	#62, W0
0x3794	0xE15400  	CP.B	W10, W0
0x3796	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping440
L___Lib_PPS_p33EP512MU810__PPS_Mapping728:
0x3798	0xAE0016  	BTSS	W11, #0
0x379A	0xA9CE21  	BCLR	TRISC14_bit, BitPos(TRISC14_bit+0)
0x379C	0xAF0016  	BTSC	W11, #0
0x379E	0xA8CE21  	BSET	TRISC14_bit, BitPos(TRISC14_bit+0)
0x37A0	0x370172  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping440:
;__Lib_PPS_p33EP512MU810.mpas,399 :: 		
0x37A2	0xB3C3D0  	MOV.B	#61, W0
0x37A4	0xE15400  	CP.B	W10, W0
0x37A6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping443
L___Lib_PPS_p33EP512MU810__PPS_Mapping729:
0x37A8	0xAE0016  	BTSS	W11, #0
0x37AA	0xA9AE21  	BCLR	TRISC13_bit, BitPos(TRISC13_bit+0)
0x37AC	0xAF0016  	BTSC	W11, #0
0x37AE	0xA8AE21  	BSET	TRISC13_bit, BitPos(TRISC13_bit+0)
0x37B0	0x37016A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping443:
;__Lib_PPS_p33EP512MU810.mpas,400 :: 		
0x37B2	0xB3C3C0  	MOV.B	#60, W0
0x37B4	0xE15400  	CP.B	W10, W0
0x37B6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping446
L___Lib_PPS_p33EP512MU810__PPS_Mapping730:
0x37B8	0xAE0016  	BTSS	W11, #0
0x37BA	0xA98E21  	BCLR	TRISC12_bit, BitPos(TRISC12_bit+0)
0x37BC	0xAF0016  	BTSC	W11, #0
0x37BE	0xA88E21  	BSET	TRISC12_bit, BitPos(TRISC12_bit+0)
0x37C0	0x370162  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping446:
;__Lib_PPS_p33EP512MU810.mpas,402 :: 		
0x37C2	0xB3C4F0  	MOV.B	#79, W0
0x37C4	0xE15400  	CP.B	W10, W0
0x37C6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping449
L___Lib_PPS_p33EP512MU810__PPS_Mapping731:
0x37C8	0xAE0016  	BTSS	W11, #0
0x37CA	0xA9EE31  	BCLR	TRISD15_bit, BitPos(TRISD15_bit+0)
0x37CC	0xAF0016  	BTSC	W11, #0
0x37CE	0xA8EE31  	BSET	TRISD15_bit, BitPos(TRISD15_bit+0)
0x37D0	0x37015A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping449:
;__Lib_PPS_p33EP512MU810.mpas,403 :: 		
0x37D2	0xB3C4E0  	MOV.B	#78, W0
0x37D4	0xE15400  	CP.B	W10, W0
0x37D6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping452
L___Lib_PPS_p33EP512MU810__PPS_Mapping732:
0x37D8	0xAE0016  	BTSS	W11, #0
0x37DA	0xA9CE31  	BCLR	TRISD14_bit, BitPos(TRISD14_bit+0)
0x37DC	0xAF0016  	BTSC	W11, #0
0x37DE	0xA8CE31  	BSET	TRISD14_bit, BitPos(TRISD14_bit+0)
0x37E0	0x370152  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping452:
;__Lib_PPS_p33EP512MU810.mpas,404 :: 		
0x37E2	0xB3C4D0  	MOV.B	#77, W0
0x37E4	0xE15400  	CP.B	W10, W0
0x37E6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping455
L___Lib_PPS_p33EP512MU810__PPS_Mapping733:
0x37E8	0xAE0016  	BTSS	W11, #0
0x37EA	0xA9AE31  	BCLR	TRISD13_bit, BitPos(TRISD13_bit+0)
0x37EC	0xAF0016  	BTSC	W11, #0
0x37EE	0xA8AE31  	BSET	TRISD13_bit, BitPos(TRISD13_bit+0)
0x37F0	0x37014A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping455:
;__Lib_PPS_p33EP512MU810.mpas,405 :: 		
0x37F2	0xB3C4C0  	MOV.B	#76, W0
0x37F4	0xE15400  	CP.B	W10, W0
0x37F6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping458
L___Lib_PPS_p33EP512MU810__PPS_Mapping734:
0x37F8	0xAE0016  	BTSS	W11, #0
0x37FA	0xA98E31  	BCLR	TRISD12_bit, BitPos(TRISD12_bit+0)
0x37FC	0xAF0016  	BTSC	W11, #0
0x37FE	0xA88E31  	BSET	TRISD12_bit, BitPos(TRISD12_bit+0)
0x3800	0x370142  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping458:
;__Lib_PPS_p33EP512MU810.mpas,406 :: 		
0x3802	0xB3C4B0  	MOV.B	#75, W0
0x3804	0xE15400  	CP.B	W10, W0
0x3806	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping461
L___Lib_PPS_p33EP512MU810__PPS_Mapping735:
0x3808	0xAE0016  	BTSS	W11, #0
0x380A	0xA96E31  	BCLR	TRISD11_bit, BitPos(TRISD11_bit+0)
0x380C	0xAF0016  	BTSC	W11, #0
0x380E	0xA86E31  	BSET	TRISD11_bit, BitPos(TRISD11_bit+0)
0x3810	0x37013A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping461:
;__Lib_PPS_p33EP512MU810.mpas,407 :: 		
0x3812	0xB3C4A0  	MOV.B	#74, W0
0x3814	0xE15400  	CP.B	W10, W0
0x3816	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping464
L___Lib_PPS_p33EP512MU810__PPS_Mapping736:
0x3818	0xAE0016  	BTSS	W11, #0
0x381A	0xA94E31  	BCLR	TRISD10_bit, BitPos(TRISD10_bit+0)
0x381C	0xAF0016  	BTSC	W11, #0
0x381E	0xA84E31  	BSET	TRISD10_bit, BitPos(TRISD10_bit+0)
0x3820	0x370132  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping464:
;__Lib_PPS_p33EP512MU810.mpas,408 :: 		
0x3822	0xB3C490  	MOV.B	#73, W0
0x3824	0xE15400  	CP.B	W10, W0
0x3826	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping467
L___Lib_PPS_p33EP512MU810__PPS_Mapping737:
0x3828	0xAE0016  	BTSS	W11, #0
0x382A	0xA92E31  	BCLR	TRISD9_bit, BitPos(TRISD9_bit+0)
0x382C	0xAF0016  	BTSC	W11, #0
0x382E	0xA82E31  	BSET	TRISD9_bit, BitPos(TRISD9_bit+0)
0x3830	0x37012A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping467:
;__Lib_PPS_p33EP512MU810.mpas,409 :: 		
0x3832	0xB3C480  	MOV.B	#72, W0
0x3834	0xE15400  	CP.B	W10, W0
0x3836	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping470
L___Lib_PPS_p33EP512MU810__PPS_Mapping738:
0x3838	0xAE0016  	BTSS	W11, #0
0x383A	0xA90E31  	BCLR	TRISD8_bit, BitPos(TRISD8_bit+0)
0x383C	0xAF0016  	BTSC	W11, #0
0x383E	0xA80E31  	BSET	TRISD8_bit, BitPos(TRISD8_bit+0)
0x3840	0x370122  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping470:
;__Lib_PPS_p33EP512MU810.mpas,410 :: 		
0x3842	0xB3C470  	MOV.B	#71, W0
0x3844	0xE15400  	CP.B	W10, W0
0x3846	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping473
L___Lib_PPS_p33EP512MU810__PPS_Mapping739:
0x3848	0xAE0016  	BTSS	W11, #0
0x384A	0xA9EE30  	BCLR	TRISD7_bit, BitPos(TRISD7_bit+0)
0x384C	0xAF0016  	BTSC	W11, #0
0x384E	0xA8EE30  	BSET	TRISD7_bit, BitPos(TRISD7_bit+0)
0x3850	0x37011A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping473:
;__Lib_PPS_p33EP512MU810.mpas,411 :: 		
0x3852	0xB3C460  	MOV.B	#70, W0
0x3854	0xE15400  	CP.B	W10, W0
0x3856	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping476
L___Lib_PPS_p33EP512MU810__PPS_Mapping740:
0x3858	0xAE0016  	BTSS	W11, #0
0x385A	0xA9CE30  	BCLR	TRISD6_bit, BitPos(TRISD6_bit+0)
0x385C	0xAF0016  	BTSC	W11, #0
0x385E	0xA8CE30  	BSET	TRISD6_bit, BitPos(TRISD6_bit+0)
0x3860	0x370112  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping476:
;__Lib_PPS_p33EP512MU810.mpas,412 :: 		
0x3862	0xB3C450  	MOV.B	#69, W0
0x3864	0xE15400  	CP.B	W10, W0
0x3866	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping479
L___Lib_PPS_p33EP512MU810__PPS_Mapping741:
0x3868	0xAE0016  	BTSS	W11, #0
0x386A	0xA9AE30  	BCLR	TRISD5_bit, BitPos(TRISD5_bit+0)
0x386C	0xAF0016  	BTSC	W11, #0
0x386E	0xA8AE30  	BSET	TRISD5_bit, BitPos(TRISD5_bit+0)
0x3870	0x37010A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping479:
;__Lib_PPS_p33EP512MU810.mpas,413 :: 		
0x3872	0xB3C440  	MOV.B	#68, W0
0x3874	0xE15400  	CP.B	W10, W0
0x3876	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping482
L___Lib_PPS_p33EP512MU810__PPS_Mapping742:
0x3878	0xAE0016  	BTSS	W11, #0
0x387A	0xA98E30  	BCLR	TRISD4_bit, BitPos(TRISD4_bit+0)
0x387C	0xAF0016  	BTSC	W11, #0
0x387E	0xA88E30  	BSET	TRISD4_bit, BitPos(TRISD4_bit+0)
0x3880	0x370102  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping482:
;__Lib_PPS_p33EP512MU810.mpas,414 :: 		
0x3882	0xB3C430  	MOV.B	#67, W0
0x3884	0xE15400  	CP.B	W10, W0
0x3886	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping485
L___Lib_PPS_p33EP512MU810__PPS_Mapping743:
0x3888	0xAE0016  	BTSS	W11, #0
0x388A	0xA96E30  	BCLR	TRISD3_bit, BitPos(TRISD3_bit+0)
0x388C	0xAF0016  	BTSC	W11, #0
0x388E	0xA86E30  	BSET	TRISD3_bit, BitPos(TRISD3_bit+0)
0x3890	0x3700FA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping485:
;__Lib_PPS_p33EP512MU810.mpas,415 :: 		
0x3892	0xB3C420  	MOV.B	#66, W0
0x3894	0xE15400  	CP.B	W10, W0
0x3896	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping488
L___Lib_PPS_p33EP512MU810__PPS_Mapping744:
0x3898	0xAE0016  	BTSS	W11, #0
0x389A	0xA94E30  	BCLR	TRISD2_bit, BitPos(TRISD2_bit+0)
0x389C	0xAF0016  	BTSC	W11, #0
0x389E	0xA84E30  	BSET	TRISD2_bit, BitPos(TRISD2_bit+0)
0x38A0	0x3700F2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping488:
;__Lib_PPS_p33EP512MU810.mpas,416 :: 		
0x38A2	0xB3C410  	MOV.B	#65, W0
0x38A4	0xE15400  	CP.B	W10, W0
0x38A6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping491
L___Lib_PPS_p33EP512MU810__PPS_Mapping745:
0x38A8	0xAE0016  	BTSS	W11, #0
0x38AA	0xA92E30  	BCLR	TRISD1_bit, BitPos(TRISD1_bit+0)
0x38AC	0xAF0016  	BTSC	W11, #0
0x38AE	0xA82E30  	BSET	TRISD1_bit, BitPos(TRISD1_bit+0)
0x38B0	0x3700EA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping491:
;__Lib_PPS_p33EP512MU810.mpas,417 :: 		
0x38B2	0xB3C400  	MOV.B	#64, W0
0x38B4	0xE15400  	CP.B	W10, W0
0x38B6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping494
L___Lib_PPS_p33EP512MU810__PPS_Mapping746:
0x38B8	0xAE0016  	BTSS	W11, #0
0x38BA	0xA90E30  	BCLR	TRISD0_bit, BitPos(TRISD0_bit+0)
0x38BC	0xAF0016  	BTSC	W11, #0
0x38BE	0xA80E30  	BSET	TRISD0_bit, BitPos(TRISD0_bit+0)
0x38C0	0x3700E2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping494:
;__Lib_PPS_p33EP512MU810.mpas,419 :: 		
0x38C2	0xB3C590  	MOV.B	#89, W0
0x38C4	0xE15400  	CP.B	W10, W0
0x38C6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping497
L___Lib_PPS_p33EP512MU810__PPS_Mapping747:
0x38C8	0xAE0016  	BTSS	W11, #0
0x38CA	0xA92E41  	BCLR	TRISE9_bit, BitPos(TRISE9_bit+0)
0x38CC	0xAF0016  	BTSC	W11, #0
0x38CE	0xA82E41  	BSET	TRISE9_bit, BitPos(TRISE9_bit+0)
0x38D0	0x3700DA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping497:
;__Lib_PPS_p33EP512MU810.mpas,420 :: 		
0x38D2	0xB3C580  	MOV.B	#88, W0
0x38D4	0xE15400  	CP.B	W10, W0
0x38D6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping500
L___Lib_PPS_p33EP512MU810__PPS_Mapping748:
0x38D8	0xAE0016  	BTSS	W11, #0
0x38DA	0xA90E41  	BCLR	TRISE8_bit, BitPos(TRISE8_bit+0)
0x38DC	0xAF0016  	BTSC	W11, #0
0x38DE	0xA80E41  	BSET	TRISE8_bit, BitPos(TRISE8_bit+0)
0x38E0	0x3700D2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping500:
;__Lib_PPS_p33EP512MU810.mpas,421 :: 		
0x38E2	0xB3C560  	MOV.B	#86, W0
0x38E4	0xE15400  	CP.B	W10, W0
0x38E6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping503
L___Lib_PPS_p33EP512MU810__PPS_Mapping749:
0x38E8	0xAE0016  	BTSS	W11, #0
0x38EA	0xA9CE40  	BCLR	TRISE6_bit, BitPos(TRISE6_bit+0)
0x38EC	0xAF0016  	BTSC	W11, #0
0x38EE	0xA8CE40  	BSET	TRISE6_bit, BitPos(TRISE6_bit+0)
0x38F0	0x3700CA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping503:
;__Lib_PPS_p33EP512MU810.mpas,422 :: 		
0x38F2	0xB3C550  	MOV.B	#85, W0
0x38F4	0xE15400  	CP.B	W10, W0
0x38F6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping506
L___Lib_PPS_p33EP512MU810__PPS_Mapping750:
0x38F8	0xAE0016  	BTSS	W11, #0
0x38FA	0xA9AE40  	BCLR	TRISE5_bit, BitPos(TRISE5_bit+0)
0x38FC	0xAF0016  	BTSC	W11, #0
0x38FE	0xA8AE40  	BSET	TRISE5_bit, BitPos(TRISE5_bit+0)
0x3900	0x3700C2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping506:
;__Lib_PPS_p33EP512MU810.mpas,423 :: 		
0x3902	0xB3C540  	MOV.B	#84, W0
0x3904	0xE15400  	CP.B	W10, W0
0x3906	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping509
L___Lib_PPS_p33EP512MU810__PPS_Mapping751:
0x3908	0xAE0016  	BTSS	W11, #0
0x390A	0xA98E40  	BCLR	TRISE4_bit, BitPos(TRISE4_bit+0)
0x390C	0xAF0016  	BTSC	W11, #0
0x390E	0xA88E40  	BSET	TRISE4_bit, BitPos(TRISE4_bit+0)
0x3910	0x3700BA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping509:
;__Lib_PPS_p33EP512MU810.mpas,424 :: 		
0x3912	0xB3C530  	MOV.B	#83, W0
0x3914	0xE15400  	CP.B	W10, W0
0x3916	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping512
L___Lib_PPS_p33EP512MU810__PPS_Mapping752:
0x3918	0xAE0016  	BTSS	W11, #0
0x391A	0xA96E40  	BCLR	TRISE3_bit, BitPos(TRISE3_bit+0)
0x391C	0xAF0016  	BTSC	W11, #0
0x391E	0xA86E40  	BSET	TRISE3_bit, BitPos(TRISE3_bit+0)
0x3920	0x3700B2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping512:
;__Lib_PPS_p33EP512MU810.mpas,425 :: 		
0x3922	0xB3C520  	MOV.B	#82, W0
0x3924	0xE15400  	CP.B	W10, W0
0x3926	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping515
L___Lib_PPS_p33EP512MU810__PPS_Mapping753:
0x3928	0xAE0016  	BTSS	W11, #0
0x392A	0xA94E40  	BCLR	TRISE2_bit, BitPos(TRISE2_bit+0)
0x392C	0xAF0016  	BTSC	W11, #0
0x392E	0xA84E40  	BSET	TRISE2_bit, BitPos(TRISE2_bit+0)
0x3930	0x3700AA  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping515:
;__Lib_PPS_p33EP512MU810.mpas,426 :: 		
0x3932	0xB3C510  	MOV.B	#81, W0
0x3934	0xE15400  	CP.B	W10, W0
0x3936	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping518
L___Lib_PPS_p33EP512MU810__PPS_Mapping754:
0x3938	0xAE0016  	BTSS	W11, #0
0x393A	0xA92E40  	BCLR	TRISE1_bit, BitPos(TRISE1_bit+0)
0x393C	0xAF0016  	BTSC	W11, #0
0x393E	0xA82E40  	BSET	TRISE1_bit, BitPos(TRISE1_bit+0)
0x3940	0x3700A2  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping518:
;__Lib_PPS_p33EP512MU810.mpas,427 :: 		
0x3942	0xB3C500  	MOV.B	#80, W0
0x3944	0xE15400  	CP.B	W10, W0
0x3946	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping521
L___Lib_PPS_p33EP512MU810__PPS_Mapping755:
0x3948	0xAE0016  	BTSS	W11, #0
0x394A	0xA90E40  	BCLR	TRISE0_bit, BitPos(TRISE0_bit+0)
0x394C	0xAF0016  	BTSC	W11, #0
0x394E	0xA80E40  	BSET	TRISE0_bit, BitPos(TRISE0_bit+0)
0x3950	0x37009A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping521:
;__Lib_PPS_p33EP512MU810.mpas,429 :: 		
0x3952	0xB3C6D0  	MOV.B	#109, W0
0x3954	0xE15400  	CP.B	W10, W0
0x3956	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping524
L___Lib_PPS_p33EP512MU810__PPS_Mapping756:
0x3958	0xAE0016  	BTSS	W11, #0
0x395A	0xA9AE51  	BCLR	TRISF13_bit, BitPos(TRISF13_bit+0)
0x395C	0xAF0016  	BTSC	W11, #0
0x395E	0xA8AE51  	BSET	TRISF13_bit, BitPos(TRISF13_bit+0)
0x3960	0x370092  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping524:
;__Lib_PPS_p33EP512MU810.mpas,430 :: 		
0x3962	0xB3C6C0  	MOV.B	#108, W0
0x3964	0xE15400  	CP.B	W10, W0
0x3966	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping527
L___Lib_PPS_p33EP512MU810__PPS_Mapping757:
0x3968	0xAE0016  	BTSS	W11, #0
0x396A	0xA98E51  	BCLR	TRISF12_bit, BitPos(TRISF12_bit+0)
0x396C	0xAF0016  	BTSC	W11, #0
0x396E	0xA88E51  	BSET	TRISF12_bit, BitPos(TRISF12_bit+0)
0x3970	0x37008A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping527:
;__Lib_PPS_p33EP512MU810.mpas,431 :: 		
0x3972	0xB3C680  	MOV.B	#104, W0
0x3974	0xE15400  	CP.B	W10, W0
0x3976	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping530
L___Lib_PPS_p33EP512MU810__PPS_Mapping758:
0x3978	0xAE0016  	BTSS	W11, #0
0x397A	0xA90E51  	BCLR	TRISF8_bit, BitPos(TRISF8_bit+0)
0x397C	0xAF0016  	BTSC	W11, #0
0x397E	0xA80E51  	BSET	TRISF8_bit, BitPos(TRISF8_bit+0)
0x3980	0x370082  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping530:
;__Lib_PPS_p33EP512MU810.mpas,432 :: 		
0x3982	0xB3C650  	MOV.B	#101, W0
0x3984	0xE15400  	CP.B	W10, W0
0x3986	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping533
L___Lib_PPS_p33EP512MU810__PPS_Mapping759:
0x3988	0xAE0016  	BTSS	W11, #0
0x398A	0xA9AE50  	BCLR	TRISF5_bit, BitPos(TRISF5_bit+0)
0x398C	0xAF0016  	BTSC	W11, #0
0x398E	0xA8AE50  	BSET	TRISF5_bit, BitPos(TRISF5_bit+0)
0x3990	0x37007A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping533:
;__Lib_PPS_p33EP512MU810.mpas,433 :: 		
0x3992	0xB3C640  	MOV.B	#100, W0
0x3994	0xE15400  	CP.B	W10, W0
0x3996	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping536
L___Lib_PPS_p33EP512MU810__PPS_Mapping760:
0x3998	0xAE0016  	BTSS	W11, #0
0x399A	0xA98E50  	BCLR	TRISF4_bit, BitPos(TRISF4_bit+0)
0x399C	0xAF0016  	BTSC	W11, #0
0x399E	0xA88E50  	BSET	TRISF4_bit, BitPos(TRISF4_bit+0)
0x39A0	0x370072  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping536:
;__Lib_PPS_p33EP512MU810.mpas,434 :: 		
0x39A2	0xB3C630  	MOV.B	#99, W0
0x39A4	0xE15400  	CP.B	W10, W0
0x39A6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping539
L___Lib_PPS_p33EP512MU810__PPS_Mapping761:
0x39A8	0xAE0016  	BTSS	W11, #0
0x39AA	0xA96E50  	BCLR	TRISF3_bit, BitPos(TRISF3_bit+0)
0x39AC	0xAF0016  	BTSC	W11, #0
0x39AE	0xA86E50  	BSET	TRISF3_bit, BitPos(TRISF3_bit+0)
0x39B0	0x37006A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping539:
;__Lib_PPS_p33EP512MU810.mpas,435 :: 		
0x39B2	0xB3C620  	MOV.B	#98, W0
0x39B4	0xE15400  	CP.B	W10, W0
0x39B6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping542
L___Lib_PPS_p33EP512MU810__PPS_Mapping762:
0x39B8	0xAE0016  	BTSS	W11, #0
0x39BA	0xA94E50  	BCLR	TRISF2_bit, BitPos(TRISF2_bit+0)
0x39BC	0xAF0016  	BTSC	W11, #0
0x39BE	0xA84E50  	BSET	TRISF2_bit, BitPos(TRISF2_bit+0)
0x39C0	0x370062  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping542:
;__Lib_PPS_p33EP512MU810.mpas,436 :: 		
0x39C2	0xB3C610  	MOV.B	#97, W0
0x39C4	0xE15400  	CP.B	W10, W0
0x39C6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping545
L___Lib_PPS_p33EP512MU810__PPS_Mapping763:
0x39C8	0xAE0016  	BTSS	W11, #0
0x39CA	0xA92E50  	BCLR	TRISF1_bit, BitPos(TRISF1_bit+0)
0x39CC	0xAF0016  	BTSC	W11, #0
0x39CE	0xA82E50  	BSET	TRISF1_bit, BitPos(TRISF1_bit+0)
0x39D0	0x37005A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping545:
;__Lib_PPS_p33EP512MU810.mpas,437 :: 		
0x39D2	0xB3C600  	MOV.B	#96, W0
0x39D4	0xE15400  	CP.B	W10, W0
0x39D6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping548
L___Lib_PPS_p33EP512MU810__PPS_Mapping764:
0x39D8	0xAE0016  	BTSS	W11, #0
0x39DA	0xA90E50  	BCLR	TRISF0_bit, BitPos(TRISF0_bit+0)
0x39DC	0xAF0016  	BTSC	W11, #0
0x39DE	0xA80E50  	BSET	TRISF0_bit, BitPos(TRISF0_bit+0)
0x39E0	0x370052  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping548:
;__Lib_PPS_p33EP512MU810.mpas,440 :: 		
0x39E2	0xB3C700  	MOV.B	#112, W0
0x39E4	0xE15400  	CP.B	W10, W0
0x39E6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping551
L___Lib_PPS_p33EP512MU810__PPS_Mapping765:
0x39E8	0xAE0016  	BTSS	W11, #0
0x39EA	0xA90E60  	BCLR	TRISG0_bit, BitPos(TRISG0_bit+0)
0x39EC	0xAF0016  	BTSC	W11, #0
0x39EE	0xA80E60  	BSET	TRISG0_bit, BitPos(TRISG0_bit+0)
0x39F0	0x37004A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping551:
;__Lib_PPS_p33EP512MU810.mpas,441 :: 		
0x39F2	0xB3C710  	MOV.B	#113, W0
0x39F4	0xE15400  	CP.B	W10, W0
0x39F6	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping554
L___Lib_PPS_p33EP512MU810__PPS_Mapping766:
0x39F8	0xAE0016  	BTSS	W11, #0
0x39FA	0xA92E60  	BCLR	TRISG1_bit, BitPos(TRISG1_bit+0)
0x39FC	0xAF0016  	BTSC	W11, #0
0x39FE	0xA82E60  	BSET	TRISG1_bit, BitPos(TRISG1_bit+0)
0x3A00	0x370042  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping554:
;__Lib_PPS_p33EP512MU810.mpas,442 :: 		
0x3A02	0xB3C760  	MOV.B	#118, W0
0x3A04	0xE15400  	CP.B	W10, W0
0x3A06	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping557
L___Lib_PPS_p33EP512MU810__PPS_Mapping767:
0x3A08	0xAE0016  	BTSS	W11, #0
0x3A0A	0xA9CE60  	BCLR	TRISG6_bit, BitPos(TRISG6_bit+0)
0x3A0C	0xAF0016  	BTSC	W11, #0
0x3A0E	0xA8CE60  	BSET	TRISG6_bit, BitPos(TRISG6_bit+0)
0x3A10	0x37003A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping557:
;__Lib_PPS_p33EP512MU810.mpas,443 :: 		
0x3A12	0xB3C770  	MOV.B	#119, W0
0x3A14	0xE15400  	CP.B	W10, W0
0x3A16	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping560
L___Lib_PPS_p33EP512MU810__PPS_Mapping768:
0x3A18	0xAE0016  	BTSS	W11, #0
0x3A1A	0xA9EE60  	BCLR	TRISG7_bit, BitPos(TRISG7_bit+0)
0x3A1C	0xAF0016  	BTSC	W11, #0
0x3A1E	0xA8EE60  	BSET	TRISG7_bit, BitPos(TRISG7_bit+0)
0x3A20	0x370032  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping560:
;__Lib_PPS_p33EP512MU810.mpas,444 :: 		
0x3A22	0xB3C780  	MOV.B	#120, W0
0x3A24	0xE15400  	CP.B	W10, W0
0x3A26	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping563
L___Lib_PPS_p33EP512MU810__PPS_Mapping769:
0x3A28	0xAE0016  	BTSS	W11, #0
0x3A2A	0xA90E61  	BCLR	TRISG8_bit, BitPos(TRISG8_bit+0)
0x3A2C	0xAF0016  	BTSC	W11, #0
0x3A2E	0xA80E61  	BSET	TRISG8_bit, BitPos(TRISG8_bit+0)
0x3A30	0x37002A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping563:
;__Lib_PPS_p33EP512MU810.mpas,445 :: 		
0x3A32	0xB3C790  	MOV.B	#121, W0
0x3A34	0xE15400  	CP.B	W10, W0
0x3A36	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping566
L___Lib_PPS_p33EP512MU810__PPS_Mapping770:
0x3A38	0xAE0016  	BTSS	W11, #0
0x3A3A	0xA92E61  	BCLR	TRISG9_bit, BitPos(TRISG9_bit+0)
0x3A3C	0xAF0016  	BTSC	W11, #0
0x3A3E	0xA82E61  	BSET	TRISG9_bit, BitPos(TRISG9_bit+0)
0x3A40	0x370022  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping566:
;__Lib_PPS_p33EP512MU810.mpas,446 :: 		
0x3A42	0xB3C7C0  	MOV.B	#124, W0
0x3A44	0xE15400  	CP.B	W10, W0
0x3A46	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping569
L___Lib_PPS_p33EP512MU810__PPS_Mapping771:
0x3A48	0xAE0016  	BTSS	W11, #0
0x3A4A	0xA98E61  	BCLR	TRISG12_bit, BitPos(TRISG12_bit+0)
0x3A4C	0xAF0016  	BTSC	W11, #0
0x3A4E	0xA88E61  	BSET	TRISG12_bit, BitPos(TRISG12_bit+0)
0x3A50	0x37001A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping569:
;__Lib_PPS_p33EP512MU810.mpas,447 :: 		
0x3A52	0xB3C7D0  	MOV.B	#125, W0
0x3A54	0xE15400  	CP.B	W10, W0
0x3A56	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping572
L___Lib_PPS_p33EP512MU810__PPS_Mapping772:
0x3A58	0xAE0016  	BTSS	W11, #0
0x3A5A	0xA9AE61  	BCLR	TRISG13_bit, BitPos(TRISG13_bit+0)
0x3A5C	0xAF0016  	BTSC	W11, #0
0x3A5E	0xA8AE61  	BSET	TRISG13_bit, BitPos(TRISG13_bit+0)
0x3A60	0x370012  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping572:
;__Lib_PPS_p33EP512MU810.mpas,448 :: 		
0x3A62	0xB3C7E0  	MOV.B	#126, W0
0x3A64	0xE15400  	CP.B	W10, W0
0x3A66	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping575
L___Lib_PPS_p33EP512MU810__PPS_Mapping773:
0x3A68	0xAE0016  	BTSS	W11, #0
0x3A6A	0xA9CE61  	BCLR	TRISG14_bit, BitPos(TRISG14_bit+0)
0x3A6C	0xAF0016  	BTSC	W11, #0
0x3A6E	0xA8CE61  	BSET	TRISG14_bit, BitPos(TRISG14_bit+0)
0x3A70	0x37000A  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping575:
;__Lib_PPS_p33EP512MU810.mpas,449 :: 		
0x3A72	0xB3C7F0  	MOV.B	#127, W0
0x3A74	0xE15400  	CP.B	W10, W0
0x3A76	0x3A0005  	BRA NZ	L___Lib_PPS_p33EP512MU810__PPS_Mapping578
L___Lib_PPS_p33EP512MU810__PPS_Mapping774:
0x3A78	0xAE0016  	BTSS	W11, #0
0x3A7A	0xA9EE61  	BCLR	TRISG15_bit, BitPos(TRISG15_bit+0)
0x3A7C	0xAF0016  	BTSC	W11, #0
0x3A7E	0xA8EE61  	BSET	TRISG15_bit, BitPos(TRISG15_bit+0)
;__Lib_PPS_p33EP512MU810.mpas,453 :: 		
0x3A80	0x370002  	BRA	L___Lib_PPS_p33EP512MU810__PPS_Mapping347
L___Lib_PPS_p33EP512MU810__PPS_Mapping578:
0x3A82	0xEF2000  	CLR	W0
0x3A84	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_p33EP512MU810__PPS_Mapping347:
;__Lib_PPS_p33EP512MU810.mpas,457 :: 		
0x3A86	0x90000E  	MOV	[W14+0], W0
L_end__PPS_Mapping:
0x3A88	0xFA8000  	ULNK
0x3A8A	0x060000  	RETURN
; end of __Lib_PPS_p33EP512MU810__PPS_Mapping
_Unlock_IOLOCK:
0x2446	0xFA0000  	LNK	#0
;__Lib_PPS_p33EP512MU810.mpas,162 :: 		
;__Lib_PPS_p33EP512MU810.mpas,163 :: 		
0x2448	0x207421  	MOV	#lo_addr(OSCCON), W1
;__Lib_PPS_p33EP512MU810.mpas,164 :: 		
0x244A	0x200462  	MOV	#70, W2
;__Lib_PPS_p33EP512MU810.mpas,165 :: 		
0x244C	0x200573  	MOV	#87, W3
;__Lib_PPS_p33EP512MU810.mpas,167 :: 		
0x244E	0x784882  	MOV.B	W2, [W1]
;__Lib_PPS_p33EP512MU810.mpas,168 :: 		
0x2450	0x784883  	MOV.B	W3, [W1]
;__Lib_PPS_p33EP512MU810.mpas,170 :: 		
0x2452	0xA9C742  	BCLR	IOLOCK_bit, BitPos(IOLOCK_bit+0)
;__Lib_PPS_p33EP512MU810.mpas,171 :: 		
L_end_Unlock_IOLOCK:
0x2454	0xFA8000  	ULNK
0x2456	0x060000  	RETURN
; end of _Unlock_IOLOCK
_Lock_IOLOCK:
0x2458	0xFA0000  	LNK	#0
;__Lib_PPS_p33EP512MU810.mpas,174 :: 		
;__Lib_PPS_p33EP512MU810.mpas,175 :: 		
0x245A	0x207421  	MOV	#lo_addr(OSCCON), W1
;__Lib_PPS_p33EP512MU810.mpas,176 :: 		
0x245C	0x200462  	MOV	#70, W2
;__Lib_PPS_p33EP512MU810.mpas,177 :: 		
0x245E	0x200573  	MOV	#87, W3
;__Lib_PPS_p33EP512MU810.mpas,179 :: 		
0x2460	0x784882  	MOV.B	W2, [W1]
;__Lib_PPS_p33EP512MU810.mpas,180 :: 		
0x2462	0x784883  	MOV.B	W3, [W1]
;__Lib_PPS_p33EP512MU810.mpas,182 :: 		
0x2464	0xA8C742  	BSET	IOLOCK_bit, BitPos(IOLOCK_bit+0)
;__Lib_PPS_p33EP512MU810.mpas,183 :: 		
L_end_Lock_IOLOCK:
0x2466	0xFA8000  	ULNK
0x2468	0x060000  	RETURN
; end of _Lock_IOLOCK
_SPI1_Init_Advanced:
0x5332	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.mpas,128 :: 		
; slave_select start address is: 2 (W1)
0x5334	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x5336	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x5338	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x533A	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_123_p24fj.mpas,130 :: 		
0x533C	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_123_p24fj.mpas,131 :: 		
0x533E	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_123_p24fj.mpas,133 :: 		
0x5340	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x5342	0x888040  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.mpas,134 :: 		
0x5344	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x5346	0x888050  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.mpas,136 :: 		
0x5348	0x75000B  	IOR	W10, W11, W0
0x534A	0x70000C  	IOR	W0, W12, W0
0x534C	0x70000D  	IOR	W0, W13, W0
0x534E	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x5350	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
0x5352	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x5354	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x5356	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_123_p24fj.mpas,138 :: 		
;__Lib_SPI_123_p24fj.mpas,139 :: 		
0x5358	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_123_p24fj.mpas,140 :: 		
0x535A	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_123_p24fj.mpas,141 :: 		
L_end_SPI1_Init_Advanced:
0x535C	0xFA8000  	ULNK
0x535E	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI_Set_Active:
0x5360	0xFA0000  	LNK	#0
;__Lib_SPI_123_p24fj.mpas,297 :: 		
;__Lib_SPI_123_p24fj.mpas,298 :: 		
0x5362	0x88804A  	MOV	W10, _SPI_Rd_Ptr
;__Lib_SPI_123_p24fj.mpas,299 :: 		
0x5364	0x88805B  	MOV	W11, _SPI_Wr_Ptr
;__Lib_SPI_123_p24fj.mpas,300 :: 		
L_end_SPI_Set_Active:
0x5366	0xFA8000  	ULNK
0x5368	0x060000  	RETURN
; end of _SPI_Set_Active
_UART1_Init:
0x5242	0xFA0008  	LNK	#8
;__Lib_UART_1234_p24_p33.mpas,145 :: 		
;__Lib_UART_1234_p24_p33.mpas,148 :: 		
0x5244	0x245020  	MOV	#lo_addr(_UART1_Write), W0
0x5246	0x888030  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_1234_p24_p33.mpas,149 :: 		
0x5248	0x253D60  	MOV	#lo_addr(_UART1_Read), W0
0x524A	0x888020  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_1234_p24_p33.mpas,150 :: 		
0x524C	0x253FC0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x524E	0x888010  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_1234_p24_p33.mpas,151 :: 		
0x5250	0x2FFFF0  	MOV	#lo_addr(_UART1_TX_Idle), W0
0x5252	0x888000  	MOV	W0, _UART_TX_Idle_Ptr
;__Lib_UART_1234_p24_p33.mpas,153 :: 		
0x5254	0xEF2220  	CLR	U1MODE
;__Lib_UART_1234_p24_p33.mpas,154 :: 		
0x5256	0x280000  	MOV	#32768, W0
0x5258	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_1234_p24_p33.mpas,157 :: 		
0x525A	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_1234_p24_p33.mpas,158 :: 		
0x525C	0x07F417  	RCALL	_Get_Fosc_kHz
;__Lib_UART_1234_p24_p33.mpas,160 :: 		
0x525E	0x203E82  	MOV	#1000, W2
0x5260	0x200003  	MOV	#0, W3
0x5262	0x07EC2D  	RCALL	__Multiply_32x32
; tmp start address is: 12 (W6)
0x5264	0xBE0300  	MOV.D	W0, W6
;__Lib_UART_1234_p24_p33.mpas,163 :: 		
0x5266	0x07EF2D  	RCALL	_Get_Fosc_Per_Cyc
0x5268	0xEB0080  	CLR	W1
0x526A	0xD10081  	LSR	W1, W1
0x526C	0xD38000  	RRC	W0, W0
0x526E	0x400264  	ADD	W0, #4, W4
0x5270	0x4882E0  	ADDC	W1, #0, W5
0x5272	0xBE010A  	MOV.D	W10, W2
L__UART1_Init331:
0x5274	0xE90204  	DEC	W4, W4
0x5276	0x350003  	BRA LT	L__UART1_Init332
0x5278	0xD00102  	SL	W2, W2
0x527A	0xD28183  	RLC	W3, W3
0x527C	0x37FFFB  	BRA	L__UART1_Init331
L__UART1_Init332:
0x527E	0x980702  	MOV	W2, [W14+0]
0x5280	0x980713  	MOV	W3, [W14+2]
;__Lib_UART_1234_p24_p33.mpas,165 :: 		
0x5282	0xBE9F86  	PUSH.D	W6
0x5284	0xBE9F8A  	PUSH.D	W10
0x5286	0xBE0006  	MOV.D	W6, W0
0x5288	0xEB8200  	SETM	W4
0x528A	0x07EBED  	RCALL	__Modulus_32x32
0x528C	0xBE054F  	POP.D	W10
0x528E	0xBE034F  	POP.D	W6
0x5290	0x980720  	MOV	W0, [W14+4]
0x5292	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1234_p24_p33.mpas,166 :: 		
0x5294	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 12 (W6)
0x5296	0xBE0006  	MOV.D	W6, W0
0x5298	0x90010E  	MOV	[W14+0], W2
0x529A	0x90019E  	MOV	[W14+2], W3
0x529C	0xEB8200  	SETM	W4
0x529E	0x07F60D  	RCALL	__Divide_32x32
0x52A0	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x52A2	0x780180  	MOV	W0, W3
0x52A4	0x780201  	MOV	W1, W4
;__Lib_UART_1234_p24_p33.mpas,168 :: 		
0x52A6	0x470060  	ADD	W14, #0, W0
0x52A8	0xD18150  	ASR	[++W0], W2
0x52AA	0xD380C0  	RRC	[--W0], W1
0x52AC	0x470064  	ADD	W14, #4, W0
0x52AE	0xE10830  	CP	W1, [W0++]
0x52B0	0xE19020  	CPB	W2, [W0--]
0x52B2	0x3D0003  	BRA GE	L__UART1_Init314
L__UART1_Init333:
;__Lib_UART_1234_p24_p33.mpas,169 :: 		
; tmp start address is: 2 (W1)
0x52B4	0x4180E1  	ADD	W3, #1, W1
0x52B6	0x4A0160  	ADDC	W4, #0, W2
; tmp end address is: 6 (W3)
; tmp end address is: 2 (W1)
0x52B8	0x370002  	BRA	L__UART1_Init2
L__UART1_Init314:
;__Lib_UART_1234_p24_p33.mpas,168 :: 		
0x52BA	0x780083  	MOV	W3, W1
0x52BC	0x780104  	MOV	W4, W2
;__Lib_UART_1234_p24_p33.mpas,169 :: 		
L__UART1_Init2:
;__Lib_UART_1234_p24_p33.mpas,172 :: 		
; tmp start address is: 2 (W1)
0x52BE	0xE10860  	CP	W1, #0
0x52C0	0xE19060  	CPB	W2, #0
0x52C2	0x3A002F  	BRA NZ	L__UART1_Init316
L__UART1_Init334:
; tmp end address is: 2 (W1)
;__Lib_UART_1234_p24_p33.mpas,175 :: 		
0x52C4	0x07F3E3  	RCALL	_Get_Fosc_kHz
;__Lib_UART_1234_p24_p33.mpas,177 :: 		
0x52C6	0x203E82  	MOV	#1000, W2
0x52C8	0x200003  	MOV	#0, W3
0x52CA	0x07EBF9  	RCALL	__Multiply_32x32
; tmp start address is: 12 (W6)
0x52CC	0xBE0300  	MOV.D	W0, W6
;__Lib_UART_1234_p24_p33.mpas,180 :: 		
0x52CE	0x07EEF9  	RCALL	_Get_Fosc_Per_Cyc
0x52D0	0xEB0080  	CLR	W1
0x52D2	0xD10081  	LSR	W1, W1
0x52D4	0xD38000  	RRC	W0, W0
0x52D6	0x400262  	ADD	W0, #2, W4
0x52D8	0x4882E0  	ADDC	W1, #0, W5
0x52DA	0xBE010A  	MOV.D	W10, W2
L__UART1_Init335:
0x52DC	0xE90204  	DEC	W4, W4
0x52DE	0x350003  	BRA LT	L__UART1_Init336
0x52E0	0xD00102  	SL	W2, W2
0x52E2	0xD28183  	RLC	W3, W3
0x52E4	0x37FFFB  	BRA	L__UART1_Init335
L__UART1_Init336:
0x52E6	0x980702  	MOV	W2, [W14+0]
0x52E8	0x980713  	MOV	W3, [W14+2]
;__Lib_UART_1234_p24_p33.mpas,182 :: 		
0x52EA	0xBE9F86  	PUSH.D	W6
0x52EC	0xBE0006  	MOV.D	W6, W0
0x52EE	0xEB8200  	SETM	W4
0x52F0	0x07EBBA  	RCALL	__Modulus_32x32
0x52F2	0xBE034F  	POP.D	W6
0x52F4	0x980720  	MOV	W0, [W14+4]
0x52F6	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_1234_p24_p33.mpas,183 :: 		
0x52F8	0xBE0006  	MOV.D	W6, W0
0x52FA	0x90010E  	MOV	[W14+0], W2
0x52FC	0x90019E  	MOV	[W14+2], W3
0x52FE	0xEB8200  	SETM	W4
0x5300	0x07F5DC  	RCALL	__Divide_32x32
; tmp end address is: 12 (W6)
; tmp start address is: 6 (W3)
0x5302	0x780180  	MOV	W0, W3
0x5304	0x780201  	MOV	W1, W4
;__Lib_UART_1234_p24_p33.mpas,185 :: 		
0x5306	0x470060  	ADD	W14, #0, W0
0x5308	0xD18150  	ASR	[++W0], W2
0x530A	0xD380C0  	RRC	[--W0], W1
0x530C	0x470064  	ADD	W14, #4, W0
0x530E	0xE10830  	CP	W1, [W0++]
0x5310	0xE19020  	CPB	W2, [W0--]
0x5312	0x3D0003  	BRA GE	L__UART1_Init315
L__UART1_Init337:
;__Lib_UART_1234_p24_p33.mpas,186 :: 		
; tmp start address is: 2 (W1)
0x5314	0x4180E1  	ADD	W3, #1, W1
0x5316	0x4A0160  	ADDC	W4, #0, W2
; tmp end address is: 6 (W3)
; tmp end address is: 2 (W1)
0x5318	0x370002  	BRA	L__UART1_Init8
L__UART1_Init315:
;__Lib_UART_1234_p24_p33.mpas,185 :: 		
0x531A	0x780083  	MOV	W3, W1
0x531C	0x780104  	MOV	W4, W2
;__Lib_UART_1234_p24_p33.mpas,186 :: 		
L__UART1_Init8:
;__Lib_UART_1234_p24_p33.mpas,188 :: 		
; tmp start address is: 2 (W1)
0x531E	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 2 (W1)
;__Lib_UART_1234_p24_p33.mpas,189 :: 		
0x5320	0x370000  	BRA	L__UART1_Init5
L__UART1_Init316:
;__Lib_UART_1234_p24_p33.mpas,172 :: 		
;__Lib_UART_1234_p24_p33.mpas,189 :: 		
L__UART1_Init5:
;__Lib_UART_1234_p24_p33.mpas,191 :: 		
; tmp start address is: 2 (W1)
0x5322	0x202280  	MOV	#lo_addr(U1BRG), W0
0x5324	0x508861  	SUB	W1, #1, [W0]
; tmp end address is: 2 (W1)
;__Lib_UART_1234_p24_p33.mpas,193 :: 		
0x5326	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_1234_p24_p33.mpas,195 :: 		
0x5328	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_1234_p24_p33.mpas,196 :: 		
0x532A	0xA84223  	BSET	U1STA, #10
;__Lib_UART_1234_p24_p33.mpas,197 :: 		
0x532C	0x07EBD1  	RCALL	_Delay_10ms
;__Lib_UART_1234_p24_p33.mpas,198 :: 		
L_end_UART1_Init:
0x532E	0xFA8000  	ULNK
0x5330	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.mpas,64 :: 		begin
;__Lib_Delays.mpas,65 :: 		result := Clock_kHz();
; Result start address is: 4 (W2)
0x3A8C	0x222E02  	MOV	#8928, W2
0x3A8E	0x200023  	MOV	#2, W3
;__Lib_Delays.mpas,66 :: 		end;
0x3A90	0xBE0002  	MOV.D	W2, W0
; Result end address is: 4 (W2)
L_end_Get_Fosc_kHz:
0x3A92	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.mpas,90 :: 		begin
;__Lib_Delays.mpas,91 :: 		Result := __FOSC_PER_CYC;
; Result start address is: 2 (W1)
0x30C2	0x200021  	MOV	#2, W1
;__Lib_Delays.mpas,92 :: 		end;
0x30C4	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Get_Fosc_Per_Cyc:
0x30C6	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_10ms:
;__Lib_Delays.mpas,669 :: 		begin
;__Lib_Delays.mpas,670 :: 		Delay_ms(10);
0x2AD0	0x200038  	MOV	#3, W8
0x2AD2	0x222E17  	MOV	#8929, W7
L__Delay_10ms51:
0x2AD4	0xED200E  	DEC	W7
0x2AD6	0x3AFFFE  	BRA NZ	L__Delay_10ms51
0x2AD8	0xED2010  	DEC	W8
0x2ADA	0x3AFFFC  	BRA NZ	L__Delay_10ms51
;__Lib_Delays.mpas,671 :: 		end;
L_end_Delay_10ms:
0x2ADC	0x060000  	RETURN
; end of _Delay_10ms
__Multiply_32x32:
0x2ABE	0xFA0000  	LNK	#0
;__Lib_Math.mpas,50 :: 		
;__Lib_Math.mpas,53 :: 		
0x2AC0	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.mpas,54 :: 		
0x2AC2	0x880050  	MOV	W0, W5
;__Lib_Math.mpas,55 :: 		
0x2AC4	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.mpas,56 :: 		
0x2AC6	0x420081  	ADD	W4, W1, W1
;__Lib_Math.mpas,57 :: 		
0x2AC8	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.mpas,58 :: 		
0x2ACA	0x420081  	ADD	W4, W1, W1
;__Lib_Math.mpas,61 :: 		
L_end__Multiply_32x32:
0x2ACC	0xFA8000  	ULNK
0x2ACE	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x2A66	0xFA0000  	LNK	#0
;__Lib_Math.mpas,165 :: 		
;__Lib_Math.mpas,167 :: 		
0x2A68	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.mpas,168 :: 		
0x2A6A	0x000000042ABA  	GOTO	the_end_Modulus_32x32
;__Lib_Math.mpas,170 :: 		
Modulus_32x32___testsus:
;__Lib_Math.mpas,171 :: 		
0x2A6E	0xE20008  	CP0	W4
;__Lib_Math.mpas,172 :: 		
0x2A70	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.mpas,174 :: 		
0x2A72	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.mpas,175 :: 		
0x2A74	0x060000  	RETURN
;__Lib_Math.mpas,177 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.mpas,178 :: 		
0x2A76	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.mpas,179 :: 		
0x2A78	0xE20002  	CP0	W1
;__Lib_Math.mpas,180 :: 		
0x2A7A	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.mpas,181 :: 		
0x2A7C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,182 :: 		
0x2A7E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,183 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.mpas,184 :: 		
0x2A80	0xE20006  	CP0	W3
;__Lib_Math.mpas,185 :: 		
0x2A82	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.mpas,186 :: 		
0x2A84	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.mpas,187 :: 		
0x2A86	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.mpas,188 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.mpas,189 :: 		
0x2A88	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.mpas,190 :: 		
0x2A8A	0xE0004F  	CP0	[--W15]
;__Lib_Math.mpas,191 :: 		
0x2A8C	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.mpas,192 :: 		
0x2A8E	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,193 :: 		
0x2A90	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,194 :: 		
Modulus_32x32_exitr:
;__Lib_Math.mpas,195 :: 		
0x2A92	0x060000  	RETURN
;__Lib_Math.mpas,196 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.mpas,197 :: 		
0x2A94	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.mpas,198 :: 		
0x2A96	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.mpas,199 :: 		
0x2A98	0x060000  	RETURN
;__Lib_Math.mpas,200 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.mpas,201 :: 		
0x2A9A	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.mpas,202 :: 		
0x2A9C	0x200206  	MOV	#32, W6
;__Lib_Math.mpas,203 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.mpas,204 :: 		
0x2A9E	0xD00000  	SL	W0, W0
;__Lib_Math.mpas,205 :: 		
0x2AA0	0xD28081  	RLC	W1, W1
;__Lib_Math.mpas,206 :: 		
0x2AA2	0xD28204  	RLC	W4, W4
;__Lib_Math.mpas,207 :: 		
0x2AA4	0xD28285  	RLC	W5, W5
;__Lib_Math.mpas,208 :: 		
0x2AA6	0xA80000  	BSET	W0, #0
;__Lib_Math.mpas,209 :: 		
0x2AA8	0x520202  	SUB	W4, W2, W4
;__Lib_Math.mpas,210 :: 		
0x2AAA	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.mpas,211 :: 		
0x2AAC	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.mpas,212 :: 		
0x2AAE	0x420202  	ADD	W4, W2, W4
;__Lib_Math.mpas,213 :: 		
0x2AB0	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.mpas,214 :: 		
0x2AB2	0xA10000  	BCLR	W0, #0
;__Lib_Math.mpas,215 :: 		
Modulus_32x32_iterate:
;__Lib_Math.mpas,216 :: 		
0x2AB4	0xE90306  	DEC	W6, W6
;__Lib_Math.mpas,217 :: 		
0x2AB6	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.mpas,218 :: 		
0x2AB8	0x060000  	RETURN
;__Lib_Math.mpas,220 :: 		
the_end_Modulus_32x32:
;__Lib_Math.mpas,223 :: 		
L_end__Modulus_32x32:
0x2ABA	0xFA8000  	ULNK
0x2ABC	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x3EBA	0xFA0000  	LNK	#0
;__Lib_Math.mpas,86 :: 		
;__Lib_Math.mpas,88 :: 		
0x3EBC	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.mpas,89 :: 		
0x3EBE	0x000000043F08  	GOTO	the_end_Divide_32x32
;__Lib_Math.mpas,91 :: 		
Divide_32x32___testsus:
;__Lib_Math.mpas,92 :: 		
0x3EC2	0xE20008  	CP0	W4
;__Lib_Math.mpas,93 :: 		
0x3EC4	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.mpas,95 :: 		
0x3EC6	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.mpas,96 :: 		
0x3EC8	0x060000  	RETURN
;__Lib_Math.mpas,98 :: 		
Divide_32x32___divsi3:
;__Lib_Math.mpas,99 :: 		
0x3ECA	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.mpas,100 :: 		
0x3ECC	0xE20002  	CP0	W1
;__Lib_Math.mpas,101 :: 		
0x3ECE	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.mpas,102 :: 		
0x3ED0	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,103 :: 		
0x3ED2	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,104 :: 		
Divide_32x32_divtestb:
;__Lib_Math.mpas,105 :: 		
0x3ED4	0xE20006  	CP0	W3
;__Lib_Math.mpas,106 :: 		
0x3ED6	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.mpas,107 :: 		
0x3ED8	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.mpas,108 :: 		
0x3EDA	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.mpas,109 :: 		
Divide_32x32_calcquot:
;__Lib_Math.mpas,110 :: 		
0x3EDC	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.mpas,111 :: 		
0x3EDE	0xE0004F  	CP0	[--W15]
;__Lib_Math.mpas,112 :: 		
0x3EE0	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.mpas,113 :: 		
0x3EE2	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,114 :: 		
0x3EE4	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,115 :: 		
Divide_32x32_returnq:
;__Lib_Math.mpas,116 :: 		
0x3EE6	0x060000  	RETURN
;__Lib_Math.mpas,117 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.mpas,118 :: 		
0x3EE8	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.mpas,119 :: 		
0x3EEA	0x200206  	MOV	#32, W6
;__Lib_Math.mpas,120 :: 		
Divide_32x32_nextbit:
;__Lib_Math.mpas,121 :: 		
0x3EEC	0xD00000  	SL	W0, W0
;__Lib_Math.mpas,122 :: 		
0x3EEE	0xD28081  	RLC	W1, W1
;__Lib_Math.mpas,123 :: 		
0x3EF0	0xD28204  	RLC	W4, W4
;__Lib_Math.mpas,124 :: 		
0x3EF2	0xD28285  	RLC	W5, W5
;__Lib_Math.mpas,125 :: 		
0x3EF4	0xA80000  	BSET	W0, #0
;__Lib_Math.mpas,126 :: 		
0x3EF6	0x520202  	SUB	W4, W2, W4
;__Lib_Math.mpas,127 :: 		
0x3EF8	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.mpas,128 :: 		
0x3EFA	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.mpas,129 :: 		
0x3EFC	0x420202  	ADD	W4, W2, W4
;__Lib_Math.mpas,130 :: 		
0x3EFE	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.mpas,131 :: 		
0x3F00	0xA10000  	BCLR	W0, #0
;__Lib_Math.mpas,132 :: 		
Divide_32x32_iterate:
;__Lib_Math.mpas,133 :: 		
0x3F02	0xE90306  	DEC	W6, W6
;__Lib_Math.mpas,134 :: 		
0x3F04	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.mpas,135 :: 		
0x3F06	0x060000  	RETURN
;__Lib_Math.mpas,137 :: 		
the_end_Divide_32x32:
;__Lib_Math.mpas,140 :: 		
L_end__Divide_32x32:
0x3F08	0xFA8000  	ULNK
0x3F0A	0x060000  	RETURN
; end of __Divide_32x32
_UART1_Write_Text:
0x5072	0xFA0000  	LNK	#0
;__Lib_UART_1234_p24_p33.mpas,325 :: 		
;__Lib_UART_1234_p24_p33.mpas,326 :: 		
; counter start address is: 2 (W1)
0x5074	0xEF2002  	CLR	W1
;__Lib_UART_1234_p24_p33.mpas,327 :: 		
0x5076	0x78401A  	MOV.B	[W10], W0
; data_ start address is: 4 (W2)
0x5078	0x784100  	MOV.B	W0, W2
; data_ end address is: 4 (W2)
; counter end address is: 2 (W1)
0x507A	0x784002  	MOV.B	W2, W0
0x507C	0x784101  	MOV.B	W1, W2
;__Lib_UART_1234_p24_p33.mpas,328 :: 		
L__UART1_Write_Text43:
; data_ start address is: 0 (W0)
; counter start address is: 4 (W2)
0x507E	0xE10460  	CP.B	W0, #0
0x5080	0x32000A  	BRA Z	L__UART1_Write_Text44
L__UART1_Write_Text360:
;__Lib_UART_1234_p24_p33.mpas,330 :: 		
0x5082	0x781F8A  	PUSH	W10
; data_ end address is: 0 (W0)
0x5084	0xFB8500  	ZE	W0, W10
0x5086	0x07FA3D  	RCALL	_UART1_Write
0x5088	0x78054F  	POP	W10
;__Lib_UART_1234_p24_p33.mpas,331 :: 		
; counter start address is: 2 (W1)
0x508A	0x4140E1  	ADD.B	W2, #1, W1
; counter end address is: 4 (W2)
;__Lib_UART_1234_p24_p33.mpas,332 :: 		
0x508C	0xFB8001  	ZE	W1, W0
0x508E	0x450000  	ADD	W10, W0, W0
; data_ start address is: 0 (W0)
0x5090	0x784010  	MOV.B	[W0], W0
;__Lib_UART_1234_p24_p33.mpas,333 :: 		
0x5092	0x784101  	MOV.B	W1, W2
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x5094	0x37FFF4  	BRA	L__UART1_Write_Text43
L__UART1_Write_Text44:
;__Lib_UART_1234_p24_p33.mpas,334 :: 		
L_end_UART1_Write_Text:
0x5096	0xFA8000  	ULNK
0x5098	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x4502	0xFA0000  	LNK	#0
;__Lib_UART_1234_p24_p33.mpas,300 :: 		
;__Lib_UART_1234_p24_p33.mpas,301 :: 		
L__UART1_Write34:
0x4504	0x801111  	MOV	U1STA, W1
0x4506	0x201000  	MOV	#256, W0
0x4508	0x608000  	AND	W1, W0, W0
0x450A	0xE10060  	CP	W0, #0
0x450C	0x3A0002  	BRA NZ	L__UART1_Write35
L__UART1_Write355:
;__Lib_UART_1234_p24_p33.mpas,302 :: 		
0x450E	0x000000  	NOP
0x4510	0x37FFF9  	BRA	L__UART1_Write34
L__UART1_Write35:
;__Lib_UART_1234_p24_p33.mpas,303 :: 		
0x4512	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_1234_p24_p33.mpas,304 :: 		
L_end_UART1_Write:
0x4514	0xFA8000  	ULNK
0x4516	0x060000  	RETURN
; end of _UART1_Write
_Eth_Init_:
0x4D1E	0xFA0002  	LNK	#2
;lib2_enc600_V3_5_b.mpas,120 :: 		Begin
;lib2_enc600_V3_5_b.mpas,121 :: 		DisableInt;
0x4D20	0x781F8A  	PUSH	W10
0x4D22	0x781F8B  	PUSH	W11
0x4D24	0x781F8C  	PUSH	W12
0x4D26	0x07FBF8  	RCALL	_DisableInt
;lib2_enc600_V3_5_b.mpas,122 :: 		NTP_Time := 3534364800; // 2012
0x4D28	0x220800  	MOV	#8320, W0
0x4D2A	0x2D2AA1  	MOV	#53930, W1
0x4D2C	0x888360  	MOV	W0, _NTP_Time
0x4D2E	0x888371  	MOV	W1, _NTP_Time+2
;lib2_enc600_V3_5_b.mpas,123 :: 		LongTmr := 12001;
0x4D30	0x22EE10  	MOV	#12001, W0
0x4D32	0x200001  	MOV	#0, W1
0x4D34	0x8883B0  	MOV	W0, _LongTmr
0x4D36	0x8883C1  	MOV	W1, _LongTmr+2
;lib2_enc600_V3_5_b.mpas,124 :: 		EnableInt;
0x4D38	0x07FBF1  	RCALL	_EnableInt
;lib2_enc600_V3_5_b.mpas,125 :: 		NTP_Sync := False;
0x4D3A	0xEF2000  	CLR	W0
0x4D3C	0x8883A0  	MOV	W0, _NTP_Sync
;lib2_enc600_V3_5_b.mpas,126 :: 		Offset_Time := 0;
0x4D3E	0xEF2000  	CLR	W0
0x4D40	0xEF2002  	CLR	W1
0x4D42	0x888380  	MOV	W0, _Offset_Time
0x4D44	0x888391  	MOV	W1, _Offset_Time+2
;lib2_enc600_V3_5_b.mpas,127 :: 		NTP_Sec := 0;
0x4D46	0xEF2000  	CLR	W0
0x4D48	0x888300  	MOV	W0, _NTP_Sec
;lib2_enc600_V3_5_b.mpas,128 :: 		NTP_ReSync := 0;
0x4D4A	0xEF2000  	CLR	W0
0x4D4C	0x888180  	MOV	W0, _NTP_ReSync
;lib2_enc600_V3_5_b.mpas,129 :: 		TickCounter1 := 0;
0x4D4E	0xEF2000  	CLR	W0
0x4D50	0x888170  	MOV	W0, _TickCounter1
;lib2_enc600_V3_5_b.mpas,130 :: 		TickCounter10 := 0;
0x4D52	0xEF2000  	CLR	W0
0x4D54	0x888160  	MOV	W0, _TickCounter10
;lib2_enc600_V3_5_b.mpas,131 :: 		count_100 := 0;
0x4D56	0x210271  	MOV	#lo_addr(_count_100), W1
0x4D58	0xEF2000  	CLR	W0
0x4D5A	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,132 :: 		offset_clock_err := 0;
0x4D5C	0x2105E1  	MOV	#lo_addr(_Offset_clock_err), W1
0x4D5E	0xEF2000  	CLR	W0
0x4D60	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,133 :: 		DNS_resp := False;
0x4D62	0xEF2000  	CLR	W0
0x4D64	0x8882E0  	MOV	W0, _DNS_resp
;lib2_enc600_V3_5_b.mpas,134 :: 		TimeRec.Str := ' ';
0x4D66	0x210421  	MOV	#lo_addr(_TimeRec+16), W1
0x4D68	0xB3C200  	MOV.B	#32, W0
0x4D6A	0x785880  	MOV.B	W0, [W1++]
0x4D6C	0xEF2000  	CLR	W0
0x4D6E	0x785880  	MOV.B	W0, [W1++]
;lib2_enc600_V3_5_b.mpas,136 :: 		ENC_INT_dir := 1;
0x4D70	0xA80E30  	BSET	ENC_INT_dir, BitPos(ENC_INT_dir+0)
;lib2_enc600_V3_5_b.mpas,137 :: 		ENC_CS := 1;
0x4D72	0xA82E34  	BSET	ENC_CS, BitPos(ENC_CS+0)
;lib2_enc600_V3_5_b.mpas,138 :: 		nop;
0x4D74	0x000000  	NOP
;lib2_enc600_V3_5_b.mpas,139 :: 		ENC_CS_dir := 0;
0x4D76	0xA92E30  	BCLR	ENC_CS_dir, BitPos(ENC_CS_dir+0)
;lib2_enc600_V3_5_b.mpas,140 :: 		delayms(10);
0x4D78	0x2000AA  	MOV	#10, W10
0x4D7A	0x07FBBB  	RCALL	_delayms
;lib2_enc600_V3_5_b.mpas,141 :: 		Eth_UnSelect;
0x4D7C	0x07FB78  	RCALL	_Eth_UnSelect
;lib2_enc600_V3_5_b.mpas,142 :: 		delayms(10);
0x4D7E	0x2000AA  	MOV	#10, W10
0x4D80	0x07FBB8  	RCALL	_delayms
;lib2_enc600_V3_5_b.mpas,143 :: 		Eth_SendSystemReset;
0x4D82	0x07FB78  	RCALL	_Eth_SendSystemReset
;lib2_enc600_V3_5_b.mpas,145 :: 		Eth_WriteReg(ERXST_,RXSTART);
0x4D84	0x21000B  	MOV	#4096, W11
0x4D86	0xB3C04A  	MOV.B	#4, W10
0x4D88	0x07E6AD  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,146 :: 		Eth_WriteReg(ERXTAIL_,$5FFE);
0x4D8A	0x25FFEB  	MOV	#24574, W11
0x4D8C	0xB3C06A  	MOV.B	#6, W10
0x4D8E	0x07E6AA  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,147 :: 		Eth_WriteReg(EUDAST_,$6000);
0x4D90	0x26000B  	MOV	#24576, W11
0x4D92	0xB3C16A  	MOV.B	#22, W10
0x4D94	0x07E6A7  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,148 :: 		Eth_WriteReg(EUDAND_,$6001);
0x4D96	0x26001B  	MOV	#24577, W11
0x4D98	0xB3C18A  	MOV.B	#24, W10
0x4D9A	0x07E6A4  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,150 :: 		Eth_WriteReg(ERXRDPT_,RXSTART);
0x4D9C	0x21000B  	MOV	#4096, W11
0x4D9E	0xB3C8AA  	MOV.B	#138, W10
0x4DA0	0x07E6A1  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,151 :: 		NextPacket := RXSTART;
0x4DA2	0x210000  	MOV	#4096, W0
0x4DA4	0x88E520  	MOV	W0, _NextPacket
;lib2_enc600_V3_5_b.mpas,152 :: 		Eth_WriteReg(ETXST_,TXSTART);
0x4DA6	0xEF2016  	CLR	W11
0x4DA8	0xEF2014  	CLR	W10
0x4DAA	0x07E69C  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,154 :: 		Eth_WriteReg(EGPRDPT_, GPSTART);
0x4DAC	0x20800B  	MOV	#2048, W11
0x4DAE	0xB3C86A  	MOV.B	#134, W10
0x4DB0	0x07E699  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,156 :: 		Eth_WriteReg(MAMXF_, MAX_PACKET);    // Set the maximum packet length to 1518
0x4DB2	0x205EEB  	MOV	#1518, W11
0x4DB4	0xB3C4AA  	MOV.B	#74, W10
0x4DB6	0x07E696  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,157 :: 		Eth_WriteReg(MABBIPG_,$15);
0x4DB8	0x20015B  	MOV	#21, W11
0x4DBA	0xB3C44A  	MOV.B	#68, W10
0x4DBC	0x07E693  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,159 :: 		if use_user_MAC <> 0 then
0x4DBE	0x8080B0  	MOV	_use_user_MAC, W0
0x4DC0	0xE10060  	CP	W0, #0
0x4DC2	0x32001F  	BRA Z	L__Eth_Init_31
L__Eth_Init_134:
;lib2_enc600_V3_5_b.mpas,161 :: 		Lo(buf) := eth_mac[0];
0x4DC4	0x210180  	MOV	#lo_addr(_eth_mac), W0
0x4DC6	0x784010  	MOV.B	[W0], W0
0x4DC8	0x984700  	MOV.B	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,162 :: 		Hi(buf) := eth_mac[1];
0x4DCA	0x470060  	ADD	W14, #0, W0
0x4DCC	0x4000E1  	ADD	W0, #1, W1
0x4DCE	0x210190  	MOV	#lo_addr(_eth_mac+1), W0
0x4DD0	0x784890  	MOV.B	[W0], [W1]
;lib2_enc600_V3_5_b.mpas,163 :: 		Eth_WriteReg(MAADR1_,buf);
0x4DD2	0x90058E  	MOV	[W14+0], W11
0x4DD4	0xB3C64A  	MOV.B	#100, W10
0x4DD6	0x07E686  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,164 :: 		Lo(buf) := eth_mac[2];
0x4DD8	0x2101A0  	MOV	#lo_addr(_eth_mac+2), W0
0x4DDA	0x784010  	MOV.B	[W0], W0
0x4DDC	0x984700  	MOV.B	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,165 :: 		Hi(buf) := eth_mac[3];
0x4DDE	0x470060  	ADD	W14, #0, W0
0x4DE0	0x4000E1  	ADD	W0, #1, W1
0x4DE2	0x2101B0  	MOV	#lo_addr(_eth_mac+3), W0
0x4DE4	0x784890  	MOV.B	[W0], [W1]
;lib2_enc600_V3_5_b.mpas,166 :: 		Eth_WriteReg(MAADR2_,buf);
0x4DE6	0x90058E  	MOV	[W14+0], W11
0x4DE8	0xB3C62A  	MOV.B	#98, W10
0x4DEA	0x07E67C  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,167 :: 		Lo(buf) := eth_mac[4];
0x4DEC	0x2101C0  	MOV	#lo_addr(_eth_mac+4), W0
0x4DEE	0x784010  	MOV.B	[W0], W0
0x4DF0	0x984700  	MOV.B	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,168 :: 		Hi(buf) := eth_mac[5];
0x4DF2	0x470060  	ADD	W14, #0, W0
0x4DF4	0x4000E1  	ADD	W0, #1, W1
0x4DF6	0x2101D0  	MOV	#lo_addr(_eth_mac+5), W0
0x4DF8	0x784890  	MOV.B	[W0], [W1]
;lib2_enc600_V3_5_b.mpas,169 :: 		Eth_WriteReg(MAADR3_,buf);
0x4DFA	0x90058E  	MOV	[W14+0], W11
0x4DFC	0xB3C60A  	MOV.B	#96, W10
0x4DFE	0x07E672  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,170 :: 		end
0x4E00	0x370021  	BRA	L__Eth_Init_32
;lib2_enc600_V3_5_b.mpas,171 :: 		else
L__Eth_Init_31:
;lib2_enc600_V3_5_b.mpas,173 :: 		buf := Eth_ReadReg(MAADR1_);
0x4E02	0xB3C64A  	MOV.B	#100, W10
0x4E04	0x07E5B3  	RCALL	_Eth_ReadReg
0x4E06	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,174 :: 		eth_mac[0] := Lo(buf);
0x4E08	0x210181  	MOV	#lo_addr(_eth_mac), W1
0x4E0A	0x90400E  	MOV.B	[W14+0], W0
0x4E0C	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,175 :: 		eth_mac[1] := Hi(buf);
0x4E0E	0x470060  	ADD	W14, #0, W0
0x4E10	0xEC2000  	INC	W0
0x4E12	0x784090  	MOV.B	[W0], W1
0x4E14	0x210190  	MOV	#lo_addr(_eth_mac+1), W0
0x4E16	0x784801  	MOV.B	W1, [W0]
;lib2_enc600_V3_5_b.mpas,176 :: 		buf := Eth_ReadReg(MAADR2_);
0x4E18	0xB3C62A  	MOV.B	#98, W10
0x4E1A	0x07E5A8  	RCALL	_Eth_ReadReg
0x4E1C	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,177 :: 		eth_mac[2] := Lo(buf);
0x4E1E	0x2101A1  	MOV	#lo_addr(_eth_mac+2), W1
0x4E20	0x90400E  	MOV.B	[W14+0], W0
0x4E22	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,178 :: 		eth_mac[3] := Hi(buf);
0x4E24	0x470060  	ADD	W14, #0, W0
0x4E26	0xEC2000  	INC	W0
0x4E28	0x784090  	MOV.B	[W0], W1
0x4E2A	0x2101B0  	MOV	#lo_addr(_eth_mac+3), W0
0x4E2C	0x784801  	MOV.B	W1, [W0]
;lib2_enc600_V3_5_b.mpas,179 :: 		buf := Eth_ReadReg(MAADR3_);
0x4E2E	0xB3C60A  	MOV.B	#96, W10
0x4E30	0x07E59D  	RCALL	_Eth_ReadReg
0x4E32	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,180 :: 		eth_mac[4] := Lo(buf);
0x4E34	0x2101C1  	MOV	#lo_addr(_eth_mac+4), W1
0x4E36	0x90400E  	MOV.B	[W14+0], W0
0x4E38	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,181 :: 		eth_mac[5] := Hi(buf);
0x4E3A	0x470060  	ADD	W14, #0, W0
0x4E3C	0xEC2000  	INC	W0
0x4E3E	0x784090  	MOV.B	[W0], W1
0x4E40	0x2101D0  	MOV	#lo_addr(_eth_mac+5), W0
0x4E42	0x784801  	MOV.B	W1, [W0]
;lib2_enc600_V3_5_b.mpas,182 :: 		end;
L__Eth_Init_32:
;lib2_enc600_V3_5_b.mpas,184 :: 		buf := Eth_ReadReg(MACON2_);
0x4E44	0xB3C42A  	MOV.B	#66, W10
0x4E46	0x07E592  	RCALL	_Eth_ReadReg
0x4E48	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,185 :: 		buf := buf or $0001;
0x4E4A	0x700061  	IOR	W0, #1, W0
0x4E4C	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,186 :: 		Eth_WriteReg(MACON2_, buf);
0x4E4E	0x780580  	MOV	W0, W11
0x4E50	0xB3C42A  	MOV.B	#66, W10
0x4E52	0x07E648  	RCALL	_Eth_WriteReg
;lib2_enc600_V3_5_b.mpas,191 :: 		Eth_WritePHYReg(PHANA_,$05E1);
0x4E54	0x205E1B  	MOV	#1505, W11
0x4E56	0xB3C04A  	MOV.B	#4, W10
0x4E58	0x07FB38  	RCALL	_Eth_WritePHYReg
;lib2_enc600_V3_5_b.mpas,199 :: 		tcp_counter := 1000;
0x4E5A	0x203E80  	MOV	#1000, W0
0x4E5C	0x88E530  	MOV	W0, _tcp_counter
;lib2_enc600_V3_5_b.mpas,200 :: 		ACK_No := $42844A80;
0x4E5E	0x24A800  	MOV	#19072, W0
0x4E60	0x242841  	MOV	#17028, W1
0x4E62	0x88E580  	MOV	W0, _ACK_No
0x4E64	0x88E591  	MOV	W1, _ACK_No+2
;lib2_enc600_V3_5_b.mpas,201 :: 		SEQ_No := $42844A80;
0x4E66	0x24A800  	MOV	#19072, W0
0x4E68	0x242841  	MOV	#17028, W1
0x4E6A	0x88E560  	MOV	W0, _SEQ_No
0x4E6C	0x88E571  	MOV	W1, _SEQ_No+2
;lib2_enc600_V3_5_b.mpas,202 :: 		Eth_Udp_Init;
0x4E6E	0x07FB58  	RCALL	_Eth_Udp_Init
;lib2_enc600_V3_5_b.mpas,203 :: 		Eth_Arp_EraseCache;
0x4E70	0x07F97C  	RCALL	_Eth_Arp_EraseCache
;lib2_enc600_V3_5_b.mpas,204 :: 		Eth_Ping_EraseCache;
0x4E72	0x07FA49  	RCALL	_Eth_Ping_EraseCache
;lib2_enc600_V3_5_b.mpas,205 :: 		EraseSockets;
0x4E74	0x07F9B7  	RCALL	_EraseSockets
;lib2_enc600_V3_5_b.mpas,206 :: 		Firewall(False, False, False);
0x4E76	0xEF2018  	CLR	W12
0x4E78	0xEF2016  	CLR	W11
0x4E7A	0xEF2014  	CLR	W10
0x4E7C	0x07F9AF  	RCALL	_Firewall
;lib2_enc600_V3_5_b.mpas,207 :: 		memset(@TCP_Opened_Ports, 0, PORT_CACHE_LEN*2); // clear ports word format
0x4E7E	0x20004C  	MOV	#4, W12
0x4E80	0xEF2016  	CLR	W11
0x4E82	0x21CA8A  	MOV	#lo_addr(_TCP_Opened_Ports), W10
0x4E84	0x07DCC2  	RCALL	_memset
;lib2_enc600_V3_5_b.mpas,208 :: 		memset(@UDP_Opened_Ports, 0, PORT_CACHE_LEN*2); // clear ports word format
0x4E86	0x20004C  	MOV	#4, W12
0x4E88	0xEF2016  	CLR	W11
0x4E8A	0x21CA0A  	MOV	#lo_addr(_UDP_Opened_Ports), W10
0x4E8C	0x07DCBE  	RCALL	_memset
;lib2_enc600_V3_5_b.mpas,209 :: 		Eth_Policy(Drop);
0x4E8E	0xB3C02A  	MOV.B	#2, W10
0x4E90	0x07FA7A  	RCALL	_Eth_Policy
;lib2_enc600_V3_5_b.mpas,210 :: 		delayms(10);
0x4E92	0x2000AA  	MOV	#10, W10
0x4E94	0x07FB2E  	RCALL	_delayms
;lib2_enc600_V3_5_b.mpas,212 :: 		DHCP_count_1 := 10;
0x4E96	0x2000A0  	MOV	#10, W0
0x4E98	0x88E4B0  	MOV	W0, _DHCP_count_1
;lib2_enc600_V3_5_b.mpas,213 :: 		DHCP_count_2 := 0;
0x4E9A	0xEF2000  	CLR	W0
0x4E9C	0x88E4A0  	MOV	W0, _DHCP_count_2
;lib2_enc600_V3_5_b.mpas,214 :: 		DHCP_count_3 := 0;
0x4E9E	0xEF2000  	CLR	W0
0x4EA0	0xEF2002  	CLR	W1
0x4EA2	0x88E480  	MOV	W0, _DHCP_count_3
0x4EA4	0x88E491  	MOV	W1, _DHCP_count_3+2
;lib2_enc600_V3_5_b.mpas,215 :: 		DHCP_Lease_Time := (3600*6); // 6 ore
0x4EA6	0x254600  	MOV	#21600, W0
0x4EA8	0x200001  	MOV	#0, W1
0x4EAA	0x88E4C0  	MOV	W0, _DHCP_Lease_Time
0x4EAC	0x88E4D1  	MOV	W1, _DHCP_Lease_Time+2
;lib2_enc600_V3_5_b.mpas,216 :: 		DHCP_State := 0;
0x4EAE	0x2105F1  	MOV	#lo_addr(_DHCP_State), W1
0x4EB0	0xEF2000  	CLR	W0
0x4EB2	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,218 :: 		udp_broadcast := False;
0x4EB4	0xEF2000  	CLR	W0
0x4EB6	0x888150  	MOV	W0, _udp_broadcast
;lib2_enc600_V3_5_b.mpas,219 :: 		broadcast_packet := False;
0x4EB8	0xEF2000  	CLR	W0
0x4EBA	0x888090  	MOV	W0, _broadcast_packet
;lib2_enc600_V3_5_b.mpas,220 :: 		dynamic_var_addr := $1000;
0x4EBC	0x210000  	MOV	#4096, W0
0x4EBE	0x88E4F0  	MOV	W0, _dynamic_var_addr
;lib2_enc600_V3_5_b.mpas,222 :: 		use_user_MAC := False;
0x4EC0	0xEF2000  	CLR	W0
0x4EC2	0x8880B0  	MOV	W0, _use_user_MAC
;lib2_enc600_V3_5_b.mpas,224 :: 		TCP_Wait := 10;   // Seconds
0x4EC4	0x2000A0  	MOV	#10, W0
0x4EC6	0x88E4E0  	MOV	W0, _TCP_Wait
;lib2_enc600_V3_5_b.mpas,225 :: 		UDP_Wait := 10;   // Seconds
0x4EC8	0x2000A0  	MOV	#10, W0
0x4ECA	0x88E5A0  	MOV	W0, _UDP_Wait
;lib2_enc600_V3_5_b.mpas,226 :: 		ARP_Wait := 10;   // Seconds
0x4ECC	0x2000A0  	MOV	#10, W0
0x4ECE	0x892930  	MOV	W0, _ARP_Wait
;lib2_enc600_V3_5_b.mpas,227 :: 		PING_Wait := 10;
0x4ED0	0x2000A0  	MOV	#10, W0
0x4ED2	0x892920  	MOV	W0, _PING_Wait
;lib2_enc600_V3_5_b.mpas,229 :: 		opened_socket := 255;
0x4ED4	0x200FF0  	MOV	#255, W0
0x4ED6	0x892910  	MOV	W0, _opened_socket
;lib2_enc600_V3_5_b.mpas,230 :: 		End;
L_end_Eth_Init_:
0x4ED8	0x78064F  	POP	W12
0x4EDA	0x7805CF  	POP	W11
0x4EDC	0x78054F  	POP	W10
0x4EDE	0xFA8000  	ULNK
0x4EE0	0x060000  	RETURN
; end of _Eth_Init_
_DisableInt:
;lib1_enc600_V3_5_b.mpas,120 :: 		begin
;lib1_enc600_V3_5_b.mpas,122 :: 		DISI #31
0x4518	0xFC001F  	DISI	#31
;lib1_enc600_V3_5_b.mpas,124 :: 		end;
L_end_DisableInt:
0x451A	0x060000  	RETURN
; end of _DisableInt
_EnableInt:
;lib1_enc600_V3_5_b.mpas,127 :: 		begin
;lib1_enc600_V3_5_b.mpas,128 :: 		DISICNT := 0;
0x451C	0xEF2052  	CLR	DISICNT
;lib1_enc600_V3_5_b.mpas,129 :: 		end;
L_end_EnableInt:
0x451E	0x060000  	RETURN
; end of _EnableInt
_delayms:
;lib1_enc600_V3_5_b.mpas,133 :: 		begin
;lib1_enc600_V3_5_b.mpas,134 :: 		i := 0;
; i start address is: 0 (W0)
0x44F2	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
;lib1_enc600_V3_5_b.mpas,135 :: 		while i < n do
L__delayms4:
; i start address is: 0 (W0)
0x44F4	0xE1000A  	CP	W0, W10
0x44F6	0x310004  	BRA GEU	L__delayms5
L__delayms281:
;lib1_enc600_V3_5_b.mpas,137 :: 		delay_1ms_;
0x44F8	0x07E899  	RCALL	_Delay_1ms_
;lib1_enc600_V3_5_b.mpas,138 :: 		CLRWDT;
0x44FA	0xFE6000  	CLRWDT
;lib1_enc600_V3_5_b.mpas,139 :: 		inc(i);
0x44FC	0xEC2000  	INC	W0
;lib1_enc600_V3_5_b.mpas,140 :: 		end;
; i end address is: 0 (W0)
0x44FE	0x37FFFA  	BRA	L__delayms4
L__delayms5:
;lib1_enc600_V3_5_b.mpas,141 :: 		end;
L_end_delayms:
0x4500	0x060000  	RETURN
; end of _delayms
_Delay_1ms_:
;Lib_Delays_LIO.mpas,92 :: 		begin
;Lib_Delays_LIO.mpas,93 :: 		Delay_ms(1);
0x162C	0x236B07  	MOV	#14000, W7
L__Delay_1ms_43:
0x162E	0xED200E  	DEC	W7
0x1630	0x3AFFFE  	BRA NZ	L__Delay_1ms_43
0x1632	0x000000  	NOP
0x1634	0x000000  	NOP
;Lib_Delays_LIO.mpas,94 :: 		end;
L_end_Delay_1ms_:
0x1636	0x060000  	RETURN
; end of _Delay_1ms_
_Eth_UnSelect:
;lib1_enc600_V3_5_b.mpas,149 :: 		begin
;lib1_enc600_V3_5_b.mpas,150 :: 		nop;
0x446E	0x000000  	NOP
;lib1_enc600_V3_5_b.mpas,151 :: 		ENC_CS := 1;
0x4470	0xA82E34  	BSET	ENC_CS, BitPos(ENC_CS+0)
;lib1_enc600_V3_5_b.mpas,152 :: 		End;
L_end_Eth_UnSelect:
0x4472	0x060000  	RETURN
; end of _Eth_UnSelect
_Eth_SendSystemReset:
;lib1_enc600_V3_5_b.mpas,257 :: 		begin
;lib1_enc600_V3_5_b.mpas,258 :: 		while True do
0x4474	0x781F8A  	PUSH	W10
0x4476	0x781F8B  	PUSH	W11
L__Eth_SendSystemReset35:
;lib1_enc600_V3_5_b.mpas,260 :: 		while True do
L__Eth_SendSystemReset40:
;lib1_enc600_V3_5_b.mpas,262 :: 		Eth_WriteReg(EUDAST_,$1234);
0x4478	0x21234B  	MOV	#4660, W11
0x447A	0xB3C16A  	MOV.B	#22, W10
0x447C	0x07EB33  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,263 :: 		if Eth_ReadReg(EUDAST_) = $1234 then
0x447E	0xB3C16A  	MOV.B	#22, W10
0x4480	0x07EA75  	RCALL	_Eth_ReadReg
0x4482	0x212341  	MOV	#4660, W1
0x4484	0xE10001  	CP	W0, W1
0x4486	0x3A0001  	BRA NZ	L__Eth_SendSystemReset45
L__Eth_SendSystemReset298:
;lib1_enc600_V3_5_b.mpas,264 :: 		Break;
0x4488	0x370001  	BRA	L__Eth_SendSystemReset41
L__Eth_SendSystemReset45:
;lib1_enc600_V3_5_b.mpas,265 :: 		end;
0x448A	0x37FFF6  	BRA	L__Eth_SendSystemReset40
L__Eth_SendSystemReset41:
;lib1_enc600_V3_5_b.mpas,266 :: 		while True do
L__Eth_SendSystemReset48:
;lib1_enc600_V3_5_b.mpas,268 :: 		if (Eth_ReadReg(ESTAT_) and $1000) = $1000 then  // CLKRDY
0x448C	0xB3C1AA  	MOV.B	#26, W10
0x448E	0x07EA6E  	RCALL	_Eth_ReadReg
0x4490	0x210001  	MOV	#4096, W1
0x4492	0x600081  	AND	W0, W1, W1
0x4494	0x210000  	MOV	#4096, W0
0x4496	0xE10800  	CP	W1, W0
0x4498	0x3A0001  	BRA NZ	L__Eth_SendSystemReset53
L__Eth_SendSystemReset299:
;lib1_enc600_V3_5_b.mpas,269 :: 		Break
0x449A	0x370001  	BRA	L__Eth_SendSystemReset49
L__Eth_SendSystemReset53:
;lib1_enc600_V3_5_b.mpas,270 :: 		end;
0x449C	0x37FFF7  	BRA	L__Eth_SendSystemReset48
L__Eth_SendSystemReset49:
;lib1_enc600_V3_5_b.mpas,271 :: 		Eth_BSF(ECON2_, $0010);   // ETHRST
0x449E	0x20010B  	MOV	#16, W11
0x44A0	0xB3C6EA  	MOV.B	#110, W10
0x44A2	0x07EA59  	RCALL	_Eth_BSF
;lib1_enc600_V3_5_b.mpas,272 :: 		Delay_us(50);
0x44A4	0x202BC7  	MOV	#700, W7
L__Eth_SendSystemReset55:
0x44A6	0xED200E  	DEC	W7
0x44A8	0x3AFFFE  	BRA NZ	L__Eth_SendSystemReset55
0x44AA	0x000000  	NOP
0x44AC	0x000000  	NOP
;lib1_enc600_V3_5_b.mpas,279 :: 		if Eth_ReadReg(EUDAST_) = 0 then
0x44AE	0xB3C16A  	MOV.B	#22, W10
0x44B0	0x07EA5D  	RCALL	_Eth_ReadReg
0x44B2	0xE10060  	CP	W0, #0
0x44B4	0x3A0001  	BRA NZ	L__Eth_SendSystemReset58
L__Eth_SendSystemReset300:
;lib1_enc600_V3_5_b.mpas,280 :: 		Break;
0x44B6	0x370001  	BRA	L__Eth_SendSystemReset36
L__Eth_SendSystemReset58:
;lib1_enc600_V3_5_b.mpas,281 :: 		end;
0x44B8	0x37FFDF  	BRA	L__Eth_SendSystemReset35
L__Eth_SendSystemReset36:
;lib1_enc600_V3_5_b.mpas,282 :: 		Delay_us(256);   // Wait 256us for the PHY register and bits to become available.
0x44BA	0x20E007  	MOV	#3584, W7
L__Eth_SendSystemReset60:
0x44BC	0xED200E  	DEC	W7
0x44BE	0x3AFFFE  	BRA NZ	L__Eth_SendSystemReset60
0x44C0	0x000000  	NOP
0x44C2	0x000000  	NOP
;lib1_enc600_V3_5_b.mpas,283 :: 		end;
L_end_Eth_SendSystemReset:
0x44C4	0x7805CF  	POP	W11
0x44C6	0x78054F  	POP	W10
0x44C8	0x060000  	RETURN
; end of _Eth_SendSystemReset
_Eth_WriteReg:
;lib1_enc600_V3_5_b.mpas,252 :: 		Begin
;lib1_enc600_V3_5_b.mpas,253 :: 		WCmd4(WCRUCMD_,register_address,data_b);
0x1AE4	0x781F8A  	PUSH	W10
0x1AE6	0x781F8B  	PUSH	W11
0x1AE8	0x781F8C  	PUSH	W12
0x1AEA	0x78060B  	MOV	W11, W12
0x1AEC	0x78458A  	MOV.B	W10, W11
0x1AEE	0xB3C22A  	MOV.B	#34, W10
0x1AF0	0x07FAFD  	RCALL	lib1_enc600_V3_5_b_WCmd4
;lib1_enc600_V3_5_b.mpas,254 :: 		End;
L_end_Eth_WriteReg:
0x1AF2	0x78064F  	POP	W12
0x1AF4	0x7805CF  	POP	W11
0x1AF6	0x78054F  	POP	W10
0x1AF8	0x060000  	RETURN
; end of _Eth_WriteReg
lib1_enc600_V3_5_b_WCmd4:
;lib1_enc600_V3_5_b.mpas,227 :: 		Begin
;lib1_enc600_V3_5_b.mpas,228 :: 		Eth_Select;
0x10EC	0x781F8A  	PUSH	W10
0x10EE	0x07FB53  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,229 :: 		Spi_Read_(cmd1);
0x10F0	0x07FB0F  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,230 :: 		Spi_Read_(cmd2);
0x10F2	0x78450B  	MOV.B	W11, W10
0x10F4	0x07FB0D  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,231 :: 		Spi_Read_(Lo(cmd3));
0x10F6	0x78450C  	MOV.B	W12, W10
0x10F8	0x07FB0B  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,232 :: 		Spi_Read_(Hi(cmd3));
0x10FA	0x200180  	MOV	#lo_addr(W12), W0
0x10FC	0xEC2000  	INC	W0
0x10FE	0x784010  	MOV.B	[W0], W0
0x1100	0x784500  	MOV.B	W0, W10
0x1102	0x07FB06  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,233 :: 		Eth_UnSelect;
0x1104	0x0719B4  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,234 :: 		End;
L_end_WCmd4:
0x1106	0x78054F  	POP	W10
0x1108	0x060000  	RETURN
; end of lib1_enc600_V3_5_b_WCmd4
_Eth_Select:
;lib1_enc600_V3_5_b.mpas,144 :: 		begin
;lib1_enc600_V3_5_b.mpas,145 :: 		ENC_CS := 0;
0x0796	0xA92E34  	BCLR	ENC_CS, BitPos(ENC_CS+0)
;lib1_enc600_V3_5_b.mpas,146 :: 		End;
L_end_Eth_Select:
0x0798	0x060000  	RETURN
; end of _Eth_Select
_Spi_Read_:
;lib1_enc600_V3_5_b.mpas,155 :: 		begin
;lib1_enc600_V3_5_b.mpas,158 :: 		MOV SPI1BUF,W0
0x0710	0x801240  	MOV	SPI1BUF, W0
;lib1_enc600_V3_5_b.mpas,160 :: 		while SPI1STAT.1 = 1 do ;
L__Spi_Read_12:
0x0712	0xAF2240  	BTSC	SPI1STAT, #1
0x0714	0x37FFFE  	BRA	L__Spi_Read_12
;lib1_enc600_V3_5_b.mpas,161 :: 		SPI1BUF := dummy;
0x0716	0xFB800A  	ZE	W10, W0
0x0718	0xB7A248  	MOV	WREG, SPI1BUF
;lib1_enc600_V3_5_b.mpas,162 :: 		while SPI1STAT.0 = 0 do ;
L__Spi_Read_17:
0x071A	0xAE0240  	BTSS	SPI1STAT, #0
0x071C	0x37FFFE  	BRA	L__Spi_Read_17
;lib1_enc600_V3_5_b.mpas,163 :: 		Result := SPI1BUF;
; Result start address is: 2 (W1)
0x071E	0x801241  	MOV	SPI1BUF, W1
;lib1_enc600_V3_5_b.mpas,164 :: 		end;
0x0720	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_Spi_Read_:
0x0722	0x060000  	RETURN
; end of _Spi_Read_
_Eth_ReadReg:
;lib1_enc600_V3_5_b.mpas,247 :: 		Begin
;lib1_enc600_V3_5_b.mpas,248 :: 		Result := RCmd3W(RCRUCMD_,register_address);
0x196C	0x781F8A  	PUSH	W10
0x196E	0x781F8B  	PUSH	W11
0x1970	0x78458A  	MOV.B	W10, W11
0x1972	0xB3C20A  	MOV.B	#32, W10
0x1974	0x07FC13  	RCALL	lib1_enc600_V3_5_b_RCmd3W
; Result start address is: 2 (W1)
0x1976	0x780080  	MOV	W0, W1
;lib1_enc600_V3_5_b.mpas,249 :: 		End;
0x1978	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Eth_ReadReg:
0x197A	0x7805CF  	POP	W11
0x197C	0x78054F  	POP	W10
0x197E	0x060000  	RETURN
; end of _Eth_ReadReg
lib1_enc600_V3_5_b_RCmd3W:
0x119C	0xFA0004  	LNK	#4
;lib1_enc600_V3_5_b.mpas,217 :: 		Begin
;lib1_enc600_V3_5_b.mpas,218 :: 		Eth_Select;
0x119E	0x781F8A  	PUSH	W10
0x11A0	0x07FAFA  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,219 :: 		Spi_Read_(cmd1);
0x11A2	0x07FAB6  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,220 :: 		Spi_Read_(cmd2);
0x11A4	0x78450B  	MOV.B	W11, W10
0x11A6	0x07FAB4  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,221 :: 		Lo(Result) := Spi_Read_(0);
0x11A8	0xEF2014  	CLR	W10
0x11AA	0x07FAB2  	RCALL	_Spi_Read_
0x11AC	0x984700  	MOV.B	W0, [W14+0]
;lib1_enc600_V3_5_b.mpas,222 :: 		Hi(Result) := Spi_Read_(0);
0x11AE	0x470060  	ADD	W14, #0, W0
0x11B0	0xEC2000  	INC	W0
0x11B2	0x980710  	MOV	W0, [W14+2]
0x11B4	0xEF2014  	CLR	W10
0x11B6	0x07FAAC  	RCALL	_Spi_Read_
0x11B8	0x90009E  	MOV	[W14+2], W1
0x11BA	0x784880  	MOV.B	W0, [W1]
;lib1_enc600_V3_5_b.mpas,223 :: 		Eth_UnSelect;
0x11BC	0x071958  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,224 :: 		End;
0x11BE	0x90000E  	MOV	[W14+0], W0
L_end_RCmd3W:
0x11C0	0x78054F  	POP	W10
0x11C2	0xFA8000  	ULNK
0x11C4	0x060000  	RETURN
; end of lib1_enc600_V3_5_b_RCmd3W
_Eth_BSF:
;lib1_enc600_V3_5_b.mpas,237 :: 		Begin
;lib1_enc600_V3_5_b.mpas,238 :: 		WCmd4(BFSUCMD_,register_address,mask);
0x1956	0x781F8A  	PUSH	W10
0x1958	0x781F8B  	PUSH	W11
0x195A	0x781F8C  	PUSH	W12
0x195C	0x78060B  	MOV	W11, W12
0x195E	0x78458A  	MOV.B	W10, W11
0x1960	0xB3C24A  	MOV.B	#36, W10
0x1962	0x07FBC4  	RCALL	lib1_enc600_V3_5_b_WCmd4
;lib1_enc600_V3_5_b.mpas,239 :: 		End;
L_end_Eth_BSF:
0x1964	0x78064F  	POP	W12
0x1966	0x7805CF  	POP	W11
0x1968	0x78054F  	POP	W10
0x196A	0x060000  	RETURN
; end of _Eth_BSF
_Eth_WritePHYReg:
;lib1_enc600_V3_5_b.mpas,296 :: 		Begin
;lib1_enc600_V3_5_b.mpas,297 :: 		Eth_WriteReg(MIREGADR_,$0100 or register_address);
0x44CA	0x781F8A  	PUSH	W10
0x44CC	0xFB808A  	ZE	W10, W1
0x44CE	0x201000  	MOV	#256, W0
0x44D0	0x700001  	IOR	W0, W1, W0
0x44D2	0x781F8B  	PUSH	W11
0x44D4	0x780580  	MOV	W0, W11
0x44D6	0xB3C54A  	MOV.B	#84, W10
0x44D8	0x07EB05  	RCALL	_Eth_WriteReg
0x44DA	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,298 :: 		Eth_WriteReg(MIWR_,data_b);
0x44DC	0xB3C66A  	MOV.B	#102, W10
0x44DE	0x07EB02  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,299 :: 		while (Eth_ReadReg(MISTAT_) and $0001) <> 0 do ;
L__Eth_WritePHYReg66:
0x44E0	0x781F8A  	PUSH	W10
0x44E2	0xB3C6AA  	MOV.B	#106, W10
0x44E4	0x07EA43  	RCALL	_Eth_ReadReg
0x44E6	0x78054F  	POP	W10
0x44E8	0x600061  	AND	W0, #1, W0
0x44EA	0xE10060  	CP	W0, #0
0x44EC	0x3AFFF9  	BRA NZ	L__Eth_WritePHYReg66
L__Eth_WritePHYReg304:
;lib1_enc600_V3_5_b.mpas,300 :: 		End;
L_end_Eth_WritePHYReg:
0x44EE	0x78054F  	POP	W10
0x44F0	0x060000  	RETURN
; end of _Eth_WritePHYReg
_Eth_Udp_Init:
;protocol_udp.mpas,202 :: 		begin
;protocol_udp.mpas,203 :: 		Eth_Udp_EraseCache;
0x4520	0x781F8A  	PUSH	W10
0x4522	0x781F8B  	PUSH	W11
0x4524	0x781F8C  	PUSH	W12
0x4526	0x07E6D3  	RCALL	protocol_udp_Eth_Udp_EraseCache
;protocol_udp.mpas,204 :: 		memset(@UdpPorts[0], #0, SizeOf(Word)*PORT_CACHE_LEN);
0x4528	0x20004C  	MOV	#4, W12
0x452A	0xB3C00B  	MOV.B	#0, W11
0x452C	0x210B0A  	MOV	#lo_addr(protocol_udp_UdpPorts), W10
0x452E	0x07E16D  	RCALL	_memset
;protocol_udp.mpas,205 :: 		end;
L_end_Eth_Udp_Init:
0x4530	0x78064F  	POP	W12
0x4532	0x7805CF  	POP	W11
0x4534	0x78054F  	POP	W10
0x4536	0x060000  	RETURN
; end of _Eth_Udp_Init
protocol_udp_Eth_Udp_EraseCache:
;protocol_udp.mpas,190 :: 		begin
;protocol_udp.mpas,191 :: 		i := 0;
0x12CE	0x781F8A  	PUSH	W10
; i start address is: 8 (W4)
0x12D0	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;protocol_udp.mpas,192 :: 		while i < UDP_CACHE_LEN do
L_protocol_udp_Eth_Udp_EraseCache32:
; i start address is: 8 (W4)
0x12D2	0xE12062  	CP	W4, #2
0x12D4	0x3D0008  	BRA GE	L_protocol_udp_Eth_Udp_EraseCache33
L_protocol_udp_Eth_Udp_EraseCache284:
;protocol_udp.mpas,194 :: 		Eth_Udp_EraseSlot(@UdpCache[i]);
0x12D6	0x205E60  	MOV	#1510, W0
0x12D8	0xB80104  	MUL.UU	W0, W4, W2
0x12DA	0x210C40  	MOV	#lo_addr(_UdpCache), W0
0x12DC	0x400002  	ADD	W0, W2, W0
0x12DE	0x780500  	MOV	W0, W10
0x12E0	0x07FF14  	RCALL	protocol_udp_Eth_Udp_EraseSlot
;protocol_udp.mpas,195 :: 		Inc(i);
0x12E2	0xEC2008  	INC	W4
;protocol_udp.mpas,196 :: 		end;
; i end address is: 8 (W4)
0x12E4	0x37FFF6  	BRA	L_protocol_udp_Eth_Udp_EraseCache32
L_protocol_udp_Eth_Udp_EraseCache33:
;protocol_udp.mpas,197 :: 		end;
L_end_Eth_Udp_EraseCache:
0x12E6	0x78054F  	POP	W10
0x12E8	0x060000  	RETURN
; end of protocol_udp_Eth_Udp_EraseCache
protocol_udp_Eth_Udp_EraseSlot:
;protocol_udp.mpas,154 :: 		begin
;protocol_udp.mpas,155 :: 		Udp_Counter := 1000;                                                          // Start at 1000 for no particular reason
0x110A	0x781F8B  	PUSH	W11
0x110C	0x781F8C  	PUSH	W12
0x110E	0x203E80  	MOV	#1000, W0
0x1110	0x888570  	MOV	W0, protocol_udp_Udp_Counter
;protocol_udp.mpas,156 :: 		UdpSlot^.Broadcast := False;
0x1112	0xEF2000  	CLR	W0
0x1114	0x780D00  	MOV	W0, [W10]
;protocol_udp.mpas,157 :: 		UdpSlot^.WaitForResult := False;
0x1116	0x205DC0  	MOV	#1500, W0
0x1118	0x450080  	ADD	W10, W0, W1
0x111A	0xEF2000  	CLR	W0
0x111C	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,158 :: 		UdpSlot^.ValidatewithARP := False;
0x111E	0x205DE0  	MOV	#1502, W0
0x1120	0x450080  	ADD	W10, W0, W1
0x1122	0xEF2000  	CLR	W0
0x1124	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,159 :: 		UdpSlot^.DestPort := 0;
0x1126	0x4500EC  	ADD	W10, #12, W1
0x1128	0xEF2000  	CLR	W0
0x112A	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,160 :: 		UdpSlot^.SourcePort := 0;
0x112C	0x4500F8  	ADD	W10, #24, W1
0x112E	0xEF2000  	CLR	W0
0x1130	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,161 :: 		UdpSlot^.DataLen := 0;
0x1132	0x4500FA  	ADD	W10, #26, W1
0x1134	0xEF2000  	CLR	W0
0x1136	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,162 :: 		UdpSlot^.Valid := False;
0x1138	0x205E00  	MOV	#1504, W0
0x113A	0x450080  	ADD	W10, W0, W1
0x113C	0xEF2000  	CLR	W0
0x113E	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,163 :: 		UdpSlot^.Timer := 0;
0x1140	0x205E20  	MOV	#1506, W0
0x1142	0x450100  	ADD	W10, W0, W2
0x1144	0xEF2000  	CLR	W0
0x1146	0xEF2002  	CLR	W1
0x1148	0xBE8900  	MOV.D	W0, [W2]
;protocol_udp.mpas,164 :: 		memset(@UdpSlot^.DestIP[0], #0, 4);
0x114A	0x450062  	ADD	W10, #2, W0
0x114C	0x781F8A  	PUSH	W10
0x114E	0x20004C  	MOV	#4, W12
0x1150	0xB3C00B  	MOV.B	#0, W11
0x1152	0x780500  	MOV	W0, W10
0x1154	0x07FB5A  	RCALL	_memset
0x1156	0x78054F  	POP	W10
;protocol_udp.mpas,165 :: 		memset(@UdpSlot^.DestMac[0], #0, 6);
0x1158	0x450066  	ADD	W10, #6, W0
0x115A	0x781F8A  	PUSH	W10
0x115C	0x20006C  	MOV	#6, W12
0x115E	0xB3C00B  	MOV.B	#0, W11
0x1160	0x780500  	MOV	W0, W10
0x1162	0x07FB53  	RCALL	_memset
0x1164	0x78054F  	POP	W10
;protocol_udp.mpas,166 :: 		memset(@UdpSlot^.SourceIP[0], #0, 4);
0x1166	0x45006E  	ADD	W10, #14, W0
0x1168	0x781F8A  	PUSH	W10
0x116A	0x20004C  	MOV	#4, W12
0x116C	0xB3C00B  	MOV.B	#0, W11
0x116E	0x780500  	MOV	W0, W10
0x1170	0x07FB4C  	RCALL	_memset
0x1172	0x78054F  	POP	W10
;protocol_udp.mpas,167 :: 		memset(@UdpSlot^.SourceMac[0], #0, 6);
0x1174	0x450072  	ADD	W10, #18, W0
0x1176	0x781F8A  	PUSH	W10
0x1178	0x20006C  	MOV	#6, W12
0x117A	0xB3C00B  	MOV.B	#0, W11
0x117C	0x780500  	MOV	W0, W10
0x117E	0x07FB45  	RCALL	_memset
0x1180	0x78054F  	POP	W10
;protocol_udp.mpas,168 :: 		for j := 0 to UDP_MAX_DATA_LEN - 1 do
; j start address is: 4 (W2)
0x1182	0xEF2004  	CLR	W2
; j end address is: 4 (W2)
L_protocol_udp_Eth_Udp_EraseSlot25:
;protocol_udp.mpas,169 :: 		UdpSlot^.DataArray[j] := 0;
; j start address is: 4 (W2)
0x1184	0x45007C  	ADD	W10, #28, W0
0x1186	0x400082  	ADD	W0, W2, W1
0x1188	0xEF2000  	CLR	W0
0x118A	0x784880  	MOV.B	W0, [W1]
0x118C	0x205BF0  	MOV	#1471, W0
0x118E	0xE11000  	CP	W2, W0
0x1190	0x320002  	BRA Z	L_protocol_udp_Eth_Udp_EraseSlot28
L_protocol_udp_Eth_Udp_EraseSlot281:
; j start address is: 4 (W2)
0x1192	0xEC2004  	INC	W2
; j end address is: 4 (W2)
; j end address is: 4 (W2)
0x1194	0x37FFF7  	BRA	L_protocol_udp_Eth_Udp_EraseSlot25
L_protocol_udp_Eth_Udp_EraseSlot28:
;protocol_udp.mpas,170 :: 		end;
L_end_Eth_Udp_EraseSlot:
0x1196	0x78064F  	POP	W12
0x1198	0x7805CF  	POP	W11
0x119A	0x060000  	RETURN
; end of protocol_udp_Eth_Udp_EraseSlot
_memset:
0x080A	0xFA0000  	LNK	#0
;__Lib_String.mpas,131 :: 		
;__Lib_String.mpas,132 :: 		
; chptr start address is: 2 (W1)
0x080C	0x78008A  	MOV	W10, W1
; chptr end address is: 2 (W1)
;__Lib_String.mpas,133 :: 		
L__memset40:
; chptr start address is: 2 (W1)
0x080E	0xE16060  	CP	W12, #0
0x0810	0x320005  	BRA Z	L__memset41
L__memset236:
;__Lib_String.mpas,135 :: 		
0x0812	0x560061  	SUB	W12, #1, W0
0x0814	0x780600  	MOV	W0, W12
;__Lib_String.mpas,136 :: 		
0x0816	0x78488B  	MOV.B	W11, [W1]
;__Lib_String.mpas,137 :: 		
0x0818	0xEC2002  	INC	W1
;__Lib_String.mpas,138 :: 		
; chptr end address is: 2 (W1)
0x081A	0x37FFF9  	BRA	L__memset40
L__memset41:
;__Lib_String.mpas,139 :: 		
L_end_memset:
0x081C	0xFA8000  	ULNK
0x081E	0x060000  	RETURN
; end of _memset
_Eth_Arp_EraseCache:
;protocol_arp.mpas,292 :: 		begin
;protocol_arp.mpas,293 :: 		j := 0;
0x416A	0x781F8A  	PUSH	W10
0x416C	0x781F8B  	PUSH	W11
0x416E	0x781F8C  	PUSH	W12
; j start address is: 6 (W3)
0x4170	0xEF2006  	CLR	W3
; j end address is: 6 (W3)
;protocol_arp.mpas,294 :: 		while j < ARP_CACHE_LEN do
L__Eth_Arp_EraseCache82:
; j start address is: 6 (W3)
0x4172	0xE11C62  	CP.B	W3, #2
0x4174	0x31002F  	BRA GEU	L__Eth_Arp_EraseCache83
L__Eth_Arp_EraseCache122:
;protocol_arp.mpas,296 :: 		memset(@ArpCache[j].Ip, 0, 4);
0x4176	0xFB8083  	ZE	W3, W1
0x4178	0x200040  	MOV	#4, W0
0x417A	0xDD0880  	SL	W1, W0, W1
0x417C	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x417E	0x400001  	ADD	W0, W1, W0
0x4180	0x400066  	ADD	W0, #6, W0
0x4182	0x20004C  	MOV	#4, W12
0x4184	0xEF2016  	CLR	W11
0x4186	0x780500  	MOV	W0, W10
0x4188	0x07E340  	RCALL	_memset
;protocol_arp.mpas,297 :: 		memset(@ArpCache[j].Mac, 0, 6);
0x418A	0xFB8083  	ZE	W3, W1
0x418C	0x200040  	MOV	#4, W0
0x418E	0xDD0880  	SL	W1, W0, W1
0x4190	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x4192	0x400001  	ADD	W0, W1, W0
0x4194	0x40006A  	ADD	W0, #10, W0
0x4196	0x20006C  	MOV	#6, W12
0x4198	0xEF2016  	CLR	W11
0x419A	0x780500  	MOV	W0, W10
0x419C	0x07E336  	RCALL	_memset
;protocol_arp.mpas,298 :: 		ArpCache[j].Valid := False;
0x419E	0xFB8083  	ZE	W3, W1
0x41A0	0x200040  	MOV	#4, W0
0x41A2	0xDD0880  	SL	W1, W0, W1
0x41A4	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x41A6	0x400081  	ADD	W0, W1, W1
0x41A8	0xEF2000  	CLR	W0
0x41AA	0x780880  	MOV	W0, [W1]
;protocol_arp.mpas,299 :: 		Eth_EnableTimer_1s(False);
0x41AC	0x781F83  	PUSH	W3
0x41AE	0xEF2014  	CLR	W10
0x41B0	0x07ED25  	RCALL	_Eth_EnableTimer_1s
0x41B2	0x7801CF  	POP	W3
;protocol_arp.mpas,300 :: 		ArpCache[j].Timer := 0;
0x41B4	0xFB8083  	ZE	W3, W1
0x41B6	0x200040  	MOV	#4, W0
0x41B8	0xDD0880  	SL	W1, W0, W1
0x41BA	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x41BC	0x400001  	ADD	W0, W1, W0
0x41BE	0x400162  	ADD	W0, #2, W2
0x41C0	0xEF2000  	CLR	W0
0x41C2	0xEF2002  	CLR	W1
0x41C4	0xBE8900  	MOV.D	W0, [W2]
;protocol_arp.mpas,301 :: 		Eth_EnableTimer_1s(True);
0x41C6	0x781F83  	PUSH	W3
0x41C8	0x2FFFFA  	MOV	#65535, W10
0x41CA	0x07ED18  	RCALL	_Eth_EnableTimer_1s
0x41CC	0x7801CF  	POP	W3
;protocol_arp.mpas,302 :: 		inc(j);
; j start address is: 0 (W0)
0x41CE	0x41C061  	ADD.B	W3, #1, W0
; j end address is: 6 (W3)
;protocol_arp.mpas,303 :: 		end;
0x41D0	0x784180  	MOV.B	W0, W3
; j end address is: 0 (W0)
0x41D2	0x37FFCF  	BRA	L__Eth_Arp_EraseCache82
L__Eth_Arp_EraseCache83:
;protocol_arp.mpas,304 :: 		end;
L_end_Eth_Arp_EraseCache:
0x41D4	0x78064F  	POP	W12
0x41D6	0x7805CF  	POP	W11
0x41D8	0x78054F  	POP	W10
0x41DA	0x060000  	RETURN
; end of _Eth_Arp_EraseCache
_Eth_EnableTimer_1s:
;lib2_enc600_V3_5_b.mpas,49 :: 		begin
;lib2_enc600_V3_5_b.mpas,50 :: 		if Enable then
0x1BFC	0xE20014  	CP0	W10
0x1BFE	0x320002  	BRA Z	L__Eth_EnableTimer_1s2
L__Eth_EnableTimer_1s123:
;lib2_enc600_V3_5_b.mpas,51 :: 		TimerEnableBit := 1
0x1C00	0xA8E111  	BSET	TimerEnableBit, BitPos(TimerEnableBit+0)
0x1C02	0x370001  	BRA	L__Eth_EnableTimer_1s3
;lib2_enc600_V3_5_b.mpas,52 :: 		else
L__Eth_EnableTimer_1s2:
;lib2_enc600_V3_5_b.mpas,53 :: 		TimerEnableBit := 0;
0x1C04	0xA9E111  	BCLR	TimerEnableBit, BitPos(TimerEnableBit+0)
L__Eth_EnableTimer_1s3:
;lib2_enc600_V3_5_b.mpas,54 :: 		end;
L_end_Eth_EnableTimer_1s:
0x1C06	0x060000  	RETURN
; end of _Eth_EnableTimer_1s
_Eth_Ping_EraseCache:
;protocol_ping.mpas,246 :: 		begin
;protocol_ping.mpas,247 :: 		j := 0;
0x4306	0x781F8A  	PUSH	W10
0x4308	0x781F8B  	PUSH	W11
0x430A	0x781F8C  	PUSH	W12
; j start address is: 8 (W4)
0x430C	0xEF2008  	CLR	W4
; j end address is: 8 (W4)
;protocol_ping.mpas,248 :: 		while j < PING_CACHE_LENGTH do
L__Eth_Ping_EraseCache65:
; j start address is: 8 (W4)
0x430E	0xE12462  	CP.B	W4, #2
0x4310	0x310036  	BRA GEU	L__Eth_Ping_EraseCache66
L__Eth_Ping_EraseCache98:
;protocol_ping.mpas,250 :: 		PingCache[j].Valid := False;
0x4312	0xFB8084  	ZE	W4, W1
0x4314	0x200120  	MOV	#18, W0
0x4316	0xB80101  	MUL.UU	W0, W1, W2
0x4318	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x431A	0x400082  	ADD	W0, W2, W1
0x431C	0xEF2000  	CLR	W0
0x431E	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,251 :: 		memset(@PingCache[j].Ip, 0, 4);
0x4320	0xFB8084  	ZE	W4, W1
0x4322	0x200120  	MOV	#18, W0
0x4324	0xB80101  	MUL.UU	W0, W1, W2
0x4326	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4328	0x400002  	ADD	W0, W2, W0
0x432A	0xECA000  	INC2	W0
0x432C	0x20004C  	MOV	#4, W12
0x432E	0xEF2016  	CLR	W11
0x4330	0x780500  	MOV	W0, W10
0x4332	0x07E26B  	RCALL	_memset
;protocol_ping.mpas,252 :: 		memset(@PingCache[j].Mac, 0, 6);
0x4334	0xFB8084  	ZE	W4, W1
0x4336	0x200120  	MOV	#18, W0
0x4338	0xB80101  	MUL.UU	W0, W1, W2
0x433A	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x433C	0x400002  	ADD	W0, W2, W0
0x433E	0x400066  	ADD	W0, #6, W0
0x4340	0x20006C  	MOV	#6, W12
0x4342	0xEF2016  	CLR	W11
0x4344	0x780500  	MOV	W0, W10
0x4346	0x07E261  	RCALL	_memset
;protocol_ping.mpas,253 :: 		PingCache[j].Time := 0;
0x4348	0xFB8084  	ZE	W4, W1
0x434A	0x200120  	MOV	#18, W0
0x434C	0xB80101  	MUL.UU	W0, W1, W2
0x434E	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4350	0x400002  	ADD	W0, W2, W0
0x4352	0x4000EC  	ADD	W0, #12, W1
0x4354	0xEF2000  	CLR	W0
0x4356	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,254 :: 		PingCache[j].RoundTripTime := 0;
0x4358	0xFB8084  	ZE	W4, W1
0x435A	0x200120  	MOV	#18, W0
0x435C	0xB80101  	MUL.UU	W0, W1, W2
0x435E	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4360	0x400002  	ADD	W0, W2, W0
0x4362	0x4000EE  	ADD	W0, #14, W1
0x4364	0xEF2000  	CLR	W0
0x4366	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,255 :: 		PingCache[j].RoundTripTTL := 0;
0x4368	0xFB8084  	ZE	W4, W1
0x436A	0x200120  	MOV	#18, W0
0x436C	0xB80101  	MUL.UU	W0, W1, W2
0x436E	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4370	0x400002  	ADD	W0, W2, W0
0x4372	0x4000F0  	ADD	W0, #16, W1
0x4374	0xEF2000  	CLR	W0
0x4376	0x784880  	MOV.B	W0, [W1]
;protocol_ping.mpas,256 :: 		inc(j);
; j start address is: 0 (W0)
0x4378	0x424061  	ADD.B	W4, #1, W0
; j end address is: 8 (W4)
;protocol_ping.mpas,257 :: 		end;
0x437A	0x784200  	MOV.B	W0, W4
; j end address is: 0 (W0)
0x437C	0x37FFC8  	BRA	L__Eth_Ping_EraseCache65
L__Eth_Ping_EraseCache66:
;protocol_ping.mpas,258 :: 		end;
L_end_Eth_Ping_EraseCache:
0x437E	0x78064F  	POP	W12
0x4380	0x7805CF  	POP	W11
0x4382	0x78054F  	POP	W10
0x4384	0x060000  	RETURN
; end of _Eth_Ping_EraseCache
_EraseSockets:
;protocol_tcp.mpas,928 :: 		begin
;protocol_tcp.mpas,929 :: 		j := 0;
0x41E4	0x781F8A  	PUSH	W10
0x41E6	0x781F8B  	PUSH	W11
0x41E8	0x781F8C  	PUSH	W12
; j start address is: 8 (W4)
0x41EA	0xEF2008  	CLR	W4
; j end address is: 8 (W4)
;protocol_tcp.mpas,930 :: 		while j < PORT_CACHE_LEN do
L__EraseSockets376:
; j start address is: 8 (W4)
0x41EC	0xE12462  	CP.B	W4, #2
0x41EE	0x310087  	BRA GEU	L__EraseSockets377
L__EraseSockets528:
;protocol_tcp.mpas,932 :: 		Socket[j].State_S := 0;
0x41F0	0xFB8084  	ZE	W4, W1
0x41F2	0x2042C0  	MOV	#1068, W0
0x41F4	0xB80101  	MUL.UU	W0, W1, W2
0x41F6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x41F8	0x400082  	ADD	W0, W2, W1
0x41FA	0xEF2000  	CLR	W0
0x41FC	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,933 :: 		Socket[j].source_port_S := 0;
0x41FE	0xFB8084  	ZE	W4, W1
0x4200	0x2042C0  	MOV	#1068, W0
0x4202	0xB80101  	MUL.UU	W0, W1, W2
0x4204	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4206	0x400002  	ADD	W0, W2, W0
0x4208	0x4000E2  	ADD	W0, #2, W1
0x420A	0xEF2000  	CLR	W0
0x420C	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,934 :: 		memset(@Socket[j].Dest_Ip, 0, 4);
0x420E	0xFB8084  	ZE	W4, W1
0x4210	0x2042C0  	MOV	#1068, W0
0x4212	0xB80101  	MUL.UU	W0, W1, W2
0x4214	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4216	0x400002  	ADD	W0, W2, W0
0x4218	0x400064  	ADD	W0, #4, W0
0x421A	0x20004C  	MOV	#4, W12
0x421C	0xEF2016  	CLR	W11
0x421E	0x780500  	MOV	W0, W10
0x4220	0x07E2F4  	RCALL	_memset
;protocol_tcp.mpas,935 :: 		memset(@Socket[j].Dest_Mac, 0, 6);
0x4222	0xFB8084  	ZE	W4, W1
0x4224	0x2042C0  	MOV	#1068, W0
0x4226	0xB80101  	MUL.UU	W0, W1, W2
0x4228	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x422A	0x400002  	ADD	W0, W2, W0
0x422C	0x400068  	ADD	W0, #8, W0
0x422E	0x20006C  	MOV	#6, W12
0x4230	0xEF2016  	CLR	W11
0x4232	0x780500  	MOV	W0, W10
0x4234	0x07E2EA  	RCALL	_memset
;protocol_tcp.mpas,936 :: 		Socket[j].dest_port_S := 0;
0x4236	0xFB8084  	ZE	W4, W1
0x4238	0x2042C0  	MOV	#1068, W0
0x423A	0xB80101  	MUL.UU	W0, W1, W2
0x423C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x423E	0x400002  	ADD	W0, W2, W0
0x4240	0x4000EE  	ADD	W0, #14, W1
0x4242	0xEF2000  	CLR	W0
0x4244	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,937 :: 		Socket[j].SEQ_No_S := 0;
0x4246	0xFB8084  	ZE	W4, W1
0x4248	0x2042C0  	MOV	#1068, W0
0x424A	0xB80101  	MUL.UU	W0, W1, W2
0x424C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x424E	0x400002  	ADD	W0, W2, W0
0x4250	0x400170  	ADD	W0, #16, W2
0x4252	0xEF2000  	CLR	W0
0x4254	0xEF2002  	CLR	W1
0x4256	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,938 :: 		Socket[j].ACK_No_S := 0;
0x4258	0xFB8084  	ZE	W4, W1
0x425A	0x2042C0  	MOV	#1068, W0
0x425C	0xB80101  	MUL.UU	W0, W1, W2
0x425E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4260	0x400002  	ADD	W0, W2, W0
0x4262	0x400174  	ADD	W0, #20, W2
0x4264	0xEF2000  	CLR	W0
0x4266	0xEF2002  	CLR	W1
0x4268	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,939 :: 		Socket[j].Wait_ACK := 0;
0x426A	0xFB8084  	ZE	W4, W1
0x426C	0x2042C0  	MOV	#1068, W0
0x426E	0xB80101  	MUL.UU	W0, W1, W2
0x4270	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4272	0x400002  	ADD	W0, W2, W0
0x4274	0x4000F8  	ADD	W0, #24, W1
0x4276	0xEF2000  	CLR	W0
0x4278	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,940 :: 		Socket[j].Exp_Time := 0;
0x427A	0xFB8084  	ZE	W4, W1
0x427C	0x2042C0  	MOV	#1068, W0
0x427E	0xB80101  	MUL.UU	W0, W1, W2
0x4280	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4282	0x400002  	ADD	W0, W2, W0
0x4284	0x4000FA  	ADD	W0, #26, W1
0x4286	0xEF2000  	CLR	W0
0x4288	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,941 :: 		Socket[j].Exp_Time_Val := 12;
0x428A	0xFB8084  	ZE	W4, W1
0x428C	0x2042C0  	MOV	#1068, W0
0x428E	0xB80101  	MUL.UU	W0, W1, W2
0x4290	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4292	0x400002  	ADD	W0, W2, W0
0x4294	0x4000FC  	ADD	W0, #28, W1
0x4296	0x2000C0  	MOV	#12, W0
0x4298	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,942 :: 		Socket[j].Start_addr := 0;
0x429A	0xFB8084  	ZE	W4, W1
0x429C	0x2042C0  	MOV	#1068, W0
0x429E	0xB80101  	MUL.UU	W0, W1, W2
0x42A0	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x42A2	0x400002  	ADD	W0, W2, W0
0x42A4	0x40017E  	ADD	W0, #30, W2
0x42A6	0xEF2000  	CLR	W0
0x42A8	0xEF2002  	CLR	W1
0x42AA	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,943 :: 		Socket[j].Stop_addr := 0;
0x42AC	0xFB8084  	ZE	W4, W1
0x42AE	0x2042C0  	MOV	#1068, W0
0x42B0	0xB80101  	MUL.UU	W0, W1, W2
0x42B2	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x42B4	0x400082  	ADD	W0, W2, W1
0x42B6	0x200220  	MOV	#34, W0
0x42B8	0x408100  	ADD	W1, W0, W2
0x42BA	0xEF2000  	CLR	W0
0x42BC	0xEF2002  	CLR	W1
0x42BE	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,944 :: 		Socket[j].RAM_ROM := 0;
0x42C0	0xFB8084  	ZE	W4, W1
0x42C2	0x2042C0  	MOV	#1068, W0
0x42C4	0xB80101  	MUL.UU	W0, W1, W2
0x42C6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x42C8	0x400082  	ADD	W0, W2, W1
0x42CA	0x200260  	MOV	#38, W0
0x42CC	0x408080  	ADD	W1, W0, W1
0x42CE	0xEF2000  	CLR	W0
0x42D0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,945 :: 		Socket[j].Keep_Alive := false;
0x42D2	0xFB8084  	ZE	W4, W1
0x42D4	0x2042C0  	MOV	#1068, W0
0x42D6	0xB80101  	MUL.UU	W0, W1, W2
0x42D8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x42DA	0x400082  	ADD	W0, W2, W1
0x42DC	0x200280  	MOV	#40, W0
0x42DE	0x408080  	ADD	W1, W0, W1
0x42E0	0xEF2000  	CLR	W0
0x42E2	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,946 :: 		Socket[j].TCP_buf := '';
0x42E4	0xFB8084  	ZE	W4, W1
0x42E6	0x2042C0  	MOV	#1068, W0
0x42E8	0xB80101  	MUL.UU	W0, W1, W2
0x42EA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x42EC	0x400082  	ADD	W0, W2, W1
0x42EE	0x2002A0  	MOV	#42, W0
0x42F0	0x408000  	ADD	W1, W0, W0
0x42F2	0x780080  	MOV	W0, W1
0x42F4	0xEF2000  	CLR	W0
0x42F6	0x785880  	MOV.B	W0, [W1++]
;protocol_tcp.mpas,947 :: 		inc(j);
; j start address is: 0 (W0)
0x42F8	0x424061  	ADD.B	W4, #1, W0
; j end address is: 8 (W4)
;protocol_tcp.mpas,948 :: 		end;
0x42FA	0x784200  	MOV.B	W0, W4
; j end address is: 0 (W0)
0x42FC	0x37FF77  	BRA	L__EraseSockets376
L__EraseSockets377:
;protocol_tcp.mpas,949 :: 		end;
L_end_EraseSockets:
0x42FE	0x78064F  	POP	W12
0x4300	0x7805CF  	POP	W11
0x4302	0x78054F  	POP	W10
0x4304	0x060000  	RETURN
; end of _EraseSockets
_Firewall:
;lib1_enc600_V3_5_b.mpas,753 :: 		begin
;lib1_enc600_V3_5_b.mpas,754 :: 		FICMP := F_ICMP;
0x41DC	0x88806A  	MOV	W10, _FICMP
;lib1_enc600_V3_5_b.mpas,755 :: 		FTCP := F_TCP;
0x41DE	0x88807B  	MOV	W11, _FTCP
;lib1_enc600_V3_5_b.mpas,756 :: 		FUDP := F_UDP;
0x41E0	0x8880AC  	MOV	W12, _FUDP
;lib1_enc600_V3_5_b.mpas,757 :: 		end;
L_end_Firewall:
0x41E2	0x060000  	RETURN
; end of _Firewall
_Eth_Policy:
;lib1_enc600_V3_5_b.mpas,760 :: 		begin
;lib1_enc600_V3_5_b.mpas,761 :: 		policy := poli;
0x4386	0x210260  	MOV	#lo_addr(_policy), W0
0x4388	0x78480A  	MOV.B	W10, [W0]
;lib1_enc600_V3_5_b.mpas,762 :: 		end;
L_end_Eth_Policy:
0x438A	0x060000  	RETURN
; end of _Eth_Policy
_Wait_for_LAN:
;lib2_enc600_V3_5_b.mpas,330 :: 		begin
;lib2_enc600_V3_5_b.mpas,331 :: 		Result := False;
0x538A	0x781F8A  	PUSH	W10
0x538C	0x781F8B  	PUSH	W11
0x538E	0x781F8C  	PUSH	W12
; Result start address is: 4 (W2)
0x5390	0xEF2004  	CLR	W2
;lib2_enc600_V3_5_b.mpas,332 :: 		contorw := 0;
; contorw start address is: 0 (W0)
0x5392	0xEF2000  	CLR	W0
; contorw end address is: 0 (W0)
; Result end address is: 4 (W2)
0x5394	0x780180  	MOV	W0, W3
;lib2_enc600_V3_5_b.mpas,333 :: 		while contorw < 60000 do
L__Wait_for_LAN103:
; contorw start address is: 6 (W3)
; Result start address is: 4 (W2)
0x5396	0x2EA600  	MOV	#60000, W0
0x5398	0xE11800  	CP	W3, W0
0x539A	0x310017  	BRA GEU	L__Wait_for_LAN121
L__Wait_for_LAN158:
;lib2_enc600_V3_5_b.mpas,335 :: 		ClrWdt;
0x539C	0xFE6000  	CLRWDT
;lib2_enc600_V3_5_b.mpas,336 :: 		Delay_ms(1);
0x539E	0x236B07  	MOV	#14000, W7
L__Wait_for_LAN107:
0x53A0	0xED200E  	DEC	W7
0x53A2	0x3AFFFE  	BRA NZ	L__Wait_for_LAN107
0x53A4	0x000000  	NOP
0x53A6	0x000000  	NOP
;lib2_enc600_V3_5_b.mpas,337 :: 		if Check_Link <> 0 then
0x53A8	0x07F7FD  	RCALL	_Check_Link
0x53AA	0xE10060  	CP	W0, #0
0x53AC	0x32000C  	BRA Z	L__Wait_for_LAN110
L__Wait_for_LAN159:
; Result end address is: 4 (W2)
; contorw end address is: 6 (W3)
;lib2_enc600_V3_5_b.mpas,339 :: 		if Announce <> 0 then
0x53AE	0xE15060  	CP	W10, #0
0x53B0	0x320008  	BRA Z	L__Wait_for_LAN113
L__Wait_for_LAN160:
;lib2_enc600_V3_5_b.mpas,341 :: 		memset(@dest_ip_addr, $FF, 4);       // Send to every hardware device
0x53B2	0x20004C  	MOV	#4, W12
0x53B4	0xB3CFFB  	MOV.B	#255, W11
0x53B6	0x21068A  	MOV	#lo_addr(_dest_ip_addr), W10
0x53B8	0x07DA28  	RCALL	_memset
;lib2_enc600_V3_5_b.mpas,342 :: 		memset(@dest_mac, $FF, 6);           // Send it to every IP address
0x53BA	0x20006C  	MOV	#6, W12
0x53BC	0xB3CFFB  	MOV.B	#255, W11
0x53BE	0x21062A  	MOV	#lo_addr(_dest_mac), W10
0x53C0	0x07DA24  	RCALL	_memset
;lib2_enc600_V3_5_b.mpas,344 :: 		end;
L__Wait_for_LAN113:
;lib2_enc600_V3_5_b.mpas,345 :: 		Result := True;
; Result start address is: 2 (W1)
0x53C2	0x2FFFF1  	MOV	#65535, W1
;lib2_enc600_V3_5_b.mpas,346 :: 		break;
; Result end address is: 2 (W1)
0x53C4	0x370003  	BRA	L__Wait_for_LAN104
;lib2_enc600_V3_5_b.mpas,347 :: 		end;
L__Wait_for_LAN110:
;lib2_enc600_V3_5_b.mpas,348 :: 		inc(contorw);
; contorw start address is: 6 (W3)
; Result start address is: 4 (W2)
0x53C6	0xEC2006  	INC	W3
;lib2_enc600_V3_5_b.mpas,349 :: 		end;
; Result end address is: 4 (W2)
; contorw end address is: 6 (W3)
0x53C8	0x37FFE6  	BRA	L__Wait_for_LAN103
L__Wait_for_LAN121:
;lib2_enc600_V3_5_b.mpas,333 :: 		while contorw < 60000 do
0x53CA	0x780082  	MOV	W2, W1
;lib2_enc600_V3_5_b.mpas,349 :: 		end;
L__Wait_for_LAN104:
;lib2_enc600_V3_5_b.mpas,350 :: 		end;
; Result start address is: 2 (W1)
0x53CC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Wait_for_LAN:
0x53CE	0x78064F  	POP	W12
0x53D0	0x7805CF  	POP	W11
0x53D2	0x78054F  	POP	W10
0x53D4	0x060000  	RETURN
; end of _Wait_for_LAN
_Check_Link:
;lib1_enc600_V3_5_b.mpas,312 :: 		begin
;lib1_enc600_V3_5_b.mpas,313 :: 		LinkEstablished := True;
0x43A4	0x781F8A  	PUSH	W10
0x43A6	0x2FFFF0  	MOV	#65535, W0
0x43A8	0x888140  	MOV	W0, _LinkEstablished
;lib1_enc600_V3_5_b.mpas,314 :: 		if (Eth_ReadReg(ESTAT_) and $0100) = 0 then
0x43AA	0xB3C1AA  	MOV.B	#26, W10
0x43AC	0x07EADF  	RCALL	_Eth_ReadReg
0x43AE	0x201001  	MOV	#256, W1
0x43B0	0x600001  	AND	W0, W1, W0
0x43B2	0xE10060  	CP	W0, #0
0x43B4	0x3A0008  	BRA NZ	L__Check_Link78
L__Check_Link308:
;lib1_enc600_V3_5_b.mpas,315 :: 		if (Eth_ReadReg(ESTAT_) and $0100) = 0 then
0x43B6	0xB3C1AA  	MOV.B	#26, W10
0x43B8	0x07EAD9  	RCALL	_Eth_ReadReg
0x43BA	0x201001  	MOV	#256, W1
0x43BC	0x600001  	AND	W0, W1, W0
0x43BE	0xE10060  	CP	W0, #0
0x43C0	0x3A0002  	BRA NZ	L__Check_Link81
L__Check_Link309:
;lib1_enc600_V3_5_b.mpas,316 :: 		LinkEstablished := False;
0x43C2	0xEF2000  	CLR	W0
0x43C4	0x888140  	MOV	W0, _LinkEstablished
L__Check_Link81:
L__Check_Link78:
;lib1_enc600_V3_5_b.mpas,317 :: 		Result := LinkEstablished;
; Result start address is: 2 (W1)
0x43C6	0x808141  	MOV	_LinkEstablished, W1
;lib1_enc600_V3_5_b.mpas,318 :: 		end;
0x43C8	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Check_Link:
0x43CA	0x78054F  	POP	W10
0x43CC	0x060000  	RETURN
; end of _Check_Link
_Eth_EnableReception:
;lib2_enc600_V3_5_b.mpas,106 :: 		begin
;lib2_enc600_V3_5_b.mpas,108 :: 		if Enable then
0x53E0	0x781F8A  	PUSH	W10
0x53E2	0x781F8B  	PUSH	W11
0x53E4	0xE20014  	CP0	W10
0x53E6	0x320004  	BRA Z	L__Eth_EnableReception27
L__Eth_EnableReception132:
;lib2_enc600_V3_5_b.mpas,109 :: 		Eth_BSF(ECON1_, 0x0001)    //RXEN
0x53E8	0x20001B  	MOV	#1, W11
0x53EA	0xB3C1EA  	MOV.B	#30, W10
0x53EC	0x07E2B4  	RCALL	_Eth_BSF
0x53EE	0x370003  	BRA	L__Eth_EnableReception28
;lib2_enc600_V3_5_b.mpas,110 :: 		else
L__Eth_EnableReception27:
;lib2_enc600_V3_5_b.mpas,111 :: 		Eth_BCF(ECON1_, 0x0001);
0x53F0	0x20001B  	MOV	#1, W11
0x53F2	0xB3C1EA  	MOV.B	#30, W10
0x53F4	0x07F7CC  	RCALL	_Eth_BCF
L__Eth_EnableReception28:
;lib2_enc600_V3_5_b.mpas,112 :: 		end;
L_end_Eth_EnableReception:
0x53F6	0x7805CF  	POP	W11
0x53F8	0x78054F  	POP	W10
0x53FA	0x060000  	RETURN
; end of _Eth_EnableReception
_Eth_BCF:
;lib1_enc600_V3_5_b.mpas,242 :: 		Begin
;lib1_enc600_V3_5_b.mpas,243 :: 		WCmd4(BFCUCMD_,register_address,mask);
0x438E	0x781F8A  	PUSH	W10
0x4390	0x781F8B  	PUSH	W11
0x4392	0x781F8C  	PUSH	W12
0x4394	0x78060B  	MOV	W11, W12
0x4396	0x78458A  	MOV.B	W10, W11
0x4398	0xB3C26A  	MOV.B	#38, W10
0x439A	0x07E6A8  	RCALL	lib1_enc600_V3_5_b_WCmd4
;lib1_enc600_V3_5_b.mpas,244 :: 		End;
L_end_Eth_BCF:
0x439C	0x78064F  	POP	W12
0x439E	0x7805CF  	POP	W11
0x43A0	0x78054F  	POP	W10
0x43A2	0x060000  	RETURN
; end of _Eth_BCF
_Eth_DoPacket:
0x5144	0xFA0004  	LNK	#4
;lib2_enc600_V3_5_b.mpas,237 :: 		begin
;lib2_enc600_V3_5_b.mpas,238 :: 		ClrWdt;
0x5146	0x781F8A  	PUSH	W10
0x5148	0x781F8B  	PUSH	W11
0x514A	0x781F8C  	PUSH	W12
0x514C	0xFE6000  	CLRWDT
;lib2_enc600_V3_5_b.mpas,239 :: 		Eth_UserProcess_Main;
0x514E	0x07F91E  	RCALL	_Eth_UserProcess_Main
;lib2_enc600_V3_5_b.mpas,244 :: 		if (Eth_ReadReg(EIR_) and $0040) <> 0 then     // PKTIF : RX Packet Pending Interrupt Flag?
0x5150	0xB3C1CA  	MOV.B	#28, W10
0x5152	0x07E40C  	RCALL	_Eth_ReadReg
0x5154	0x200401  	MOV	#64, W1
0x5156	0x600001  	AND	W0, W1, W0
0x5158	0xE10060  	CP	W0, #0
0x515A	0x32006E  	BRA Z	L__Eth_DoPacket35
L__Eth_DoPacket136:
;lib2_enc600_V3_5_b.mpas,246 :: 		broadcast_packet := False;
0x515C	0xEF2000  	CLR	W0
0x515E	0x888090  	MOV	W0, _broadcast_packet
;lib2_enc600_V3_5_b.mpas,247 :: 		case Eth_ReadPacket of
0x5160	0x07F709  	RCALL	_Eth_ReadPacket
0x5162	0x980710  	MOV	W0, [W14+2]
;lib2_enc600_V3_5_b.mpas,248 :: 		ETH_ARP :
0x5164	0x208061  	MOV	#2054, W1
0x5166	0xE10001  	CP	W0, W1
0x5168	0x3A0018  	BRA NZ	L__Eth_DoPacket40
L__Eth_DoPacket137:
;lib2_enc600_V3_5_b.mpas,250 :: 		if EthMemCompareWithRam(AddrPacket+38, @eth_ip_addr, 4) then      // Our address?
0x516A	0x200261  	MOV	#38, W1
0x516C	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x516E	0x408010  	ADD	W1, [W0], W0
0x5170	0x20004C  	MOV	#4, W12
0x5172	0x21088B  	MOV	#lo_addr(_eth_ip_addr), W11
0x5174	0x780500  	MOV	W0, W10
0x5176	0x07F6DA  	RCALL	_EthMemCompareWithRam
0x5178	0xE20000  	CP0	W0
0x517A	0x32000E  	BRA Z	L__Eth_DoPacket42
L__Eth_DoPacket138:
;lib2_enc600_V3_5_b.mpas,252 :: 		case ReadFromEthMem(AddrPacket+21) of
0x517C	0x808080  	MOV	_AddrPacket, W0
0x517E	0x400075  	ADD	W0, #21, W0
0x5180	0x780500  	MOV	W0, W10
0x5182	0x07F6C4  	RCALL	_ReadFromEthMem
0x5184	0x984700  	MOV.B	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,253 :: 		ETH_ARP_REQ : Eth_Arp_RequestHandler;
0x5186	0xE10461  	CP.B	W0, #1
0x5188	0x3A0002  	BRA NZ	L__Eth_DoPacket47
L__Eth_DoPacket139:
0x518A	0x07F728  	RCALL	_Eth_Arp_RequestHandler
0x518C	0x370005  	BRA	L__Eth_DoPacket44
L__Eth_DoPacket47:
;lib2_enc600_V3_5_b.mpas,254 :: 		ETH_ARP_RES : Eth_Arp_ResponseHandler;
0x518E	0x90400E  	MOV.B	[W14+0], W0
0x5190	0xE10462  	CP.B	W0, #2
0x5192	0x3A0002  	BRA NZ	L__Eth_DoPacket50
L__Eth_DoPacket140:
0x5194	0x07F7B2  	RCALL	_Eth_Arp_ResponseHandler
0x5196	0x370000  	BRA	L__Eth_DoPacket44
L__Eth_DoPacket50:
L__Eth_DoPacket44:
;lib2_enc600_V3_5_b.mpas,256 :: 		end;
L__Eth_DoPacket42:
;lib2_enc600_V3_5_b.mpas,257 :: 		end;
0x5198	0x37004F  	BRA	L__Eth_DoPacket37
L__Eth_DoPacket40:
;lib2_enc600_V3_5_b.mpas,258 :: 		ETH_IP :
0x519A	0x208001  	MOV	#2048, W1
0x519C	0x90001E  	MOV	[W14+2], W0
0x519E	0xE10001  	CP	W0, W1
0x51A0	0x3A004B  	BRA NZ	L__Eth_DoPacket53
L__Eth_DoPacket141:
;lib2_enc600_V3_5_b.mpas,260 :: 		if EthMemCompareWithRam(AddrPacket+30,@eth_ip_addr,4) then
0x51A2	0x808080  	MOV	_AddrPacket, W0
0x51A4	0x40007E  	ADD	W0, #30, W0
0x51A6	0x20004C  	MOV	#4, W12
0x51A8	0x21088B  	MOV	#lo_addr(_eth_ip_addr), W11
0x51AA	0x780500  	MOV	W0, W10
0x51AC	0x07F6BF  	RCALL	_EthMemCompareWithRam
0x51AE	0xE20000  	CP0	W0
0x51B0	0x32002B  	BRA Z	L__Eth_DoPacket55
L__Eth_DoPacket142:
;lib2_enc600_V3_5_b.mpas,262 :: 		case ReadFromEthMem(AddrPacket+23) of
0x51B2	0x808080  	MOV	_AddrPacket, W0
0x51B4	0x400077  	ADD	W0, #23, W0
0x51B6	0x780500  	MOV	W0, W10
0x51B8	0x07F6A9  	RCALL	_ReadFromEthMem
0x51BA	0x984720  	MOV.B	W0, [W14+2]
;lib2_enc600_V3_5_b.mpas,263 :: 		ETH_IP_ICMP :
0x51BC	0xE10461  	CP.B	W0, #1
0x51BE	0x3A0013  	BRA NZ	L__Eth_DoPacket60
L__Eth_DoPacket143:
;lib2_enc600_V3_5_b.mpas,265 :: 		case ReadFromEthMem(AddrPacket+34) of
0x51C0	0x200221  	MOV	#34, W1
0x51C2	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x51C4	0x408010  	ADD	W1, [W0], W0
0x51C6	0x780500  	MOV	W0, W10
0x51C8	0x07F6A1  	RCALL	_ReadFromEthMem
0x51CA	0x984700  	MOV.B	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,266 :: 		ETH_IP_ICMP_ECHO :
0x51CC	0xE10468  	CP.B	W0, #8
0x51CE	0x3A0005  	BRA NZ	L__Eth_DoPacket64
L__Eth_DoPacket144:
;lib2_enc600_V3_5_b.mpas,268 :: 		if FICMP = False then
0x51D0	0x808060  	MOV	_FICMP, W0
0x51D2	0xE10060  	CP	W0, #0
0x51D4	0x3A0001  	BRA NZ	L__Eth_DoPacket66
L__Eth_DoPacket145:
;lib2_enc600_V3_5_b.mpas,269 :: 		Eth_PingEchoHandler;
0x51D6	0x07F741  	RCALL	_Eth_PingEchoHandler
L__Eth_DoPacket66:
;lib2_enc600_V3_5_b.mpas,270 :: 		end;
0x51D8	0x370005  	BRA	L__Eth_DoPacket61
L__Eth_DoPacket64:
;lib2_enc600_V3_5_b.mpas,271 :: 		ETH_IP_ICMP_REPLY :
0x51DA	0x90400E  	MOV.B	[W14+0], W0
0x51DC	0xE10460  	CP.B	W0, #0
0x51DE	0x3A0002  	BRA NZ	L__Eth_DoPacket70
L__Eth_DoPacket146:
;lib2_enc600_V3_5_b.mpas,273 :: 		Eth_PingReplyHandler;
0x51E0	0x07F8F6  	RCALL	_Eth_PingReplyHandler
;lib2_enc600_V3_5_b.mpas,274 :: 		end;
0x51E2	0x370000  	BRA	L__Eth_DoPacket61
L__Eth_DoPacket70:
L__Eth_DoPacket61:
;lib2_enc600_V3_5_b.mpas,276 :: 		end;
0x51E4	0x370010  	BRA	L__Eth_DoPacket57
L__Eth_DoPacket60:
;lib2_enc600_V3_5_b.mpas,277 :: 		ETH_IP_UDP :
0x51E6	0x90402E  	MOV.B	[W14+2], W0
0x51E8	0xE10471  	CP.B	W0, #17
0x51EA	0x3A0005  	BRA NZ	L__Eth_DoPacket73
L__Eth_DoPacket147:
;lib2_enc600_V3_5_b.mpas,279 :: 		if FUDP = False then
0x51EC	0x8080A0  	MOV	_FUDP, W0
0x51EE	0xE10060  	CP	W0, #0
0x51F0	0x3A0001  	BRA NZ	L__Eth_DoPacket75
L__Eth_DoPacket148:
;lib2_enc600_V3_5_b.mpas,280 :: 		Eth_Udp_ReplyHandler;
0x51F2	0x07F9A2  	RCALL	_Eth_Udp_ReplyHandler
L__Eth_DoPacket75:
;lib2_enc600_V3_5_b.mpas,281 :: 		end;
0x51F4	0x370008  	BRA	L__Eth_DoPacket57
L__Eth_DoPacket73:
;lib2_enc600_V3_5_b.mpas,282 :: 		ETH_IP_TCP :
0x51F6	0x90402E  	MOV.B	[W14+2], W0
0x51F8	0xE10466  	CP.B	W0, #6
0x51FA	0x3A0005  	BRA NZ	L__Eth_DoPacket79
L__Eth_DoPacket149:
;lib2_enc600_V3_5_b.mpas,284 :: 		if FTCP = False then
0x51FC	0x808070  	MOV	_FTCP, W0
0x51FE	0xE10060  	CP	W0, #0
0x5200	0x3A0001  	BRA NZ	L__Eth_DoPacket81
L__Eth_DoPacket150:
;lib2_enc600_V3_5_b.mpas,285 :: 		Eth_TcpHandler;
0x5202	0x07E933  	RCALL	_Eth_TcpHandler
L__Eth_DoPacket81:
;lib2_enc600_V3_5_b.mpas,286 :: 		end;
0x5204	0x370000  	BRA	L__Eth_DoPacket57
L__Eth_DoPacket79:
L__Eth_DoPacket57:
;lib2_enc600_V3_5_b.mpas,288 :: 		Exit;
0x5206	0x370018  	BRA	L_end__Eth_DoPacket
;lib2_enc600_V3_5_b.mpas,289 :: 		end;
L__Eth_DoPacket55:
;lib2_enc600_V3_5_b.mpas,291 :: 		if udp_broadcast <> 0 then
0x5208	0x808150  	MOV	_udp_broadcast, W0
0x520A	0xE10060  	CP	W0, #0
0x520C	0x320014  	BRA Z	L__Eth_DoPacket84
L__Eth_DoPacket151:
;lib2_enc600_V3_5_b.mpas,293 :: 		if ReadFromEthMem(AddrPacket+33) = 255 then
0x520E	0x200211  	MOV	#33, W1
0x5210	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x5212	0x408010  	ADD	W1, [W0], W0
0x5214	0x780500  	MOV	W0, W10
0x5216	0x07F67A  	RCALL	_ReadFromEthMem
0x5218	0xB3CFF1  	MOV.B	#255, W1
0x521A	0xE10401  	CP.B	W0, W1
0x521C	0x3A000C  	BRA NZ	L__Eth_DoPacket87
L__Eth_DoPacket152:
;lib2_enc600_V3_5_b.mpas,294 :: 		if ReadFromEthMem(AddrPacket+23) = ETH_IP_UDP then
0x521E	0x808080  	MOV	_AddrPacket, W0
0x5220	0x400077  	ADD	W0, #23, W0
0x5222	0x780500  	MOV	W0, W10
0x5224	0x07F673  	RCALL	_ReadFromEthMem
0x5226	0xE10471  	CP.B	W0, #17
0x5228	0x3A0006  	BRA NZ	L__Eth_DoPacket90
L__Eth_DoPacket153:
;lib2_enc600_V3_5_b.mpas,295 :: 		if FUDP = False then
0x522A	0x8080A0  	MOV	_FUDP, W0
0x522C	0xE10060  	CP	W0, #0
0x522E	0x3A0003  	BRA NZ	L__Eth_DoPacket93
L__Eth_DoPacket154:
;lib2_enc600_V3_5_b.mpas,297 :: 		broadcast_packet := True;
0x5230	0x2FFFF0  	MOV	#65535, W0
0x5232	0x888090  	MOV	W0, _broadcast_packet
;lib2_enc600_V3_5_b.mpas,298 :: 		Eth_Udp_ReplyHandler;
0x5234	0x07F981  	RCALL	_Eth_Udp_ReplyHandler
;lib2_enc600_V3_5_b.mpas,299 :: 		end;
L__Eth_DoPacket93:
L__Eth_DoPacket90:
L__Eth_DoPacket87:
L__Eth_DoPacket84:
;lib2_enc600_V3_5_b.mpas,300 :: 		end;
0x5236	0x370000  	BRA	L__Eth_DoPacket37
L__Eth_DoPacket53:
L__Eth_DoPacket37:
;lib2_enc600_V3_5_b.mpas,302 :: 		end;
L__Eth_DoPacket35:
;lib2_enc600_V3_5_b.mpas,303 :: 		end;
L_end__Eth_DoPacket:
L_end_Eth_DoPacket:
0x5238	0x78064F  	POP	W12
0x523A	0x7805CF  	POP	W11
0x523C	0x78054F  	POP	W10
0x523E	0xFA8000  	ULNK
0x5240	0x060000  	RETURN
; end of _Eth_DoPacket
_Eth_UserProcess_Main:
;enc_lib_user.mpas,104 :: 		begin
;enc_lib_user.mpas,106 :: 		end;
L_end_Eth_UserProcess_Main:
0x438C	0x060000  	RETURN
; end of _Eth_UserProcess_Main
_Eth_ReadPacket:
0x3F74	0xFA0004  	LNK	#4
;packet_utilities.mpas,26 :: 		begin
;packet_utilities.mpas,27 :: 		CopyEthMemToEthMem(NextPacket, GPSTART, 1600);   // Move the next RX buffer to the first area of the General Purpose
0x3F76	0x781F8A  	PUSH	W10
0x3F78	0x781F8B  	PUSH	W11
0x3F7A	0x781F8C  	PUSH	W12
0x3F7C	0x20640C  	MOV	#1600, W12
0x3F7E	0x20800B  	MOV	#2048, W11
0x3F80	0x80E52A  	MOV	_NextPacket, W10
0x3F82	0x07EE1F  	RCALL	_CopyEthMemToEthMem
;packet_utilities.mpas,29 :: 		Eth_WriteReg(EGPRDPT_, NextPacket);    // Set the write pointer
0x3F84	0x80E52B  	MOV	_NextPacket, W11
0x3F86	0xB3C86A  	MOV.B	#134, W10
0x3F88	0x07EDAD  	RCALL	_Eth_WriteReg
;packet_utilities.mpas,30 :: 		Lo(NextPacket) := Eth_GetByte;
0x3F8A	0x07EE3E  	RCALL	_Eth_GetByte
0x3F8C	0x21CA41  	MOV	#lo_addr(_NextPacket), W1
0x3F8E	0x784880  	MOV.B	W0, [W1]
;packet_utilities.mpas,31 :: 		Hi(NextPacket) := Eth_GetByte;
0x3F90	0x07EE3B  	RCALL	_Eth_GetByte
0x3F92	0x21CA51  	MOV	#lo_addr(_NextPacket+1), W1
0x3F94	0x784880  	MOV.B	W0, [W1]
;packet_utilities.mpas,33 :: 		Eth_WriteReg(EGPRDPT_, (GPSTART + 20));    // Set the lower write pointer
0x3F96	0x20814B  	MOV	#2068, W11
0x3F98	0xB3C86A  	MOV.B	#134, W10
0x3F9A	0x07EDA4  	RCALL	_Eth_WriteReg
;packet_utilities.mpas,34 :: 		Hi(Result) := Eth_GetByte;
0x3F9C	0x470060  	ADD	W14, #0, W0
0x3F9E	0xEC2000  	INC	W0
0x3FA0	0x980710  	MOV	W0, [W14+2]
0x3FA2	0x07EE32  	RCALL	_Eth_GetByte
0x3FA4	0x90009E  	MOV	[W14+2], W1
0x3FA6	0x784880  	MOV.B	W0, [W1]
;packet_utilities.mpas,35 :: 		Lo(Result) := Eth_GetByte;
0x3FA8	0x07EE2F  	RCALL	_Eth_GetByte
0x3FAA	0x984700  	MOV.B	W0, [W14+0]
;packet_utilities.mpas,37 :: 		AddrPacket := (GPSTART + 8);
0x3FAC	0x208080  	MOV	#2056, W0
0x3FAE	0x888080  	MOV	W0, _AddrPacket
;packet_utilities.mpas,39 :: 		Eth_BSF(ECON1_, ECON1_PKTDEC_);               // Decrement the number of packets
0x3FB0	0x20100B  	MOV	#256, W11
0x3FB2	0xB3C1EA  	MOV.B	#30, W10
0x3FB4	0x07ECD0  	RCALL	_Eth_BSF
;packet_utilities.mpas,41 :: 		if NextPacket = RXSTART then
0x3FB6	0x80E521  	MOV	_NextPacket, W1
0x3FB8	0x210000  	MOV	#4096, W0
0x3FBA	0xE10800  	CP	W1, W0
0x3FBC	0x3A0004  	BRA NZ	L__Eth_ReadPacket2
L__Eth_ReadPacket19:
;packet_utilities.mpas,42 :: 		Eth_WriteReg(ERXTAIL_, $5FFE)
0x3FBE	0x25FFEB  	MOV	#24574, W11
0x3FC0	0xB3C06A  	MOV.B	#6, W10
0x3FC2	0x07ED90  	RCALL	_Eth_WriteReg
0x3FC4	0x370005  	BRA	L__Eth_ReadPacket3
;packet_utilities.mpas,43 :: 		else
L__Eth_ReadPacket2:
;packet_utilities.mpas,44 :: 		Eth_WriteReg(ERXTAIL_, NextPacket - 2);
0x3FC6	0x80E520  	MOV	_NextPacket, W0
0x3FC8	0xEDA000  	DEC2	W0
0x3FCA	0x780580  	MOV	W0, W11
0x3FCC	0xB3C06A  	MOV.B	#6, W10
0x3FCE	0x07ED8A  	RCALL	_Eth_WriteReg
L__Eth_ReadPacket3:
;packet_utilities.mpas,45 :: 		end;
0x3FD0	0x90000E  	MOV	[W14+0], W0
L_end_Eth_ReadPacket:
0x3FD2	0x78064F  	POP	W12
0x3FD4	0x7805CF  	POP	W11
0x3FD6	0x78054F  	POP	W10
0x3FD8	0xFA8000  	ULNK
0x3FDA	0x060000  	RETURN
; end of _Eth_ReadPacket
_CopyEthMemToEthMem:
;lib1_enc600_V3_5_b.mpas,407 :: 		begin
;lib1_enc600_V3_5_b.mpas,408 :: 		if length_w = 0 then Exit;
0x1BC2	0x781F8A  	PUSH	W10
0x1BC4	0x781F8B  	PUSH	W11
0x1BC6	0xE16060  	CP	W12, #0
0x1BC8	0x3A0001  	BRA NZ	L__CopyEthMemToEthMem121
L__CopyEthMemToEthMem323:
0x1BCA	0x370015  	BRA	L_end__CopyEthMemToEthMem
L__CopyEthMemToEthMem121:
;lib1_enc600_V3_5_b.mpas,409 :: 		Eth_WriteReg(EDMAST_, start_eth_address);
0x1BCC	0x781F8B  	PUSH	W11
0x1BCE	0x78058A  	MOV	W10, W11
0x1BD0	0xB3C0AA  	MOV.B	#10, W10
0x1BD2	0x07FF88  	RCALL	_Eth_WriteReg
0x1BD4	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,410 :: 		Eth_WriteReg(EDMADST_, dest_eth_address);
0x1BD6	0xB3C0EA  	MOV.B	#14, W10
0x1BD8	0x07FF85  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,411 :: 		Eth_WriteReg(EDMALEN_, length_w);
0x1BDA	0x78058C  	MOV	W12, W11
0x1BDC	0xB3C0CA  	MOV.B	#12, W10
0x1BDE	0x07FF82  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,413 :: 		Eth_BSF(ECON1_, ECON1_DMANOCS_ or ECON1_DMAST_ or ECON1_DMACPY_);
0x1BE0	0x20034B  	MOV	#52, W11
0x1BE2	0xB3C1EA  	MOV.B	#30, W10
0x1BE4	0x07FEB8  	RCALL	_Eth_BSF
;lib1_enc600_V3_5_b.mpas,414 :: 		while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do ;
L__CopyEthMemToEthMem124:
0x1BE6	0x781F8A  	PUSH	W10
0x1BE8	0xB3C1EA  	MOV.B	#30, W10
0x1BEA	0x07FEC0  	RCALL	_Eth_ReadReg
0x1BEC	0x78054F  	POP	W10
0x1BEE	0x200201  	MOV	#32, W1
0x1BF0	0x600001  	AND	W0, W1, W0
0x1BF2	0xE10060  	CP	W0, #0
0x1BF4	0x3AFFF8  	BRA NZ	L__CopyEthMemToEthMem124
L__CopyEthMemToEthMem324:
;lib1_enc600_V3_5_b.mpas,415 :: 		end;
L_end__CopyEthMemToEthMem:
L_end_CopyEthMemToEthMem:
0x1BF6	0x7805CF  	POP	W11
0x1BF8	0x78054F  	POP	W10
0x1BFA	0x060000  	RETURN
; end of _CopyEthMemToEthMem
_Eth_GetByte:
;lib1_enc600_V3_5_b.mpas,291 :: 		begin
;lib1_enc600_V3_5_b.mpas,292 :: 		Result := RCmd2(RGPDATA_);
0x1C08	0x781F8A  	PUSH	W10
0x1C0A	0xB3C28A  	MOV.B	#40, W10
0x1C0C	0x07F78C  	RCALL	lib1_enc600_V3_5_b_RCmd2
; Result start address is: 2 (W1)
0x1C0E	0x784080  	MOV.B	W0, W1
;lib1_enc600_V3_5_b.mpas,293 :: 		end;
0x1C10	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_Eth_GetByte:
0x1C12	0x78054F  	POP	W10
0x1C14	0x060000  	RETURN
; end of _Eth_GetByte
lib1_enc600_V3_5_b_RCmd2:
;lib1_enc600_V3_5_b.mpas,182 :: 		Begin
;lib1_enc600_V3_5_b.mpas,183 :: 		Eth_Select;
0x0B26	0x781F8A  	PUSH	W10
0x0B28	0x07FE36  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,184 :: 		Spi_Read_(cmd1);
0x0B2A	0x07FDF2  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,185 :: 		Result := Spi_Read_(0);
0x0B2C	0xEF2014  	CLR	W10
0x0B2E	0x07FDF0  	RCALL	_Spi_Read_
; Result start address is: 2 (W1)
0x0B30	0x784080  	MOV.B	W0, W1
;lib1_enc600_V3_5_b.mpas,186 :: 		Eth_UnSelect;
0x0B32	0x071C9D  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,187 :: 		End;
0x0B34	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_RCmd2:
0x0B36	0x78054F  	POP	W10
0x0B38	0x060000  	RETURN
; end of lib1_enc600_V3_5_b_RCmd2
_EthMemCompareWithRam:
;lib1_enc600_V3_5_b.mpas,685 :: 		begin
;lib1_enc600_V3_5_b.mpas,686 :: 		Result := False;
0x3F2C	0x781F8A  	PUSH	W10
; Result start address is: 4 (W2)
0x3F2E	0xEF2004  	CLR	W2
;lib1_enc600_V3_5_b.mpas,687 :: 		if length_w = 0 then Exit;
0x3F30	0xE16060  	CP	W12, #0
0x3F32	0x3A0002  	BRA NZ	L__EthMemCompareWithRam240
L__EthMemCompareWithRam360:
0x3F34	0x780082  	MOV	W2, W1
0x3F36	0x37001B  	BRA	L_end__EthMemCompareWithRam
L__EthMemCompareWithRam240:
;lib1_enc600_V3_5_b.mpas,688 :: 		Eth_WriteReg(EGPRDPT_, start_eth_address);
0x3F38	0x781F8B  	PUSH	W11
0x3F3A	0x78058A  	MOV	W10, W11
0x3F3C	0xB3C86A  	MOV.B	#134, W10
0x3F3E	0x07EDD2  	RCALL	_Eth_WriteReg
0x3F40	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,690 :: 		Eth_Select;
0x3F42	0x07E429  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,691 :: 		Spi_Read_(RGPDATA_);
0x3F44	0xB3C28A  	MOV.B	#40, W10
0x3F46	0x07E3E4  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,693 :: 		pt := start_ram_address;
; pt start address is: 8 (W4)
0x3F48	0x78020B  	MOV	W11, W4
;lib1_enc600_V3_5_b.mpas,694 :: 		i := 0;
; i start address is: 6 (W3)
0x3F4A	0xEF2006  	CLR	W3
; pt end address is: 8 (W4)
; i end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,695 :: 		while i < length_w do
L__EthMemCompareWithRam243:
; i start address is: 6 (W3)
; pt start address is: 8 (W4)
; Result start address is: 4 (W2)
; Result end address is: 4 (W2)
0x3F4C	0xE1180C  	CP	W3, W12
0x3F4E	0x31000D  	BRA GEU	L__EthMemCompareWithRam244
L__EthMemCompareWithRam361:
; Result end address is: 4 (W2)
;lib1_enc600_V3_5_b.mpas,697 :: 		if pt^ <> Spi_Read_(0) then
; Result start address is: 4 (W2)
0x3F50	0x781F8A  	PUSH	W10
0x3F52	0xEF2014  	CLR	W10
0x3F54	0x07E3DD  	RCALL	_Spi_Read_
0x3F56	0x78054F  	POP	W10
0x3F58	0xE10414  	CP.B	W0, [W4]
0x3F5A	0x320003  	BRA Z	L__EthMemCompareWithRam248
L__EthMemCompareWithRam362:
; pt end address is: 8 (W4)
; i end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,699 :: 		Eth_UnSelect;
0x3F5C	0x070288  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,700 :: 		Exit;
0x3F5E	0x780082  	MOV	W2, W1
0x3F60	0x370006  	BRA	L_end__EthMemCompareWithRam
;lib1_enc600_V3_5_b.mpas,701 :: 		end;
L__EthMemCompareWithRam248:
;lib1_enc600_V3_5_b.mpas,702 :: 		pt := pt + 1;
; i start address is: 6 (W3)
; pt start address is: 0 (W0)
; pt start address is: 8 (W4)
0x3F62	0x420061  	ADD	W4, #1, W0
; pt end address is: 8 (W4)
;lib1_enc600_V3_5_b.mpas,703 :: 		inc(i);
0x3F64	0xEC2006  	INC	W3
;lib1_enc600_V3_5_b.mpas,704 :: 		end;
; Result end address is: 4 (W2)
; pt end address is: 0 (W0)
; i end address is: 6 (W3)
0x3F66	0x780200  	MOV	W0, W4
0x3F68	0x37FFF1  	BRA	L__EthMemCompareWithRam243
L__EthMemCompareWithRam244:
;lib1_enc600_V3_5_b.mpas,706 :: 		Eth_UnSelect;
0x3F6A	0x070281  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,707 :: 		Result := True;
; Result start address is: 2 (W1)
0x3F6C	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;lib1_enc600_V3_5_b.mpas,708 :: 		end;
L_end__EthMemCompareWithRam:
; Result start address is: 2 (W1)
0x3F6E	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_EthMemCompareWithRam:
0x3F70	0x78054F  	POP	W10
0x3F72	0x060000  	RETURN
; end of _EthMemCompareWithRam
_ReadFromEthMem:
;lib1_enc600_V3_5_b.mpas,674 :: 		begin
;lib1_enc600_V3_5_b.mpas,675 :: 		Eth_WriteReg(EGPRDPT_, start_eth_address);
0x3F0C	0x781F8A  	PUSH	W10
0x3F0E	0x781F8B  	PUSH	W11
0x3F10	0x78058A  	MOV	W10, W11
0x3F12	0xB3C86A  	MOV.B	#134, W10
0x3F14	0x07EDE7  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,676 :: 		Eth_Select;
0x3F16	0x07E43F  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,677 :: 		Spi_Read_(RGPDATA_);
0x3F18	0xB3C28A  	MOV.B	#40, W10
0x3F1A	0x07E3FA  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,678 :: 		Result := Spi_Read_(0);
0x3F1C	0xEF2014  	CLR	W10
0x3F1E	0x07E3F8  	RCALL	_Spi_Read_
; Result start address is: 2 (W1)
0x3F20	0x784080  	MOV.B	W0, W1
;lib1_enc600_V3_5_b.mpas,679 :: 		Eth_UnSelect;
0x3F22	0x0702A5  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,680 :: 		end;
0x3F24	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_ReadFromEthMem:
0x3F26	0x7805CF  	POP	W11
0x3F28	0x78054F  	POP	W10
0x3F2A	0x060000  	RETURN
; end of _ReadFromEthMem
_Eth_Arp_RequestHandler:
;protocol_arp.mpas,243 :: 		begin                                                                           // The request coming in has been copied from the RX memory space to the GP memoryspace at offset 0x00
;protocol_arp.mpas,244 :: 		CopyEthMemToEthMem(AddrPacket+6, TXSTART, 6);                                 // The source that sent the packet moved to the destination offset
0x3FDC	0x781F8A  	PUSH	W10
0x3FDE	0x781F8B  	PUSH	W11
0x3FE0	0x781F8C  	PUSH	W12
0x3FE2	0x808080  	MOV	_AddrPacket, W0
0x3FE4	0x400066  	ADD	W0, #6, W0
0x3FE6	0x20006C  	MOV	#6, W12
0x3FE8	0xEF2016  	CLR	W11
0x3FEA	0x780500  	MOV	W0, W10
0x3FEC	0x07EDEA  	RCALL	_CopyEthMemToEthMem
;protocol_arp.mpas,245 :: 		CopyRamToEthMem(@eth_mac, TXSTART+6, 6);                                      // The destination in the old received message could be a global FF.FF.FF.FF.FF.FF so use our local copy to the ENC as the source
0x3FEE	0x20006C  	MOV	#6, W12
0x3FF0	0x20006B  	MOV	#6, W11
0x3FF2	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x3FF4	0x07F20C  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,246 :: 		WriteToEthMem(TXSTART+12, $08);                                               // [HI] The EtherType for ARP is 0x0806.
0x3FF6	0xB3C08B  	MOV.B	#8, W11
0x3FF8	0x2000CA  	MOV	#12, W10
0x3FFA	0x07F1A7  	RCALL	_WriteToEthMem
;protocol_arp.mpas,247 :: 		Eth_PutByte($06);                                                             // [LO] The EtherType for ARP is 0x0806.
0x3FFC	0xB3C06A  	MOV.B	#6, W10
0x3FFE	0x07F19D  	RCALL	_Eth_PutByte
;protocol_arp.mpas,248 :: 		Eth_PutByte($00);                                                             // [HI] Hardware Type (HTYPE), ethernet = 0x0001
0x4000	0xEF2014  	CLR	W10
0x4002	0x07F19B  	RCALL	_Eth_PutByte
;protocol_arp.mpas,249 :: 		Eth_PutByte($01);                                                             // [LO] Hardware Type (HTYPE), ethernet = 0x0001
0x4004	0xB3C01A  	MOV.B	#1, W10
0x4006	0x07F199  	RCALL	_Eth_PutByte
;protocol_arp.mpas,250 :: 		Eth_PutByte($08);                                                             // [HI] Protocol Type (PTYPE), For IPv4, this has the value 0x0800.
0x4008	0xB3C08A  	MOV.B	#8, W10
0x400A	0x07F197  	RCALL	_Eth_PutByte
;protocol_arp.mpas,251 :: 		Eth_PutByte($00);                                                             // [LO] Protocol Type, (PTYPE) For IPv4, this has the value 0x0800.
0x400C	0xEF2014  	CLR	W10
0x400E	0x07F195  	RCALL	_Eth_PutByte
;protocol_arp.mpas,252 :: 		Eth_PutByte($06);                                                             // Hardware length (HLEN)
0x4010	0xB3C06A  	MOV.B	#6, W10
0x4012	0x07F193  	RCALL	_Eth_PutByte
;protocol_arp.mpas,253 :: 		Eth_PutByte($04);                                                             // Protocol length (PLEN)
0x4014	0xB3C04A  	MOV.B	#4, W10
0x4016	0x07F191  	RCALL	_Eth_PutByte
;protocol_arp.mpas,254 :: 		Eth_PutByte($00);                                                             // [HI] Specifies the Operation that the sender is performing: 1 for request, 2 for reply.
0x4018	0xEF2014  	CLR	W10
0x401A	0x07F18F  	RCALL	_Eth_PutByte
;protocol_arp.mpas,255 :: 		Eth_PutByte($02);                                                             // [LO] Specifies the operation that the sender is performing: 1 for request, 2 for reply.
0x401C	0xB3C02A  	MOV.B	#2, W10
0x401E	0x07F18D  	RCALL	_Eth_PutByte
;protocol_arp.mpas,256 :: 		CopyRamToEthMem(@eth_mac, TXSTART+22, 6);                                     // Sender (our) hardware address (SHA)
0x4020	0x20006C  	MOV	#6, W12
0x4022	0x20016B  	MOV	#22, W11
0x4024	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x4026	0x07F1F3  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,257 :: 		CopyEthMemToEthMem(AddrPacket+38, TXSTART+28, 4);                             // Sender (our) protocol address (SPA)
0x4028	0x200261  	MOV	#38, W1
0x402A	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x402C	0x408010  	ADD	W1, [W0], W0
0x402E	0x20004C  	MOV	#4, W12
0x4030	0x2001CB  	MOV	#28, W11
0x4032	0x780500  	MOV	W0, W10
0x4034	0x07EDC6  	RCALL	_CopyEthMemToEthMem
;protocol_arp.mpas,258 :: 		CopyEthMemToEthMem(AddrPacket+6, TXSTART+32, 6);                              // Target hardware address (THA)
0x4036	0x808080  	MOV	_AddrPacket, W0
0x4038	0x400066  	ADD	W0, #6, W0
0x403A	0x20006C  	MOV	#6, W12
0x403C	0x20020B  	MOV	#32, W11
0x403E	0x780500  	MOV	W0, W10
0x4040	0x07EDC0  	RCALL	_CopyEthMemToEthMem
;protocol_arp.mpas,259 :: 		CopyEthMemToEthMem(AddrPacket+28, TXSTART+38, 4);                             // Target protocol address (TPA)
0x4042	0x808080  	MOV	_AddrPacket, W0
0x4044	0x40007C  	ADD	W0, #28, W0
0x4046	0x20004C  	MOV	#4, W12
0x4048	0x20026B  	MOV	#38, W11
0x404A	0x780500  	MOV	W0, W10
0x404C	0x07EDBA  	RCALL	_CopyEthMemToEthMem
;protocol_arp.mpas,260 :: 		Eth_SendPacket(42);                                                           // Ship it
0x404E	0x2002AA  	MOV	#42, W10
0x4050	0x07F18A  	RCALL	_Eth_SendPacket
;protocol_arp.mpas,261 :: 		end;
L_end_Eth_Arp_RequestHandler:
0x4052	0x78064F  	POP	W12
0x4054	0x7805CF  	POP	W11
0x4056	0x78054F  	POP	W10
0x4058	0x060000  	RETURN
; end of _Eth_Arp_RequestHandler
_CopyRamToEthMem:
;lib1_enc600_V3_5_b.mpas,420 :: 		begin
;lib1_enc600_V3_5_b.mpas,421 :: 		if length_w = 0 then Exit;
0x240E	0xE16060  	CP	W12, #0
0x2410	0x3A0001  	BRA NZ	L__CopyRamToEthMem130
L__CopyRamToEthMem326:
0x2412	0x370018  	BRA	L_end__CopyRamToEthMem
L__CopyRamToEthMem130:
;lib1_enc600_V3_5_b.mpas,422 :: 		Eth_WriteReg(EGPWRPT_, dest_eth_address);
0x2414	0x781F8A  	PUSH	W10
0x2416	0xB3C88A  	MOV.B	#136, W10
0x2418	0x07FB65  	RCALL	_Eth_WriteReg
0x241A	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,424 :: 		Eth_Select;
0x241C	0x07F1BC  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,425 :: 		Spi_Read_(WGPDATA_);
0x241E	0x781F8A  	PUSH	W10
0x2420	0xB3C2AA  	MOV.B	#42, W10
0x2422	0x07F176  	RCALL	_Spi_Read_
0x2424	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,427 :: 		pt := start_ram_address;
; pt start address is: 2 (W1)
0x2426	0x78008A  	MOV	W10, W1
;lib1_enc600_V3_5_b.mpas,428 :: 		i := 0;
; i start address is: 0 (W0)
0x2428	0xEF2000  	CLR	W0
; pt end address is: 2 (W1)
; i end address is: 0 (W0)
0x242A	0x780181  	MOV	W1, W3
0x242C	0x780100  	MOV	W0, W2
;lib1_enc600_V3_5_b.mpas,429 :: 		while i < length_w do
L__CopyRamToEthMem133:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x242E	0xE1100C  	CP	W2, W12
0x2430	0x310008  	BRA GEU	L__CopyRamToEthMem134
L__CopyRamToEthMem327:
;lib1_enc600_V3_5_b.mpas,431 :: 		Spi_Read_(pt^);
0x2432	0x781F8A  	PUSH	W10
0x2434	0x784513  	MOV.B	[W3], W10
0x2436	0x07F16C  	RCALL	_Spi_Read_
0x2438	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,432 :: 		pt := pt + 1;
; pt start address is: 0 (W0)
0x243A	0x418061  	ADD	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,433 :: 		inc(i);
0x243C	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,434 :: 		end;
0x243E	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x2440	0x37FFF6  	BRA	L__CopyRamToEthMem133
L__CopyRamToEthMem134:
;lib1_enc600_V3_5_b.mpas,436 :: 		Eth_UnSelect;
0x2442	0x071015  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,437 :: 		end;
L_end__CopyRamToEthMem:
L_end_CopyRamToEthMem:
0x2444	0x060000  	RETURN
; end of _CopyRamToEthMem
_WriteToEthMem:
;lib1_enc600_V3_5_b.mpas,665 :: 		begin
;lib1_enc600_V3_5_b.mpas,666 :: 		Eth_WriteReg(EGPWRPT_, dest_eth_address);
0x234A	0x781F8A  	PUSH	W10
0x234C	0x781F8B  	PUSH	W11
0x234E	0x78058A  	MOV	W10, W11
0x2350	0xB3C88A  	MOV.B	#136, W10
0x2352	0x07FBC8  	RCALL	_Eth_WriteReg
0x2354	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,667 :: 		Eth_Select;
0x2356	0x07F21F  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,668 :: 		Spi_Read_(WGPDATA_);
0x2358	0xB3C2AA  	MOV.B	#42, W10
0x235A	0x07F1DA  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,669 :: 		Spi_Read_(value);
0x235C	0x78450B  	MOV.B	W11, W10
0x235E	0x07F1D8  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,670 :: 		Eth_UnSelect;
0x2360	0x071086  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,671 :: 		end;
L_end_WriteToEthMem:
0x2362	0x78054F  	POP	W10
0x2364	0x060000  	RETURN
; end of _WriteToEthMem
_Eth_PutByte:
;lib1_enc600_V3_5_b.mpas,286 :: 		begin
;lib1_enc600_V3_5_b.mpas,287 :: 		WCmd2(WGPDATA_,value)
0x233A	0x781F8A  	PUSH	W10
0x233C	0x781F8B  	PUSH	W11
0x233E	0x78458A  	MOV.B	W10, W11
0x2340	0xB3C2AA  	MOV.B	#42, W10
0x2342	0x07F3E9  	RCALL	lib1_enc600_V3_5_b_WCmd2
;lib1_enc600_V3_5_b.mpas,288 :: 		end;
L_end_Eth_PutByte:
0x2344	0x7805CF  	POP	W11
0x2346	0x78054F  	POP	W10
0x2348	0x060000  	RETURN
; end of _Eth_PutByte
lib1_enc600_V3_5_b_WCmd2:
;lib1_enc600_V3_5_b.mpas,174 :: 		Begin
;lib1_enc600_V3_5_b.mpas,175 :: 		Eth_Select;
0x0B16	0x781F8A  	PUSH	W10
0x0B18	0x07FE3E  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,176 :: 		Spi_Read_(cmd1);
0x0B1A	0x07FDFA  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,177 :: 		Spi_Read_(cmd2);
0x0B1C	0x78450B  	MOV.B	W11, W10
0x0B1E	0x07FDF8  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,178 :: 		Eth_UnSelect;
0x0B20	0x071CA6  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,179 :: 		End;
L_end_WCmd2:
0x0B22	0x78054F  	POP	W10
0x0B24	0x060000  	RETURN
; end of lib1_enc600_V3_5_b_WCmd2
_Eth_SendPacket:
;packet_utilities.mpas,53 :: 		begin
;packet_utilities.mpas,54 :: 		ClrWdt;
0x2366	0x781F8A  	PUSH	W10
0x2368	0x781F8B  	PUSH	W11
0x236A	0xFE6000  	CLRWDT
;packet_utilities.mpas,56 :: 		Eth_WriteReg(ETXST_, TXSTART);    // Set the start of packet
0x236C	0x781F8A  	PUSH	W10
0x236E	0xEF2016  	CLR	W11
0x2370	0xEF2014  	CLR	W10
0x2372	0x07FBB8  	RCALL	_Eth_WriteReg
0x2374	0x78054F  	POP	W10
;packet_utilities.mpas,58 :: 		Eth_WriteReg(ETXLEN_, length_w);
0x2376	0x78058A  	MOV	W10, W11
0x2378	0xB3C02A  	MOV.B	#2, W10
0x237A	0x07FBB4  	RCALL	_Eth_WriteReg
;packet_utilities.mpas,60 :: 		Eth_BSF(ECON1_,ECON1_TXRTS_);
0x237C	0x20002B  	MOV	#2, W11
0x237E	0xB3C1EA  	MOV.B	#30, W10
0x2380	0x07FAEA  	RCALL	_Eth_BSF
;packet_utilities.mpas,62 :: 		address := 1;
; address start address is: 4 (W2)
0x2382	0x200012  	MOV	#1, W2
; address end address is: 4 (W2)
;packet_utilities.mpas,63 :: 		while (Eth_ReadReg(ECON1_) and ECON1_TXRTS_) <> 0 do
L__Eth_SendPacket6:
; address start address is: 4 (W2)
0x2384	0x781F8A  	PUSH	W10
0x2386	0xB3C1EA  	MOV.B	#30, W10
0x2388	0x07FAF1  	RCALL	_Eth_ReadReg
0x238A	0x78054F  	POP	W10
0x238C	0x600062  	AND	W0, #2, W0
0x238E	0xE10060  	CP	W0, #0
0x2390	0x320006  	BRA Z	L__Eth_SendPacket7
L__Eth_SendPacket21:
;packet_utilities.mpas,65 :: 		if inc(address) = 0 then break;
0x2392	0x410061  	ADD	W2, #1, W0
0x2394	0x780100  	MOV	W0, W2
0x2396	0xE10060  	CP	W0, #0
0x2398	0x3A0001  	BRA NZ	L__Eth_SendPacket11
L__Eth_SendPacket22:
; address end address is: 4 (W2)
0x239A	0x370001  	BRA	L__Eth_SendPacket7
L__Eth_SendPacket11:
;packet_utilities.mpas,66 :: 		end;
; address start address is: 4 (W2)
; address end address is: 4 (W2)
0x239C	0x37FFF3  	BRA	L__Eth_SendPacket6
L__Eth_SendPacket7:
;packet_utilities.mpas,67 :: 		end;
L_end_Eth_SendPacket:
0x239E	0x7805CF  	POP	W11
0x23A0	0x78054F  	POP	W10
0x23A2	0x060000  	RETURN
; end of _Eth_SendPacket
_Eth_Arp_ResponseHandler:
;protocol_arp.mpas,270 :: 		begin                                                                           // We sent an ARP Request and this is the response
;protocol_arp.mpas,271 :: 		i := 0;
0x40FA	0x781F8A  	PUSH	W10
0x40FC	0x781F8B  	PUSH	W11
0x40FE	0x781F8C  	PUSH	W12
; i start address is: 10 (W5)
0x4100	0xEF200A  	CLR	W5
; i end address is: 10 (W5)
;protocol_arp.mpas,272 :: 		while i < ARP_CACHE_LEN do
L__Eth_Arp_ResponseHandler70:
; i start address is: 10 (W5)
0x4102	0xE12C62  	CP.B	W5, #2
0x4104	0x31002E  	BRA GEU	L__Eth_Arp_ResponseHandler71
L__Eth_Arp_ResponseHandler118:
;protocol_arp.mpas,274 :: 		if (ArpCache[i].Valid = Waiting) then                                       // We set Valid to "Waiting" in the "Send ARP" message anticipating this reply
0x4106	0xFB8085  	ZE	W5, W1
0x4108	0x200040  	MOV	#4, W0
0x410A	0xDD0880  	SL	W1, W0, W1
0x410C	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x410E	0x400001  	ADD	W0, W1, W0
0x4110	0x780090  	MOV	[W0], W1
0x4112	0x2007F0  	MOV	#127, W0
0x4114	0xE10800  	CP	W1, W0
0x4116	0x3A0022  	BRA NZ	L__Eth_Arp_ResponseHandler75
L__Eth_Arp_ResponseHandler119:
;protocol_arp.mpas,275 :: 		if (EthMemCompareWithRam(AddrPacket+28, @ArpCache[i].Ip[0], 4) <> 0) then // Does the IP in the Arp Cache match the IP that sent this message?
0x4118	0x808080  	MOV	_AddrPacket, W0
0x411A	0x40017C  	ADD	W0, #28, W2
0x411C	0xFB8085  	ZE	W5, W1
0x411E	0x200040  	MOV	#4, W0
0x4120	0xDD0880  	SL	W1, W0, W1
0x4122	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x4124	0x400001  	ADD	W0, W1, W0
0x4126	0x400066  	ADD	W0, #6, W0
0x4128	0x20004C  	MOV	#4, W12
0x412A	0x780580  	MOV	W0, W11
0x412C	0x780502  	MOV	W2, W10
0x412E	0x07FEFE  	RCALL	_EthMemCompareWithRam
0x4130	0xE10060  	CP	W0, #0
0x4132	0x320014  	BRA Z	L__Eth_Arp_ResponseHandler78
L__Eth_Arp_ResponseHandler120:
;protocol_arp.mpas,277 :: 		CopyEthMemToRam(AddrPacket+6, @ArpCache[i].Mac[0], 6);                  // Yes, grab the MAC address from the packet and save it in this Arp Cache Slot
0x4134	0x808080  	MOV	_AddrPacket, W0
0x4136	0x400166  	ADD	W0, #6, W2
0x4138	0xFB8085  	ZE	W5, W1
0x413A	0x200040  	MOV	#4, W0
0x413C	0xDD0880  	SL	W1, W0, W1
0x413E	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x4140	0x400001  	ADD	W0, W1, W0
0x4142	0x40006A  	ADD	W0, #10, W0
0x4144	0x20006C  	MOV	#6, W12
0x4146	0x780580  	MOV	W0, W11
0x4148	0x780502  	MOV	W2, W10
0x414A	0x07ECD7  	RCALL	_CopyEthMemToRam
;protocol_arp.mpas,278 :: 		ArpCache[i].Valid := True;                                              // We are valid now
0x414C	0xFB8085  	ZE	W5, W1
; i end address is: 10 (W5)
0x414E	0x200040  	MOV	#4, W0
0x4150	0xDD0880  	SL	W1, W0, W1
0x4152	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x4154	0x400081  	ADD	W0, W1, W1
0x4156	0x2FFFF0  	MOV	#65535, W0
0x4158	0x780880  	MOV	W0, [W1]
;protocol_arp.mpas,279 :: 		Exit;
0x415A	0x370003  	BRA	L_end__Eth_Arp_ResponseHandler
;protocol_arp.mpas,280 :: 		end;
L__Eth_Arp_ResponseHandler78:
; i start address is: 10 (W5)
L__Eth_Arp_ResponseHandler75:
;protocol_arp.mpas,281 :: 		inc(i);
; i start address is: 0 (W0)
0x415C	0x42C061  	ADD.B	W5, #1, W0
; i end address is: 10 (W5)
;protocol_arp.mpas,282 :: 		end;
0x415E	0x784280  	MOV.B	W0, W5
; i end address is: 0 (W0)
0x4160	0x37FFD0  	BRA	L__Eth_Arp_ResponseHandler70
L__Eth_Arp_ResponseHandler71:
;protocol_arp.mpas,283 :: 		end;
L_end__Eth_Arp_ResponseHandler:
L_end_Eth_Arp_ResponseHandler:
0x4162	0x78064F  	POP	W12
0x4164	0x7805CF  	POP	W11
0x4166	0x78054F  	POP	W10
0x4168	0x060000  	RETURN
; end of _Eth_Arp_ResponseHandler
_CopyEthMemToRam:
;lib1_enc600_V3_5_b.mpas,323 :: 		begin
;lib1_enc600_V3_5_b.mpas,324 :: 		if length_w = 0 then Exit;
0x1AFA	0x781F8A  	PUSH	W10
0x1AFC	0xE16060  	CP	W12, #0
0x1AFE	0x3A0001  	BRA NZ	L__CopyEthMemToRam85
L__CopyEthMemToRam311:
0x1B00	0x370016  	BRA	L_end__CopyEthMemToRam
L__CopyEthMemToRam85:
;lib1_enc600_V3_5_b.mpas,325 :: 		Eth_WriteReg(EGPRDPT_, start_eth_address);
0x1B02	0x781F8B  	PUSH	W11
0x1B04	0x78058A  	MOV	W10, W11
0x1B06	0xB3C86A  	MOV.B	#134, W10
0x1B08	0x07FFED  	RCALL	_Eth_WriteReg
0x1B0A	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,327 :: 		Eth_Select;
0x1B0C	0x07F644  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,328 :: 		Spi_Read_(RGPDATA_);
0x1B0E	0xB3C28A  	MOV.B	#40, W10
0x1B10	0x07F5FF  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,330 :: 		pt := dest_ram_address;
; pt start address is: 6 (W3)
0x1B12	0x78018B  	MOV	W11, W3
;lib1_enc600_V3_5_b.mpas,331 :: 		i := 0;
; i start address is: 4 (W2)
0x1B14	0xEF2004  	CLR	W2
; pt end address is: 6 (W3)
; i end address is: 4 (W2)
;lib1_enc600_V3_5_b.mpas,332 :: 		while i < length_w do
L__CopyEthMemToRam88:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x1B16	0xE1100C  	CP	W2, W12
0x1B18	0x310009  	BRA GEU	L__CopyEthMemToRam89
L__CopyEthMemToRam312:
;lib1_enc600_V3_5_b.mpas,334 :: 		pt^ := Spi_Read_(0);
0x1B1A	0x781F8A  	PUSH	W10
0x1B1C	0xEF2014  	CLR	W10
0x1B1E	0x07F5F8  	RCALL	_Spi_Read_
0x1B20	0x78054F  	POP	W10
0x1B22	0x784980  	MOV.B	W0, [W3]
;lib1_enc600_V3_5_b.mpas,335 :: 		pt := pt + 1;
; pt start address is: 0 (W0)
0x1B24	0x418061  	ADD	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,336 :: 		inc(i);
0x1B26	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,337 :: 		end;
0x1B28	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x1B2A	0x37FFF5  	BRA	L__CopyEthMemToRam88
L__CopyEthMemToRam89:
;lib1_enc600_V3_5_b.mpas,339 :: 		Eth_UnSelect;
0x1B2C	0x0714A0  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,340 :: 		end;
L_end__CopyEthMemToRam:
L_end_CopyEthMemToRam:
0x1B2E	0x78054F  	POP	W10
0x1B30	0x060000  	RETURN
; end of _CopyEthMemToRam
_Eth_PingEchoHandler:
0x405A	0xFA0006  	LNK	#6
;protocol_ping.mpas,227 :: 		Begin
;protocol_ping.mpas,228 :: 		Hi(PacketSize) := ReadFromEthMem(AddrPacket+16);                              // Hi Pull the length from the stored packet
0x405C	0x781F8A  	PUSH	W10
0x405E	0x781F8B  	PUSH	W11
0x4060	0x781F8C  	PUSH	W12
0x4062	0x470062  	ADD	W14, #2, W0
0x4064	0xEC2000  	INC	W0
0x4066	0x980720  	MOV	W0, [W14+4]
0x4068	0x808080  	MOV	_AddrPacket, W0
0x406A	0x400070  	ADD	W0, #16, W0
0x406C	0x780500  	MOV	W0, W10
0x406E	0x07FF4E  	RCALL	_ReadFromEthMem
0x4070	0x9000AE  	MOV	[W14+4], W1
0x4072	0x784880  	MOV.B	W0, [W1]
;protocol_ping.mpas,229 :: 		Lo(PacketSize) := Eth_GetByte;                                                // Lo Pull the length from the stored packet
0x4074	0x07EDC9  	RCALL	_Eth_GetByte
0x4076	0x984720  	MOV.B	W0, [W14+2]
;protocol_ping.mpas,230 :: 		PacketSize := PacketSize + 14;                                                // Adds the MAC Layer header size to the packet size (assumes that 802.1Q tag is not used else add 2 more)
0x4078	0x2000E1  	MOV	#14, W1
0x407A	0x470062  	ADD	W14, #2, W0
0x407C	0x408810  	ADD	W1, [W0], [W0]
;protocol_ping.mpas,231 :: 		CopyEthMemToEthMem(AddrPacket+6, TXSTART, 6);                                 // Setup the Destination Hardware Address: the source that sent the packet is now the destination
0x407E	0x808080  	MOV	_AddrPacket, W0
0x4080	0x400066  	ADD	W0, #6, W0
0x4082	0x20006C  	MOV	#6, W12
0x4084	0xEF2016  	CLR	W11
0x4086	0x780500  	MOV	W0, W10
0x4088	0x07ED9C  	RCALL	_CopyEthMemToEthMem
;protocol_ping.mpas,232 :: 		CopyRamToEthMem(@eth_mac, TXSTART+6, 6);                                      // Setup the Source Hardware Address: the destination in the old received message could be a global FF.FF.FF.FF.FF.FF so transfer our local copy to the ENC as the source
0x408A	0x20006C  	MOV	#6, W12
0x408C	0x20006B  	MOV	#6, W11
0x408E	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x4090	0x07F1BE  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,233 :: 		CopyEthMemToEthMem(AddrPacket+12, TXSTART+12, 14);                            // Copy the Ethertype to the TX Buffer
0x4092	0x808080  	MOV	_AddrPacket, W0
0x4094	0x40006C  	ADD	W0, #12, W0
0x4096	0x2000EC  	MOV	#14, W12
0x4098	0x2000CB  	MOV	#12, W11
0x409A	0x780500  	MOV	W0, W10
0x409C	0x07ED92  	RCALL	_CopyEthMemToEthMem
;protocol_ping.mpas,234 :: 		CopyRamToEthMem(@eth_ip_addr, TXSTART+26, 4);                                 // Copy our nodes IP address to the source area in the header
0x409E	0x20004C  	MOV	#4, W12
0x40A0	0x2001AB  	MOV	#26, W11
0x40A2	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x40A4	0x07F1B4  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,235 :: 		CopyEthMemToEthMem(AddrPacket+26, TXSTART+30, 4);                             // Copy the source IP from the received message to the dest IP in the message to transmit
0x40A6	0x808080  	MOV	_AddrPacket, W0
0x40A8	0x40007A  	ADD	W0, #26, W0
0x40AA	0x20004C  	MOV	#4, W12
0x40AC	0x2001EB  	MOV	#30, W11
0x40AE	0x780500  	MOV	W0, W10
0x40B0	0x07ED88  	RCALL	_CopyEthMemToEthMem
;protocol_ping.mpas,236 :: 		EthMemSet(TXSTART+34, 0, 4);                                                  // Zero out the  Type of Message, Code, and Checksum bytes (Type and Code are 0 for Ping Reply)
0x40B2	0x20004C  	MOV	#4, W12
0x40B4	0xEF2016  	CLR	W11
0x40B6	0x20022A  	MOV	#34, W10
0x40B8	0x07E94D  	RCALL	_EthMemSet
;protocol_ping.mpas,237 :: 		CopyEthMemToEthMem(AddrPacket+38, TXSTART+38, PacketSize-38);                 // Copy the Header Data/Payload Data back to the TX buffer (this is the time info the source sent to compare later)
0x40BA	0x200261  	MOV	#38, W1
0x40BC	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x40BE	0x408110  	ADD	W1, [W0], W2
0x40C0	0x200261  	MOV	#38, W1
0x40C2	0x470062  	ADD	W14, #2, W0
0x40C4	0x108010  	SUBR	W1, [W0], W0
0x40C6	0x780600  	MOV	W0, W12
0x40C8	0x20026B  	MOV	#38, W11
0x40CA	0x780502  	MOV	W2, W10
0x40CC	0x07ED7A  	RCALL	_CopyEthMemToEthMem
;protocol_ping.mpas,238 :: 		cksum := Eth_Cksum(TXSTART+34, PacketSize-34);                                // Calculate the Checksum
0x40CE	0x200221  	MOV	#34, W1
0x40D0	0x470062  	ADD	W14, #2, W0
0x40D2	0x108010  	SUBR	W1, [W0], W0
0x40D4	0x780580  	MOV	W0, W11
0x40D6	0x20022A  	MOV	#34, W10
0x40D8	0x07E908  	RCALL	_Eth_Cksum
0x40DA	0x980700  	MOV	W0, [W14+0]
;protocol_ping.mpas,239 :: 		WriteToEthMem(TXSTART+36, Hi(cksum));                                         // Store the checksum in the Tx buffer
0x40DC	0x470060  	ADD	W14, #0, W0
0x40DE	0xEC2000  	INC	W0
0x40E0	0x784010  	MOV.B	[W0], W0
0x40E2	0x784580  	MOV.B	W0, W11
0x40E4	0x20024A  	MOV	#36, W10
0x40E6	0x07F131  	RCALL	_WriteToEthMem
;protocol_ping.mpas,240 :: 		Eth_PutByte(Lo(cksum));                                                       // ...
0x40E8	0x90450E  	MOV.B	[W14+0], W10
0x40EA	0x07F127  	RCALL	_Eth_PutByte
;protocol_ping.mpas,241 :: 		Eth_SendPacket(PacketSize);                                                   // Ship it
0x40EC	0x90051E  	MOV	[W14+2], W10
0x40EE	0x07F13B  	RCALL	_Eth_SendPacket
;protocol_ping.mpas,242 :: 		End;
L_end_Eth_PingEchoHandler:
0x40F0	0x78064F  	POP	W12
0x40F2	0x7805CF  	POP	W11
0x40F4	0x78054F  	POP	W10
0x40F6	0xFA8000  	ULNK
0x40F8	0x060000  	RETURN
; end of _Eth_PingEchoHandler
_EthMemSet:
;lib1_enc600_V3_5_b.mpas,505 :: 		begin
;lib1_enc600_V3_5_b.mpas,506 :: 		if length_w = 0 then Exit;
0x1354	0x781F8A  	PUSH	W10
0x1356	0xE16060  	CP	W12, #0
0x1358	0x3A0001  	BRA NZ	L__EthMemSet166
L__EthMemSet338:
0x135A	0x370013  	BRA	L_end__EthMemSet
L__EthMemSet166:
;lib1_enc600_V3_5_b.mpas,507 :: 		Eth_WriteReg(EGPWRPT_, dest_eth_address);
0x135C	0x781F8B  	PUSH	W11
0x135E	0x78058A  	MOV	W10, W11
0x1360	0xB3C88A  	MOV.B	#136, W10
0x1362	0x0703C0  	RCALL	_Eth_WriteReg
0x1364	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,509 :: 		Eth_Select;
0x1366	0x07FA17  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,510 :: 		Spi_Read_(WGPDATA_);
0x1368	0xB3C2AA  	MOV.B	#42, W10
0x136A	0x07F9D2  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,512 :: 		i := 0;
; i start address is: 0 (W0)
0x136C	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x136E	0x780100  	MOV	W0, W2
;lib1_enc600_V3_5_b.mpas,513 :: 		while i < length_w do
L__EthMemSet169:
; i start address is: 4 (W2)
0x1370	0xE1100C  	CP	W2, W12
0x1372	0x310006  	BRA GEU	L__EthMemSet170
L__EthMemSet339:
;lib1_enc600_V3_5_b.mpas,515 :: 		Spi_Read_(chr_);
0x1374	0x781F8A  	PUSH	W10
0x1376	0x78450B  	MOV.B	W11, W10
0x1378	0x07F9CB  	RCALL	_Spi_Read_
0x137A	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,516 :: 		inc(i);
0x137C	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,517 :: 		end;
; i end address is: 4 (W2)
0x137E	0x37FFF8  	BRA	L__EthMemSet169
L__EthMemSet170:
;lib1_enc600_V3_5_b.mpas,519 :: 		Eth_UnSelect;
0x1380	0x071876  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,520 :: 		end;
L_end__EthMemSet:
L_end_EthMemSet:
0x1382	0x78054F  	POP	W10
0x1384	0x060000  	RETURN
; end of _EthMemSet
_Eth_Cksum:
0x12EA	0xFA0004  	LNK	#4
;lib1_enc600_V3_5_b.mpas,738 :: 		begin
;lib1_enc600_V3_5_b.mpas,739 :: 		Result := 0;
0x12EC	0x781F8A  	PUSH	W10
0x12EE	0x781F8B  	PUSH	W11
0x12F0	0xEF2000  	CLR	W0
0x12F2	0x980700  	MOV	W0, [W14+0]
;lib1_enc600_V3_5_b.mpas,740 :: 		if length_w = 0 then Exit;
0x12F4	0xE15860  	CP	W11, #0
0x12F6	0x3A0001  	BRA NZ	L__Eth_Cksum264
L__Eth_Cksum368:
0x12F8	0x370028  	BRA	L_end__Eth_Cksum
L__Eth_Cksum264:
;lib1_enc600_V3_5_b.mpas,741 :: 		while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do;
L__Eth_Cksum267:
0x12FA	0x781F8A  	PUSH	W10
0x12FC	0xB3C1EA  	MOV.B	#30, W10
0x12FE	0x070336  	RCALL	_Eth_ReadReg
0x1300	0x78054F  	POP	W10
0x1302	0x200201  	MOV	#32, W1
0x1304	0x600001  	AND	W0, W1, W0
0x1306	0xE10060  	CP	W0, #0
0x1308	0x3AFFF8  	BRA NZ	L__Eth_Cksum267
L__Eth_Cksum369:
;lib1_enc600_V3_5_b.mpas,742 :: 		Eth_WriteReg(EDMAST_, start_eth_address);
0x130A	0x781F8B  	PUSH	W11
0x130C	0x78058A  	MOV	W10, W11
0x130E	0xB3C0AA  	MOV.B	#10, W10
0x1310	0x0703E9  	RCALL	_Eth_WriteReg
0x1312	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,743 :: 		Eth_WriteReg(EDMALEN_, length_w);
0x1314	0xB3C0CA  	MOV.B	#12, W10
0x1316	0x0703E6  	RCALL	_Eth_WriteReg
;lib1_enc600_V3_5_b.mpas,744 :: 		Eth_BCF(ECON1_, ECON1_DMACPY_ or ECON1_DMANOCS_ or ECON1_DMACSSD_);
0x1318	0x2001CB  	MOV	#28, W11
0x131A	0xB3C1EA  	MOV.B	#30, W10
0x131C	0x071838  	RCALL	_Eth_BCF
;lib1_enc600_V3_5_b.mpas,745 :: 		Eth_BSF(ECON1_, ECON1_DMAST_);
0x131E	0x20020B  	MOV	#32, W11
0x1320	0xB3C1EA  	MOV.B	#30, W10
0x1322	0x070319  	RCALL	_Eth_BSF
;lib1_enc600_V3_5_b.mpas,746 :: 		while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do;  // wait for DMA complete checksum calculation, but NO more than 500 us
L__Eth_Cksum272:
0x1324	0x781F8A  	PUSH	W10
0x1326	0xB3C1EA  	MOV.B	#30, W10
0x1328	0x070321  	RCALL	_Eth_ReadReg
0x132A	0x78054F  	POP	W10
0x132C	0x200201  	MOV	#32, W1
0x132E	0x600001  	AND	W0, W1, W0
0x1330	0xE10060  	CP	W0, #0
0x1332	0x3AFFF8  	BRA NZ	L__Eth_Cksum272
L__Eth_Cksum370:
;lib1_enc600_V3_5_b.mpas,747 :: 		i := Eth_ReadReg(EDMACS_);
0x1334	0xB3C10A  	MOV.B	#16, W10
0x1336	0x07031A  	RCALL	_Eth_ReadReg
0x1338	0x980710  	MOV	W0, [W14+2]
;lib1_enc600_V3_5_b.mpas,748 :: 		Lo(Result) := Hi(i);
0x133A	0x470062  	ADD	W14, #2, W0
0x133C	0xEC2000  	INC	W0
0x133E	0x784010  	MOV.B	[W0], W0
0x1340	0x984700  	MOV.B	W0, [W14+0]
;lib1_enc600_V3_5_b.mpas,749 :: 		Hi(Result) := Lo(i);
0x1342	0x470060  	ADD	W14, #0, W0
0x1344	0x4000E1  	ADD	W0, #1, W1
0x1346	0x90402E  	MOV.B	[W14+2], W0
0x1348	0x784880  	MOV.B	W0, [W1]
;lib1_enc600_V3_5_b.mpas,750 :: 		end;
L_end__Eth_Cksum:
0x134A	0x90000E  	MOV	[W14+0], W0
L_end_Eth_Cksum:
0x134C	0x7805CF  	POP	W11
0x134E	0x78054F  	POP	W10
0x1350	0xFA8000  	ULNK
0x1352	0x060000  	RETURN
; end of _Eth_Cksum
_Eth_PingReplyHandler:
0x43CE	0xFA0002  	LNK	#2
;protocol_ping.mpas,60 :: 		begin
;protocol_ping.mpas,61 :: 		i := 0;     {$IFDEF DEBUG_STRING}UART1_Write_Text('Ping Reply Handler' + CRLF);{$ENDIF}
0x43D0	0x781F8A  	PUSH	W10
0x43D2	0x781F8B  	PUSH	W11
0x43D4	0x781F8C  	PUSH	W12
; i start address is: 10 (W5)
0x43D6	0xEF200A  	CLR	W5
; i end address is: 10 (W5)
;protocol_ping.mpas,62 :: 		while i < PING_CACHE_LENGTH do
L__Eth_PingReplyHandler8:
; i start address is: 10 (W5)
0x43D8	0xE12C62  	CP.B	W5, #2
0x43DA	0x310044  	BRA GEU	L__Eth_PingReplyHandler9
L__Eth_PingReplyHandler79:
;protocol_ping.mpas,64 :: 		if PingCache[i].Valid = Waiting then
0x43DC	0xFB8085  	ZE	W5, W1
0x43DE	0x200120  	MOV	#18, W0
0x43E0	0xB80101  	MUL.UU	W0, W1, W2
0x43E2	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x43E4	0x400002  	ADD	W0, W2, W0
0x43E6	0x780090  	MOV	[W0], W1
0x43E8	0x2007F0  	MOV	#127, W0
0x43EA	0xE10800  	CP	W1, W0
0x43EC	0x3A0038  	BRA NZ	L__Eth_PingReplyHandler13
L__Eth_PingReplyHandler80:
;protocol_ping.mpas,66 :: 		if (EthMemCompareWithRam(AddrPacket+26, @PingCache[i].ip[0], 4) <> 0) then
0x43EE	0x808080  	MOV	_AddrPacket, W0
0x43F0	0x40027A  	ADD	W0, #26, W4
0x43F2	0xFB8085  	ZE	W5, W1
0x43F4	0x200120  	MOV	#18, W0
0x43F6	0xB80101  	MUL.UU	W0, W1, W2
0x43F8	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x43FA	0x400002  	ADD	W0, W2, W0
0x43FC	0xECA000  	INC2	W0
0x43FE	0x20004C  	MOV	#4, W12
0x4400	0x780580  	MOV	W0, W11
0x4402	0x780504  	MOV	W4, W10
0x4404	0x07FD93  	RCALL	_EthMemCompareWithRam
0x4406	0xE10060  	CP	W0, #0
0x4408	0x32002A  	BRA Z	L__Eth_PingReplyHandler16
L__Eth_PingReplyHandler81:
;protocol_ping.mpas,68 :: 		Eth_EnableTimer_1s(False);                                                // Don't change the timer values in the middle of a comparison
0x440A	0x781F85  	PUSH	W5
0x440C	0xEF2014  	CLR	W10
0x440E	0x07EBF6  	RCALL	_Eth_EnableTimer_1s
0x4410	0x7802CF  	POP	W5
;protocol_ping.mpas,69 :: 		PingCache[i].RoundTripTime := PingCache[i].Time;                          // Store the total number of 1s ticks it took to get here, Time will keep on ticking
0x4412	0xFB8085  	ZE	W5, W1
0x4414	0x200120  	MOV	#18, W0
0x4416	0xB80101  	MUL.UU	W0, W1, W2
0x4418	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x441A	0x400002  	ADD	W0, W2, W0
0x441C	0x40026E  	ADD	W0, #14, W4
0x441E	0xFB8085  	ZE	W5, W1
0x4420	0x200120  	MOV	#18, W0
0x4422	0xB80101  	MUL.UU	W0, W1, W2
0x4424	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4426	0x400002  	ADD	W0, W2, W0
0x4428	0x40006C  	ADD	W0, #12, W0
0x442A	0x780A10  	MOV	[W0], [W4]
;protocol_ping.mpas,70 :: 		Eth_EnableTimer_1s(True);                                                 // Don't change the timer values in the middle of a comparison
0x442C	0x781F85  	PUSH	W5
0x442E	0x2FFFFA  	MOV	#65535, W10
0x4430	0x07EBE5  	RCALL	_Eth_EnableTimer_1s
0x4432	0x7802CF  	POP	W5
;protocol_ping.mpas,71 :: 		PingCache[i].RoundTripTTL := ReadFromEthMem(AddrPacket+22);               // Store the TTL from the incoming packet
0x4434	0xFB8085  	ZE	W5, W1
0x4436	0x200120  	MOV	#18, W0
0x4438	0xB80101  	MUL.UU	W0, W1, W2
0x443A	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x443C	0x400002  	ADD	W0, W2, W0
0x443E	0x400070  	ADD	W0, #16, W0
0x4440	0x980700  	MOV	W0, [W14+0]
0x4442	0x808080  	MOV	_AddrPacket, W0
0x4444	0x400076  	ADD	W0, #22, W0
0x4446	0x780500  	MOV	W0, W10
0x4448	0x07FD61  	RCALL	_ReadFromEthMem
0x444A	0x90008E  	MOV	[W14+0], W1
0x444C	0x784880  	MOV.B	W0, [W1]
;protocol_ping.mpas,72 :: 		PingCache[i].Valid := True;
0x444E	0xFB8085  	ZE	W5, W1
; i end address is: 10 (W5)
0x4450	0x200120  	MOV	#18, W0
0x4452	0xB80101  	MUL.UU	W0, W1, W2
0x4454	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x4456	0x400082  	ADD	W0, W2, W1
0x4458	0x2FFFF0  	MOV	#65535, W0
0x445A	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,73 :: 		Exit;
0x445C	0x370003  	BRA	L_end__Eth_PingReplyHandler
;protocol_ping.mpas,74 :: 		end;
L__Eth_PingReplyHandler16:
;protocol_ping.mpas,75 :: 		end;
; i start address is: 10 (W5)
L__Eth_PingReplyHandler13:
;protocol_ping.mpas,76 :: 		inc(i);
; i start address is: 0 (W0)
0x445E	0x42C061  	ADD.B	W5, #1, W0
; i end address is: 10 (W5)
;protocol_ping.mpas,77 :: 		end;
0x4460	0x784280  	MOV.B	W0, W5
; i end address is: 0 (W0)
0x4462	0x37FFBA  	BRA	L__Eth_PingReplyHandler8
L__Eth_PingReplyHandler9:
;protocol_ping.mpas,78 :: 		end;
L_end__Eth_PingReplyHandler:
L_end_Eth_PingReplyHandler:
0x4464	0x78064F  	POP	W12
0x4466	0x7805CF  	POP	W11
0x4468	0x78054F  	POP	W10
0x446A	0xFA8000  	ULNK
0x446C	0x060000  	RETURN
; end of _Eth_PingReplyHandler
_Eth_Udp_ReplyHandler:
0x4538	0xFA0154  	LNK	#340
;protocol_udp.mpas,421 :: 		begin  {$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Reply Handler' + CRLF);{$ENDIF}
0x453A	0x781F8A  	PUSH	W10
0x453C	0x781F8B  	PUSH	W11
0x453E	0x781F8C  	PUSH	W12
0x4540	0x200A51  	MOV	#165, W1
0x4542	0x470081  	ADD	W14, W1, W1
0x4544	0xB3C550  	MOV.B	#85, W0
0x4546	0x785880  	MOV.B	W0, [W1++]
0x4548	0xB3C640  	MOV.B	#100, W0
0x454A	0x785880  	MOV.B	W0, [W1++]
0x454C	0xB3C700  	MOV.B	#112, W0
0x454E	0x785880  	MOV.B	W0, [W1++]
0x4550	0xB3C200  	MOV.B	#32, W0
0x4552	0x785880  	MOV.B	W0, [W1++]
0x4554	0xB3C520  	MOV.B	#82, W0
0x4556	0x785880  	MOV.B	W0, [W1++]
0x4558	0xB3C650  	MOV.B	#101, W0
0x455A	0x785880  	MOV.B	W0, [W1++]
0x455C	0xB3C700  	MOV.B	#112, W0
0x455E	0x785880  	MOV.B	W0, [W1++]
0x4560	0xB3C6C0  	MOV.B	#108, W0
0x4562	0x785880  	MOV.B	W0, [W1++]
0x4564	0xB3C790  	MOV.B	#121, W0
0x4566	0x785880  	MOV.B	W0, [W1++]
0x4568	0xB3C200  	MOV.B	#32, W0
0x456A	0x785880  	MOV.B	W0, [W1++]
0x456C	0xB3C480  	MOV.B	#72, W0
0x456E	0x785880  	MOV.B	W0, [W1++]
0x4570	0xB3C610  	MOV.B	#97, W0
0x4572	0x785880  	MOV.B	W0, [W1++]
0x4574	0xB3C6E0  	MOV.B	#110, W0
0x4576	0x785880  	MOV.B	W0, [W1++]
0x4578	0xB3C640  	MOV.B	#100, W0
0x457A	0x785880  	MOV.B	W0, [W1++]
0x457C	0xB3C6C0  	MOV.B	#108, W0
0x457E	0x785880  	MOV.B	W0, [W1++]
0x4580	0xB3C650  	MOV.B	#101, W0
0x4582	0x785880  	MOV.B	W0, [W1++]
0x4584	0xB3C720  	MOV.B	#114, W0
0x4586	0x785880  	MOV.B	W0, [W1++]
0x4588	0xB3C0D0  	MOV.B	#13, W0
0x458A	0x785880  	MOV.B	W0, [W1++]
0x458C	0xB3C0A0  	MOV.B	#10, W0
0x458E	0x785880  	MOV.B	W0, [W1++]
0x4590	0xB3C000  	MOV.B	#0, W0
0x4592	0x785880  	MOV.B	W0, [W1++]
0x4594	0x200A50  	MOV	#165, W0
0x4596	0x470000  	ADD	W14, W0, W0
0x4598	0x780500  	MOV	W0, W10
0x459A	0x07056B  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,423 :: 		Eth_Udp_EraseSlotReceive(@Slot);
0x459C	0x470068  	ADD	W14, #8, W0
0x459E	0x780500  	MOV	W0, W10
0x45A0	0x07E73B  	RCALL	protocol_udp_Eth_Udp_EraseSlotReceive
;protocol_udp.mpas,424 :: 		Hi( Slot.DestPort) := ReadFromEthMem(AddrPacket+36);                          // Pull out the Destination Port directly from the RX buffer
0x45A2	0x470072  	ADD	W14, #18, W0
0x45A4	0xEC2000  	INC	W0
0x45A6	0x992F10  	MOV	W0, [W14+338]
0x45A8	0x200241  	MOV	#36, W1
0x45AA	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x45AC	0x408010  	ADD	W1, [W0], W0
0x45AE	0x780500  	MOV	W0, W10
0x45B0	0x07FCAD  	RCALL	_ReadFromEthMem
0x45B2	0x91289E  	MOV	[W14+338], W1
0x45B4	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,425 :: 		Lo( Slot.DestPort) := Eth_GetByte;
0x45B6	0x07EB28  	RCALL	_Eth_GetByte
0x45B8	0x985720  	MOV.B	W0, [W14+18]
;protocol_udp.mpas,427 :: 		{$IFDEF DEBUG_STRING}Eth_Udp_PrintPorts;{$ENDIF}
0x45BA	0x07E6FC  	RCALL	_Eth_Udp_PrintPorts
;protocol_udp.mpas,428 :: 		if Eth_FindUdpPort(Slot.DestPort, iLastEmpty) < 0 then                        // Is a Port we have opened?
0x45BC	0x200220  	MOV	#34, W0
0x45BE	0x470000  	ADD	W14, W0, W0
0x45C0	0x780580  	MOV	W0, W11
0x45C2	0x900D1E  	MOV	[W14+18], W10
0x45C4	0x07E667  	RCALL	protocol_udp_Eth_FindUdpPort
0x45C6	0xE10060  	CP	W0, #0
0x45C8	0x3D003D  	BRA GE	L__Eth_Udp_ReplyHandler98
L__Eth_Udp_ReplyHandler310:
;protocol_udp.mpas,429 :: 		begin  {$IFDEF DEBUG_STRING}WordToStr(Slot.DestPort, s1); UART1_Write_Text('Port not found: '+ s1 + CRLF);{$ENDIF}
0x45CA	0x200240  	MOV	#36, W0
0x45CC	0x470000  	ADD	W14, W0, W0
0x45CE	0x992F10  	MOV	W0, [W14+338]
0x45D0	0x780580  	MOV	W0, W11
0x45D2	0x900D1E  	MOV	[W14+18], W10
0x45D4	0x07E2B2  	RCALL	_WordToStr
0x45D6	0x200BF0  	MOV	#191, W0
0x45D8	0x470000  	ADD	W14, W0, W0
0x45DA	0xB3C502  	MOV.B	#80, W2
0x45DC	0x785802  	MOV.B	W2, [W0++]
0x45DE	0xB3C6F2  	MOV.B	#111, W2
0x45E0	0x785802  	MOV.B	W2, [W0++]
0x45E2	0xB3C722  	MOV.B	#114, W2
0x45E4	0x785802  	MOV.B	W2, [W0++]
0x45E6	0xB3C742  	MOV.B	#116, W2
0x45E8	0x785802  	MOV.B	W2, [W0++]
0x45EA	0xB3C202  	MOV.B	#32, W2
0x45EC	0x785802  	MOV.B	W2, [W0++]
0x45EE	0xB3C6E2  	MOV.B	#110, W2
0x45F0	0x785802  	MOV.B	W2, [W0++]
0x45F2	0xB3C6F2  	MOV.B	#111, W2
0x45F4	0x785802  	MOV.B	W2, [W0++]
0x45F6	0xB3C742  	MOV.B	#116, W2
0x45F8	0x785802  	MOV.B	W2, [W0++]
0x45FA	0xB3C202  	MOV.B	#32, W2
0x45FC	0x785802  	MOV.B	W2, [W0++]
0x45FE	0xB3C662  	MOV.B	#102, W2
0x4600	0x785802  	MOV.B	W2, [W0++]
0x4602	0xB3C6F2  	MOV.B	#111, W2
0x4604	0x785802  	MOV.B	W2, [W0++]
0x4606	0xB3C752  	MOV.B	#117, W2
0x4608	0x785802  	MOV.B	W2, [W0++]
0x460A	0xB3C6E2  	MOV.B	#110, W2
0x460C	0x785802  	MOV.B	W2, [W0++]
0x460E	0xB3C642  	MOV.B	#100, W2
0x4610	0x785802  	MOV.B	W2, [W0++]
0x4612	0xB3C3A2  	MOV.B	#58, W2
0x4614	0x785802  	MOV.B	W2, [W0++]
0x4616	0xB3C202  	MOV.B	#32, W2
0x4618	0x785802  	MOV.B	W2, [W0++]
0x461A	0x91291E  	MOV	[W14+338], W2
0x461C	0x780082  	MOV	W2, W1
0x461E	0x07E2BD  	RCALL	___CS2S
0x4620	0x280301  	MOV	#lo_addr(_CRLF), W1
0x4622	0x202012  	MOV	#513, W2
0x4624	0x880192  	MOV	W2, DSRPAG
0x4626	0x000000  	NOP
0x4628	0x07E2B8  	RCALL	___CS2S
0x462A	0x780080  	MOV	W0, W1
0x462C	0xEF2000  	CLR	W0
0x462E	0x785880  	MOV.B	W0, [W1++]
0x4630	0x200BF0  	MOV	#191, W0
0x4632	0x470000  	ADD	W14, W0, W0
0x4634	0x780500  	MOV	W0, W10
0x4636	0x07051D  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,430 :: 		if policy = Reject then                                                     // If not are we suppose reply with a Reject message?
0x4638	0x210260  	MOV	#lo_addr(_policy), W0
0x463A	0x784010  	MOV.B	[W0], W0
0x463C	0xE10461  	CP.B	W0, #1
0x463E	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler101
L__Eth_Udp_ReplyHandler311:
;protocol_udp.mpas,431 :: 		Eth_Reject;
0x4640	0x07E5C2  	RCALL	_Eth_Reject
L__Eth_Udp_ReplyHandler101:
;protocol_udp.mpas,432 :: 		Exit;
0x4642	0x370366  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,433 :: 		end;
L__Eth_Udp_ReplyHandler98:
;protocol_udp.mpas,435 :: 		Hi(IpChecksum) := ReadFromEthMem(AddrPacket+24);                              // Read in the CheckSum for the IP Header directly from the RX buffer
0x4644	0x470060  	ADD	W14, #0, W0
0x4646	0xEC2000  	INC	W0
0x4648	0x992F10  	MOV	W0, [W14+338]
0x464A	0x808080  	MOV	_AddrPacket, W0
0x464C	0x400078  	ADD	W0, #24, W0
0x464E	0x780500  	MOV	W0, W10
0x4650	0x07FC5D  	RCALL	_ReadFromEthMem
0x4652	0x91289E  	MOV	[W14+338], W1
0x4654	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,436 :: 		Lo(IpChecksum) := Eth_GetByte;
0x4656	0x07EAD8  	RCALL	_Eth_GetByte
0x4658	0x984700  	MOV.B	W0, [W14+0]
;protocol_udp.mpas,437 :: 		Hi(UdpCheckSum) := ReadFromEthMem(AddrPacket+40);                             // Read in the CheckSum for the UDP Header and Data directly from the RX buffer
0x465A	0x470062  	ADD	W14, #2, W0
0x465C	0xEC2000  	INC	W0
0x465E	0x992F10  	MOV	W0, [W14+338]
0x4660	0x200281  	MOV	#40, W1
0x4662	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x4664	0x408010  	ADD	W1, [W0], W0
0x4666	0x780500  	MOV	W0, W10
0x4668	0x07FC51  	RCALL	_ReadFromEthMem
0x466A	0x91289E  	MOV	[W14+338], W1
0x466C	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,438 :: 		Lo(UdpCheckSum) := Eth_GetByte;
0x466E	0x07EACC  	RCALL	_Eth_GetByte
0x4670	0x984720  	MOV.B	W0, [W14+2]
;protocol_udp.mpas,440 :: 		Hi(IpLength) := ReadFromEthMem(AddrPacket+16);                                // Read in the Length from the IP Header  directly from the RX buffer
0x4672	0x470066  	ADD	W14, #6, W0
0x4674	0xEC2000  	INC	W0
0x4676	0x992F10  	MOV	W0, [W14+338]
0x4678	0x808080  	MOV	_AddrPacket, W0
0x467A	0x400070  	ADD	W0, #16, W0
0x467C	0x780500  	MOV	W0, W10
0x467E	0x07FC46  	RCALL	_ReadFromEthMem
0x4680	0x91289E  	MOV	[W14+338], W1
0x4682	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,441 :: 		Lo(IpLength) := Eth_GetByte;
0x4684	0x07EAC1  	RCALL	_Eth_GetByte
0x4686	0x984760  	MOV.B	W0, [W14+6]
;protocol_udp.mpas,443 :: 		CopyEthMemToEthMem(AddrPacket, TXSTART, IpLength+14);                         // Copy the packet from the RX buffer into the  Working RX Buffer including the MAC address header
0x4688	0x90003E  	MOV	[W14+6], W0
0x468A	0x40006E  	ADD	W0, #14, W0
0x468C	0x780600  	MOV	W0, W12
0x468E	0xEF2016  	CLR	W11
0x4690	0x80808A  	MOV	_AddrPacket, W10
0x4692	0x07EA97  	RCALL	_CopyEthMemToEthMem
;protocol_udp.mpas,444 :: 		WriteToEthMem(TXSTART+24, $00);                                               // Write 0's to the IP Checksum so we can recalculate and validate the checksum
0x4694	0xEF2016  	CLR	W11
0x4696	0x20018A  	MOV	#24, W10
0x4698	0x07EE58  	RCALL	_WriteToEthMem
;protocol_udp.mpas,445 :: 		Eth_PutByte($00);
0x469A	0xEF2014  	CLR	W10
0x469C	0x07EE4E  	RCALL	_Eth_PutByte
;protocol_udp.mpas,447 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Checking IP Checksum' + CRLF);{$ENDIF}
0x469E	0x200A51  	MOV	#165, W1
0x46A0	0x470081  	ADD	W14, W1, W1
0x46A2	0xB3C430  	MOV.B	#67, W0
0x46A4	0x785880  	MOV.B	W0, [W1++]
0x46A6	0xB3C680  	MOV.B	#104, W0
0x46A8	0x785880  	MOV.B	W0, [W1++]
0x46AA	0xB3C650  	MOV.B	#101, W0
0x46AC	0x785880  	MOV.B	W0, [W1++]
0x46AE	0xB3C630  	MOV.B	#99, W0
0x46B0	0x785880  	MOV.B	W0, [W1++]
0x46B2	0xB3C6B0  	MOV.B	#107, W0
0x46B4	0x785880  	MOV.B	W0, [W1++]
0x46B6	0xB3C690  	MOV.B	#105, W0
0x46B8	0x785880  	MOV.B	W0, [W1++]
0x46BA	0xB3C6E0  	MOV.B	#110, W0
0x46BC	0x785880  	MOV.B	W0, [W1++]
0x46BE	0xB3C670  	MOV.B	#103, W0
0x46C0	0x785880  	MOV.B	W0, [W1++]
0x46C2	0xB3C200  	MOV.B	#32, W0
0x46C4	0x785880  	MOV.B	W0, [W1++]
0x46C6	0xB3C490  	MOV.B	#73, W0
0x46C8	0x785880  	MOV.B	W0, [W1++]
0x46CA	0xB3C500  	MOV.B	#80, W0
0x46CC	0x785880  	MOV.B	W0, [W1++]
0x46CE	0xB3C200  	MOV.B	#32, W0
0x46D0	0x785880  	MOV.B	W0, [W1++]
0x46D2	0xB3C430  	MOV.B	#67, W0
0x46D4	0x785880  	MOV.B	W0, [W1++]
0x46D6	0xB3C680  	MOV.B	#104, W0
0x46D8	0x785880  	MOV.B	W0, [W1++]
0x46DA	0xB3C650  	MOV.B	#101, W0
0x46DC	0x785880  	MOV.B	W0, [W1++]
0x46DE	0xB3C630  	MOV.B	#99, W0
0x46E0	0x785880  	MOV.B	W0, [W1++]
0x46E2	0xB3C6B0  	MOV.B	#107, W0
0x46E4	0x785880  	MOV.B	W0, [W1++]
0x46E6	0xB3C730  	MOV.B	#115, W0
0x46E8	0x785880  	MOV.B	W0, [W1++]
0x46EA	0xB3C750  	MOV.B	#117, W0
0x46EC	0x785880  	MOV.B	W0, [W1++]
0x46EE	0xB3C6D0  	MOV.B	#109, W0
0x46F0	0x785880  	MOV.B	W0, [W1++]
0x46F2	0xB3C0D0  	MOV.B	#13, W0
0x46F4	0x785880  	MOV.B	W0, [W1++]
0x46F6	0xB3C0A0  	MOV.B	#10, W0
0x46F8	0x785880  	MOV.B	W0, [W1++]
0x46FA	0xB3C000  	MOV.B	#0, W0
0x46FC	0x785880  	MOV.B	W0, [W1++]
0x46FE	0x200A50  	MOV	#165, W0
0x4700	0x470000  	ADD	W14, W0, W0
0x4702	0x780500  	MOV	W0, W10
0x4704	0x0704B6  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,448 :: 		if IpChecksum <> Eth_Cksum(TXSTART+14, 20) then                                 // Recalculate the IP Header checksum and test against what was sent, if equal move on
0x4706	0x20014B  	MOV	#20, W11
0x4708	0x2000EA  	MOV	#14, W10
0x470A	0x07E5EF  	RCALL	_Eth_Cksum
0x470C	0x4700E0  	ADD	W14, #0, W1
0x470E	0xE10011  	CP	W0, [W1]
0x4710	0x320001  	BRA Z	L__Eth_Udp_ReplyHandler104
L__Eth_Udp_ReplyHandler312:
;protocol_udp.mpas,449 :: 		Exit;
0x4712	0x3702FE  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler104:
;protocol_udp.mpas,451 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Checking Header Lengths' + CRLF);{$ENDIF}
0x4714	0x200A51  	MOV	#165, W1
0x4716	0x470081  	ADD	W14, W1, W1
0x4718	0xB3C430  	MOV.B	#67, W0
0x471A	0x785880  	MOV.B	W0, [W1++]
0x471C	0xB3C680  	MOV.B	#104, W0
0x471E	0x785880  	MOV.B	W0, [W1++]
0x4720	0xB3C650  	MOV.B	#101, W0
0x4722	0x785880  	MOV.B	W0, [W1++]
0x4724	0xB3C630  	MOV.B	#99, W0
0x4726	0x785880  	MOV.B	W0, [W1++]
0x4728	0xB3C6B0  	MOV.B	#107, W0
0x472A	0x785880  	MOV.B	W0, [W1++]
0x472C	0xB3C690  	MOV.B	#105, W0
0x472E	0x785880  	MOV.B	W0, [W1++]
0x4730	0xB3C6E0  	MOV.B	#110, W0
0x4732	0x785880  	MOV.B	W0, [W1++]
0x4734	0xB3C670  	MOV.B	#103, W0
0x4736	0x785880  	MOV.B	W0, [W1++]
0x4738	0xB3C200  	MOV.B	#32, W0
0x473A	0x785880  	MOV.B	W0, [W1++]
0x473C	0xB3C480  	MOV.B	#72, W0
0x473E	0x785880  	MOV.B	W0, [W1++]
0x4740	0xB3C650  	MOV.B	#101, W0
0x4742	0x785880  	MOV.B	W0, [W1++]
0x4744	0xB3C610  	MOV.B	#97, W0
0x4746	0x785880  	MOV.B	W0, [W1++]
0x4748	0xB3C640  	MOV.B	#100, W0
0x474A	0x785880  	MOV.B	W0, [W1++]
0x474C	0xB3C650  	MOV.B	#101, W0
0x474E	0x785880  	MOV.B	W0, [W1++]
0x4750	0xB3C720  	MOV.B	#114, W0
0x4752	0x785880  	MOV.B	W0, [W1++]
0x4754	0xB3C200  	MOV.B	#32, W0
0x4756	0x785880  	MOV.B	W0, [W1++]
0x4758	0xB3C4C0  	MOV.B	#76, W0
0x475A	0x785880  	MOV.B	W0, [W1++]
0x475C	0xB3C650  	MOV.B	#101, W0
0x475E	0x785880  	MOV.B	W0, [W1++]
0x4760	0xB3C6E0  	MOV.B	#110, W0
0x4762	0x785880  	MOV.B	W0, [W1++]
0x4764	0xB3C670  	MOV.B	#103, W0
0x4766	0x785880  	MOV.B	W0, [W1++]
0x4768	0xB3C740  	MOV.B	#116, W0
0x476A	0x785880  	MOV.B	W0, [W1++]
0x476C	0xB3C680  	MOV.B	#104, W0
0x476E	0x785880  	MOV.B	W0, [W1++]
0x4770	0xB3C730  	MOV.B	#115, W0
0x4772	0x785880  	MOV.B	W0, [W1++]
0x4774	0xB3C0D0  	MOV.B	#13, W0
0x4776	0x785880  	MOV.B	W0, [W1++]
0x4778	0xB3C0A0  	MOV.B	#10, W0
0x477A	0x785880  	MOV.B	W0, [W1++]
0x477C	0xB3C000  	MOV.B	#0, W0
0x477E	0x785880  	MOV.B	W0, [W1++]
0x4780	0x200A50  	MOV	#165, W0
0x4782	0x470000  	ADD	W14, W0, W0
0x4784	0x780500  	MOV	W0, W10
0x4786	0x070475  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,452 :: 		if IpLength <= 28 then                                                        // Not possible for the length of a UDP packet to be less than 28 bytes (20 for IP header 8 for the UDP header with 0 for data)
0x4788	0x90003E  	MOV	[W14+6], W0
0x478A	0xE1007C  	CP	W0, #28
0x478C	0x3E0001  	BRA GTU	L__Eth_Udp_ReplyHandler107
L__Eth_Udp_ReplyHandler313:
;protocol_udp.mpas,453 :: 		Exit;
0x478E	0x3702C0  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler107:
;protocol_udp.mpas,455 :: 		Align := IpLength and $01;                                                    // Needs to be a factor of 2 in length per the spec for the Checksum
0x4790	0x90406E  	MOV.B	[W14+6], W0
; Align start address is: 6 (W3)
0x4792	0x6041E1  	AND.B	W0, #1, W3
;protocol_udp.mpas,457 :: 		WriteToEthMem(TXSTART+40,$00);                                                // Zero out the UDP Checksum Word
0x4794	0xEF2016  	CLR	W11
0x4796	0x20028A  	MOV	#40, W10
0x4798	0x07EDD8  	RCALL	_WriteToEthMem
;protocol_udp.mpas,458 :: 		Eth_PutByte($00);
0x479A	0xEF2014  	CLR	W10
0x479C	0x07EDCE  	RCALL	_Eth_PutByte
;protocol_udp.mpas,461 :: 		WriteToEthMem(TXSTART+IpLength+14, $00);                                      // Move past the packet; Need to build the Psudo IP header to calculate the UDP Checksum...
0x479E	0x90003E  	MOV	[W14+6], W0
0x47A0	0x40006E  	ADD	W0, #14, W0
0x47A2	0xEF2016  	CLR	W11
0x47A4	0x780500  	MOV	W0, W10
0x47A6	0x07EDD1  	RCALL	_WriteToEthMem
;protocol_udp.mpas,462 :: 		Eth_PutByte($00);
0x47A8	0xEF2014  	CLR	W10
0x47AA	0x07EDC7  	RCALL	_Eth_PutByte
;protocol_udp.mpas,463 :: 		CopyEthMemToEthMem(TXSTART+26, TXSTART+IpLength+Align+14, 8);                 // Copy over the IP addresses to the Psudo IP Header
0x47AC	0xFB8083  	ZE	W3, W1
0x47AE	0x470066  	ADD	W14, #6, W0
0x47B0	0x408010  	ADD	W1, [W0], W0
0x47B2	0x40006E  	ADD	W0, #14, W0
0x47B4	0x20008C  	MOV	#8, W12
0x47B6	0x780580  	MOV	W0, W11
0x47B8	0x2001AA  	MOV	#26, W10
0x47BA	0x07EA03  	RCALL	_CopyEthMemToEthMem
;protocol_udp.mpas,464 :: 		WriteToEthMem(TXSTART+IpLength+Align+14+8, $00);                              // Zeros Field
0x47BC	0xFB8083  	ZE	W3, W1
0x47BE	0x470066  	ADD	W14, #6, W0
0x47C0	0x408010  	ADD	W1, [W0], W0
0x47C2	0x40006E  	ADD	W0, #14, W0
0x47C4	0x400068  	ADD	W0, #8, W0
0x47C6	0xEF2016  	CLR	W11
0x47C8	0x780500  	MOV	W0, W10
0x47CA	0x07EDBF  	RCALL	_WriteToEthMem
;protocol_udp.mpas,465 :: 		Eth_PutByte($11);                                                             // UDP Protocol
0x47CC	0xB3C11A  	MOV.B	#17, W10
0x47CE	0x07EDB5  	RCALL	_Eth_PutByte
;protocol_udp.mpas,466 :: 		UdpLength := IpLength - 20;                                                   // Subtract off the IP Header Length to the just the UDP bytes length
0x47D0	0x9000BE  	MOV	[W14+6], W1
0x47D2	0x470064  	ADD	W14, #4, W0
0x47D4	0x508874  	SUB	W1, #20, [W0]
;protocol_udp.mpas,467 :: 		Eth_PutByte(Hi(UdpLength));                                                   // Length of the Psudo IP Header
0x47D6	0x470064  	ADD	W14, #4, W0
0x47D8	0xEC2000  	INC	W0
0x47DA	0x784010  	MOV.B	[W0], W0
0x47DC	0x784500  	MOV.B	W0, W10
0x47DE	0x07EDAD  	RCALL	_Eth_PutByte
;protocol_udp.mpas,468 :: 		Eth_PutByte(Lo(UdpLength));
0x47E0	0x90454E  	MOV.B	[W14+4], W10
0x47E2	0x07EDAB  	RCALL	_Eth_PutByte
;protocol_udp.mpas,470 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Checking UDP Checksum' + CRLF);{$ENDIF}
0x47E4	0x200A51  	MOV	#165, W1
0x47E6	0x470081  	ADD	W14, W1, W1
0x47E8	0xB3C430  	MOV.B	#67, W0
0x47EA	0x785880  	MOV.B	W0, [W1++]
0x47EC	0xB3C680  	MOV.B	#104, W0
0x47EE	0x785880  	MOV.B	W0, [W1++]
0x47F0	0xB3C650  	MOV.B	#101, W0
0x47F2	0x785880  	MOV.B	W0, [W1++]
0x47F4	0xB3C630  	MOV.B	#99, W0
0x47F6	0x785880  	MOV.B	W0, [W1++]
0x47F8	0xB3C6B0  	MOV.B	#107, W0
0x47FA	0x785880  	MOV.B	W0, [W1++]
0x47FC	0xB3C690  	MOV.B	#105, W0
0x47FE	0x785880  	MOV.B	W0, [W1++]
0x4800	0xB3C6E0  	MOV.B	#110, W0
0x4802	0x785880  	MOV.B	W0, [W1++]
0x4804	0xB3C670  	MOV.B	#103, W0
0x4806	0x785880  	MOV.B	W0, [W1++]
0x4808	0xB3C200  	MOV.B	#32, W0
0x480A	0x785880  	MOV.B	W0, [W1++]
0x480C	0xB3C550  	MOV.B	#85, W0
0x480E	0x785880  	MOV.B	W0, [W1++]
0x4810	0xB3C440  	MOV.B	#68, W0
0x4812	0x785880  	MOV.B	W0, [W1++]
0x4814	0xB3C500  	MOV.B	#80, W0
0x4816	0x785880  	MOV.B	W0, [W1++]
0x4818	0xB3C200  	MOV.B	#32, W0
0x481A	0x785880  	MOV.B	W0, [W1++]
0x481C	0xB3C430  	MOV.B	#67, W0
0x481E	0x785880  	MOV.B	W0, [W1++]
0x4820	0xB3C680  	MOV.B	#104, W0
0x4822	0x785880  	MOV.B	W0, [W1++]
0x4824	0xB3C650  	MOV.B	#101, W0
0x4826	0x785880  	MOV.B	W0, [W1++]
0x4828	0xB3C630  	MOV.B	#99, W0
0x482A	0x785880  	MOV.B	W0, [W1++]
0x482C	0xB3C6B0  	MOV.B	#107, W0
0x482E	0x785880  	MOV.B	W0, [W1++]
0x4830	0xB3C730  	MOV.B	#115, W0
0x4832	0x785880  	MOV.B	W0, [W1++]
0x4834	0xB3C750  	MOV.B	#117, W0
0x4836	0x785880  	MOV.B	W0, [W1++]
0x4838	0xB3C6D0  	MOV.B	#109, W0
0x483A	0x785880  	MOV.B	W0, [W1++]
0x483C	0xB3C0D0  	MOV.B	#13, W0
0x483E	0x785880  	MOV.B	W0, [W1++]
0x4840	0xB3C0A0  	MOV.B	#10, W0
0x4842	0x785880  	MOV.B	W0, [W1++]
0x4844	0xB3C000  	MOV.B	#0, W0
0x4846	0x785880  	MOV.B	W0, [W1++]
0x4848	0x200A50  	MOV	#165, W0
0x484A	0x470000  	ADD	W14, W0, W0
0x484C	0x780500  	MOV	W0, W10
0x484E	0x070411  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,471 :: 		if UdpChecksum <> Eth_Cksum(TXSTART+34, UdpLength+Align+12) then               // See if the UDP Checksum is valid
0x4850	0xFB8083  	ZE	W3, W1
; Align end address is: 6 (W3)
0x4852	0x470064  	ADD	W14, #4, W0
0x4854	0x408010  	ADD	W1, [W0], W0
0x4856	0x40006C  	ADD	W0, #12, W0
0x4858	0x780580  	MOV	W0, W11
0x485A	0x20022A  	MOV	#34, W10
0x485C	0x07E546  	RCALL	_Eth_Cksum
0x485E	0x4700E2  	ADD	W14, #2, W1
0x4860	0xE10011  	CP	W0, [W1]
0x4862	0x320001  	BRA Z	L__Eth_Udp_ReplyHandler110
L__Eth_Udp_ReplyHandler314:
;protocol_udp.mpas,472 :: 		Exit;
0x4864	0x370255  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler110:
;protocol_udp.mpas,476 :: 		Slot.DataLen := UdpLength - 8;                                                // Strip off the UDP header and all we have is data Bytes left
0x4866	0x90002E  	MOV	[W14+4], W0
0x4868	0x500068  	SUB	W0, #8, W0
0x486A	0x981700  	MOV	W0, [W14+32]
;protocol_udp.mpas,478 :: 		Hi(Slot.SourcePort) := ReadFromEthMem(AddrPacket+34);
0x486C	0x47007E  	ADD	W14, #30, W0
0x486E	0xEC2000  	INC	W0
0x4870	0x992F10  	MOV	W0, [W14+338]
0x4872	0x200221  	MOV	#34, W1
0x4874	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x4876	0x408010  	ADD	W1, [W0], W0
0x4878	0x780500  	MOV	W0, W10
0x487A	0x07FB48  	RCALL	_ReadFromEthMem
0x487C	0x91289E  	MOV	[W14+338], W1
0x487E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,479 :: 		Lo(Slot.SourcePort) := Eth_GetByte;
0x4880	0x07E9C3  	RCALL	_Eth_GetByte
0x4882	0x985F60  	MOV.B	W0, [W14+30]
;protocol_udp.mpas,481 :: 		CopyEthMemToRam(AddrPacket+6, @Slot.SourceMAC[0], 6);                         // Copy over the MAC of the node this packet came from
0x4884	0x808080  	MOV	_AddrPacket, W0
0x4886	0x4000E6  	ADD	W0, #6, W1
0x4888	0x470078  	ADD	W14, #24, W0
0x488A	0x20006C  	MOV	#6, W12
0x488C	0x780580  	MOV	W0, W11
0x488E	0x780501  	MOV	W1, W10
0x4890	0x07E934  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,482 :: 		CopyEthMemToRam(AddrPacket, @Slot.DestMAC[0], 6);                             // Copy over the MAC of the node this packet is going to.. It Should be the MAC of this node
0x4892	0x47006C  	ADD	W14, #12, W0
0x4894	0x20006C  	MOV	#6, W12
0x4896	0x780580  	MOV	W0, W11
0x4898	0x80808A  	MOV	_AddrPacket, W10
0x489A	0x07E92F  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,484 :: 		CopyEthMemToRam(AddrPacket+26, @Slot.SourceIP[0], 4);                         // Copy over the IP of the node this packet came from
0x489C	0x808080  	MOV	_AddrPacket, W0
0x489E	0x4000FA  	ADD	W0, #26, W1
0x48A0	0x470074  	ADD	W14, #20, W0
0x48A2	0x20004C  	MOV	#4, W12
0x48A4	0x780580  	MOV	W0, W11
0x48A6	0x780501  	MOV	W1, W10
0x48A8	0x07E928  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,485 :: 		CopyEthMemToRam(AddrPacket+30, @Slot.DestIP[0], 4);                           // Copy over the Destination IP, which should be the IP of this node
0x48AA	0x808080  	MOV	_AddrPacket, W0
0x48AC	0x4000FE  	ADD	W0, #30, W1
0x48AE	0x470068  	ADD	W14, #8, W0
0x48B0	0x20004C  	MOV	#4, W12
0x48B2	0x780580  	MOV	W0, W11
0x48B4	0x780501  	MOV	W1, W10
0x48B6	0x07E921  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,487 :: 		{$IFDEF DEBUG_STRING}Eth_Udp_PrintSlotReceive(@Slot);{$ENDIF}
0x48B8	0x470068  	ADD	W14, #8, W0
0x48BA	0x780500  	MOV	W0, W10
0x48BC	0x07E6EC  	RCALL	_Eth_Udp_PrintSlotReceive
;protocol_udp.mpas,491 :: 		if (Slot.SourcePort = NTP_PORT) and (Slot.DestPort = NTP_PORT) then                     // Is it an NTP reply?
0x48BE	0x2007B1  	MOV	#123, W1
0x48C0	0x47007E  	ADD	W14, #30, W0
0x48C2	0xE10810  	CP	W1, [W0]
0x48C4	0xEF2004  	CLR	W2
0x48C6	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler315
0x48C8	0xEEA004  	COM	W2
L__Eth_Udp_ReplyHandler315:
0x48CA	0x2007B1  	MOV	#123, W1
0x48CC	0x470072  	ADD	W14, #18, W0
0x48CE	0xE10810  	CP	W1, [W0]
0x48D0	0xEF2000  	CLR	W0
0x48D2	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler316
0x48D4	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler316:
0x48D6	0x610000  	AND	W2, W0, W0
0x48D8	0x320004  	BRA Z	L__Eth_Udp_ReplyHandler113
L__Eth_Udp_ReplyHandler317:
;protocol_udp.mpas,493 :: 		Eth_Ntp_ReceiveHandler(@Slot);
0x48DA	0x470068  	ADD	W14, #8, W0
0x48DC	0x780500  	MOV	W0, W10
0x48DE	0x07E850  	RCALL	_Eth_Ntp_ReceiveHandler
;protocol_udp.mpas,494 :: 		Exit;
0x48E0	0x370217  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,495 :: 		end;
L__Eth_Udp_ReplyHandler113:
;protocol_udp.mpas,498 :: 		if (Slot.SourcePort = DHCP_SEND_PORT) and (Slot.DestPort = DHCP_RECEIVE_PORT) then
0x48E2	0x200431  	MOV	#67, W1
0x48E4	0x47007E  	ADD	W14, #30, W0
0x48E6	0xE10810  	CP	W1, [W0]
0x48E8	0xEF2004  	CLR	W2
0x48EA	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler318
0x48EC	0xEEA004  	COM	W2
L__Eth_Udp_ReplyHandler318:
0x48EE	0x200441  	MOV	#68, W1
0x48F0	0x470072  	ADD	W14, #18, W0
0x48F2	0xE10810  	CP	W1, [W0]
0x48F4	0xEF2000  	CLR	W0
0x48F6	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler319
0x48F8	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler319:
0x48FA	0x610000  	AND	W2, W0, W0
0x48FC	0x3200DE  	BRA Z	L__Eth_Udp_ReplyHandler116
L__Eth_Udp_ReplyHandler320:
;protocol_udp.mpas,500 :: 		Align := ReadFromEthMem(AddrPacket + 42);
0x48FE	0x2002A1  	MOV	#42, W1
0x4900	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x4902	0x408010  	ADD	W1, [W0], W0
0x4904	0x780500  	MOV	W0, W10
0x4906	0x07FB02  	RCALL	_ReadFromEthMem
; Align start address is: 4 (W2)
0x4908	0x784100  	MOV.B	W0, W2
;protocol_udp.mpas,501 :: 		if (DHCP_State = 1) and (Align = BOOT_REPLY) then
0x490A	0x2105F1  	MOV	#lo_addr(_DHCP_State), W1
0x490C	0x784091  	MOV.B	[W1], W1
0x490E	0xE10C61  	CP.B	W1, #1
0x4910	0xEF2002  	CLR	W1
0x4912	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler321
0x4914	0xEEA002  	COM	W1
L__Eth_Udp_ReplyHandler321:
0x4916	0xE10462  	CP.B	W0, #2
0x4918	0xEF2000  	CLR	W0
0x491A	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler322
0x491C	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler322:
0x491E	0x608000  	AND	W1, W0, W0
0x4920	0xE20000  	CP0	W0
0x4922	0x320040  	BRA Z	L__Eth_Udp_ReplyHandler119
L__Eth_Udp_ReplyHandler323:
; Align end address is: 4 (W2)
;protocol_udp.mpas,503 :: 		CopyEthMemToRam(AddrPacket + (42 + 16),@tmp_ip_addr,4);
0x4924	0x2003A1  	MOV	#58, W1
0x4926	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x4928	0x408010  	ADD	W1, [W0], W0
0x492A	0x20004C  	MOV	#4, W12
0x492C	0x210AAB  	MOV	#lo_addr(_tmp_ip_addr), W11
0x492E	0x780500  	MOV	W0, W10
0x4930	0x07E8E4  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,504 :: 		Align := ReadFromEthMem(AddrPacket + (41 + 240));
0x4932	0x808081  	MOV	_AddrPacket, W1
0x4934	0x201190  	MOV	#281, W0
0x4936	0x408000  	ADD	W1, W0, W0
0x4938	0x780500  	MOV	W0, W10
0x493A	0x07FAE8  	RCALL	_ReadFromEthMem
;protocol_udp.mpas,505 :: 		end_loop := 0;
; end_loop start address is: 8 (W4)
0x493C	0xEF2008  	CLR	W4
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,506 :: 		while end_loop = 0 do
L__Eth_Udp_ReplyHandler122:
; end_loop start address is: 8 (W4)
0x493E	0xE12460  	CP.B	W4, #0
0x4940	0x3A002D  	BRA NZ	L__Eth_Udp_ReplyHandler123
L__Eth_Udp_ReplyHandler324:
;protocol_udp.mpas,508 :: 		Align := Eth_GetByte;
0x4942	0x07E962  	RCALL	_Eth_GetByte
; Align start address is: 4 (W2)
0x4944	0x784100  	MOV.B	W0, W2
;protocol_udp.mpas,512 :: 		DHCP_MESSAGE_TYPE :
0x4946	0xB3C351  	MOV.B	#53, W1
0x4948	0xE10401  	CP.B	W0, W1
0x494A	0x3A000A  	BRA NZ	L__Eth_Udp_ReplyHandler129
L__Eth_Udp_ReplyHandler325:
; Align end address is: 4 (W2)
;protocol_udp.mpas,514 :: 		Align := Eth_GetByte;                    // Skip len
0x494C	0x07E95D  	RCALL	_Eth_GetByte
;protocol_udp.mpas,516 :: 		if Align = 1 then
0x494E	0xE10461  	CP.B	W0, #1
0x4950	0x3A0005  	BRA NZ	L__Eth_Udp_ReplyHandler131
L__Eth_Udp_ReplyHandler326:
;protocol_udp.mpas,518 :: 		Align := Eth_GetByte;        // Get type
0x4952	0x07E95A  	RCALL	_Eth_GetByte
;protocol_udp.mpas,519 :: 		if Align <> DHCP_OFFER then Exit;
0x4954	0xE10462  	CP.B	W0, #2
0x4956	0x320001  	BRA Z	L__Eth_Udp_ReplyHandler134
L__Eth_Udp_ReplyHandler327:
; end_loop end address is: 8 (W4)
0x4958	0x3701DB  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler134:
;protocol_udp.mpas,520 :: 		end
; end_loop start address is: 8 (W4)
0x495A	0x370001  	BRA	L__Eth_Udp_ReplyHandler132
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,521 :: 		else Exit;
L__Eth_Udp_ReplyHandler131:
0x495C	0x3701D9  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler132:
;protocol_udp.mpas,522 :: 		end;
; end_loop start address is: 8 (W4)
0x495E	0x37001D  	BRA	L__Eth_Udp_ReplyHandler126
L__Eth_Udp_ReplyHandler129:
;protocol_udp.mpas,524 :: 		DHCP_SERVER_IDENTIFIER :
; Align start address is: 4 (W2)
0x4960	0xB3C360  	MOV.B	#54, W0
0x4962	0xE11400  	CP.B	W2, W0
0x4964	0x3A0009  	BRA NZ	L__Eth_Udp_ReplyHandler138
L__Eth_Udp_ReplyHandler328:
; Align end address is: 4 (W2)
;protocol_udp.mpas,526 :: 		Align := Eth_GetByte;                         // Get len
0x4966	0x07E950  	RCALL	_Eth_GetByte
;protocol_udp.mpas,528 :: 		if Align = 4 then CopyEthMem_CPToRam(@DHCPServerID, 4)
0x4968	0xE10464  	CP.B	W0, #4
0x496A	0x3A0004  	BRA NZ	L__Eth_Udp_ReplyHandler140
L__Eth_Udp_ReplyHandler329:
0x496C	0x20004B  	MOV	#4, W11
0x496E	0x210B4A  	MOV	#lo_addr(_DHCPServerID), W10
0x4970	0x07E663  	RCALL	_CopyEthMem_CPToRam
0x4972	0x370001  	BRA	L__Eth_Udp_ReplyHandler141
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,529 :: 		else Exit;
L__Eth_Udp_ReplyHandler140:
0x4974	0x3701CD  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler141:
;protocol_udp.mpas,530 :: 		end;
; end_loop start address is: 8 (W4)
0x4976	0x370011  	BRA	L__Eth_Udp_ReplyHandler126
L__Eth_Udp_ReplyHandler138:
;protocol_udp.mpas,532 :: 		DHCP_END_OPTION : end_loop := 1
; Align start address is: 4 (W2)
0x4978	0xB3CFF0  	MOV.B	#255, W0
0x497A	0xE11400  	CP.B	W2, W0
0x497C	0x3A0003  	BRA NZ	L__Eth_Udp_ReplyHandler144
L__Eth_Udp_ReplyHandler330:
; Align end address is: 4 (W2)
; end_loop end address is: 8 (W4)
; end_loop start address is: 0 (W0)
0x497E	0xB3C010  	MOV.B	#1, W0
;protocol_udp.mpas,534 :: 		else
0x4980	0x784200  	MOV.B	W0, W4
; end_loop end address is: 0 (W0)
0x4982	0x37000B  	BRA	L__Eth_Udp_ReplyHandler126
L__Eth_Udp_ReplyHandler144:
;protocol_udp.mpas,537 :: 		Align := Eth_GetByte;     // Get option len
; end_loop start address is: 8 (W4)
0x4984	0x07E941  	RCALL	_Eth_GetByte
; Align start address is: 2 (W1)
0x4986	0x784080  	MOV.B	W0, W1
; Align end address is: 2 (W1)
; end_loop end address is: 8 (W4)
0x4988	0x784184  	MOV.B	W4, W3
0x498A	0x784101  	MOV.B	W1, W2
;protocol_udp.mpas,538 :: 		while Align <> 0 do       // Ignore option values
L__Eth_Udp_ReplyHandler146:
; Align start address is: 4 (W2)
; end_loop start address is: 6 (W3)
0x498C	0xE11460  	CP.B	W2, #0
0x498E	0x320004  	BRA Z	L__Eth_Udp_ReplyHandler147
L__Eth_Udp_ReplyHandler331:
;protocol_udp.mpas,540 :: 		Eth_GetByte;
0x4990	0x07E93B  	RCALL	_Eth_GetByte
;protocol_udp.mpas,541 :: 		dec(Align);
; Align start address is: 0 (W0)
0x4992	0x514061  	SUB.B	W2, #1, W0
; Align end address is: 4 (W2)
;protocol_udp.mpas,542 :: 		end;
; Align end address is: 0 (W0)
0x4994	0x784100  	MOV.B	W0, W2
0x4996	0x37FFFA  	BRA	L__Eth_Udp_ReplyHandler146
L__Eth_Udp_ReplyHandler147:
;protocol_udp.mpas,543 :: 		end;
0x4998	0x784203  	MOV.B	W3, W4
L__Eth_Udp_ReplyHandler126:
; end_loop end address is: 6 (W3)
;protocol_udp.mpas,545 :: 		end;
; end_loop start address is: 8 (W4)
; end_loop end address is: 8 (W4)
0x499A	0x37FFD1  	BRA	L__Eth_Udp_ReplyHandler122
L__Eth_Udp_ReplyHandler123:
;protocol_udp.mpas,546 :: 		DHCP_State := 2;
0x499C	0x2105F1  	MOV	#lo_addr(_DHCP_State), W1
0x499E	0xB3C020  	MOV.B	#2, W0
0x49A0	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,547 :: 		end
0x49A2	0x37008A  	BRA	L__Eth_Udp_ReplyHandler120
;protocol_udp.mpas,548 :: 		else
L__Eth_Udp_ReplyHandler119:
;protocol_udp.mpas,549 :: 		if (DHCP_State = 2) and (Align = BOOT_REPLY) then
; Align start address is: 4 (W2)
0x49A4	0x2105F0  	MOV	#lo_addr(_DHCP_State), W0
0x49A6	0x784010  	MOV.B	[W0], W0
0x49A8	0xE10462  	CP.B	W0, #2
0x49AA	0xEF2002  	CLR	W1
0x49AC	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler332
0x49AE	0xEEA002  	COM	W1
L__Eth_Udp_ReplyHandler332:
0x49B0	0xE11462  	CP.B	W2, #2
0x49B2	0xEF2000  	CLR	W0
0x49B4	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler333
0x49B6	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler333:
; Align end address is: 4 (W2)
0x49B8	0x608000  	AND	W1, W0, W0
0x49BA	0x32007E  	BRA Z	L__Eth_Udp_ReplyHandler151
L__Eth_Udp_ReplyHandler334:
;protocol_udp.mpas,551 :: 		CopyEthMemToRam(AddrPacket + (42 + 16),@tmp_ip_addr,4);
0x49BC	0x2003A1  	MOV	#58, W1
0x49BE	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x49C0	0x408010  	ADD	W1, [W0], W0
0x49C2	0x20004C  	MOV	#4, W12
0x49C4	0x210AAB  	MOV	#lo_addr(_tmp_ip_addr), W11
0x49C6	0x780500  	MOV	W0, W10
0x49C8	0x07E898  	RCALL	_CopyEthMemToRam
;protocol_udp.mpas,552 :: 		Align := ReadFromEthMem(AddrPacket + (41 + 240));
0x49CA	0x808081  	MOV	_AddrPacket, W1
0x49CC	0x201190  	MOV	#281, W0
0x49CE	0x408000  	ADD	W1, W0, W0
0x49D0	0x780500  	MOV	W0, W10
0x49D2	0x07FA9C  	RCALL	_ReadFromEthMem
;protocol_udp.mpas,553 :: 		end_loop := 0;
; end_loop start address is: 8 (W4)
0x49D4	0xEF2008  	CLR	W4
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,554 :: 		while end_loop = 0 do
L__Eth_Udp_ReplyHandler154:
; end_loop start address is: 8 (W4)
0x49D6	0xE12460  	CP.B	W4, #0
0x49D8	0x3A006C  	BRA NZ	L__Eth_Udp_ReplyHandler155
L__Eth_Udp_ReplyHandler335:
;protocol_udp.mpas,556 :: 		Align := Eth_GetByte;
0x49DA	0x07E916  	RCALL	_Eth_GetByte
; Align start address is: 4 (W2)
0x49DC	0x784100  	MOV.B	W0, W2
;protocol_udp.mpas,560 :: 		DHCP_MESSAGE_TYPE :
0x49DE	0xB3C351  	MOV.B	#53, W1
0x49E0	0xE10401  	CP.B	W0, W1
0x49E2	0x3A000A  	BRA NZ	L__Eth_Udp_ReplyHandler161
L__Eth_Udp_ReplyHandler336:
; Align end address is: 4 (W2)
;protocol_udp.mpas,562 :: 		Align := Eth_GetByte;                    // Skip len
0x49E4	0x07E911  	RCALL	_Eth_GetByte
;protocol_udp.mpas,564 :: 		if Align = 1 then
0x49E6	0xE10461  	CP.B	W0, #1
0x49E8	0x3A0005  	BRA NZ	L__Eth_Udp_ReplyHandler163
L__Eth_Udp_ReplyHandler337:
;protocol_udp.mpas,566 :: 		Align := Eth_GetByte;        // Get type
0x49EA	0x07E90E  	RCALL	_Eth_GetByte
;protocol_udp.mpas,567 :: 		if Align <> DHCP_ACK then Exit;
0x49EC	0xE10465  	CP.B	W0, #5
0x49EE	0x320001  	BRA Z	L__Eth_Udp_ReplyHandler166
L__Eth_Udp_ReplyHandler338:
; end_loop end address is: 8 (W4)
0x49F0	0x37018F  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler166:
;protocol_udp.mpas,568 :: 		end
; end_loop start address is: 8 (W4)
0x49F2	0x370001  	BRA	L__Eth_Udp_ReplyHandler164
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,569 :: 		else Exit;
L__Eth_Udp_ReplyHandler163:
0x49F4	0x37018D  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler164:
;protocol_udp.mpas,570 :: 		end;
; end_loop start address is: 8 (W4)
0x49F6	0x37005C  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler161:
;protocol_udp.mpas,572 :: 		DHCP_SUBNET_MASK :
; Align start address is: 4 (W2)
0x49F8	0xE11461  	CP.B	W2, #1
0x49FA	0x3A0009  	BRA NZ	L__Eth_Udp_ReplyHandler170
L__Eth_Udp_ReplyHandler339:
; Align end address is: 4 (W2)
;protocol_udp.mpas,574 :: 		Align := Eth_GetByte;                     // Skip len
0x49FC	0x07E905  	RCALL	_Eth_GetByte
;protocol_udp.mpas,576 :: 		if Align = 4 then CopyEthMem_CPToRam(@tmp_mask_addr, 4)
0x49FE	0xE10464  	CP.B	W0, #4
0x4A00	0x3A0004  	BRA NZ	L__Eth_Udp_ReplyHandler172
L__Eth_Udp_ReplyHandler340:
0x4A02	0x20004B  	MOV	#4, W11
0x4A04	0x210C0A  	MOV	#lo_addr(_tmp_mask_addr), W10
0x4A06	0x07E618  	RCALL	_CopyEthMem_CPToRam
0x4A08	0x370001  	BRA	L__Eth_Udp_ReplyHandler173
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,577 :: 		else Exit;
L__Eth_Udp_ReplyHandler172:
0x4A0A	0x370182  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler173:
;protocol_udp.mpas,578 :: 		end;
; end_loop start address is: 8 (W4)
0x4A0C	0x370051  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler170:
;protocol_udp.mpas,580 :: 		DHCP_GATEWAY :
; Align start address is: 4 (W2)
0x4A0E	0xE11463  	CP.B	W2, #3
0x4A10	0x3A0013  	BRA NZ	L__Eth_Udp_ReplyHandler176
L__Eth_Udp_ReplyHandler341:
; Align end address is: 4 (W2)
;protocol_udp.mpas,582 :: 		Align := Eth_GetByte;
0x4A12	0x07E8FA  	RCALL	_Eth_GetByte
; Align start address is: 10 (W5)
0x4A14	0x784280  	MOV.B	W0, W5
;protocol_udp.mpas,584 :: 		if Align >= 4 then CopyEthMem_CPToRam(@tmp_gat_addr, 4)
0x4A16	0xE10464  	CP.B	W0, #4
0x4A18	0x390004  	BRA LTU	L__Eth_Udp_ReplyHandler178
L__Eth_Udp_ReplyHandler342:
0x4A1A	0x20004B  	MOV	#4, W11
0x4A1C	0x210BCA  	MOV	#lo_addr(_tmp_gat_addr), W10
0x4A1E	0x07E60C  	RCALL	_CopyEthMem_CPToRam
0x4A20	0x370001  	BRA	L__Eth_Udp_ReplyHandler179
; Align end address is: 10 (W5)
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,585 :: 		else Exit;
L__Eth_Udp_ReplyHandler178:
0x4A22	0x370176  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler179:
;protocol_udp.mpas,590 :: 		Align := Align - 4;
; end_loop start address is: 8 (W4)
; Align start address is: 4 (W2)
; Align start address is: 10 (W5)
0x4A24	0x52C164  	SUB.B	W5, #4, W2
; Align end address is: 10 (W5)
; Align end address is: 4 (W2)
; end_loop end address is: 8 (W4)
0x4A26	0x784184  	MOV.B	W4, W3
;protocol_udp.mpas,591 :: 		while Align <> 0 do
L__Eth_Udp_ReplyHandler181:
; Align start address is: 4 (W2)
; end_loop start address is: 6 (W3)
0x4A28	0xE11460  	CP.B	W2, #0
0x4A2A	0x320004  	BRA Z	L__Eth_Udp_ReplyHandler182
L__Eth_Udp_ReplyHandler343:
;protocol_udp.mpas,593 :: 		Eth_getByte;
0x4A2C	0x07E8ED  	RCALL	_Eth_GetByte
;protocol_udp.mpas,594 :: 		dec(Align);
; Align start address is: 0 (W0)
0x4A2E	0x514061  	SUB.B	W2, #1, W0
; Align end address is: 4 (W2)
;protocol_udp.mpas,595 :: 		end;
; Align end address is: 0 (W0)
0x4A30	0x784100  	MOV.B	W0, W2
0x4A32	0x37FFFA  	BRA	L__Eth_Udp_ReplyHandler181
L__Eth_Udp_ReplyHandler182:
;protocol_udp.mpas,596 :: 		end;
0x4A34	0x784203  	MOV.B	W3, W4
; end_loop end address is: 6 (W3)
0x4A36	0x37003C  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler176:
;protocol_udp.mpas,598 :: 		DHCP_DNS :
; end_loop start address is: 8 (W4)
; Align start address is: 4 (W2)
0x4A38	0xE11466  	CP.B	W2, #6
0x4A3A	0x3A0013  	BRA NZ	L__Eth_Udp_ReplyHandler187
L__Eth_Udp_ReplyHandler344:
; Align end address is: 4 (W2)
;protocol_udp.mpas,600 :: 		Align := Eth_GetByte;
0x4A3C	0x07E8E5  	RCALL	_Eth_GetByte
; Align start address is: 10 (W5)
0x4A3E	0x784280  	MOV.B	W0, W5
;protocol_udp.mpas,602 :: 		if Align >= 4 then CopyEthMem_CPToRam(@tmp_dns_addr, 4)
0x4A40	0xE10464  	CP.B	W0, #4
0x4A42	0x390004  	BRA LTU	L__Eth_Udp_ReplyHandler189
L__Eth_Udp_ReplyHandler345:
0x4A44	0x20004B  	MOV	#4, W11
0x4A46	0x210B8A  	MOV	#lo_addr(_tmp_dns_addr), W10
0x4A48	0x07E5F7  	RCALL	_CopyEthMem_CPToRam
0x4A4A	0x370001  	BRA	L__Eth_Udp_ReplyHandler190
; Align end address is: 10 (W5)
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,603 :: 		else Exit;
L__Eth_Udp_ReplyHandler189:
0x4A4C	0x370161  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler190:
;protocol_udp.mpas,608 :: 		Align := Align - 4;
; end_loop start address is: 8 (W4)
; Align start address is: 4 (W2)
; Align start address is: 10 (W5)
0x4A4E	0x52C164  	SUB.B	W5, #4, W2
; Align end address is: 10 (W5)
; Align end address is: 4 (W2)
; end_loop end address is: 8 (W4)
0x4A50	0x784184  	MOV.B	W4, W3
;protocol_udp.mpas,609 :: 		while Align <> 0 do
L__Eth_Udp_ReplyHandler192:
; Align start address is: 4 (W2)
; end_loop start address is: 6 (W3)
0x4A52	0xE11460  	CP.B	W2, #0
0x4A54	0x320004  	BRA Z	L__Eth_Udp_ReplyHandler193
L__Eth_Udp_ReplyHandler346:
;protocol_udp.mpas,611 :: 		Eth_getByte;
0x4A56	0x07E8D8  	RCALL	_Eth_GetByte
;protocol_udp.mpas,612 :: 		dec(Align);
; Align start address is: 0 (W0)
0x4A58	0x514061  	SUB.B	W2, #1, W0
; Align end address is: 4 (W2)
;protocol_udp.mpas,613 :: 		end;
; Align end address is: 0 (W0)
0x4A5A	0x784100  	MOV.B	W0, W2
0x4A5C	0x37FFFA  	BRA	L__Eth_Udp_ReplyHandler192
L__Eth_Udp_ReplyHandler193:
;protocol_udp.mpas,614 :: 		end;
0x4A5E	0x784203  	MOV.B	W3, W4
; end_loop end address is: 6 (W3)
0x4A60	0x370027  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler187:
;protocol_udp.mpas,616 :: 		DHCP_IP_LEASE_TIME :
; end_loop start address is: 8 (W4)
; Align start address is: 4 (W2)
0x4A62	0xB3C330  	MOV.B	#51, W0
0x4A64	0xE11400  	CP.B	W2, W0
0x4A66	0x3A0013  	BRA NZ	L__Eth_Udp_ReplyHandler198
L__Eth_Udp_ReplyHandler347:
; Align end address is: 4 (W2)
;protocol_udp.mpas,618 :: 		Align := Eth_GetByte;
0x4A68	0x07E8CF  	RCALL	_Eth_GetByte
;protocol_udp.mpas,620 :: 		if Align = 4 then
0x4A6A	0xE10464  	CP.B	W0, #4
0x4A6C	0x3A000E  	BRA NZ	L__Eth_Udp_ReplyHandler200
L__Eth_Udp_ReplyHandler348:
;protocol_udp.mpas,622 :: 		CopyEthMem_CPToRam_Inv(@DHCP_Lease_Time,4);
0x4A6E	0x20004B  	MOV	#4, W11
0x4A70	0x21C98A  	MOV	#lo_addr(_DHCP_Lease_Time), W10
0x4A72	0x07E5F9  	RCALL	_CopyEthMem_CPToRam_Inv
;protocol_udp.mpas,623 :: 		if DHCP_Lease_Time > (3600*6) then DHCP_Lease_Time := (3600*6); // 6 ore
0x4A74	0x254601  	MOV	#21600, W1
0x4A76	0x200002  	MOV	#0, W2
0x4A78	0x21C980  	MOV	#lo_addr(_DHCP_Lease_Time), W0
0x4A7A	0xE10830  	CP	W1, [W0++]
0x4A7C	0xE19020  	CPB	W2, [W0--]
0x4A7E	0x310004  	BRA GEU	L__Eth_Udp_ReplyHandler203
L__Eth_Udp_ReplyHandler349:
0x4A80	0x254600  	MOV	#21600, W0
0x4A82	0x200001  	MOV	#0, W1
0x4A84	0x88E4C0  	MOV	W0, _DHCP_Lease_Time
0x4A86	0x88E4D1  	MOV	W1, _DHCP_Lease_Time+2
L__Eth_Udp_ReplyHandler203:
;protocol_udp.mpas,624 :: 		end
0x4A88	0x370001  	BRA	L__Eth_Udp_ReplyHandler201
; end_loop end address is: 8 (W4)
;protocol_udp.mpas,625 :: 		else Exit;
L__Eth_Udp_ReplyHandler200:
0x4A8A	0x370142  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler201:
;protocol_udp.mpas,626 :: 		end;
; end_loop start address is: 8 (W4)
0x4A8C	0x370011  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler198:
;protocol_udp.mpas,628 :: 		DHCP_END_OPTION : end_loop := 1
; Align start address is: 4 (W2)
0x4A8E	0xB3CFF0  	MOV.B	#255, W0
0x4A90	0xE11400  	CP.B	W2, W0
0x4A92	0x3A0003  	BRA NZ	L__Eth_Udp_ReplyHandler207
L__Eth_Udp_ReplyHandler350:
; Align end address is: 4 (W2)
; end_loop end address is: 8 (W4)
; end_loop start address is: 0 (W0)
0x4A94	0xB3C010  	MOV.B	#1, W0
;protocol_udp.mpas,630 :: 		else
0x4A96	0x784200  	MOV.B	W0, W4
; end_loop end address is: 0 (W0)
0x4A98	0x37000B  	BRA	L__Eth_Udp_ReplyHandler158
L__Eth_Udp_ReplyHandler207:
;protocol_udp.mpas,633 :: 		Align := Eth_GetByte;     // Get option len
; end_loop start address is: 8 (W4)
0x4A9A	0x07E8B6  	RCALL	_Eth_GetByte
; Align start address is: 2 (W1)
0x4A9C	0x784080  	MOV.B	W0, W1
; Align end address is: 2 (W1)
; end_loop end address is: 8 (W4)
0x4A9E	0x784184  	MOV.B	W4, W3
0x4AA0	0x784101  	MOV.B	W1, W2
;protocol_udp.mpas,634 :: 		while Align <> 0 do       // Ignore option values
L__Eth_Udp_ReplyHandler209:
; Align start address is: 4 (W2)
; end_loop start address is: 6 (W3)
0x4AA2	0xE11460  	CP.B	W2, #0
0x4AA4	0x320004  	BRA Z	L__Eth_Udp_ReplyHandler210
L__Eth_Udp_ReplyHandler351:
;protocol_udp.mpas,636 :: 		Eth_GetByte;
0x4AA6	0x07E8B0  	RCALL	_Eth_GetByte
;protocol_udp.mpas,637 :: 		dec(Align);
; Align start address is: 0 (W0)
0x4AA8	0x514061  	SUB.B	W2, #1, W0
; Align end address is: 4 (W2)
;protocol_udp.mpas,638 :: 		end;
; Align end address is: 0 (W0)
0x4AAA	0x784100  	MOV.B	W0, W2
0x4AAC	0x37FFFA  	BRA	L__Eth_Udp_ReplyHandler209
L__Eth_Udp_ReplyHandler210:
;protocol_udp.mpas,639 :: 		end;
0x4AAE	0x784203  	MOV.B	W3, W4
L__Eth_Udp_ReplyHandler158:
; end_loop end address is: 6 (W3)
;protocol_udp.mpas,641 :: 		end;
; end_loop start address is: 8 (W4)
; end_loop end address is: 8 (W4)
0x4AB0	0x37FF92  	BRA	L__Eth_Udp_ReplyHandler154
L__Eth_Udp_ReplyHandler155:
;protocol_udp.mpas,642 :: 		DHCP_State := 3;
0x4AB2	0x2105F1  	MOV	#lo_addr(_DHCP_State), W1
0x4AB4	0xB3C030  	MOV.B	#3, W0
0x4AB6	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,643 :: 		end;
L__Eth_Udp_ReplyHandler151:
L__Eth_Udp_ReplyHandler120:
;protocol_udp.mpas,644 :: 		Exit;
0x4AB8	0x37012B  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,645 :: 		end;
L__Eth_Udp_ReplyHandler116:
;protocol_udp.mpas,648 :: 		if (Slot.SourcePort = 53) and (Slot.DestPort = 23456) then
0x4ABA	0x200351  	MOV	#53, W1
0x4ABC	0x47007E  	ADD	W14, #30, W0
0x4ABE	0xE10810  	CP	W1, [W0]
0x4AC0	0xEF2004  	CLR	W2
0x4AC2	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler352
0x4AC4	0xEEA004  	COM	W2
L__Eth_Udp_ReplyHandler352:
0x4AC6	0x90089E  	MOV	[W14+18], W1
0x4AC8	0x25BA00  	MOV	#23456, W0
0x4ACA	0xE10800  	CP	W1, W0
0x4ACC	0xEF2000  	CLR	W0
0x4ACE	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler353
0x4AD0	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler353:
0x4AD2	0x610000  	AND	W2, W0, W0
0x4AD4	0x32011D  	BRA Z	L__Eth_Udp_ReplyHandler214
L__Eth_Udp_ReplyHandler354:
;protocol_udp.mpas,650 :: 		Hi(DNSHeader.TransactionID) := ReadFromEthMem(AddrPacket + 42);
0x4AD6	0x2002A1  	MOV	#42, W1
0x4AD8	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x4ADA	0x408010  	ADD	W1, [W0], W0
0x4ADC	0x780500  	MOV	W0, W10
0x4ADE	0x07FA16  	RCALL	_ReadFromEthMem
0x4AE0	0x2109F1  	MOV	#lo_addr(_DNSHeader+1), W1
0x4AE2	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,651 :: 		Lo(DNSHeader.TransactionID) := Eth_GetByte;
0x4AE4	0x07E891  	RCALL	_Eth_GetByte
0x4AE6	0x2109E1  	MOV	#lo_addr(_DNSHeader), W1
0x4AE8	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,654 :: 		If DNSHeader.TransactionID <> DNS_TR_ID Then Exit;
0x4AEA	0x8084F1  	MOV	_DNSHeader, W1
0x4AEC	0x2109C0  	MOV	#lo_addr(_DNS_TR_ID), W0
0x4AEE	0xE10810  	CP	W1, [W0]
0x4AF0	0x320001  	BRA Z	L__Eth_Udp_ReplyHandler217
L__Eth_Udp_ReplyHandler355:
0x4AF2	0x37010E  	BRA	L_end__Eth_Udp_ReplyHandler
L__Eth_Udp_ReplyHandler217:
;protocol_udp.mpas,656 :: 		Hi(DNSHeader.Flags) := Eth_GetByte;
0x4AF4	0x07E889  	RCALL	_Eth_GetByte
0x4AF6	0x210A11  	MOV	#lo_addr(_DNSHeader+3), W1
0x4AF8	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,657 :: 		Lo(DNSHeader.Flags) := Eth_GetByte;
0x4AFA	0x07E886  	RCALL	_Eth_GetByte
0x4AFC	0x210A01  	MOV	#lo_addr(_DNSHeader+2), W1
0x4AFE	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,658 :: 		Hi(DNSHeader.Questions) := Eth_GetByte;
0x4B00	0x07E883  	RCALL	_Eth_GetByte
0x4B02	0x210A31  	MOV	#lo_addr(_DNSHeader+5), W1
0x4B04	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,659 :: 		Lo(DNSHeader.Questions) := Eth_GetByte;
0x4B06	0x07E880  	RCALL	_Eth_GetByte
0x4B08	0x210A21  	MOV	#lo_addr(_DNSHeader+4), W1
0x4B0A	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,660 :: 		Hi(DNSHeader.Answers) := Eth_GetByte;
0x4B0C	0x07E87D  	RCALL	_Eth_GetByte
0x4B0E	0x210A51  	MOV	#lo_addr(_DNSHeader+7), W1
0x4B10	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,661 :: 		Lo(DNSHeader.Answers) := Eth_GetByte;
0x4B12	0x07E87A  	RCALL	_Eth_GetByte
0x4B14	0x210A41  	MOV	#lo_addr(_DNSHeader+6), W1
0x4B16	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,662 :: 		Hi(DNSHeader.AuthoritativeRecords) := Eth_GetByte;
0x4B18	0x07E877  	RCALL	_Eth_GetByte
0x4B1A	0x210A71  	MOV	#lo_addr(_DNSHeader+9), W1
0x4B1C	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,663 :: 		Lo(DNSHeader.AuthoritativeRecords) := Eth_GetByte;
0x4B1E	0x07E874  	RCALL	_Eth_GetByte
0x4B20	0x210A61  	MOV	#lo_addr(_DNSHeader+8), W1
0x4B22	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,664 :: 		Hi(DNSHeader.AdditionalRecords) := Eth_GetByte;
0x4B24	0x07E871  	RCALL	_Eth_GetByte
0x4B26	0x210A91  	MOV	#lo_addr(_DNSHeader+11), W1
0x4B28	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,665 :: 		Lo(DNSHeader.AdditionalRecords) := Eth_GetByte;
0x4B2A	0x07E86E  	RCALL	_Eth_GetByte
0x4B2C	0x210A81  	MOV	#lo_addr(_DNSHeader+10), W1
0x4B2E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,668 :: 		While DNSHeader.Questions <> 0 do
L__Eth_Udp_ReplyHandler220:
0x4B30	0x808510  	MOV	_DNSHeader+4, W0
0x4B32	0xE10060  	CP	W0, #0
0x4B34	0x32000B  	BRA Z	L__Eth_Udp_ReplyHandler221
L__Eth_Udp_ReplyHandler356:
;protocol_udp.mpas,670 :: 		while Eth_GetByte <> 0 do ;
L__Eth_Udp_ReplyHandler225:
0x4B36	0x07E868  	RCALL	_Eth_GetByte
0x4B38	0xE10460  	CP.B	W0, #0
0x4B3A	0x3AFFFD  	BRA NZ	L__Eth_Udp_ReplyHandler225
L__Eth_Udp_ReplyHandler357:
;protocol_udp.mpas,671 :: 		Eth_GetByte;
0x4B3C	0x07E865  	RCALL	_Eth_GetByte
;protocol_udp.mpas,672 :: 		Eth_GetByte;
0x4B3E	0x07E864  	RCALL	_Eth_GetByte
;protocol_udp.mpas,673 :: 		Eth_GetByte;// Question class
0x4B40	0x07E863  	RCALL	_Eth_GetByte
;protocol_udp.mpas,674 :: 		Eth_GetByte;
0x4B42	0x07E862  	RCALL	_Eth_GetByte
;protocol_udp.mpas,675 :: 		dec(DNSHeader.Questions);
0x4B44	0x808510  	MOV	_DNSHeader+4, W0
0x4B46	0xED2000  	DEC	W0
0x4B48	0x888510  	MOV	W0, _DNSHeader+4
;protocol_udp.mpas,676 :: 		end;
0x4B4A	0x37FFF2  	BRA	L__Eth_Udp_ReplyHandler220
L__Eth_Udp_ReplyHandler221:
;protocol_udp.mpas,679 :: 		While DNSHeader.Answers <> 0 do
L__Eth_Udp_ReplyHandler230:
0x4B4C	0x808520  	MOV	_DNSHeader+6, W0
0x4B4E	0xE10060  	CP	W0, #0
0x4B50	0x320048  	BRA Z	L__Eth_Udp_ReplyHandler231
L__Eth_Udp_ReplyHandler358:
;protocol_udp.mpas,681 :: 		Hi(DNSAnswerHeader.ResponseName):= Eth_GetByte;                // Response name
0x4B52	0x07E85A  	RCALL	_Eth_GetByte
0x4B54	0x210911  	MOV	#lo_addr(_DNSAnswerHeader+1), W1
0x4B56	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,682 :: 		Lo(DNSAnswerHeader.ResponseName):= Eth_GetByte;
0x4B58	0x07E857  	RCALL	_Eth_GetByte
0x4B5A	0x210901  	MOV	#lo_addr(_DNSAnswerHeader), W1
0x4B5C	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,683 :: 		Hi(DNSAnswerHeader.ResponseType):= Eth_GetByte;                // Response type
0x4B5E	0x07E854  	RCALL	_Eth_GetByte
0x4B60	0x210931  	MOV	#lo_addr(_DNSAnswerHeader+3), W1
0x4B62	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,684 :: 		Lo(DNSAnswerHeader.ResponseType):= Eth_GetByte;
0x4B64	0x07E851  	RCALL	_Eth_GetByte
0x4B66	0x210921  	MOV	#lo_addr(_DNSAnswerHeader+2), W1
0x4B68	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,685 :: 		Hi(DNSAnswerHeader.ResponseClass):= Eth_GetByte;        // Response class
0x4B6A	0x07E84E  	RCALL	_Eth_GetByte
0x4B6C	0x210951  	MOV	#lo_addr(_DNSAnswerHeader+5), W1
0x4B6E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,686 :: 		Lo(DNSAnswerHeader.ResponseClass):= Eth_GetByte;
0x4B70	0x07E84B  	RCALL	_Eth_GetByte
0x4B72	0x210941  	MOV	#lo_addr(_DNSAnswerHeader+4), W1
0x4B74	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,687 :: 		Highest(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;                // Time to live
0x4B76	0x07E848  	RCALL	_Eth_GetByte
0x4B78	0x210991  	MOV	#lo_addr(_DNSAnswerHeader+9), W1
0x4B7A	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,688 :: 		Higher(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4B7C	0x07E845  	RCALL	_Eth_GetByte
0x4B7E	0x210981  	MOV	#lo_addr(_DNSAnswerHeader+8), W1
0x4B80	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,689 :: 		Hi(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4B82	0x07E842  	RCALL	_Eth_GetByte
0x4B84	0x210971  	MOV	#lo_addr(_DNSAnswerHeader+7), W1
0x4B86	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,690 :: 		Lo(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4B88	0x07E83F  	RCALL	_Eth_GetByte
0x4B8A	0x210961  	MOV	#lo_addr(_DNSAnswerHeader+6), W1
0x4B8C	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,691 :: 		Hi(DNSAnswerHeader.ResponseLen):= Eth_GetByte;                // Response length
0x4B8E	0x07E83C  	RCALL	_Eth_GetByte
0x4B90	0x2109B1  	MOV	#lo_addr(_DNSAnswerHeader+11), W1
0x4B92	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,692 :: 		Lo(DNSAnswerHeader.ResponseLen):= Eth_GetByte;
0x4B94	0x07E839  	RCALL	_Eth_GetByte
0x4B96	0x2109A1  	MOV	#lo_addr(_DNSAnswerHeader+10), W1
0x4B98	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,696 :: 		If (DNSAnswerHeader.ResponseType = $0001) And
0x4B9A	0x808490  	MOV	_DNSAnswerHeader+2, W0
0x4B9C	0xE10061  	CP	W0, #1
0x4B9E	0xEF2002  	CLR	W1
0x4BA0	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler359
0x4BA2	0xEEA002  	COM	W1
L__Eth_Udp_ReplyHandler359:
;protocol_udp.mpas,697 :: 		(DNSAnswerHeader.ResponseClass = $0001) And
0x4BA4	0x8084A0  	MOV	_DNSAnswerHeader+4, W0
0x4BA6	0xE10061  	CP	W0, #1
0x4BA8	0xEF2000  	CLR	W0
0x4BAA	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler360
0x4BAC	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler360:
0x4BAE	0x608080  	AND	W1, W0, W1
;protocol_udp.mpas,698 :: 		(DNSAnswerHeader.ResponseLen = $0004) Then
0x4BB0	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4BB2	0xE10064  	CP	W0, #4
0x4BB4	0xEF2000  	CLR	W0
0x4BB6	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler361
0x4BB8	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler361:
0x4BBA	0x608000  	AND	W1, W0, W0
0x4BBC	0x320006  	BRA Z	L__Eth_Udp_ReplyHandler235
L__Eth_Udp_ReplyHandler362:
;protocol_udp.mpas,700 :: 		CopyEthMem_CPToRam(@resp_ip_addr, 4);
0x4BBE	0x20004B  	MOV	#4, W11
0x4BC0	0x2108CA  	MOV	#lo_addr(_resp_ip_addr), W10
0x4BC2	0x07E53A  	RCALL	_CopyEthMem_CPToRam
;protocol_udp.mpas,701 :: 		DNS_resp := True;
0x4BC4	0x2FFFF0  	MOV	#65535, W0
0x4BC6	0x8882E0  	MOV	W0, _DNS_resp
;protocol_udp.mpas,702 :: 		Exit;
0x4BC8	0x3700A3  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,704 :: 		Else
L__Eth_Udp_ReplyHandler235:
;protocol_udp.mpas,706 :: 		While DNSAnswerHeader.ResponseLen <> 0 do
L__Eth_Udp_ReplyHandler238:
0x4BCA	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4BCC	0xE10060  	CP	W0, #0
0x4BCE	0x320005  	BRA Z	L__Eth_Udp_ReplyHandler239
L__Eth_Udp_ReplyHandler363:
;protocol_udp.mpas,708 :: 		Eth_GetByte;
0x4BD0	0x07E81B  	RCALL	_Eth_GetByte
;protocol_udp.mpas,709 :: 		dec(DNSAnswerHeader.ResponseLen);
0x4BD2	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4BD4	0xED2000  	DEC	W0
0x4BD6	0x8884D0  	MOV	W0, _DNSAnswerHeader+10
;protocol_udp.mpas,710 :: 		end;
0x4BD8	0x37FFF8  	BRA	L__Eth_Udp_ReplyHandler238
L__Eth_Udp_ReplyHandler239:
;protocol_udp.mpas,712 :: 		dec(DNSHeader.Answers);
0x4BDA	0x808520  	MOV	_DNSHeader+6, W0
0x4BDC	0xED2000  	DEC	W0
0x4BDE	0x888520  	MOV	W0, _DNSHeader+6
;protocol_udp.mpas,713 :: 		end;
0x4BE0	0x37FFB5  	BRA	L__Eth_Udp_ReplyHandler230
L__Eth_Udp_ReplyHandler231:
;protocol_udp.mpas,716 :: 		While DNSHeader.AuthoritativeRecords <> 0 do
L__Eth_Udp_ReplyHandler243:
0x4BE2	0x808530  	MOV	_DNSHeader+8, W0
0x4BE4	0xE10060  	CP	W0, #0
0x4BE6	0x320048  	BRA Z	L__Eth_Udp_ReplyHandler244
L__Eth_Udp_ReplyHandler364:
;protocol_udp.mpas,718 :: 		Hi(DNSAnswerHeader.ResponseName):= Eth_GetByte;                // Response name
0x4BE8	0x07E80F  	RCALL	_Eth_GetByte
0x4BEA	0x210911  	MOV	#lo_addr(_DNSAnswerHeader+1), W1
0x4BEC	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,719 :: 		Lo(DNSAnswerHeader.ResponseName):= Eth_GetByte;
0x4BEE	0x07E80C  	RCALL	_Eth_GetByte
0x4BF0	0x210901  	MOV	#lo_addr(_DNSAnswerHeader), W1
0x4BF2	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,720 :: 		Hi(DNSAnswerHeader.ResponseType):= Eth_GetByte;                // Response type
0x4BF4	0x07E809  	RCALL	_Eth_GetByte
0x4BF6	0x210931  	MOV	#lo_addr(_DNSAnswerHeader+3), W1
0x4BF8	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,721 :: 		Lo(DNSAnswerHeader.ResponseType):= Eth_GetByte;
0x4BFA	0x07E806  	RCALL	_Eth_GetByte
0x4BFC	0x210921  	MOV	#lo_addr(_DNSAnswerHeader+2), W1
0x4BFE	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,722 :: 		Hi(DNSAnswerHeader.ResponseClass):= Eth_GetByte;        // Response class
0x4C00	0x07E803  	RCALL	_Eth_GetByte
0x4C02	0x210951  	MOV	#lo_addr(_DNSAnswerHeader+5), W1
0x4C04	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,723 :: 		Lo(DNSAnswerHeader.ResponseClass):= Eth_GetByte;
0x4C06	0x07E800  	RCALL	_Eth_GetByte
0x4C08	0x210941  	MOV	#lo_addr(_DNSAnswerHeader+4), W1
0x4C0A	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,724 :: 		Highest(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;                // Time to live
0x4C0C	0x07E7FD  	RCALL	_Eth_GetByte
0x4C0E	0x210991  	MOV	#lo_addr(_DNSAnswerHeader+9), W1
0x4C10	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,725 :: 		Higher(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4C12	0x07E7FA  	RCALL	_Eth_GetByte
0x4C14	0x210981  	MOV	#lo_addr(_DNSAnswerHeader+8), W1
0x4C16	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,726 :: 		Hi(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4C18	0x07E7F7  	RCALL	_Eth_GetByte
0x4C1A	0x210971  	MOV	#lo_addr(_DNSAnswerHeader+7), W1
0x4C1C	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,727 :: 		Lo(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4C1E	0x07E7F4  	RCALL	_Eth_GetByte
0x4C20	0x210961  	MOV	#lo_addr(_DNSAnswerHeader+6), W1
0x4C22	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,728 :: 		Hi(DNSAnswerHeader.ResponseLen):= Eth_GetByte;                // Response length
0x4C24	0x07E7F1  	RCALL	_Eth_GetByte
0x4C26	0x2109B1  	MOV	#lo_addr(_DNSAnswerHeader+11), W1
0x4C28	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,729 :: 		Lo(DNSAnswerHeader.ResponseLen):= Eth_GetByte;
0x4C2A	0x07E7EE  	RCALL	_Eth_GetByte
0x4C2C	0x2109A1  	MOV	#lo_addr(_DNSAnswerHeader+10), W1
0x4C2E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,733 :: 		If (DNSAnswerHeader.ResponseType = $0001) And
0x4C30	0x808490  	MOV	_DNSAnswerHeader+2, W0
0x4C32	0xE10061  	CP	W0, #1
0x4C34	0xEF2002  	CLR	W1
0x4C36	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler365
0x4C38	0xEEA002  	COM	W1
L__Eth_Udp_ReplyHandler365:
;protocol_udp.mpas,734 :: 		(DNSAnswerHeader.ResponseClass = $0001) And
0x4C3A	0x8084A0  	MOV	_DNSAnswerHeader+4, W0
0x4C3C	0xE10061  	CP	W0, #1
0x4C3E	0xEF2000  	CLR	W0
0x4C40	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler366
0x4C42	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler366:
0x4C44	0x608080  	AND	W1, W0, W1
;protocol_udp.mpas,735 :: 		(DNSAnswerHeader.ResponseLen = $0004) Then
0x4C46	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4C48	0xE10064  	CP	W0, #4
0x4C4A	0xEF2000  	CLR	W0
0x4C4C	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler367
0x4C4E	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler367:
0x4C50	0x608000  	AND	W1, W0, W0
0x4C52	0x320006  	BRA Z	L__Eth_Udp_ReplyHandler248
L__Eth_Udp_ReplyHandler368:
;protocol_udp.mpas,737 :: 		CopyEthMem_CPToRam(@resp_ip_addr, 4);
0x4C54	0x20004B  	MOV	#4, W11
0x4C56	0x2108CA  	MOV	#lo_addr(_resp_ip_addr), W10
0x4C58	0x07E4EF  	RCALL	_CopyEthMem_CPToRam
;protocol_udp.mpas,738 :: 		DNS_resp := True;
0x4C5A	0x2FFFF0  	MOV	#65535, W0
0x4C5C	0x8882E0  	MOV	W0, _DNS_resp
;protocol_udp.mpas,739 :: 		Exit;
0x4C5E	0x370058  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,741 :: 		Else
L__Eth_Udp_ReplyHandler248:
;protocol_udp.mpas,743 :: 		While DNSAnswerHeader.ResponseLen <> 0 do
L__Eth_Udp_ReplyHandler251:
0x4C60	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4C62	0xE10060  	CP	W0, #0
0x4C64	0x320005  	BRA Z	L__Eth_Udp_ReplyHandler252
L__Eth_Udp_ReplyHandler369:
;protocol_udp.mpas,745 :: 		Eth_GetByte;
0x4C66	0x07E7D0  	RCALL	_Eth_GetByte
;protocol_udp.mpas,746 :: 		dec(DNSAnswerHeader.ResponseLen);
0x4C68	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4C6A	0xED2000  	DEC	W0
0x4C6C	0x8884D0  	MOV	W0, _DNSAnswerHeader+10
;protocol_udp.mpas,747 :: 		end;
0x4C6E	0x37FFF8  	BRA	L__Eth_Udp_ReplyHandler251
L__Eth_Udp_ReplyHandler252:
;protocol_udp.mpas,749 :: 		dec(DNSHeader.AuthoritativeRecords);
0x4C70	0x808530  	MOV	_DNSHeader+8, W0
0x4C72	0xED2000  	DEC	W0
0x4C74	0x888530  	MOV	W0, _DNSHeader+8
;protocol_udp.mpas,750 :: 		end;
0x4C76	0x37FFB5  	BRA	L__Eth_Udp_ReplyHandler243
L__Eth_Udp_ReplyHandler244:
;protocol_udp.mpas,753 :: 		While DNSHeader.AdditionalRecords <> 0 do
L__Eth_Udp_ReplyHandler256:
0x4C78	0x808540  	MOV	_DNSHeader+10, W0
0x4C7A	0xE10060  	CP	W0, #0
0x4C7C	0x320048  	BRA Z	L__Eth_Udp_ReplyHandler257
L__Eth_Udp_ReplyHandler370:
;protocol_udp.mpas,755 :: 		Hi(DNSAnswerHeader.ResponseName):= Eth_GetByte;                // Response name
0x4C7E	0x07E7C4  	RCALL	_Eth_GetByte
0x4C80	0x210911  	MOV	#lo_addr(_DNSAnswerHeader+1), W1
0x4C82	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,756 :: 		Lo(DNSAnswerHeader.ResponseName):= Eth_GetByte;
0x4C84	0x07E7C1  	RCALL	_Eth_GetByte
0x4C86	0x210901  	MOV	#lo_addr(_DNSAnswerHeader), W1
0x4C88	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,757 :: 		Hi(DNSAnswerHeader.ResponseType):= Eth_GetByte;                // Response type
0x4C8A	0x07E7BE  	RCALL	_Eth_GetByte
0x4C8C	0x210931  	MOV	#lo_addr(_DNSAnswerHeader+3), W1
0x4C8E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,758 :: 		Lo(DNSAnswerHeader.ResponseType):= Eth_GetByte;
0x4C90	0x07E7BB  	RCALL	_Eth_GetByte
0x4C92	0x210921  	MOV	#lo_addr(_DNSAnswerHeader+2), W1
0x4C94	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,759 :: 		Hi(DNSAnswerHeader.ResponseClass):= Eth_GetByte;        // Response class
0x4C96	0x07E7B8  	RCALL	_Eth_GetByte
0x4C98	0x210951  	MOV	#lo_addr(_DNSAnswerHeader+5), W1
0x4C9A	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,760 :: 		Lo(DNSAnswerHeader.ResponseClass):= Eth_GetByte;
0x4C9C	0x07E7B5  	RCALL	_Eth_GetByte
0x4C9E	0x210941  	MOV	#lo_addr(_DNSAnswerHeader+4), W1
0x4CA0	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,761 :: 		Highest(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;                // Time to live
0x4CA2	0x07E7B2  	RCALL	_Eth_GetByte
0x4CA4	0x210991  	MOV	#lo_addr(_DNSAnswerHeader+9), W1
0x4CA6	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,762 :: 		Higher(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4CA8	0x07E7AF  	RCALL	_Eth_GetByte
0x4CAA	0x210981  	MOV	#lo_addr(_DNSAnswerHeader+8), W1
0x4CAC	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,763 :: 		Hi(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4CAE	0x07E7AC  	RCALL	_Eth_GetByte
0x4CB0	0x210971  	MOV	#lo_addr(_DNSAnswerHeader+7), W1
0x4CB2	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,764 :: 		Lo(DNSAnswerHeader.ResponseTTL):= Eth_GetByte;
0x4CB4	0x07E7A9  	RCALL	_Eth_GetByte
0x4CB6	0x210961  	MOV	#lo_addr(_DNSAnswerHeader+6), W1
0x4CB8	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,765 :: 		Hi(DNSAnswerHeader.ResponseLen):= Eth_GetByte;                // Response length
0x4CBA	0x07E7A6  	RCALL	_Eth_GetByte
0x4CBC	0x2109B1  	MOV	#lo_addr(_DNSAnswerHeader+11), W1
0x4CBE	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,766 :: 		Lo(DNSAnswerHeader.ResponseLen):= Eth_GetByte;
0x4CC0	0x07E7A3  	RCALL	_Eth_GetByte
0x4CC2	0x2109A1  	MOV	#lo_addr(_DNSAnswerHeader+10), W1
0x4CC4	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,770 :: 		If (DNSAnswerHeader.ResponseType = $0001) And
0x4CC6	0x808490  	MOV	_DNSAnswerHeader+2, W0
0x4CC8	0xE10061  	CP	W0, #1
0x4CCA	0xEF2002  	CLR	W1
0x4CCC	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler371
0x4CCE	0xEEA002  	COM	W1
L__Eth_Udp_ReplyHandler371:
;protocol_udp.mpas,771 :: 		(DNSAnswerHeader.ResponseClass = $0001) And
0x4CD0	0x8084A0  	MOV	_DNSAnswerHeader+4, W0
0x4CD2	0xE10061  	CP	W0, #1
0x4CD4	0xEF2000  	CLR	W0
0x4CD6	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler372
0x4CD8	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler372:
0x4CDA	0x608080  	AND	W1, W0, W1
;protocol_udp.mpas,772 :: 		(DNSAnswerHeader.ResponseLen = $0004) Then
0x4CDC	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4CDE	0xE10064  	CP	W0, #4
0x4CE0	0xEF2000  	CLR	W0
0x4CE2	0x3A0001  	BRA NZ	L__Eth_Udp_ReplyHandler373
0x4CE4	0xEEA000  	COM	W0
L__Eth_Udp_ReplyHandler373:
0x4CE6	0x608000  	AND	W1, W0, W0
0x4CE8	0x320006  	BRA Z	L__Eth_Udp_ReplyHandler261
L__Eth_Udp_ReplyHandler374:
;protocol_udp.mpas,774 :: 		CopyEthMem_CPToRam(@resp_ip_addr, 4);
0x4CEA	0x20004B  	MOV	#4, W11
0x4CEC	0x2108CA  	MOV	#lo_addr(_resp_ip_addr), W10
0x4CEE	0x07E4A4  	RCALL	_CopyEthMem_CPToRam
;protocol_udp.mpas,775 :: 		DNS_resp := True;
0x4CF0	0x2FFFF0  	MOV	#65535, W0
0x4CF2	0x8882E0  	MOV	W0, _DNS_resp
;protocol_udp.mpas,776 :: 		Exit;
0x4CF4	0x37000D  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,778 :: 		Else
L__Eth_Udp_ReplyHandler261:
;protocol_udp.mpas,780 :: 		While DNSAnswerHeader.ResponseLen <> 0 do
L__Eth_Udp_ReplyHandler264:
0x4CF6	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4CF8	0xE10060  	CP	W0, #0
0x4CFA	0x320005  	BRA Z	L__Eth_Udp_ReplyHandler265
L__Eth_Udp_ReplyHandler375:
;protocol_udp.mpas,782 :: 		Eth_GetByte;
0x4CFC	0x07E785  	RCALL	_Eth_GetByte
;protocol_udp.mpas,783 :: 		dec(DNSAnswerHeader.ResponseLen);
0x4CFE	0x8084D0  	MOV	_DNSAnswerHeader+10, W0
0x4D00	0xED2000  	DEC	W0
0x4D02	0x8884D0  	MOV	W0, _DNSAnswerHeader+10
;protocol_udp.mpas,784 :: 		end;
0x4D04	0x37FFF8  	BRA	L__Eth_Udp_ReplyHandler264
L__Eth_Udp_ReplyHandler265:
;protocol_udp.mpas,786 :: 		dec(DNSHeader.AdditionalRecords);
0x4D06	0x808540  	MOV	_DNSHeader+10, W0
0x4D08	0xED2000  	DEC	W0
0x4D0A	0x888540  	MOV	W0, _DNSHeader+10
;protocol_udp.mpas,787 :: 		end;
0x4D0C	0x37FFB5  	BRA	L__Eth_Udp_ReplyHandler256
L__Eth_Udp_ReplyHandler257:
;protocol_udp.mpas,788 :: 		Exit;
0x4D0E	0x370000  	BRA	L_end__Eth_Udp_ReplyHandler
;protocol_udp.mpas,789 :: 		end;
L__Eth_Udp_ReplyHandler214:
;protocol_udp.mpas,799 :: 		end;
L_end__Eth_Udp_ReplyHandler:
L_end_Eth_Udp_ReplyHandler:
0x4D10	0x78064F  	POP	W12
0x4D12	0x7805CF  	POP	W11
0x4D14	0x78054F  	POP	W10
0x4D16	0xFA8000  	ULNK
0x4D18	0x060000  	RETURN
; end of _Eth_Udp_ReplyHandler
protocol_udp_Eth_Udp_EraseSlotReceive:
;protocol_udp.mpas,175 :: 		begin
;protocol_udp.mpas,176 :: 		UdpSlot^.DestPort := 0;
0x1418	0x781F8A  	PUSH	W10
0x141A	0x781F8B  	PUSH	W11
0x141C	0x781F8C  	PUSH	W12
0x141E	0x4500EA  	ADD	W10, #10, W1
0x1420	0xEF2000  	CLR	W0
0x1422	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,177 :: 		UdpSlot^.SourcePort := 0;
0x1424	0x4500F6  	ADD	W10, #22, W1
0x1426	0xEF2000  	CLR	W0
0x1428	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,178 :: 		UdpSlot^.DataLen := 0;
0x142A	0x4500F8  	ADD	W10, #24, W1
0x142C	0xEF2000  	CLR	W0
0x142E	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,179 :: 		memset(@UdpSlot^.DestIP[0], #0, 4);
0x1430	0x20004C  	MOV	#4, W12
0x1432	0xB3C00B  	MOV.B	#0, W11
0x1434	0x07F9EA  	RCALL	_memset
;protocol_udp.mpas,180 :: 		memset(@UdpSlot^.DestMac[0], #0, 6);
0x1436	0x450064  	ADD	W10, #4, W0
0x1438	0x781F8A  	PUSH	W10
0x143A	0x20006C  	MOV	#6, W12
0x143C	0xB3C00B  	MOV.B	#0, W11
0x143E	0x780500  	MOV	W0, W10
0x1440	0x07F9E4  	RCALL	_memset
0x1442	0x78054F  	POP	W10
;protocol_udp.mpas,181 :: 		memset(@UdpSlot^.SourceIP[0], #0, 4);
0x1444	0x45006C  	ADD	W10, #12, W0
0x1446	0x781F8A  	PUSH	W10
0x1448	0x20004C  	MOV	#4, W12
0x144A	0xB3C00B  	MOV.B	#0, W11
0x144C	0x780500  	MOV	W0, W10
0x144E	0x07F9DD  	RCALL	_memset
0x1450	0x78054F  	POP	W10
;protocol_udp.mpas,182 :: 		memset(@UdpSlot^.SourceMac[0], #0, 6);
0x1452	0x450070  	ADD	W10, #16, W0
0x1454	0x20006C  	MOV	#6, W12
0x1456	0xB3C00B  	MOV.B	#0, W11
0x1458	0x780500  	MOV	W0, W10
0x145A	0x07F9D7  	RCALL	_memset
;protocol_udp.mpas,183 :: 		end;
L_end_Eth_Udp_EraseSlotReceive:
0x145C	0x78064F  	POP	W12
0x145E	0x7805CF  	POP	W11
0x1460	0x78054F  	POP	W10
0x1462	0x060000  	RETURN
; end of protocol_udp_Eth_Udp_EraseSlotReceive
_Eth_Udp_PrintPorts:
0x13B4	0xFA002C  	LNK	#44
;protocol_udp.mpas,395 :: 		begin
;protocol_udp.mpas,396 :: 		i := 0;
0x13B6	0x781F8A  	PUSH	W10
0x13B8	0x781F8B  	PUSH	W11
; i start address is: 8 (W4)
0x13BA	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;protocol_udp.mpas,397 :: 		while i < PORT_CACHE_LEN do
L__Eth_Udp_PrintPorts92:
; i start address is: 8 (W4)
0x13BC	0xE12062  	CP	W4, #2
0x13BE	0x3D0026  	BRA GE	L__Eth_Udp_PrintPorts93
L__Eth_Udp_PrintPorts308:
;protocol_udp.mpas,399 :: 		WordToStr(UdpPorts[i], s1);
0x13C0	0x200010  	MOV	#1, W0
0x13C2	0xDD2080  	SL	W4, W0, W1
0x13C4	0x210B00  	MOV	#lo_addr(protocol_udp_UdpPorts), W0
0x13C6	0x400081  	ADD	W0, W1, W1
0x13C8	0x470060  	ADD	W14, #0, W0
0x13CA	0x981750  	MOV	W0, [W14+42]
0x13CC	0x780580  	MOV	W0, W11
0x13CE	0x780511  	MOV	[W1], W10
0x13D0	0x07FBB4  	RCALL	_WordToStr
;protocol_udp.mpas,400 :: 		UART1_Write_Text('Port: ' + s1 + CRLF);
0x13D2	0x470071  	ADD	W14, #17, W0
0x13D4	0xB3C502  	MOV.B	#80, W2
0x13D6	0x785802  	MOV.B	W2, [W0++]
0x13D8	0xB3C6F2  	MOV.B	#111, W2
0x13DA	0x785802  	MOV.B	W2, [W0++]
0x13DC	0xB3C722  	MOV.B	#114, W2
0x13DE	0x785802  	MOV.B	W2, [W0++]
0x13E0	0xB3C742  	MOV.B	#116, W2
0x13E2	0x785802  	MOV.B	W2, [W0++]
0x13E4	0xB3C3A2  	MOV.B	#58, W2
0x13E6	0x785802  	MOV.B	W2, [W0++]
0x13E8	0xB3C202  	MOV.B	#32, W2
0x13EA	0x785802  	MOV.B	W2, [W0++]
0x13EC	0x90115E  	MOV	[W14+42], W2
0x13EE	0x780082  	MOV	W2, W1
0x13F0	0x07FBD4  	RCALL	___CS2S
0x13F2	0x280301  	MOV	#lo_addr(_CRLF), W1
0x13F4	0x202012  	MOV	#513, W2
0x13F6	0x880192  	MOV	W2, DSRPAG
0x13F8	0x000000  	NOP
0x13FA	0x07FBCF  	RCALL	___CS2S
0x13FC	0x780080  	MOV	W0, W1
0x13FE	0xEF2000  	CLR	W0
0x1400	0x785880  	MOV.B	W0, [W1++]
0x1402	0x470071  	ADD	W14, #17, W0
0x1404	0x780500  	MOV	W0, W10
0x1406	0x071E35  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,401 :: 		Inc(i);
0x1408	0xEC2008  	INC	W4
;protocol_udp.mpas,402 :: 		end;
; i end address is: 8 (W4)
0x140A	0x37FFD8  	BRA	L__Eth_Udp_PrintPorts92
L__Eth_Udp_PrintPorts93:
;protocol_udp.mpas,403 :: 		end;
L_end_Eth_Udp_PrintPorts:
0x140C	0x7805CF  	POP	W11
0x140E	0x78054F  	POP	W10
0x1410	0xFA8000  	ULNK
0x1412	0x060000  	RETURN
; end of _Eth_Udp_PrintPorts
_WordToStr:
0x0B3A	0xFA0000  	LNK	#0
;__Lib_Conversions.mpas,115 :: 		
;__Lib_Conversions.mpas,116 :: 		
0x0B3C	0x78008B  	MOV	W11, W1
0x0B3E	0xB3C200  	MOV.B	#32, W0
0x0B40	0x785880  	MOV.B	W0, [W1++]
0x0B42	0xB3C200  	MOV.B	#32, W0
0x0B44	0x785880  	MOV.B	W0, [W1++]
0x0B46	0xB3C200  	MOV.B	#32, W0
0x0B48	0x785880  	MOV.B	W0, [W1++]
0x0B4A	0xB3C200  	MOV.B	#32, W0
0x0B4C	0x785880  	MOV.B	W0, [W1++]
0x0B4E	0xB3C300  	MOV.B	#48, W0
0x0B50	0x785880  	MOV.B	W0, [W1++]
0x0B52	0xEF2000  	CLR	W0
0x0B54	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,117 :: 		
; ptr start address is: 6 (W3)
0x0B56	0x4581E4  	ADD	W11, #4, W3
; ptr end address is: 6 (W3)
;__Lib_Conversions.mpas,118 :: 		
L__WordToStr14:
; ptr start address is: 6 (W3)
0x0B58	0xE15060  	CP	W10, #0
0x0B5A	0x32000C  	BRA Z	L__WordToStr15
L__WordToStr210:
;__Lib_Conversions.mpas,120 :: 		
0x0B5C	0x2000A2  	MOV	#10, W2
0x0B5E	0x090011  	REPEAT	#17
0x0B60	0xD88502  	DIV.U	W10, W2
0x0B62	0x200300  	MOV	#48, W0
0x0B64	0x408000  	ADD	W1, W0, W0
0x0B66	0x784980  	MOV.B	W0, [W3]
;__Lib_Conversions.mpas,121 :: 		
0x0B68	0x2000A2  	MOV	#10, W2
0x0B6A	0x090011  	REPEAT	#17
0x0B6C	0xD88502  	DIV.U	W10, W2
0x0B6E	0x780500  	MOV	W0, W10
;__Lib_Conversions.mpas,122 :: 		
0x0B70	0xED2006  	DEC	W3
;__Lib_Conversions.mpas,123 :: 		
; ptr end address is: 6 (W3)
0x0B72	0x37FFF2  	BRA	L__WordToStr14
L__WordToStr15:
;__Lib_Conversions.mpas,124 :: 		
L_end_WordToStr:
0x0B74	0xFA8000  	ULNK
0x0B76	0x060000  	RETURN
; end of _WordToStr
___CS2S:
0x0B9A	0xFA0000  	LNK	#0
;__Lib_System.mpas,26 :: 		
;__Lib_System.mpas,28 :: 		
L_loopCS2Ss:
;__Lib_System.mpas,29 :: 		
0x0B9C	0x784131  	MOV.B	[W1++], W2
;__Lib_System.mpas,30 :: 		
0x0B9E	0xE24004  	CP0.B	W2
;__Lib_System.mpas,31 :: 		
0x0BA0	0x320002  	BRA Z	L_CS2Send
;__Lib_System.mpas,32 :: 		
0x0BA2	0x785802  	MOV.B	W2, [W0++]
;__Lib_System.mpas,33 :: 		
0x0BA4	0x37FFFB  	BRA	L_loopCS2Ss
;__Lib_System.mpas,34 :: 		
L_CS2Send:
;__Lib_System.mpas,36 :: 		
L_end___CS2S:
0x0BA6	0xFA8000  	ULNK
0x0BA8	0x060000  	RETURN
; end of ___CS2S
protocol_udp_Eth_FindUdpPort:
;protocol_udp.mpas,105 :: 		begin
;protocol_udp.mpas,106 :: 		iLastEmpty := -1;
0x1294	0x2FFFF0  	MOV	#65535, W0
0x1296	0x780D80  	MOV	W0, [W11]
;protocol_udp.mpas,107 :: 		Result := 0;
; Result start address is: 4 (W2)
0x1298	0xEF2004  	CLR	W2
; Result end address is: 4 (W2)
;protocol_udp.mpas,108 :: 		while Result < PORT_CACHE_LEN do
L_protocol_udp_Eth_FindUdpPort2:
; Result start address is: 4 (W2)
0x129A	0xE11062  	CP	W2, #2
0x129C	0x3D0015  	BRA GE	L_protocol_udp_Eth_FindUdpPort3
L_protocol_udp_Eth_FindUdpPort272:
;protocol_udp.mpas,110 :: 		if UdpPorts[Result] = Port then
0x129E	0x780082  	MOV	W2, W1
0x12A0	0x200010  	MOV	#1, W0
0x12A2	0xDD0880  	SL	W1, W0, W1
0x12A4	0x210B00  	MOV	#lo_addr(protocol_udp_UdpPorts), W0
0x12A6	0x400001  	ADD	W0, W1, W0
0x12A8	0x780010  	MOV	[W0], W0
0x12AA	0xE1000A  	CP	W0, W10
0x12AC	0x3A0002  	BRA NZ	L_protocol_udp_Eth_FindUdpPort7
L_protocol_udp_Eth_FindUdpPort273:
;protocol_udp.mpas,111 :: 		Exit;
0x12AE	0x780082  	MOV	W2, W1
0x12B0	0x37000C  	BRA	L_end_protocol_udp_Eth_FindUdpPort
L_protocol_udp_Eth_FindUdpPort7:
;protocol_udp.mpas,112 :: 		if UdpPorts[Result] = 0 then
0x12B2	0x780082  	MOV	W2, W1
0x12B4	0x200010  	MOV	#1, W0
0x12B6	0xDD0880  	SL	W1, W0, W1
0x12B8	0x210B00  	MOV	#lo_addr(protocol_udp_UdpPorts), W0
0x12BA	0x400001  	ADD	W0, W1, W0
0x12BC	0x780010  	MOV	[W0], W0
0x12BE	0xE10060  	CP	W0, #0
0x12C0	0x3A0001  	BRA NZ	L_protocol_udp_Eth_FindUdpPort10
L_protocol_udp_Eth_FindUdpPort274:
;protocol_udp.mpas,113 :: 		iLastEmpty := Result;
0x12C2	0x780D82  	MOV	W2, [W11]
L_protocol_udp_Eth_FindUdpPort10:
;protocol_udp.mpas,114 :: 		Inc(Result)
0x12C4	0xEC2004  	INC	W2
;protocol_udp.mpas,115 :: 		end;
; Result end address is: 4 (W2)
0x12C6	0x37FFE9  	BRA	L_protocol_udp_Eth_FindUdpPort2
L_protocol_udp_Eth_FindUdpPort3:
;protocol_udp.mpas,116 :: 		Result := -1;  // If we got there then it was not found
; Result start address is: 2 (W1)
0x12C8	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;protocol_udp.mpas,117 :: 		end;
L_end_protocol_udp_Eth_FindUdpPort:
; Result start address is: 2 (W1)
0x12CA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Eth_FindUdpPort:
0x12CC	0x060000  	RETURN
; end of protocol_udp_Eth_FindUdpPort
_Eth_Reject:
0x11C6	0xFA0006  	LNK	#6
;packet_utilities.mpas,99 :: 		Begin
;packet_utilities.mpas,100 :: 		Hi(PacketSize) := ReadFromEthMem(AddrPacket+16);
0x11C8	0x781F8A  	PUSH	W10
0x11CA	0x781F8B  	PUSH	W11
0x11CC	0x781F8C  	PUSH	W12
0x11CE	0x470062  	ADD	W14, #2, W0
0x11D0	0xEC2000  	INC	W0
0x11D2	0x980720  	MOV	W0, [W14+4]
0x11D4	0x808080  	MOV	_AddrPacket, W0
0x11D6	0x400070  	ADD	W0, #16, W0
0x11D8	0x780500  	MOV	W0, W10
0x11DA	0x071698  	RCALL	_ReadFromEthMem
0x11DC	0x9000AE  	MOV	[W14+4], W1
0x11DE	0x784880  	MOV.B	W0, [W1]
;packet_utilities.mpas,101 :: 		Lo(PacketSize) := Eth_GetByte;
0x11E0	0x070513  	RCALL	_Eth_GetByte
0x11E2	0x984720  	MOV.B	W0, [W14+2]
;packet_utilities.mpas,102 :: 		PacketSize := PacketSize + 28;
0x11E4	0x2001C1  	MOV	#28, W1
0x11E6	0x470062  	ADD	W14, #2, W0
0x11E8	0x408810  	ADD	W1, [W0], [W0]
;packet_utilities.mpas,103 :: 		Eth_MacSwap;
0x11EA	0x07FCC6  	RCALL	_Eth_MacSwap
;packet_utilities.mpas,105 :: 		WriteToEthMem(TXSTART+12,$08);            // ETHType
0x11EC	0xB3C08B  	MOV.B	#8, W11
0x11EE	0x2000CA  	MOV	#12, W10
0x11F0	0x0708AC  	RCALL	_WriteToEthMem
;packet_utilities.mpas,106 :: 		Eth_PutByte($00);                         // ETHType
0x11F2	0xEF2014  	CLR	W10
0x11F4	0x0708A2  	RCALL	_Eth_PutByte
;packet_utilities.mpas,108 :: 		Eth_PutByte($45);                         // Version
0x11F6	0xB3C45A  	MOV.B	#69, W10
0x11F8	0x0708A0  	RCALL	_Eth_PutByte
;packet_utilities.mpas,109 :: 		Eth_PutByte($C0);                         // Type of service
0x11FA	0xB3CC0A  	MOV.B	#192, W10
0x11FC	0x07089E  	RCALL	_Eth_PutByte
;packet_utilities.mpas,110 :: 		Eth_PutByte(Hi(PacketSize));              // Hi Total length
0x11FE	0x470062  	ADD	W14, #2, W0
0x1200	0xEC2000  	INC	W0
0x1202	0x784010  	MOV.B	[W0], W0
0x1204	0x784500  	MOV.B	W0, W10
0x1206	0x070899  	RCALL	_Eth_PutByte
;packet_utilities.mpas,111 :: 		Eth_PutByte(Lo(PacketSize));              // Lo Total length
0x1208	0x90452E  	MOV.B	[W14+2], W10
0x120A	0x070897  	RCALL	_Eth_PutByte
;packet_utilities.mpas,112 :: 		Eth_PutByte($AC);
0x120C	0xB3CACA  	MOV.B	#172, W10
0x120E	0x070895  	RCALL	_Eth_PutByte
;packet_utilities.mpas,113 :: 		Eth_PutByte($80);
0x1210	0xB3C80A  	MOV.B	#128, W10
0x1212	0x070893  	RCALL	_Eth_PutByte
;packet_utilities.mpas,114 :: 		Eth_PutByte($00);
0x1214	0xEF2014  	CLR	W10
0x1216	0x070891  	RCALL	_Eth_PutByte
;packet_utilities.mpas,115 :: 		Eth_PutByte($00);
0x1218	0xEF2014  	CLR	W10
0x121A	0x07088F  	RCALL	_Eth_PutByte
;packet_utilities.mpas,116 :: 		Eth_PutByte($80);                         // Time to live
0x121C	0xB3C80A  	MOV.B	#128, W10
0x121E	0x07088D  	RCALL	_Eth_PutByte
;packet_utilities.mpas,117 :: 		Eth_PutByte($01);                         // ICMP Protocol
0x1220	0xB3C01A  	MOV.B	#1, W10
0x1222	0x07088B  	RCALL	_Eth_PutByte
;packet_utilities.mpas,118 :: 		Eth_PutByte($00);
0x1224	0xEF2014  	CLR	W10
0x1226	0x070889  	RCALL	_Eth_PutByte
;packet_utilities.mpas,119 :: 		Eth_PutByte($00);
0x1228	0xEF2014  	CLR	W10
0x122A	0x070887  	RCALL	_Eth_PutByte
;packet_utilities.mpas,120 :: 		Eth_IpSwap;
0x122C	0x07FC63  	RCALL	_Eth_IpSwap
;packet_utilities.mpas,122 :: 		cksum := Eth_Cksum(TXSTART+14,20);
0x122E	0x20014B  	MOV	#20, W11
0x1230	0x2000EA  	MOV	#14, W10
0x1232	0x07005B  	RCALL	_Eth_Cksum
0x1234	0x980700  	MOV	W0, [W14+0]
;packet_utilities.mpas,123 :: 		WriteToEthMem(TXSTART+24,Hi(cksum));
0x1236	0x470060  	ADD	W14, #0, W0
0x1238	0xEC2000  	INC	W0
0x123A	0x784010  	MOV.B	[W0], W0
0x123C	0x784580  	MOV.B	W0, W11
0x123E	0x20018A  	MOV	#24, W10
0x1240	0x070884  	RCALL	_WriteToEthMem
;packet_utilities.mpas,124 :: 		Eth_PutByte(Lo(cksum));
0x1242	0x90450E  	MOV.B	[W14+0], W10
0x1244	0x07087A  	RCALL	_Eth_PutByte
;packet_utilities.mpas,126 :: 		WriteToEthMem(TXSTART+34,$03);
0x1246	0xB3C03B  	MOV.B	#3, W11
0x1248	0x20022A  	MOV	#34, W10
0x124A	0x07087F  	RCALL	_WriteToEthMem
;packet_utilities.mpas,127 :: 		Eth_PutByte($03);
0x124C	0xB3C03A  	MOV.B	#3, W10
0x124E	0x070875  	RCALL	_Eth_PutByte
;packet_utilities.mpas,128 :: 		EthMemSet_CP(0,6);
0x1250	0x20006B  	MOV	#6, W11
0x1252	0xEF2014  	CLR	W10
0x1254	0x07FC3E  	RCALL	_EthMemSet_CP
;packet_utilities.mpas,130 :: 		CopyEthMemToEthMem(AddrPacket+14,TXSTART+42,PacketSize-28);
0x1256	0x808080  	MOV	_AddrPacket, W0
0x1258	0x4000EE  	ADD	W0, #14, W1
0x125A	0x90001E  	MOV	[W14+2], W0
0x125C	0x50007C  	SUB	W0, #28, W0
0x125E	0x780600  	MOV	W0, W12
0x1260	0x2002AB  	MOV	#42, W11
0x1262	0x780501  	MOV	W1, W10
0x1264	0x0704AE  	RCALL	_CopyEthMemToEthMem
;packet_utilities.mpas,131 :: 		cksum := Eth_Cksum(TXSTART+34,PacketSize-20);
0x1266	0x90001E  	MOV	[W14+2], W0
0x1268	0x500074  	SUB	W0, #20, W0
0x126A	0x780580  	MOV	W0, W11
0x126C	0x20022A  	MOV	#34, W10
0x126E	0x07003D  	RCALL	_Eth_Cksum
0x1270	0x980700  	MOV	W0, [W14+0]
;packet_utilities.mpas,132 :: 		WriteToEthMem(TXSTART+36,Hi(cksum));
0x1272	0x470060  	ADD	W14, #0, W0
0x1274	0xEC2000  	INC	W0
0x1276	0x784010  	MOV.B	[W0], W0
0x1278	0x784580  	MOV.B	W0, W11
0x127A	0x20024A  	MOV	#36, W10
0x127C	0x070866  	RCALL	_WriteToEthMem
;packet_utilities.mpas,133 :: 		Eth_PutByte(Lo(cksum));
0x127E	0x90450E  	MOV.B	[W14+0], W10
0x1280	0x07085C  	RCALL	_Eth_PutByte
;packet_utilities.mpas,134 :: 		Eth_SendPacket(PacketSize+14);
0x1282	0x90001E  	MOV	[W14+2], W0
0x1284	0x40006E  	ADD	W0, #14, W0
0x1286	0x780500  	MOV	W0, W10
0x1288	0x07086E  	RCALL	_Eth_SendPacket
;packet_utilities.mpas,135 :: 		End;
L_end_Eth_Reject:
0x128A	0x78064F  	POP	W12
0x128C	0x7805CF  	POP	W11
0x128E	0x78054F  	POP	W10
0x1290	0xFA8000  	ULNK
0x1292	0x060000  	RETURN
; end of _Eth_Reject
_Eth_MacSwap:
;packet_utilities.mpas,70 :: 		begin
;packet_utilities.mpas,71 :: 		CopyEthMemToEthMem(AddrPacket+6, TXSTART, 6);   // Setup the Destination Hardware Address: the source that sent the packet is now the destination
0x0B78	0x781F8A  	PUSH	W10
0x0B7A	0x781F8B  	PUSH	W11
0x0B7C	0x781F8C  	PUSH	W12
0x0B7E	0x808080  	MOV	_AddrPacket, W0
0x0B80	0x400066  	ADD	W0, #6, W0
0x0B82	0x20006C  	MOV	#6, W12
0x0B84	0xEF2016  	CLR	W11
0x0B86	0x780500  	MOV	W0, W10
0x0B88	0x07081C  	RCALL	_CopyEthMemToEthMem
;packet_utilities.mpas,72 :: 		CopyRamToEthMem(@eth_mac, TXSTART+6, 6);        // Setup the Source Hardware Address     : the destination in the old received message could be a global FF.FF.FF.FF.FF.FF so transfer our local copy to the ENC as the source
0x0B8A	0x20006C  	MOV	#6, W12
0x0B8C	0x20006B  	MOV	#6, W11
0x0B8E	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x0B90	0x070C3E  	RCALL	_CopyRamToEthMem
;packet_utilities.mpas,73 :: 		end;
L_end_Eth_MacSwap:
0x0B92	0x78064F  	POP	W12
0x0B94	0x7805CF  	POP	W11
0x0B96	0x78054F  	POP	W10
0x0B98	0x060000  	RETURN
; end of _Eth_MacSwap
_Eth_IpSwap:
;packet_utilities.mpas,76 :: 		begin
;packet_utilities.mpas,77 :: 		CopyRamToEthMem(@eth_ip_addr, TXSTART+26, 4);
0x0AF4	0x781F8A  	PUSH	W10
0x0AF6	0x781F8B  	PUSH	W11
0x0AF8	0x781F8C  	PUSH	W12
0x0AFA	0x20004C  	MOV	#4, W12
0x0AFC	0x2001AB  	MOV	#26, W11
0x0AFE	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x0B00	0x070C86  	RCALL	_CopyRamToEthMem
;packet_utilities.mpas,78 :: 		CopyEthMemToEthMem(AddrPacket+26, TXSTART+30, 4);
0x0B02	0x808080  	MOV	_AddrPacket, W0
0x0B04	0x40007A  	ADD	W0, #26, W0
0x0B06	0x20004C  	MOV	#4, W12
0x0B08	0x2001EB  	MOV	#30, W11
0x0B0A	0x780500  	MOV	W0, W10
0x0B0C	0x07085A  	RCALL	_CopyEthMemToEthMem
;packet_utilities.mpas,79 :: 		end;
L_end_Eth_IpSwap:
0x0B0E	0x78064F  	POP	W12
0x0B10	0x7805CF  	POP	W11
0x0B12	0x78054F  	POP	W10
0x0B14	0x060000  	RETURN
; end of _Eth_IpSwap
_EthMemSet_CP:
;lib1_enc600_V3_5_b.mpas,524 :: 		begin
;lib1_enc600_V3_5_b.mpas,525 :: 		if length_w = 0 then Exit;
0x0AD2	0xE15860  	CP	W11, #0
0x0AD4	0x3A0001  	BRA NZ	L__EthMemSet_CP175
L__EthMemSet_CP341:
0x0AD6	0x37000D  	BRA	L_end__EthMemSet_CP
L__EthMemSet_CP175:
;lib1_enc600_V3_5_b.mpas,527 :: 		Eth_Select;
0x0AD8	0x07FE5E  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,528 :: 		Spi_Read_(WGPDATA_);
0x0ADA	0x781F8A  	PUSH	W10
0x0ADC	0xB3C2AA  	MOV.B	#42, W10
0x0ADE	0x07FE18  	RCALL	_Spi_Read_
0x0AE0	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,530 :: 		i := 0;
; i start address is: 0 (W0)
0x0AE2	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x0AE4	0x780100  	MOV	W0, W2
;lib1_enc600_V3_5_b.mpas,531 :: 		while i < length_w do
L__EthMemSet_CP178:
; i start address is: 4 (W2)
0x0AE6	0xE1100B  	CP	W2, W11
0x0AE8	0x310003  	BRA GEU	L__EthMemSet_CP179
L__EthMemSet_CP342:
;lib1_enc600_V3_5_b.mpas,533 :: 		Spi_Read_(chr_);
0x0AEA	0x07FE12  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,534 :: 		inc(i);
0x0AEC	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,535 :: 		end;
; i end address is: 4 (W2)
0x0AEE	0x37FFFB  	BRA	L__EthMemSet_CP178
L__EthMemSet_CP179:
;lib1_enc600_V3_5_b.mpas,537 :: 		Eth_UnSelect;
0x0AF0	0x071CBE  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,538 :: 		end;
L_end__EthMemSet_CP:
L_end_EthMemSet_CP:
0x0AF2	0x060000  	RETURN
; end of _EthMemSet_CP
_Eth_Udp_PrintSlotReceive:
0x1696	0xFA012E  	LNK	#302
;protocol_udp.mpas,804 :: 		begin
;protocol_udp.mpas,805 :: 		UART1_Write_Text('Dest MAC: ' + MACAddressToStr(Slot^.DestMac) + CRLF);
0x1698	0x781F8A  	PUSH	W10
0x169A	0x781F8B  	PUSH	W11
0x169C	0x450064  	ADD	W10, #4, W0
0x169E	0x781F8A  	PUSH	W10
0x16A0	0x780500  	MOV	W0, W10
0x16A2	0x201120  	MOV	#274, W0
0x16A4	0x470000  	ADD	W14, W0, W0
0x16A6	0x9807B0  	MOV	W0, [W15+6]
0x16A8	0x07FB7B  	RCALL	_MACAddressToStr
0x16AA	0x78054F  	POP	W10
0x16AC	0x200810  	MOV	#129, W0
0x16AE	0x470000  	ADD	W14, W0, W0
0x16B0	0xB3C442  	MOV.B	#68, W2
0x16B2	0x785802  	MOV.B	W2, [W0++]
0x16B4	0xB3C652  	MOV.B	#101, W2
0x16B6	0x785802  	MOV.B	W2, [W0++]
0x16B8	0xB3C732  	MOV.B	#115, W2
0x16BA	0x785802  	MOV.B	W2, [W0++]
0x16BC	0xB3C742  	MOV.B	#116, W2
0x16BE	0x785802  	MOV.B	W2, [W0++]
0x16C0	0xB3C202  	MOV.B	#32, W2
0x16C2	0x785802  	MOV.B	W2, [W0++]
0x16C4	0xB3C4D2  	MOV.B	#77, W2
0x16C6	0x785802  	MOV.B	W2, [W0++]
0x16C8	0xB3C412  	MOV.B	#65, W2
0x16CA	0x785802  	MOV.B	W2, [W0++]
0x16CC	0xB3C432  	MOV.B	#67, W2
0x16CE	0x785802  	MOV.B	W2, [W0++]
0x16D0	0xB3C3A2  	MOV.B	#58, W2
0x16D2	0x785802  	MOV.B	W2, [W0++]
0x16D4	0xB3C202  	MOV.B	#32, W2
0x16D6	0x785802  	MOV.B	W2, [W0++]
0x16D8	0x201121  	MOV	#274, W1
0x16DA	0x470081  	ADD	W14, W1, W1
0x16DC	0x07FA5E  	RCALL	___CS2S
0x16DE	0x280301  	MOV	#lo_addr(_CRLF), W1
0x16E0	0x202012  	MOV	#513, W2
0x16E2	0x880192  	MOV	W2, DSRPAG
0x16E4	0x000000  	NOP
0x16E6	0x07FA59  	RCALL	___CS2S
0x16E8	0x780080  	MOV	W0, W1
0x16EA	0xEF2000  	CLR	W0
0x16EC	0x785880  	MOV.B	W0, [W1++]
0x16EE	0x200810  	MOV	#129, W0
0x16F0	0x470000  	ADD	W14, W0, W0
0x16F2	0x781F8A  	PUSH	W10
0x16F4	0x780500  	MOV	W0, W10
0x16F6	0x071CBD  	RCALL	_UART1_Write_Text
0x16F8	0x78054F  	POP	W10
;protocol_udp.mpas,806 :: 		UART1_Write_Text('Dest IP: ' + IPAddressToStr(Slot^.DestIP) + CRLF);
0x16FA	0x781F8A  	PUSH	W10
0x16FC	0x201120  	MOV	#274, W0
0x16FE	0x470000  	ADD	W14, W0, W0
0x1700	0x9807B0  	MOV	W0, [W15+6]
0x1702	0x07FAEA  	RCALL	_IPAddressToStr
0x1704	0x78054F  	POP	W10
0x1706	0x200810  	MOV	#129, W0
0x1708	0x470000  	ADD	W14, W0, W0
0x170A	0xB3C442  	MOV.B	#68, W2
0x170C	0x785802  	MOV.B	W2, [W0++]
0x170E	0xB3C652  	MOV.B	#101, W2
0x1710	0x785802  	MOV.B	W2, [W0++]
0x1712	0xB3C732  	MOV.B	#115, W2
0x1714	0x785802  	MOV.B	W2, [W0++]
0x1716	0xB3C742  	MOV.B	#116, W2
0x1718	0x785802  	MOV.B	W2, [W0++]
0x171A	0xB3C202  	MOV.B	#32, W2
0x171C	0x785802  	MOV.B	W2, [W0++]
0x171E	0xB3C492  	MOV.B	#73, W2
0x1720	0x785802  	MOV.B	W2, [W0++]
0x1722	0xB3C502  	MOV.B	#80, W2
0x1724	0x785802  	MOV.B	W2, [W0++]
0x1726	0xB3C3A2  	MOV.B	#58, W2
0x1728	0x785802  	MOV.B	W2, [W0++]
0x172A	0xB3C202  	MOV.B	#32, W2
0x172C	0x785802  	MOV.B	W2, [W0++]
0x172E	0x201121  	MOV	#274, W1
0x1730	0x470081  	ADD	W14, W1, W1
0x1732	0x07FA33  	RCALL	___CS2S
0x1734	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1736	0x202012  	MOV	#513, W2
0x1738	0x880192  	MOV	W2, DSRPAG
0x173A	0x000000  	NOP
0x173C	0x07FA2E  	RCALL	___CS2S
0x173E	0x780080  	MOV	W0, W1
0x1740	0xEF2000  	CLR	W0
0x1742	0x785880  	MOV.B	W0, [W1++]
0x1744	0x200810  	MOV	#129, W0
0x1746	0x470000  	ADD	W14, W0, W0
0x1748	0x781F8A  	PUSH	W10
0x174A	0x780500  	MOV	W0, W10
0x174C	0x071C92  	RCALL	_UART1_Write_Text
0x174E	0x78054F  	POP	W10
;protocol_udp.mpas,807 :: 		WordToStr(Slot^.DestPort, s2);
0x1750	0x4500EA  	ADD	W10, #10, W1
0x1752	0x470060  	ADD	W14, #0, W0
0x1754	0x991760  	MOV	W0, [W14+300]
0x1756	0x781F8A  	PUSH	W10
0x1758	0x780580  	MOV	W0, W11
0x175A	0x780511  	MOV	[W1], W10
0x175C	0x07F9EE  	RCALL	_WordToStr
0x175E	0x78054F  	POP	W10
;protocol_udp.mpas,808 :: 		UART1_Write_Text('Dest Port: ' + s2 + CRLF);
0x1760	0x200810  	MOV	#129, W0
0x1762	0x470000  	ADD	W14, W0, W0
0x1764	0xB3C442  	MOV.B	#68, W2
0x1766	0x785802  	MOV.B	W2, [W0++]
0x1768	0xB3C652  	MOV.B	#101, W2
0x176A	0x785802  	MOV.B	W2, [W0++]
0x176C	0xB3C732  	MOV.B	#115, W2
0x176E	0x785802  	MOV.B	W2, [W0++]
0x1770	0xB3C742  	MOV.B	#116, W2
0x1772	0x785802  	MOV.B	W2, [W0++]
0x1774	0xB3C202  	MOV.B	#32, W2
0x1776	0x785802  	MOV.B	W2, [W0++]
0x1778	0xB3C502  	MOV.B	#80, W2
0x177A	0x785802  	MOV.B	W2, [W0++]
0x177C	0xB3C6F2  	MOV.B	#111, W2
0x177E	0x785802  	MOV.B	W2, [W0++]
0x1780	0xB3C722  	MOV.B	#114, W2
0x1782	0x785802  	MOV.B	W2, [W0++]
0x1784	0xB3C742  	MOV.B	#116, W2
0x1786	0x785802  	MOV.B	W2, [W0++]
0x1788	0xB3C3A2  	MOV.B	#58, W2
0x178A	0x785802  	MOV.B	W2, [W0++]
0x178C	0xB3C202  	MOV.B	#32, W2
0x178E	0x785802  	MOV.B	W2, [W0++]
0x1790	0x91116E  	MOV	[W14+300], W2
0x1792	0x780082  	MOV	W2, W1
0x1794	0x07FA02  	RCALL	___CS2S
0x1796	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1798	0x202012  	MOV	#513, W2
0x179A	0x880192  	MOV	W2, DSRPAG
0x179C	0x000000  	NOP
0x179E	0x07F9FD  	RCALL	___CS2S
0x17A0	0x780080  	MOV	W0, W1
0x17A2	0xEF2000  	CLR	W0
0x17A4	0x785880  	MOV.B	W0, [W1++]
0x17A6	0x200810  	MOV	#129, W0
0x17A8	0x470000  	ADD	W14, W0, W0
0x17AA	0x781F8A  	PUSH	W10
0x17AC	0x780500  	MOV	W0, W10
0x17AE	0x071C61  	RCALL	_UART1_Write_Text
0x17B0	0x78054F  	POP	W10
;protocol_udp.mpas,810 :: 		UART1_Write_Text('Source MAC: ' + MACAddressToStr(Slot^.SourceMac) + CRLF);
0x17B2	0x450070  	ADD	W10, #16, W0
0x17B4	0x781F8A  	PUSH	W10
0x17B6	0x780500  	MOV	W0, W10
0x17B8	0x201120  	MOV	#274, W0
0x17BA	0x470000  	ADD	W14, W0, W0
0x17BC	0x9807B0  	MOV	W0, [W15+6]
0x17BE	0x07FAF0  	RCALL	_MACAddressToStr
0x17C0	0x78054F  	POP	W10
0x17C2	0x200810  	MOV	#129, W0
0x17C4	0x470000  	ADD	W14, W0, W0
0x17C6	0xB3C532  	MOV.B	#83, W2
0x17C8	0x785802  	MOV.B	W2, [W0++]
0x17CA	0xB3C6F2  	MOV.B	#111, W2
0x17CC	0x785802  	MOV.B	W2, [W0++]
0x17CE	0xB3C752  	MOV.B	#117, W2
0x17D0	0x785802  	MOV.B	W2, [W0++]
0x17D2	0xB3C722  	MOV.B	#114, W2
0x17D4	0x785802  	MOV.B	W2, [W0++]
0x17D6	0xB3C632  	MOV.B	#99, W2
0x17D8	0x785802  	MOV.B	W2, [W0++]
0x17DA	0xB3C652  	MOV.B	#101, W2
0x17DC	0x785802  	MOV.B	W2, [W0++]
0x17DE	0xB3C202  	MOV.B	#32, W2
0x17E0	0x785802  	MOV.B	W2, [W0++]
0x17E2	0xB3C4D2  	MOV.B	#77, W2
0x17E4	0x785802  	MOV.B	W2, [W0++]
0x17E6	0xB3C412  	MOV.B	#65, W2
0x17E8	0x785802  	MOV.B	W2, [W0++]
0x17EA	0xB3C432  	MOV.B	#67, W2
0x17EC	0x785802  	MOV.B	W2, [W0++]
0x17EE	0xB3C3A2  	MOV.B	#58, W2
0x17F0	0x785802  	MOV.B	W2, [W0++]
0x17F2	0xB3C202  	MOV.B	#32, W2
0x17F4	0x785802  	MOV.B	W2, [W0++]
0x17F6	0x201121  	MOV	#274, W1
0x17F8	0x470081  	ADD	W14, W1, W1
0x17FA	0x07F9CF  	RCALL	___CS2S
0x17FC	0x280301  	MOV	#lo_addr(_CRLF), W1
0x17FE	0x202012  	MOV	#513, W2
0x1800	0x880192  	MOV	W2, DSRPAG
0x1802	0x000000  	NOP
0x1804	0x07F9CA  	RCALL	___CS2S
0x1806	0x780080  	MOV	W0, W1
0x1808	0xEF2000  	CLR	W0
0x180A	0x785880  	MOV.B	W0, [W1++]
0x180C	0x200810  	MOV	#129, W0
0x180E	0x470000  	ADD	W14, W0, W0
0x1810	0x781F8A  	PUSH	W10
0x1812	0x780500  	MOV	W0, W10
0x1814	0x071C2E  	RCALL	_UART1_Write_Text
0x1816	0x78054F  	POP	W10
;protocol_udp.mpas,811 :: 		UART1_Write_Text('Source IP: ' + IPAddressToStr(Slot^.SourceIP) + CRLF);
0x1818	0x45006C  	ADD	W10, #12, W0
0x181A	0x781F8A  	PUSH	W10
0x181C	0x780500  	MOV	W0, W10
0x181E	0x201120  	MOV	#274, W0
0x1820	0x470000  	ADD	W14, W0, W0
0x1822	0x9807B0  	MOV	W0, [W15+6]
0x1824	0x07FA59  	RCALL	_IPAddressToStr
0x1826	0x78054F  	POP	W10
0x1828	0x200810  	MOV	#129, W0
0x182A	0x470000  	ADD	W14, W0, W0
0x182C	0xB3C532  	MOV.B	#83, W2
0x182E	0x785802  	MOV.B	W2, [W0++]
0x1830	0xB3C6F2  	MOV.B	#111, W2
0x1832	0x785802  	MOV.B	W2, [W0++]
0x1834	0xB3C752  	MOV.B	#117, W2
0x1836	0x785802  	MOV.B	W2, [W0++]
0x1838	0xB3C722  	MOV.B	#114, W2
0x183A	0x785802  	MOV.B	W2, [W0++]
0x183C	0xB3C632  	MOV.B	#99, W2
0x183E	0x785802  	MOV.B	W2, [W0++]
0x1840	0xB3C652  	MOV.B	#101, W2
0x1842	0x785802  	MOV.B	W2, [W0++]
0x1844	0xB3C202  	MOV.B	#32, W2
0x1846	0x785802  	MOV.B	W2, [W0++]
0x1848	0xB3C492  	MOV.B	#73, W2
0x184A	0x785802  	MOV.B	W2, [W0++]
0x184C	0xB3C502  	MOV.B	#80, W2
0x184E	0x785802  	MOV.B	W2, [W0++]
0x1850	0xB3C3A2  	MOV.B	#58, W2
0x1852	0x785802  	MOV.B	W2, [W0++]
0x1854	0xB3C202  	MOV.B	#32, W2
0x1856	0x785802  	MOV.B	W2, [W0++]
0x1858	0x201121  	MOV	#274, W1
0x185A	0x470081  	ADD	W14, W1, W1
0x185C	0x07F99E  	RCALL	___CS2S
0x185E	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1860	0x202012  	MOV	#513, W2
0x1862	0x880192  	MOV	W2, DSRPAG
0x1864	0x000000  	NOP
0x1866	0x07F999  	RCALL	___CS2S
0x1868	0x780080  	MOV	W0, W1
0x186A	0xEF2000  	CLR	W0
0x186C	0x785880  	MOV.B	W0, [W1++]
0x186E	0x200810  	MOV	#129, W0
0x1870	0x470000  	ADD	W14, W0, W0
0x1872	0x781F8A  	PUSH	W10
0x1874	0x780500  	MOV	W0, W10
0x1876	0x071BFD  	RCALL	_UART1_Write_Text
0x1878	0x78054F  	POP	W10
;protocol_udp.mpas,812 :: 		WordToStr(Slot^.SourcePort, s2);
0x187A	0x4500F6  	ADD	W10, #22, W1
0x187C	0x470060  	ADD	W14, #0, W0
0x187E	0x781F8A  	PUSH	W10
0x1880	0x780580  	MOV	W0, W11
0x1882	0x780511  	MOV	[W1], W10
0x1884	0x07F95A  	RCALL	_WordToStr
0x1886	0x78054F  	POP	W10
;protocol_udp.mpas,813 :: 		UART1_Write_Text('Source Port: ' + s2 + CRLF);
0x1888	0x200810  	MOV	#129, W0
0x188A	0x470000  	ADD	W14, W0, W0
0x188C	0xB3C532  	MOV.B	#83, W2
0x188E	0x785802  	MOV.B	W2, [W0++]
0x1890	0xB3C6F2  	MOV.B	#111, W2
0x1892	0x785802  	MOV.B	W2, [W0++]
0x1894	0xB3C752  	MOV.B	#117, W2
0x1896	0x785802  	MOV.B	W2, [W0++]
0x1898	0xB3C722  	MOV.B	#114, W2
0x189A	0x785802  	MOV.B	W2, [W0++]
0x189C	0xB3C632  	MOV.B	#99, W2
0x189E	0x785802  	MOV.B	W2, [W0++]
0x18A0	0xB3C652  	MOV.B	#101, W2
0x18A2	0x785802  	MOV.B	W2, [W0++]
0x18A4	0xB3C202  	MOV.B	#32, W2
0x18A6	0x785802  	MOV.B	W2, [W0++]
0x18A8	0xB3C502  	MOV.B	#80, W2
0x18AA	0x785802  	MOV.B	W2, [W0++]
0x18AC	0xB3C6F2  	MOV.B	#111, W2
0x18AE	0x785802  	MOV.B	W2, [W0++]
0x18B0	0xB3C722  	MOV.B	#114, W2
0x18B2	0x785802  	MOV.B	W2, [W0++]
0x18B4	0xB3C742  	MOV.B	#116, W2
0x18B6	0x785802  	MOV.B	W2, [W0++]
0x18B8	0xB3C3A2  	MOV.B	#58, W2
0x18BA	0x785802  	MOV.B	W2, [W0++]
0x18BC	0xB3C202  	MOV.B	#32, W2
0x18BE	0x785802  	MOV.B	W2, [W0++]
0x18C0	0x91116E  	MOV	[W14+300], W2
0x18C2	0x780082  	MOV	W2, W1
0x18C4	0x07F96A  	RCALL	___CS2S
0x18C6	0x280301  	MOV	#lo_addr(_CRLF), W1
0x18C8	0x202012  	MOV	#513, W2
0x18CA	0x880192  	MOV	W2, DSRPAG
0x18CC	0x000000  	NOP
0x18CE	0x07F965  	RCALL	___CS2S
0x18D0	0x780080  	MOV	W0, W1
0x18D2	0xEF2000  	CLR	W0
0x18D4	0x785880  	MOV.B	W0, [W1++]
0x18D6	0x200810  	MOV	#129, W0
0x18D8	0x470000  	ADD	W14, W0, W0
0x18DA	0x781F8A  	PUSH	W10
0x18DC	0x780500  	MOV	W0, W10
0x18DE	0x071BC9  	RCALL	_UART1_Write_Text
0x18E0	0x78054F  	POP	W10
;protocol_udp.mpas,815 :: 		WordToStr(Slot^.DataLen, s2);
0x18E2	0x4500F8  	ADD	W10, #24, W1
0x18E4	0x470060  	ADD	W14, #0, W0
0x18E6	0x780580  	MOV	W0, W11
0x18E8	0x780511  	MOV	[W1], W10
0x18EA	0x07F927  	RCALL	_WordToStr
;protocol_udp.mpas,816 :: 		UART1_Write_Text('DataLen: ' + s2 + CRLF);
0x18EC	0x200810  	MOV	#129, W0
0x18EE	0x470000  	ADD	W14, W0, W0
0x18F0	0xB3C442  	MOV.B	#68, W2
0x18F2	0x785802  	MOV.B	W2, [W0++]
0x18F4	0xB3C612  	MOV.B	#97, W2
0x18F6	0x785802  	MOV.B	W2, [W0++]
0x18F8	0xB3C742  	MOV.B	#116, W2
0x18FA	0x785802  	MOV.B	W2, [W0++]
0x18FC	0xB3C612  	MOV.B	#97, W2
0x18FE	0x785802  	MOV.B	W2, [W0++]
0x1900	0xB3C4C2  	MOV.B	#76, W2
0x1902	0x785802  	MOV.B	W2, [W0++]
0x1904	0xB3C652  	MOV.B	#101, W2
0x1906	0x785802  	MOV.B	W2, [W0++]
0x1908	0xB3C6E2  	MOV.B	#110, W2
0x190A	0x785802  	MOV.B	W2, [W0++]
0x190C	0xB3C3A2  	MOV.B	#58, W2
0x190E	0x785802  	MOV.B	W2, [W0++]
0x1910	0xB3C202  	MOV.B	#32, W2
0x1912	0x785802  	MOV.B	W2, [W0++]
0x1914	0x91116E  	MOV	[W14+300], W2
0x1916	0x780082  	MOV	W2, W1
0x1918	0x07F940  	RCALL	___CS2S
0x191A	0x280301  	MOV	#lo_addr(_CRLF), W1
0x191C	0x202012  	MOV	#513, W2
0x191E	0x880192  	MOV	W2, DSRPAG
0x1920	0x000000  	NOP
0x1922	0x07F93B  	RCALL	___CS2S
0x1924	0x780080  	MOV	W0, W1
0x1926	0xEF2000  	CLR	W0
0x1928	0x785880  	MOV.B	W0, [W1++]
0x192A	0x200810  	MOV	#129, W0
0x192C	0x470000  	ADD	W14, W0, W0
0x192E	0x780500  	MOV	W0, W10
0x1930	0x071BA0  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,817 :: 		end;
L_end_Eth_Udp_PrintSlotReceive:
0x1932	0x7805CF  	POP	W11
0x1934	0x78054F  	POP	W10
0x1936	0xFA8000  	ULNK
0x1938	0x060000  	RETURN
; end of _Eth_Udp_PrintSlotReceive
_MACAddressToStr:
0x0DA0	0xFA0024  	LNK	#36
;helperfunctions.mpas,220 :: 		begin
;helperfunctions.mpas,221 :: 		Result := '';
0x0DA2	0x781F8A  	PUSH	W10
0x0DA4	0x781F8B  	PUSH	W11
0x0DA6	0x90008E  	MOV	[W14+0], W1
0x0DA8	0xEF2000  	CLR	W0
0x0DAA	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,222 :: 		ByteToStr(MAC[0], Temp);
0x0DAC	0x470062  	ADD	W14, #2, W0
0x0DAE	0x981710  	MOV	W0, [W14+34]
0x0DB0	0x781F8A  	PUSH	W10
0x0DB2	0x780580  	MOV	W0, W11
0x0DB4	0x78451A  	MOV.B	[W10], W10
0x0DB6	0x07FD34  	RCALL	_ByteToStr
;helperfunctions.mpas,223 :: 		TrimValue(@Temp);
0x0DB8	0x470062  	ADD	W14, #2, W0
0x0DBA	0x780500  	MOV	W0, W10
0x0DBC	0x07FCCE  	RCALL	_TrimValue
0x0DBE	0x78054F  	POP	W10
;helperfunctions.mpas,224 :: 		Result := Temp + '.';
0x0DC0	0x90000E  	MOV	[W14+0], W0
0x0DC2	0x4700E2  	ADD	W14, #2, W1
0x0DC4	0x07FEEA  	RCALL	___CS2S
0x0DC6	0xB3C2E2  	MOV.B	#46, W2
0x0DC8	0x785802  	MOV.B	W2, [W0++]
0x0DCA	0xEF2004  	CLR	W2
0x0DCC	0x785802  	MOV.B	W2, [W0++]
;helperfunctions.mpas,226 :: 		ByteToStr(MAC[1], Temp);
0x0DCE	0x4500E1  	ADD	W10, #1, W1
0x0DD0	0x90101E  	MOV	[W14+34], W0
0x0DD2	0x781F8A  	PUSH	W10
0x0DD4	0x780580  	MOV	W0, W11
0x0DD6	0x784511  	MOV.B	[W1], W10
0x0DD8	0x07FD23  	RCALL	_ByteToStr
;helperfunctions.mpas,227 :: 		TrimValue(@Temp);
0x0DDA	0x470062  	ADD	W14, #2, W0
0x0DDC	0x780500  	MOV	W0, W10
0x0DDE	0x07FCBD  	RCALL	_TrimValue
0x0DE0	0x78054F  	POP	W10
;helperfunctions.mpas,228 :: 		Result := Result + Temp + '.';
0x0DE2	0x470069  	ADD	W14, #9, W0
0x0DE4	0x90008E  	MOV	[W14+0], W1
0x0DE6	0x07FED9  	RCALL	___CS2S
0x0DE8	0x4700E2  	ADD	W14, #2, W1
0x0DEA	0x07FED7  	RCALL	___CS2S
0x0DEC	0xB3C2E2  	MOV.B	#46, W2
0x0DEE	0x785802  	MOV.B	W2, [W0++]
0x0DF0	0xEF2004  	CLR	W2
0x0DF2	0x785802  	MOV.B	W2, [W0++]
0x0DF4	0x90000E  	MOV	[W14+0], W0
0x0DF6	0x4700E9  	ADD	W14, #9, W1
0x0DF8	0x07FED0  	RCALL	___CS2S
0x0DFA	0x780080  	MOV	W0, W1
0x0DFC	0xEF2000  	CLR	W0
0x0DFE	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,230 :: 		ByteToStr(MAC[2], Temp);
0x0E00	0x4500E2  	ADD	W10, #2, W1
0x0E02	0x90101E  	MOV	[W14+34], W0
0x0E04	0x781F8A  	PUSH	W10
0x0E06	0x780580  	MOV	W0, W11
0x0E08	0x784511  	MOV.B	[W1], W10
0x0E0A	0x07FD0A  	RCALL	_ByteToStr
;helperfunctions.mpas,231 :: 		TrimValue(@Temp);
0x0E0C	0x470062  	ADD	W14, #2, W0
0x0E0E	0x780500  	MOV	W0, W10
0x0E10	0x07FCA4  	RCALL	_TrimValue
0x0E12	0x78054F  	POP	W10
;helperfunctions.mpas,232 :: 		Result := Result + Temp + '.';
0x0E14	0x470069  	ADD	W14, #9, W0
0x0E16	0x90008E  	MOV	[W14+0], W1
0x0E18	0x07FEC0  	RCALL	___CS2S
0x0E1A	0x4700E2  	ADD	W14, #2, W1
0x0E1C	0x07FEBE  	RCALL	___CS2S
0x0E1E	0xB3C2E2  	MOV.B	#46, W2
0x0E20	0x785802  	MOV.B	W2, [W0++]
0x0E22	0xEF2004  	CLR	W2
0x0E24	0x785802  	MOV.B	W2, [W0++]
0x0E26	0x90000E  	MOV	[W14+0], W0
0x0E28	0x4700E9  	ADD	W14, #9, W1
0x0E2A	0x07FEB7  	RCALL	___CS2S
0x0E2C	0x780080  	MOV	W0, W1
0x0E2E	0xEF2000  	CLR	W0
0x0E30	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,234 :: 		ByteToStr(MAC[3], Temp);
0x0E32	0x4500E3  	ADD	W10, #3, W1
0x0E34	0x90101E  	MOV	[W14+34], W0
0x0E36	0x781F8A  	PUSH	W10
0x0E38	0x780580  	MOV	W0, W11
0x0E3A	0x784511  	MOV.B	[W1], W10
0x0E3C	0x07FCF1  	RCALL	_ByteToStr
;helperfunctions.mpas,235 :: 		TrimValue(@Temp);
0x0E3E	0x470062  	ADD	W14, #2, W0
0x0E40	0x780500  	MOV	W0, W10
0x0E42	0x07FC8B  	RCALL	_TrimValue
0x0E44	0x78054F  	POP	W10
;helperfunctions.mpas,236 :: 		Result := Result + Temp + '.';
0x0E46	0x470069  	ADD	W14, #9, W0
0x0E48	0x90008E  	MOV	[W14+0], W1
0x0E4A	0x07FEA7  	RCALL	___CS2S
0x0E4C	0x4700E2  	ADD	W14, #2, W1
0x0E4E	0x07FEA5  	RCALL	___CS2S
0x0E50	0xB3C2E2  	MOV.B	#46, W2
0x0E52	0x785802  	MOV.B	W2, [W0++]
0x0E54	0xEF2004  	CLR	W2
0x0E56	0x785802  	MOV.B	W2, [W0++]
0x0E58	0x90000E  	MOV	[W14+0], W0
0x0E5A	0x4700E9  	ADD	W14, #9, W1
0x0E5C	0x07FE9E  	RCALL	___CS2S
0x0E5E	0x780080  	MOV	W0, W1
0x0E60	0xEF2000  	CLR	W0
0x0E62	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,238 :: 		ByteToStr(MAC[4], Temp);
0x0E64	0x4500E4  	ADD	W10, #4, W1
0x0E66	0x90101E  	MOV	[W14+34], W0
0x0E68	0x781F8A  	PUSH	W10
0x0E6A	0x780580  	MOV	W0, W11
0x0E6C	0x784511  	MOV.B	[W1], W10
0x0E6E	0x07FCD8  	RCALL	_ByteToStr
;helperfunctions.mpas,239 :: 		TrimValue(@Temp);
0x0E70	0x470062  	ADD	W14, #2, W0
0x0E72	0x780500  	MOV	W0, W10
0x0E74	0x07FC72  	RCALL	_TrimValue
0x0E76	0x78054F  	POP	W10
;helperfunctions.mpas,240 :: 		Result := Result + Temp + '.';
0x0E78	0x470069  	ADD	W14, #9, W0
0x0E7A	0x90008E  	MOV	[W14+0], W1
0x0E7C	0x07FE8E  	RCALL	___CS2S
0x0E7E	0x4700E2  	ADD	W14, #2, W1
0x0E80	0x07FE8C  	RCALL	___CS2S
0x0E82	0xB3C2E2  	MOV.B	#46, W2
0x0E84	0x785802  	MOV.B	W2, [W0++]
0x0E86	0xEF2004  	CLR	W2
0x0E88	0x785802  	MOV.B	W2, [W0++]
0x0E8A	0x90000E  	MOV	[W14+0], W0
0x0E8C	0x4700E9  	ADD	W14, #9, W1
0x0E8E	0x07FE85  	RCALL	___CS2S
0x0E90	0x780080  	MOV	W0, W1
0x0E92	0xEF2000  	CLR	W0
0x0E94	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,242 :: 		ByteToStr(MAC[5], Temp);
0x0E96	0x4500E5  	ADD	W10, #5, W1
0x0E98	0x90101E  	MOV	[W14+34], W0
0x0E9A	0x780580  	MOV	W0, W11
0x0E9C	0x784511  	MOV.B	[W1], W10
0x0E9E	0x07FCC0  	RCALL	_ByteToStr
;helperfunctions.mpas,243 :: 		TrimValue(@Temp);
0x0EA0	0x470062  	ADD	W14, #2, W0
0x0EA2	0x780500  	MOV	W0, W10
0x0EA4	0x07FC5A  	RCALL	_TrimValue
;helperfunctions.mpas,245 :: 		Result := Result + Temp + #0;
0x0EA6	0x470069  	ADD	W14, #9, W0
0x0EA8	0x90008E  	MOV	[W14+0], W1
0x0EAA	0x07FE77  	RCALL	___CS2S
0x0EAC	0x4700E2  	ADD	W14, #2, W1
0x0EAE	0x07FE75  	RCALL	___CS2S
0x0EB0	0xB3C002  	MOV.B	#0, W2
0x0EB2	0x785802  	MOV.B	W2, [W0++]
0x0EB4	0xEF2004  	CLR	W2
0x0EB6	0x785802  	MOV.B	W2, [W0++]
0x0EB8	0x90000E  	MOV	[W14+0], W0
0x0EBA	0x4700E9  	ADD	W14, #9, W1
0x0EBC	0x07FE6E  	RCALL	___CS2S
0x0EBE	0x780080  	MOV	W0, W1
0x0EC0	0xEF2000  	CLR	W0
0x0EC2	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,246 :: 		end;
L_end_MACAddressToStr:
0x0EC4	0x7805CF  	POP	W11
0x0EC6	0x78054F  	POP	W10
0x0EC8	0xFA8000  	ULNK
0x0ECA	0x060000  	RETURN
; end of _MACAddressToStr
_ByteToStr:
0x0820	0xFA0000  	LNK	#0
;__Lib_Conversions.mpas,100 :: 		
;__Lib_Conversions.mpas,101 :: 		
0x0822	0x78008B  	MOV	W11, W1
0x0824	0xB3C200  	MOV.B	#32, W0
0x0826	0x785880  	MOV.B	W0, [W1++]
0x0828	0xB3C200  	MOV.B	#32, W0
0x082A	0x785880  	MOV.B	W0, [W1++]
0x082C	0xB3C300  	MOV.B	#48, W0
0x082E	0x785880  	MOV.B	W0, [W1++]
0x0830	0xEF2000  	CLR	W0
0x0832	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,102 :: 		
; ptr start address is: 6 (W3)
0x0834	0x4581E2  	ADD	W11, #2, W3
; ptr end address is: 6 (W3)
;__Lib_Conversions.mpas,103 :: 		
L__ByteToStr8:
; ptr start address is: 6 (W3)
0x0836	0xE15460  	CP.B	W10, #0
0x0838	0x320010  	BRA Z	L__ByteToStr9
L__ByteToStr208:
;__Lib_Conversions.mpas,105 :: 		
0x083A	0xFB800A  	ZE	W10, W0
0x083C	0x2000A2  	MOV	#10, W2
0x083E	0x090011  	REPEAT	#17
0x0840	0xD88002  	DIV.U	W0, W2
0x0842	0x780001  	MOV	W1, W0
0x0844	0xFB8080  	ZE	W0, W1
0x0846	0x200300  	MOV	#48, W0
0x0848	0x408000  	ADD	W1, W0, W0
0x084A	0x784980  	MOV.B	W0, [W3]
;__Lib_Conversions.mpas,106 :: 		
0x084C	0xFB800A  	ZE	W10, W0
0x084E	0x2000A2  	MOV	#10, W2
0x0850	0x090011  	REPEAT	#17
0x0852	0xD88002  	DIV.U	W0, W2
0x0854	0x784500  	MOV.B	W0, W10
;__Lib_Conversions.mpas,107 :: 		
0x0856	0xED2006  	DEC	W3
;__Lib_Conversions.mpas,108 :: 		
; ptr end address is: 6 (W3)
0x0858	0x37FFEE  	BRA	L__ByteToStr8
L__ByteToStr9:
;__Lib_Conversions.mpas,109 :: 		
L_end_ByteToStr:
0x085A	0xFA8000  	ULNK
0x085C	0x060000  	RETURN
; end of _ByteToStr
_TrimValue:
;helperfunctions.mpas,185 :: 		begin
;helperfunctions.mpas,186 :: 		while (ValueStr^[0] = ' ') and (ValueStr^[0] <> #0) do
L__TrimValue57:
0x075A	0x78411A  	MOV.B	[W10], W2
0x075C	0xB3C200  	MOV.B	#32, W0
0x075E	0xE11400  	CP.B	W2, W0
0x0760	0xEF2002  	CLR	W1
0x0762	0x3A0001  	BRA NZ	L__TrimValue175
0x0764	0xEEA002  	COM	W1
L__TrimValue175:
0x0766	0xB3C000  	MOV.B	#0, W0
0x0768	0xE11400  	CP.B	W2, W0
0x076A	0xEF2000  	CLR	W0
0x076C	0x320001  	BRA Z	L__TrimValue176
0x076E	0xEEA000  	COM	W0
L__TrimValue176:
0x0770	0x608000  	AND	W1, W0, W0
0x0772	0x320010  	BRA Z	L__TrimValue58
L__TrimValue177:
;helperfunctions.mpas,188 :: 		i := 1;
; i start address is: 4 (W2)
0x0774	0x200012  	MOV	#1, W2
; i end address is: 4 (W2)
;helperfunctions.mpas,189 :: 		while ValueStr^[i] <> $0 do
L__TrimValue62:
; i start address is: 4 (W2)
0x0776	0x450002  	ADD	W10, W2, W0
0x0778	0x784010  	MOV.B	[W0], W0
0x077A	0xE10460  	CP.B	W0, #0
0x077C	0x320006  	BRA Z	L__TrimValue63
L__TrimValue178:
;helperfunctions.mpas,191 :: 		ValueStr^[i-1] := ValueStr^[i];
0x077E	0x510061  	SUB	W2, #1, W0
0x0780	0x450080  	ADD	W10, W0, W1
0x0782	0x450002  	ADD	W10, W2, W0
0x0784	0x784890  	MOV.B	[W0], [W1]
;helperfunctions.mpas,192 :: 		Inc(i)
0x0786	0xEC2004  	INC	W2
;helperfunctions.mpas,193 :: 		end;
0x0788	0x37FFF6  	BRA	L__TrimValue62
L__TrimValue63:
;helperfunctions.mpas,194 :: 		ValueStr^[i-1] := #0;
0x078A	0x510061  	SUB	W2, #1, W0
; i end address is: 4 (W2)
0x078C	0x450080  	ADD	W10, W0, W1
0x078E	0xB3C000  	MOV.B	#0, W0
0x0790	0x784880  	MOV.B	W0, [W1]
;helperfunctions.mpas,195 :: 		end;
0x0792	0x37FFE3  	BRA	L__TrimValue57
L__TrimValue58:
;helperfunctions.mpas,196 :: 		end;
L_end_TrimValue:
0x0794	0x060000  	RETURN
; end of _TrimValue
_IPAddressToStr:
0x0CD8	0xFA0022  	LNK	#34
;helperfunctions.mpas,201 :: 		begin
;helperfunctions.mpas,202 :: 		Result := '';
0x0CDA	0x781F8A  	PUSH	W10
0x0CDC	0x781F8B  	PUSH	W11
0x0CDE	0x90008E  	MOV	[W14+0], W1
0x0CE0	0xEF2000  	CLR	W0
0x0CE2	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,203 :: 		ByteToStr(IP[0], Temp);
0x0CE4	0x470062  	ADD	W14, #2, W0
0x0CE6	0x981700  	MOV	W0, [W14+32]
0x0CE8	0x781F8A  	PUSH	W10
0x0CEA	0x780580  	MOV	W0, W11
0x0CEC	0x78451A  	MOV.B	[W10], W10
0x0CEE	0x07FD98  	RCALL	_ByteToStr
;helperfunctions.mpas,204 :: 		TrimValue(@Temp);
0x0CF0	0x470062  	ADD	W14, #2, W0
0x0CF2	0x780500  	MOV	W0, W10
0x0CF4	0x07FD32  	RCALL	_TrimValue
0x0CF6	0x78054F  	POP	W10
;helperfunctions.mpas,205 :: 		Result := Temp + '.';
0x0CF8	0x90000E  	MOV	[W14+0], W0
0x0CFA	0x4700E2  	ADD	W14, #2, W1
0x0CFC	0x07FF4E  	RCALL	___CS2S
0x0CFE	0xB3C2E2  	MOV.B	#46, W2
0x0D00	0x785802  	MOV.B	W2, [W0++]
0x0D02	0xEF2004  	CLR	W2
0x0D04	0x785802  	MOV.B	W2, [W0++]
;helperfunctions.mpas,206 :: 		ByteToStr(IP[1], Temp);
0x0D06	0x4500E1  	ADD	W10, #1, W1
0x0D08	0x90100E  	MOV	[W14+32], W0
0x0D0A	0x781F8A  	PUSH	W10
0x0D0C	0x780580  	MOV	W0, W11
0x0D0E	0x784511  	MOV.B	[W1], W10
0x0D10	0x07FD87  	RCALL	_ByteToStr
;helperfunctions.mpas,207 :: 		TrimValue(@Temp);
0x0D12	0x470062  	ADD	W14, #2, W0
0x0D14	0x780500  	MOV	W0, W10
0x0D16	0x07FD21  	RCALL	_TrimValue
0x0D18	0x78054F  	POP	W10
;helperfunctions.mpas,208 :: 		Result := Result + Temp + '.';
0x0D1A	0x470069  	ADD	W14, #9, W0
0x0D1C	0x90008E  	MOV	[W14+0], W1
0x0D1E	0x07FF3D  	RCALL	___CS2S
0x0D20	0x4700E2  	ADD	W14, #2, W1
0x0D22	0x07FF3B  	RCALL	___CS2S
0x0D24	0xB3C2E2  	MOV.B	#46, W2
0x0D26	0x785802  	MOV.B	W2, [W0++]
0x0D28	0xEF2004  	CLR	W2
0x0D2A	0x785802  	MOV.B	W2, [W0++]
0x0D2C	0x90000E  	MOV	[W14+0], W0
0x0D2E	0x4700E9  	ADD	W14, #9, W1
0x0D30	0x07FF34  	RCALL	___CS2S
0x0D32	0x780080  	MOV	W0, W1
0x0D34	0xEF2000  	CLR	W0
0x0D36	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,209 :: 		ByteToStr(IP[2], Temp);
0x0D38	0x4500E2  	ADD	W10, #2, W1
0x0D3A	0x90100E  	MOV	[W14+32], W0
0x0D3C	0x781F8A  	PUSH	W10
0x0D3E	0x780580  	MOV	W0, W11
0x0D40	0x784511  	MOV.B	[W1], W10
0x0D42	0x07FD6E  	RCALL	_ByteToStr
;helperfunctions.mpas,210 :: 		TrimValue(@Temp);
0x0D44	0x470062  	ADD	W14, #2, W0
0x0D46	0x780500  	MOV	W0, W10
0x0D48	0x07FD08  	RCALL	_TrimValue
0x0D4A	0x78054F  	POP	W10
;helperfunctions.mpas,211 :: 		Result := Result + Temp + '.';
0x0D4C	0x470069  	ADD	W14, #9, W0
0x0D4E	0x90008E  	MOV	[W14+0], W1
0x0D50	0x07FF24  	RCALL	___CS2S
0x0D52	0x4700E2  	ADD	W14, #2, W1
0x0D54	0x07FF22  	RCALL	___CS2S
0x0D56	0xB3C2E2  	MOV.B	#46, W2
0x0D58	0x785802  	MOV.B	W2, [W0++]
0x0D5A	0xEF2004  	CLR	W2
0x0D5C	0x785802  	MOV.B	W2, [W0++]
0x0D5E	0x90000E  	MOV	[W14+0], W0
0x0D60	0x4700E9  	ADD	W14, #9, W1
0x0D62	0x07FF1B  	RCALL	___CS2S
0x0D64	0x780080  	MOV	W0, W1
0x0D66	0xEF2000  	CLR	W0
0x0D68	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,212 :: 		ByteToStr(IP[3], Temp);
0x0D6A	0x4500E3  	ADD	W10, #3, W1
0x0D6C	0x90100E  	MOV	[W14+32], W0
0x0D6E	0x780580  	MOV	W0, W11
0x0D70	0x784511  	MOV.B	[W1], W10
0x0D72	0x07FD56  	RCALL	_ByteToStr
;helperfunctions.mpas,213 :: 		TrimValue(@Temp);
0x0D74	0x470062  	ADD	W14, #2, W0
0x0D76	0x780500  	MOV	W0, W10
0x0D78	0x07FCF0  	RCALL	_TrimValue
;helperfunctions.mpas,214 :: 		Result := Result + Temp + #0;
0x0D7A	0x470069  	ADD	W14, #9, W0
0x0D7C	0x90008E  	MOV	[W14+0], W1
0x0D7E	0x07FF0D  	RCALL	___CS2S
0x0D80	0x4700E2  	ADD	W14, #2, W1
0x0D82	0x07FF0B  	RCALL	___CS2S
0x0D84	0xB3C002  	MOV.B	#0, W2
0x0D86	0x785802  	MOV.B	W2, [W0++]
0x0D88	0xEF2004  	CLR	W2
0x0D8A	0x785802  	MOV.B	W2, [W0++]
0x0D8C	0x90000E  	MOV	[W14+0], W0
0x0D8E	0x4700E9  	ADD	W14, #9, W1
0x0D90	0x07FF04  	RCALL	___CS2S
0x0D92	0x780080  	MOV	W0, W1
0x0D94	0xEF2000  	CLR	W0
0x0D96	0x785880  	MOV.B	W0, [W1++]
;helperfunctions.mpas,215 :: 		end;
L_end_IPAddressToStr:
0x0D98	0x7805CF  	POP	W11
0x0D9A	0x78054F  	POP	W10
0x0D9C	0xFA8000  	ULNK
0x0D9E	0x060000  	RETURN
; end of _IPAddressToStr
_Eth_Ntp_ReceiveHandler:
0x1980	0xFA0050  	LNK	#80
;protocol_ntp.mpas,125 :: 		begin
;protocol_ntp.mpas,126 :: 		if (Slot^.DataLen = 48) then
0x1982	0x781F8A  	PUSH	W10
0x1984	0x781F8B  	PUSH	W11
0x1986	0x781F8C  	PUSH	W12
0x1988	0x450078  	ADD	W10, #24, W0
0x198A	0x780090  	MOV	[W0], W1
0x198C	0x200300  	MOV	#48, W0
0x198E	0xE10800  	CP	W1, W0
0x1990	0x3A009E  	BRA NZ	L__Eth_Ntp_ReceiveHandler14
L__Eth_Ntp_ReceiveHandler114:
;protocol_ntp.mpas,128 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('NTP Reply Handler: ' + CRLF);{$ENDIF}
0x1992	0x4700F8  	ADD	W14, #24, W1
0x1994	0xB3C4E0  	MOV.B	#78, W0
0x1996	0x785880  	MOV.B	W0, [W1++]
0x1998	0xB3C540  	MOV.B	#84, W0
0x199A	0x785880  	MOV.B	W0, [W1++]
0x199C	0xB3C500  	MOV.B	#80, W0
0x199E	0x785880  	MOV.B	W0, [W1++]
0x19A0	0xB3C200  	MOV.B	#32, W0
0x19A2	0x785880  	MOV.B	W0, [W1++]
0x19A4	0xB3C520  	MOV.B	#82, W0
0x19A6	0x785880  	MOV.B	W0, [W1++]
0x19A8	0xB3C650  	MOV.B	#101, W0
0x19AA	0x785880  	MOV.B	W0, [W1++]
0x19AC	0xB3C700  	MOV.B	#112, W0
0x19AE	0x785880  	MOV.B	W0, [W1++]
0x19B0	0xB3C6C0  	MOV.B	#108, W0
0x19B2	0x785880  	MOV.B	W0, [W1++]
0x19B4	0xB3C790  	MOV.B	#121, W0
0x19B6	0x785880  	MOV.B	W0, [W1++]
0x19B8	0xB3C200  	MOV.B	#32, W0
0x19BA	0x785880  	MOV.B	W0, [W1++]
0x19BC	0xB3C480  	MOV.B	#72, W0
0x19BE	0x785880  	MOV.B	W0, [W1++]
0x19C0	0xB3C610  	MOV.B	#97, W0
0x19C2	0x785880  	MOV.B	W0, [W1++]
0x19C4	0xB3C6E0  	MOV.B	#110, W0
0x19C6	0x785880  	MOV.B	W0, [W1++]
0x19C8	0xB3C640  	MOV.B	#100, W0
0x19CA	0x785880  	MOV.B	W0, [W1++]
0x19CC	0xB3C6C0  	MOV.B	#108, W0
0x19CE	0x785880  	MOV.B	W0, [W1++]
0x19D0	0xB3C650  	MOV.B	#101, W0
0x19D2	0x785880  	MOV.B	W0, [W1++]
0x19D4	0xB3C720  	MOV.B	#114, W0
0x19D6	0x785880  	MOV.B	W0, [W1++]
0x19D8	0xB3C3A0  	MOV.B	#58, W0
0x19DA	0x785880  	MOV.B	W0, [W1++]
0x19DC	0xB3C200  	MOV.B	#32, W0
0x19DE	0x785880  	MOV.B	W0, [W1++]
0x19E0	0xB3C0D0  	MOV.B	#13, W0
0x19E2	0x785880  	MOV.B	W0, [W1++]
0x19E4	0xB3C0A0  	MOV.B	#10, W0
0x19E6	0x785880  	MOV.B	W0, [W1++]
0x19E8	0xB3C000  	MOV.B	#0, W0
0x19EA	0x785880  	MOV.B	W0, [W1++]
0x19EC	0x470078  	ADD	W14, #24, W0
0x19EE	0x780500  	MOV	W0, W10
0x19F0	0x071B40  	RCALL	_UART1_Write_Text
;protocol_ntp.mpas,129 :: 		CopyEthMemToRam_Inv(AddrPacket+82, @buft, 4);
0x19F2	0x200521  	MOV	#82, W1
0x19F4	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x19F6	0x408090  	ADD	W1, [W0], W1
0x19F8	0x470060  	ADD	W14, #0, W0
0x19FA	0x20004C  	MOV	#4, W12
0x19FC	0x780580  	MOV	W0, W11
0x19FE	0x780501  	MOV	W1, W10
0x1A00	0x07FB58  	RCALL	_CopyEthMemToRam_Inv
;protocol_ntp.mpas,130 :: 		Eth_EnableTimer_1s(False);
0x1A02	0xEF2014  	CLR	W10
0x1A04	0x0700FB  	RCALL	_Eth_EnableTimer_1s
;protocol_ntp.mpas,131 :: 		{$IFDEF DEBUG_STRING} NTP2String(NTP_Time, TimeStr); UART1_Write_Text('NTP Time: ' + TimeStr + CRLF);{$ENDIF}
0x1A06	0x470064  	ADD	W14, #4, W0
0x1A08	0x982770  	MOV	W0, [W14+78]
0x1A0A	0x780600  	MOV	W0, W12
0x1A0C	0x80836A  	MOV	_NTP_Time, W10
0x1A0E	0x80837B  	MOV	_NTP_Time+2, W11
0x1A10	0x07FA5D  	RCALL	_NTP2String
0x1A12	0x2002E0  	MOV	#46, W0
0x1A14	0x470000  	ADD	W14, W0, W0
0x1A16	0xB3C4E2  	MOV.B	#78, W2
0x1A18	0x785802  	MOV.B	W2, [W0++]
0x1A1A	0xB3C542  	MOV.B	#84, W2
0x1A1C	0x785802  	MOV.B	W2, [W0++]
0x1A1E	0xB3C502  	MOV.B	#80, W2
0x1A20	0x785802  	MOV.B	W2, [W0++]
0x1A22	0xB3C202  	MOV.B	#32, W2
0x1A24	0x785802  	MOV.B	W2, [W0++]
0x1A26	0xB3C542  	MOV.B	#84, W2
0x1A28	0x785802  	MOV.B	W2, [W0++]
0x1A2A	0xB3C692  	MOV.B	#105, W2
0x1A2C	0x785802  	MOV.B	W2, [W0++]
0x1A2E	0xB3C6D2  	MOV.B	#109, W2
0x1A30	0x785802  	MOV.B	W2, [W0++]
0x1A32	0xB3C652  	MOV.B	#101, W2
0x1A34	0x785802  	MOV.B	W2, [W0++]
0x1A36	0xB3C3A2  	MOV.B	#58, W2
0x1A38	0x785802  	MOV.B	W2, [W0++]
0x1A3A	0xB3C202  	MOV.B	#32, W2
0x1A3C	0x785802  	MOV.B	W2, [W0++]
0x1A3E	0x90217E  	MOV	[W14+78], W2
0x1A40	0x780082  	MOV	W2, W1
0x1A42	0x07F8AB  	RCALL	___CS2S
0x1A44	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1A46	0x202012  	MOV	#513, W2
0x1A48	0x880192  	MOV	W2, DSRPAG
0x1A4A	0x000000  	NOP
0x1A4C	0x07F8A6  	RCALL	___CS2S
0x1A4E	0x780080  	MOV	W0, W1
0x1A50	0xEF2000  	CLR	W0
0x1A52	0x785880  	MOV.B	W0, [W1++]
0x1A54	0x2002E0  	MOV	#46, W0
0x1A56	0x470000  	ADD	W14, W0, W0
0x1A58	0x780500  	MOV	W0, W10
0x1A5A	0x071B0B  	RCALL	_UART1_Write_Text
;protocol_ntp.mpas,132 :: 		NTP_Time := buft + Offset_Time;
0x1A5C	0x90018E  	MOV	[W14+0], W3
0x1A5E	0x90021E  	MOV	[W14+2], W4
0x1A60	0x210700  	MOV	#lo_addr(_Offset_Time), W0
0x1A62	0x4180B0  	ADD	W3, [W0++], W1
0x1A64	0x4A0120  	ADDC	W4, [W0--], W2
0x1A66	0x888361  	MOV	W1, _NTP_Time
0x1A68	0x888372  	MOV	W2, _NTP_Time+2
;protocol_ntp.mpas,133 :: 		{$IFDEF DEBUG_STRING} NTP2String(NTP_Time, TimeStr); UART1_Write_Text('NTP Time: ' + TimeStr + CRLF);{$ENDIF}
0x1A6A	0x470064  	ADD	W14, #4, W0
0x1A6C	0x780600  	MOV	W0, W12
0x1A6E	0x780501  	MOV	W1, W10
0x1A70	0x780582  	MOV	W2, W11
0x1A72	0x07FA2C  	RCALL	_NTP2String
0x1A74	0x2002E0  	MOV	#46, W0
0x1A76	0x470000  	ADD	W14, W0, W0
0x1A78	0xB3C4E2  	MOV.B	#78, W2
0x1A7A	0x785802  	MOV.B	W2, [W0++]
0x1A7C	0xB3C542  	MOV.B	#84, W2
0x1A7E	0x785802  	MOV.B	W2, [W0++]
0x1A80	0xB3C502  	MOV.B	#80, W2
0x1A82	0x785802  	MOV.B	W2, [W0++]
0x1A84	0xB3C202  	MOV.B	#32, W2
0x1A86	0x785802  	MOV.B	W2, [W0++]
0x1A88	0xB3C542  	MOV.B	#84, W2
0x1A8A	0x785802  	MOV.B	W2, [W0++]
0x1A8C	0xB3C692  	MOV.B	#105, W2
0x1A8E	0x785802  	MOV.B	W2, [W0++]
0x1A90	0xB3C6D2  	MOV.B	#109, W2
0x1A92	0x785802  	MOV.B	W2, [W0++]
0x1A94	0xB3C652  	MOV.B	#101, W2
0x1A96	0x785802  	MOV.B	W2, [W0++]
0x1A98	0xB3C3A2  	MOV.B	#58, W2
0x1A9A	0x785802  	MOV.B	W2, [W0++]
0x1A9C	0xB3C202  	MOV.B	#32, W2
0x1A9E	0x785802  	MOV.B	W2, [W0++]
0x1AA0	0x90217E  	MOV	[W14+78], W2
0x1AA2	0x780082  	MOV	W2, W1
0x1AA4	0x07F87A  	RCALL	___CS2S
0x1AA6	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1AA8	0x202012  	MOV	#513, W2
0x1AAA	0x880192  	MOV	W2, DSRPAG
0x1AAC	0x000000  	NOP
0x1AAE	0x07F875  	RCALL	___CS2S
0x1AB0	0x780080  	MOV	W0, W1
0x1AB2	0xEF2000  	CLR	W0
0x1AB4	0x785880  	MOV.B	W0, [W1++]
0x1AB6	0x2002E0  	MOV	#46, W0
0x1AB8	0x470000  	ADD	W14, W0, W0
0x1ABA	0x780500  	MOV	W0, W10
0x1ABC	0x071ADA  	RCALL	_UART1_Write_Text
;protocol_ntp.mpas,134 :: 		Eth_EnableTimer_1s(True);
0x1ABE	0x2FFFFA  	MOV	#65535, W10
0x1AC0	0x07009D  	RCALL	_Eth_EnableTimer_1s
;protocol_ntp.mpas,135 :: 		NTP_Sync := True;
0x1AC2	0x2FFFF0  	MOV	#65535, W0
0x1AC4	0x8883A0  	MOV	W0, _NTP_Sync
;protocol_ntp.mpas,136 :: 		NTP_Sec := 0;
0x1AC6	0xEF2000  	CLR	W0
0x1AC8	0x888300  	MOV	W0, _NTP_Sec
;protocol_ntp.mpas,137 :: 		NTP_ReSync := 0;
0x1ACA	0xEF2000  	CLR	W0
0x1ACC	0x888180  	MOV	W0, _NTP_ReSync
;protocol_ntp.mpas,138 :: 		end;
L__Eth_Ntp_ReceiveHandler14:
;protocol_ntp.mpas,139 :: 		Eth_CloseUdpPort(NTP_PORT);
0x1ACE	0x2007BA  	MOV	#123, W10
0x1AD0	0x07F8F1  	RCALL	_Eth_CloseUdpPort
;protocol_ntp.mpas,141 :: 		end;
L_end_Eth_Ntp_ReceiveHandler:
0x1AD2	0x78064F  	POP	W12
0x1AD4	0x7805CF  	POP	W11
0x1AD6	0x78054F  	POP	W10
0x1AD8	0xFA8000  	ULNK
0x1ADA	0x060000  	RETURN
; end of _Eth_Ntp_ReceiveHandler
_CopyEthMemToRam_Inv:
;lib1_enc600_V3_5_b.mpas,366 :: 		begin
;lib1_enc600_V3_5_b.mpas,367 :: 		if length_w = 0 then Exit;
0x10B2	0x781F8A  	PUSH	W10
0x10B4	0xE16060  	CP	W12, #0
0x10B6	0x3A0001  	BRA NZ	L__CopyEthMemToRam_Inv103
L__CopyEthMemToRam_Inv317:
0x10B8	0x370017  	BRA	L_end__CopyEthMemToRam_Inv
L__CopyEthMemToRam_Inv103:
;lib1_enc600_V3_5_b.mpas,368 :: 		Eth_WriteReg(EGPRDPT_, start_eth_address);
0x10BA	0x781F8B  	PUSH	W11
0x10BC	0x78058A  	MOV	W10, W11
0x10BE	0xB3C86A  	MOV.B	#134, W10
0x10C0	0x070511  	RCALL	_Eth_WriteReg
0x10C2	0x7805CF  	POP	W11
;lib1_enc600_V3_5_b.mpas,370 :: 		Eth_Select;
0x10C4	0x07FB68  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,371 :: 		Spi_Read_(RGPDATA_);
0x10C6	0xB3C28A  	MOV.B	#40, W10
0x10C8	0x07FB23  	RCALL	_Spi_Read_
;lib1_enc600_V3_5_b.mpas,373 :: 		pt := dest_ram_address + length_w - 1;
0x10CA	0x45800C  	ADD	W11, W12, W0
; pt start address is: 6 (W3)
0x10CC	0x5001E1  	SUB	W0, #1, W3
;lib1_enc600_V3_5_b.mpas,374 :: 		i := 0;
; i start address is: 4 (W2)
0x10CE	0xEF2004  	CLR	W2
; pt end address is: 6 (W3)
; i end address is: 4 (W2)
;lib1_enc600_V3_5_b.mpas,375 :: 		while i < length_w do
L__CopyEthMemToRam_Inv106:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x10D0	0xE1100C  	CP	W2, W12
0x10D2	0x310009  	BRA GEU	L__CopyEthMemToRam_Inv107
L__CopyEthMemToRam_Inv318:
;lib1_enc600_V3_5_b.mpas,377 :: 		pt^ := Spi_Read_(0);
0x10D4	0x781F8A  	PUSH	W10
0x10D6	0xEF2014  	CLR	W10
0x10D8	0x07FB1B  	RCALL	_Spi_Read_
0x10DA	0x78054F  	POP	W10
0x10DC	0x784980  	MOV.B	W0, [W3]
;lib1_enc600_V3_5_b.mpas,378 :: 		pt := pt - 1;
; pt start address is: 0 (W0)
0x10DE	0x518061  	SUB	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,379 :: 		inc(i);
0x10E0	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,380 :: 		end;
0x10E2	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x10E4	0x37FFF5  	BRA	L__CopyEthMemToRam_Inv106
L__CopyEthMemToRam_Inv107:
;lib1_enc600_V3_5_b.mpas,382 :: 		Eth_UnSelect;
0x10E6	0x0719C3  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,383 :: 		end;
L_end__CopyEthMemToRam_Inv:
L_end_CopyEthMemToRam_Inv:
0x10E8	0x78054F  	POP	W10
0x10EA	0x060000  	RETURN
; end of _CopyEthMemToRam_Inv
_NTP2String:
0x0ECC	0xFA0012  	LNK	#18
;protocol_ntp.mpas,324 :: 		begin
;protocol_ntp.mpas,325 :: 		buf := buf - 2208988800;
0x0ECE	0x781F8A  	PUSH	W10
0x0ED0	0x781F8B  	PUSH	W11
0x0ED2	0x27E800  	MOV	#32384, W0
0x0ED4	0x283AA1  	MOV	#33706, W1
0x0ED6	0x550000  	SUB	W10, W0, W0
0x0ED8	0x5D8081  	SUBB	W11, W1, W1
0x0EDA	0xBE0500  	MOV.D	W0, W10
;protocol_ntp.mpas,326 :: 		TTime_Sec := dword(buf Mod 60);
0x0EDC	0x781F8C  	PUSH	W12
0x0EDE	0xBE9F8A  	PUSH.D	W10
0x0EE0	0x2003C2  	MOV	#60, W2
0x0EE2	0x200003  	MOV	#0, W3
0x0EE4	0xEB0200  	CLR	W4
0x0EE6	0x070DBF  	RCALL	__Modulus_32x32
0x0EE8	0xBE054F  	POP.D	W10
0x0EEA	0x984F20  	MOV.B	W0, [W14+10]
;protocol_ntp.mpas,327 :: 		buf := buf div 60;
0x0EEC	0xBE9F8A  	PUSH.D	W10
0x0EEE	0x2003C2  	MOV	#60, W2
0x0EF0	0x200003  	MOV	#0, W3
0x0EF2	0xBE000A  	MOV.D	W10, W0
0x0EF4	0xEB0200  	CLR	W4
0x0EF6	0x0717E1  	RCALL	__Divide_32x32
0x0EF8	0xBE054F  	POP.D	W10
0x0EFA	0xBE0500  	MOV.D	W0, W10
;protocol_ntp.mpas,328 :: 		TTime_Min := dword(buf Mod 60);
0x0EFC	0xBE9F8A  	PUSH.D	W10
0x0EFE	0x2003C2  	MOV	#60, W2
0x0F00	0x200003  	MOV	#0, W3
0x0F02	0xEB0200  	CLR	W4
0x0F04	0x070DB0  	RCALL	__Modulus_32x32
0x0F06	0xBE054F  	POP.D	W10
0x0F08	0x984F30  	MOV.B	W0, [W14+11]
;protocol_ntp.mpas,329 :: 		buf := buf div 60;
0x0F0A	0xBE9F8A  	PUSH.D	W10
0x0F0C	0x2003C2  	MOV	#60, W2
0x0F0E	0x200003  	MOV	#0, W3
0x0F10	0xBE000A  	MOV.D	W10, W0
0x0F12	0xEB0200  	CLR	W4
0x0F14	0x0717D2  	RCALL	__Divide_32x32
0x0F16	0xBE054F  	POP.D	W10
0x0F18	0xBE0500  	MOV.D	W0, W10
;protocol_ntp.mpas,330 :: 		TTime_Hour := dword(buf Mod 24);
0x0F1A	0xBE9F8A  	PUSH.D	W10
0x0F1C	0x200182  	MOV	#24, W2
0x0F1E	0x200003  	MOV	#0, W3
0x0F20	0xEB0200  	CLR	W4
0x0F22	0x070DA1  	RCALL	__Modulus_32x32
0x0F24	0xBE054F  	POP.D	W10
0x0F26	0x984F40  	MOV.B	W0, [W14+12]
;protocol_ntp.mpas,331 :: 		buf := buf div 24;
0x0F28	0xBE9F8A  	PUSH.D	W10
0x0F2A	0x200182  	MOV	#24, W2
0x0F2C	0x200003  	MOV	#0, W3
0x0F2E	0xBE000A  	MOV.D	W10, W0
0x0F30	0xEB0200  	CLR	W4
0x0F32	0x0717C3  	RCALL	__Divide_32x32
0x0F34	0xBE054F  	POP.D	W10
0x0F36	0x78064F  	POP	W12
0x0F38	0xBE0500  	MOV.D	W0, W10
;protocol_ntp.mpas,332 :: 		buf_d := Word(buf);
; buf_d start address is: 6 (W3)
0x0F3A	0x78018A  	MOV	W10, W3
;protocol_ntp.mpas,333 :: 		TTime_Year := (buf_d div 1461)*4 + 1970;
0x0F3C	0x205B52  	MOV	#1461, W2
0x0F3E	0x090011  	REPEAT	#17
0x0F40	0xD88502  	DIV.U	W10, W2
0x0F42	0x780080  	MOV	W0, W1
0x0F44	0x200020  	MOV	#2, W0
0x0F46	0xDD0900  	SL	W1, W0, W2
0x0F48	0x207B21  	MOV	#1970, W1
0x0F4A	0x47006E  	ADD	W14, #14, W0
0x0F4C	0x410801  	ADD	W2, W1, [W0]
;protocol_ntp.mpas,334 :: 		buf_d := buf_d Mod 1461;
0x0F4E	0x205B52  	MOV	#1461, W2
0x0F50	0x090011  	REPEAT	#17
0x0F52	0xD88182  	DIV.U	W3, W2
0x0F54	0x780001  	MOV	W1, W0
; buf_d end address is: 6 (W3)
; buf_d start address is: 4 (W2)
0x0F56	0x780100  	MOV	W0, W2
; buf_d end address is: 4 (W2)
0x0F58	0x780082  	MOV	W2, W1
;protocol_ntp.mpas,335 :: 		While true do
L__NTP2String86:
;protocol_ntp.mpas,337 :: 		TempDay := 365;
; buf_d start address is: 2 (W1)
0x0F5A	0x2016D0  	MOV	#365, W0
0x0F5C	0x980700  	MOV	W0, [W14+0]
;protocol_ntp.mpas,338 :: 		If (TTime_Year And $03) = 0 Then TempDay := 366;
0x0F5E	0x90007E  	MOV	[W14+14], W0
0x0F60	0x600063  	AND	W0, #3, W0
0x0F62	0xE10060  	CP	W0, #0
0x0F64	0x3A0002  	BRA NZ	L__NTP2String91
L__NTP2String142:
0x0F66	0x2016E0  	MOV	#366, W0
0x0F68	0x980700  	MOV	W0, [W14+0]
L__NTP2String91:
;protocol_ntp.mpas,339 :: 		If TempDay > buf_d Then break;
0x0F6A	0x470060  	ADD	W14, #0, W0
0x0F6C	0xE10810  	CP	W1, [W0]
0x0F6E	0x310001  	BRA GEU	L__NTP2String94
L__NTP2String143:
0x0F70	0x370007  	BRA	L__NTP2String87
L__NTP2String94:
;protocol_ntp.mpas,340 :: 		buf_d := buf_d - TempDay;
0x0F72	0x470060  	ADD	W14, #0, W0
; buf_d start address is: 4 (W2)
0x0F74	0x508110  	SUB	W1, [W0], W2
; buf_d end address is: 2 (W1)
;protocol_ntp.mpas,341 :: 		Inc(TTime_Year);
0x0F76	0x9000FE  	MOV	[W14+14], W1
0x0F78	0x47006E  	ADD	W14, #14, W0
0x0F7A	0x408861  	ADD	W1, #1, [W0]
;protocol_ntp.mpas,342 :: 		end;
0x0F7C	0x780082  	MOV	W2, W1
; buf_d end address is: 4 (W2)
0x0F7E	0x37FFED  	BRA	L__NTP2String86
L__NTP2String87:
;protocol_ntp.mpas,343 :: 		inc(buf_d);
; buf_d start address is: 14 (W7)
; buf_d start address is: 2 (W1)
0x0F80	0x4083E1  	ADD	W1, #1, W7
; buf_d end address is: 2 (W1)
;protocol_ntp.mpas,344 :: 		For TTime_Month := 1 To 12 do
; TTime_Month start address is: 6 (W3)
0x0F82	0xB3C013  	MOV.B	#1, W3
; buf_d end address is: 14 (W7)
; TTime_Month end address is: 6 (W3)
0x0F84	0x780207  	MOV	W7, W4
L__NTP2String97:
;protocol_ntp.mpas,346 :: 		TempMonth := Months_Days[TTime_Month];
; TTime_Month start address is: 6 (W3)
; buf_d start address is: 8 (W4)
0x0F86	0xFB8083  	ZE	W3, W1
0x0F88	0x280330  	MOV	#lo_addr(_Months_Days), W0
0x0F8A	0x400081  	ADD	W0, W1, W1
0x0F8C	0x202010  	MOV	#higher_addr(_Months_Days), W0
0x0F8E	0xB7A032  	MOV	WREG, DSRPAG
0x0F90	0x000000  	NOP
0x0F92	0x784011  	MOV.B	[W1], W0
0x0F94	0xFB8000  	ZE	W0, W0
0x0F96	0x980710  	MOV	W0, [W14+2]
;protocol_ntp.mpas,347 :: 		if (TTime_Month = 2) and (TempDay = 366) then TempMonth := 29;
0x0F98	0xE11C62  	CP.B	W3, #2
0x0F9A	0xEF2004  	CLR	W2
0x0F9C	0x3A0001  	BRA NZ	L__NTP2String144
0x0F9E	0xEEA004  	COM	W2
L__NTP2String144:
0x0FA0	0x90008E  	MOV	[W14+0], W1
0x0FA2	0x2016E0  	MOV	#366, W0
0x0FA4	0xE10800  	CP	W1, W0
0x0FA6	0xEF2000  	CLR	W0
0x0FA8	0x3A0001  	BRA NZ	L__NTP2String145
0x0FAA	0xEEA000  	COM	W0
L__NTP2String145:
0x0FAC	0x610000  	AND	W2, W0, W0
0x0FAE	0x320002  	BRA Z	L__NTP2String102
L__NTP2String146:
0x0FB0	0x2001D0  	MOV	#29, W0
0x0FB2	0x980710  	MOV	W0, [W14+2]
L__NTP2String102:
;protocol_ntp.mpas,348 :: 		If buf_d <= TempMonth Then break;
0x0FB4	0x470062  	ADD	W14, #2, W0
0x0FB6	0xE12010  	CP	W4, [W0]
0x0FB8	0x3E0002  	BRA GTU	L__NTP2String105
L__NTP2String147:
0x0FBA	0x780004  	MOV	W4, W0
0x0FBC	0x370009  	BRA	L__NTP2String100
L__NTP2String105:
;protocol_ntp.mpas,349 :: 		buf_d := buf_d - TempMonth;
0x0FBE	0x470062  	ADD	W14, #2, W0
; buf_d start address is: 4 (W2)
0x0FC0	0x520110  	SUB	W4, [W0], W2
; buf_d end address is: 8 (W4)
;protocol_ntp.mpas,350 :: 		end;
0x0FC2	0xE11C6C  	CP.B	W3, #12
0x0FC4	0x320004  	BRA Z	L__NTP2String107
L__NTP2String148:
; TTime_Month start address is: 0 (W0)
0x0FC6	0x41C061  	ADD.B	W3, #1, W0
; TTime_Month end address is: 6 (W3)
0x0FC8	0x780202  	MOV	W2, W4
; TTime_Month end address is: 0 (W0)
; buf_d end address is: 4 (W2)
0x0FCA	0x784180  	MOV.B	W0, W3
0x0FCC	0x37FFDC  	BRA	L__NTP2String97
L__NTP2String107:
0x0FCE	0x780002  	MOV	W2, W0
L__NTP2String100:
;protocol_ntp.mpas,353 :: 		Byte2StrWithZeros(TTime_Day, TTime_Str);
; buf_d start address is: 0 (W0)
; TTime_Month start address is: 6 (W3)
0x0FD0	0x78058C  	MOV	W12, W11
0x0FD2	0x784500  	MOV.B	W0, W10
; buf_d end address is: 0 (W0)
0x0FD4	0x07FBE2  	RCALL	_Byte2StrWithZeros
;protocol_ntp.mpas,354 :: 		Str_Cut_Left(TTime_Str,1);
0x0FD6	0x20001B  	MOV	#1, W11
0x0FD8	0x78050C  	MOV	W12, W10
0x0FDA	0x07FBA4  	RCALL	_Str_Cut_Left
;protocol_ntp.mpas,355 :: 		Str_Cat(TTime_Str, '.');
0x0FDC	0x4700F0  	ADD	W14, #16, W1
0x0FDE	0xB3C2E0  	MOV.B	#46, W0
0x0FE0	0x785880  	MOV.B	W0, [W1++]
0x0FE2	0xEF2000  	CLR	W0
0x0FE4	0x785880  	MOV.B	W0, [W1++]
0x0FE6	0x470070  	ADD	W14, #16, W0
0x0FE8	0x780580  	MOV	W0, W11
0x0FEA	0x78050C  	MOV	W12, W10
0x0FEC	0x07FC38  	RCALL	_Str_Cat
;protocol_ntp.mpas,357 :: 		Byte2StrWithZeros(TTime_Month, text);
0x0FEE	0x470064  	ADD	W14, #4, W0
0x0FF0	0x780580  	MOV	W0, W11
0x0FF2	0x784503  	MOV.B	W3, W10
; TTime_Month end address is: 6 (W3)
0x0FF4	0x07FBD2  	RCALL	_Byte2StrWithZeros
;protocol_ntp.mpas,358 :: 		Str_Cut_Left(text,1);
0x0FF6	0x470064  	ADD	W14, #4, W0
0x0FF8	0x20001B  	MOV	#1, W11
0x0FFA	0x780500  	MOV	W0, W10
0x0FFC	0x07FB93  	RCALL	_Str_Cut_Left
;protocol_ntp.mpas,359 :: 		Str_Cat(TTime_Str, text);
0x0FFE	0x470064  	ADD	W14, #4, W0
0x1000	0x780580  	MOV	W0, W11
0x1002	0x78050C  	MOV	W12, W10
0x1004	0x07FC2C  	RCALL	_Str_Cat
;protocol_ntp.mpas,361 :: 		Str_Cat(TTime_Str, '.');
0x1006	0x4700F0  	ADD	W14, #16, W1
0x1008	0xB3C2E0  	MOV.B	#46, W0
0x100A	0x785880  	MOV.B	W0, [W1++]
0x100C	0xEF2000  	CLR	W0
0x100E	0x785880  	MOV.B	W0, [W1++]
0x1010	0x470070  	ADD	W14, #16, W0
0x1012	0x780580  	MOV	W0, W11
0x1014	0x78050C  	MOV	W12, W10
0x1016	0x07FC23  	RCALL	_Str_Cat
;protocol_ntp.mpas,363 :: 		Word2Str(TTime_Year,text);
0x1018	0x470064  	ADD	W14, #4, W0
0x101A	0x780580  	MOV	W0, W11
0x101C	0x90057E  	MOV	[W14+14], W10
0x101E	0x07FC28  	RCALL	_Word2Str
;protocol_ntp.mpas,364 :: 		Str_Cat(TTime_Str, text);
0x1020	0x470064  	ADD	W14, #4, W0
0x1022	0x780580  	MOV	W0, W11
0x1024	0x78050C  	MOV	W12, W10
0x1026	0x07FC1B  	RCALL	_Str_Cat
;protocol_ntp.mpas,366 :: 		Str_Cat(TTime_Str, ' ');
0x1028	0x4700F0  	ADD	W14, #16, W1
0x102A	0xB3C200  	MOV.B	#32, W0
0x102C	0x785880  	MOV.B	W0, [W1++]
0x102E	0xEF2000  	CLR	W0
0x1030	0x785880  	MOV.B	W0, [W1++]
0x1032	0x470070  	ADD	W14, #16, W0
0x1034	0x780580  	MOV	W0, W11
0x1036	0x78050C  	MOV	W12, W10
0x1038	0x07FC12  	RCALL	_Str_Cat
;protocol_ntp.mpas,368 :: 		Byte2StrWithZeros(TTime_Hour, text);
0x103A	0x470064  	ADD	W14, #4, W0
0x103C	0x780580  	MOV	W0, W11
0x103E	0x904D4E  	MOV.B	[W14+12], W10
0x1040	0x07FBAC  	RCALL	_Byte2StrWithZeros
;protocol_ntp.mpas,369 :: 		Str_Cut_Left(text,1);
0x1042	0x470064  	ADD	W14, #4, W0
0x1044	0x20001B  	MOV	#1, W11
0x1046	0x780500  	MOV	W0, W10
0x1048	0x07FB6D  	RCALL	_Str_Cut_Left
;protocol_ntp.mpas,370 :: 		Str_Cat(TTime_Str, text);
0x104A	0x470064  	ADD	W14, #4, W0
0x104C	0x780580  	MOV	W0, W11
0x104E	0x78050C  	MOV	W12, W10
0x1050	0x07FC06  	RCALL	_Str_Cat
;protocol_ntp.mpas,371 :: 		Str_Cat(TTime_Str, ':');
0x1052	0x4700F0  	ADD	W14, #16, W1
0x1054	0xB3C3A0  	MOV.B	#58, W0
0x1056	0x785880  	MOV.B	W0, [W1++]
0x1058	0xEF2000  	CLR	W0
0x105A	0x785880  	MOV.B	W0, [W1++]
0x105C	0x470070  	ADD	W14, #16, W0
0x105E	0x780580  	MOV	W0, W11
0x1060	0x78050C  	MOV	W12, W10
0x1062	0x07FBFD  	RCALL	_Str_Cat
;protocol_ntp.mpas,372 :: 		Byte2StrWithZeros(TTime_Min, text);
0x1064	0x470064  	ADD	W14, #4, W0
0x1066	0x780580  	MOV	W0, W11
0x1068	0x904D3E  	MOV.B	[W14+11], W10
0x106A	0x07FB97  	RCALL	_Byte2StrWithZeros
;protocol_ntp.mpas,373 :: 		Str_Cut_Left(text,1);
0x106C	0x470064  	ADD	W14, #4, W0
0x106E	0x20001B  	MOV	#1, W11
0x1070	0x780500  	MOV	W0, W10
0x1072	0x07FB58  	RCALL	_Str_Cut_Left
;protocol_ntp.mpas,374 :: 		Str_Cat(TTime_Str, text);
0x1074	0x470064  	ADD	W14, #4, W0
0x1076	0x780580  	MOV	W0, W11
0x1078	0x78050C  	MOV	W12, W10
0x107A	0x07FBF1  	RCALL	_Str_Cat
;protocol_ntp.mpas,375 :: 		Str_Cat(TTime_Str, ':');
0x107C	0x4700F0  	ADD	W14, #16, W1
0x107E	0xB3C3A0  	MOV.B	#58, W0
0x1080	0x785880  	MOV.B	W0, [W1++]
0x1082	0xEF2000  	CLR	W0
0x1084	0x785880  	MOV.B	W0, [W1++]
0x1086	0x470070  	ADD	W14, #16, W0
0x1088	0x780580  	MOV	W0, W11
0x108A	0x78050C  	MOV	W12, W10
0x108C	0x07FBE8  	RCALL	_Str_Cat
;protocol_ntp.mpas,376 :: 		Byte2StrWithZeros(TTime_Sec, text);
0x108E	0x470064  	ADD	W14, #4, W0
0x1090	0x780580  	MOV	W0, W11
0x1092	0x904D2E  	MOV.B	[W14+10], W10
0x1094	0x07FB82  	RCALL	_Byte2StrWithZeros
;protocol_ntp.mpas,377 :: 		Str_Cut_Left(text,1);
0x1096	0x470064  	ADD	W14, #4, W0
0x1098	0x20001B  	MOV	#1, W11
0x109A	0x780500  	MOV	W0, W10
0x109C	0x07FB43  	RCALL	_Str_Cut_Left
;protocol_ntp.mpas,378 :: 		Str_Cat(TTime_Str, text);
0x109E	0x470064  	ADD	W14, #4, W0
0x10A0	0x780580  	MOV	W0, W11
0x10A2	0x78050C  	MOV	W12, W10
0x10A4	0x07FBDC  	RCALL	_Str_Cat
;protocol_ntp.mpas,379 :: 		end;
L_end_NTP2String:
0x10A6	0x7805CF  	POP	W11
0x10A8	0x78054F  	POP	W10
0x10AA	0xFA8000  	ULNK
0x10AC	0x060000  	RETURN
; end of _NTP2String
_Byte2StrWithZeros:
0x079A	0xFA000E  	LNK	#14
;dspic_additional_string_library.mpas,629 :: 		begin
0x079C	0x781F8A  	PUSH	W10
0x079E	0x781F8C  	PUSH	W12
0x07A0	0x984F4A  	MOV.B	W10, [W14+12]
;dspic_additional_string_library.mpas,630 :: 		W7 := @buf;
0x07A2	0x4700E0  	ADD	W14, #0, W1
0x07A4	0x780381  	MOV	W1, W7
;dspic_additional_string_library.mpas,631 :: 		Mem_Cpy(W7, @data_in, 1);
0x07A6	0x47006C  	ADD	W14, #12, W0
0x07A8	0x781F8B  	PUSH	W11
0x07AA	0x20001C  	MOV	#1, W12
0x07AC	0x780580  	MOV	W0, W11
0x07AE	0x780501  	MOV	W1, W10
0x07B0	0x07FE5E  	RCALL	_Mem_Cpy
;dspic_additional_string_library.mpas,632 :: 		Mem_Set(W7+1, 0, 3);
0x07B2	0x438061  	ADD	W7, #1, W0
0x07B4	0x20003C  	MOV	#3, W12
0x07B6	0xEF2016  	CLR	W11
0x07B8	0x780500  	MOV	W0, W10
0x07BA	0x07FE50  	RCALL	_Mem_Set
0x07BC	0x7805CF  	POP	W11
;dspic_additional_string_library.mpas,633 :: 		W8 := 0;
0x07BE	0xEF2010  	CLR	W8
;dspic_additional_string_library.mpas,634 :: 		while W8 < 8 do
L__Byte2StrWithZeros87:
0x07C0	0xE14068  	CP	W8, #8
0x07C2	0x31001E  	BRA GEU	L__Byte2StrWithZeros88
L__Byte2StrWithZeros444:
;dspic_additional_string_library.mpas,637 :: 		MOV W7,W4
0x07C4	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,638 :: 		RLC [W4],[W4++]
0x07C6	0xD29A14  	RLC	[W4], [W4++]
;dspic_additional_string_library.mpas,639 :: 		RLC [W4],[W4]
0x07C8	0xD28A14  	RLC	[W4], [W4]
;dspic_additional_string_library.mpas,641 :: 		if W8 = 7 then
0x07CA	0xE14067  	CP	W8, #7
0x07CC	0x3A000B  	BRA NZ	L__Byte2StrWithZeros92
L__Byte2StrWithZeros445:
;dspic_additional_string_library.mpas,643 :: 		W5 := @data_str + 3;
0x07CE	0x4582E3  	ADD	W11, #3, W5
;dspic_additional_string_library.mpas,645 :: 		MOV W7,W4
0x07D0	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,646 :: 		ADD #1,W4
0x07D2	0xB00014  	ADD	#1, W4
;dspic_additional_string_library.mpas,647 :: 		CLR W6
0x07D4	0xEB0300  	CLR	W6
;dspic_additional_string_library.mpas,648 :: 		MOV.B W6,[W5--]
0x07D6	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,650 :: 		Adjust_1;
0x07D8	0x07FE53  	RCALL	dspic_additional_string_library_Adjust_1
;dspic_additional_string_library.mpas,652 :: 		MOV.B [W4],W6
0x07DA	0x784314  	MOV.B	[W4], W6
;dspic_additional_string_library.mpas,653 :: 		AND #15,W6
0x07DC	0xB200F6  	AND	#15, W6
;dspic_additional_string_library.mpas,654 :: 		ADD #48,W6
0x07DE	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,655 :: 		MOV.B W6,[W5--]
0x07E0	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,657 :: 		exit;
0x07E2	0x37000E  	BRA	L_end__Byte2StrWithZeros
;dspic_additional_string_library.mpas,658 :: 		end;
L__Byte2StrWithZeros92:
;dspic_additional_string_library.mpas,660 :: 		MOV #2,W9
0x07E4	0x200029  	MOV	#2, W9
;dspic_additional_string_library.mpas,661 :: 		MOV W7,W4
0x07E6	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,662 :: 		loop_3:
loop_3:
;dspic_additional_string_library.mpas,663 :: 		MOV.B [++W4],W6
0x07E8	0x784354  	MOV.B	[++W4], W6
;dspic_additional_string_library.mpas,664 :: 		ADD #3,W6
0x07EA	0xB00036  	ADD	#3, W6
;dspic_additional_string_library.mpas,665 :: 		BTSC W6,#3
0x07EC	0xA73006  	BTSC	W6, #3
;dspic_additional_string_library.mpas,666 :: 		MOV.B W6,[W4]
0x07EE	0x784A06  	MOV.B	W6, [W4]
;dspic_additional_string_library.mpas,667 :: 		MOV.B [W4],W6
0x07F0	0x784314  	MOV.B	[W4], W6
;dspic_additional_string_library.mpas,668 :: 		ADD #48,W6
0x07F2	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,669 :: 		BTSC W6,#7
0x07F4	0xA77006  	BTSC	W6, #7
;dspic_additional_string_library.mpas,670 :: 		MOV.B W6,[W4]
0x07F6	0x784A06  	MOV.B	W6, [W4]
;dspic_additional_string_library.mpas,671 :: 		DEC W9,W9
0x07F8	0xE90489  	DEC	W9, W9
;dspic_additional_string_library.mpas,672 :: 		BRA NZ,loop_3
0x07FA	0x3AFFF6  	BRA NZ	loop_3
;dspic_additional_string_library.mpas,673 :: 		INC W8,W8
0x07FC	0xE80408  	INC	W8, W8
;dspic_additional_string_library.mpas,675 :: 		end;
0x07FE	0x37FFE0  	BRA	L__Byte2StrWithZeros87
L__Byte2StrWithZeros88:
;dspic_additional_string_library.mpas,676 :: 		end;
L_end__Byte2StrWithZeros:
L_end_Byte2StrWithZeros:
0x0800	0x78064F  	POP	W12
0x0802	0x78054F  	POP	W10
0x0804	0xFA8000  	ULNK
0x0806	0x060000  	RETURN
; end of _Byte2StrWithZeros
_Mem_Cpy:
;dspic_additional_string_library.mpas,149 :: 		begin
;dspic_additional_string_library.mpas,150 :: 		W6 := n;
0x046E	0x78030C  	MOV	W12, W6
;dspic_additional_string_library.mpas,151 :: 		W4 := p1;
0x0470	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,152 :: 		W5 := p2;
0x0472	0x78028B  	MOV	W11, W5
;dspic_additional_string_library.mpas,154 :: 		CP0 W6
0x0474	0xE2000C  	CP0	W6
;dspic_additional_string_library.mpas,155 :: 		BRA Z,la25
0x0476	0x320003  	BRA Z	la25
;dspic_additional_string_library.mpas,156 :: 		DEC W6,W6
0x0478	0xE90306  	DEC	W6, W6
;dspic_additional_string_library.mpas,157 :: 		REPEAT W6
0x047A	0x098006  	REPEAT	W6
;dspic_additional_string_library.mpas,158 :: 		MOV.B [W5++],[W4++]
0x047C	0x785A35  	MOV.B	[W5++], [W4++]
;dspic_additional_string_library.mpas,159 :: 		la25:
la25:
;dspic_additional_string_library.mpas,161 :: 		end;
L_end_Mem_Cpy:
0x047E	0x060000  	RETURN
; end of _Mem_Cpy
_Mem_Set:
;dspic_additional_string_library.mpas,187 :: 		begin
;dspic_additional_string_library.mpas,188 :: 		W6 := n;
0x045C	0x78030C  	MOV	W12, W6
;dspic_additional_string_library.mpas,189 :: 		W4 := p1;
0x045E	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,190 :: 		W5 := ch;
0x0460	0xFB828B  	ZE	W11, W5
;dspic_additional_string_library.mpas,192 :: 		CP0 W6
0x0462	0xE2000C  	CP0	W6
;dspic_additional_string_library.mpas,193 :: 		BRA Z,la29
0x0464	0x320003  	BRA Z	la29
;dspic_additional_string_library.mpas,194 :: 		DEC W6,W6
0x0466	0xE90306  	DEC	W6, W6
;dspic_additional_string_library.mpas,195 :: 		REPEAT W6
0x0468	0x098006  	REPEAT	W6
;dspic_additional_string_library.mpas,196 :: 		MOV.B W5,[W4++]
0x046A	0x785A05  	MOV.B	W5, [W4++]
;dspic_additional_string_library.mpas,197 :: 		la29:
la29:
;dspic_additional_string_library.mpas,199 :: 		end;
L_end_Mem_Set:
0x046C	0x060000  	RETURN
; end of _Mem_Set
dspic_additional_string_library_Adjust_1:
;dspic_additional_string_library.mpas,506 :: 		begin
;dspic_additional_string_library.mpas,508 :: 		MOV.B [W4],W6
0x0480	0x784314  	MOV.B	[W4], W6
;dspic_additional_string_library.mpas,509 :: 		AND #15,W6
0x0482	0xB200F6  	AND	#15, W6
;dspic_additional_string_library.mpas,510 :: 		ADD #48,W6
0x0484	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,511 :: 		MOV.B W6,[W5--]
0x0486	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,512 :: 		MOV.B [W4++],W6
0x0488	0x784334  	MOV.B	[W4++], W6
;dspic_additional_string_library.mpas,513 :: 		LSR W6,#4,W6
0x048A	0xDE3344  	LSR	W6, #4, W6
;dspic_additional_string_library.mpas,514 :: 		AND #15,W6
0x048C	0xB200F6  	AND	#15, W6
;dspic_additional_string_library.mpas,515 :: 		ADD #48,W6
0x048E	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,516 :: 		MOV.B W6,[W5--]
0x0490	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,518 :: 		end;
L_end_Adjust_1:
0x0492	0x060000  	RETURN
; end of dspic_additional_string_library_Adjust_1
_Str_Cut_Left:
;dspic_additional_string_library.mpas,463 :: 		begin
;dspic_additional_string_library.mpas,464 :: 		W4 := @inst1;
0x0724	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,466 :: 		MOV W4,W6
0x0726	0x880064  	MOV	W4, W6
;dspic_additional_string_library.mpas,467 :: 		la35:
la35:
;dspic_additional_string_library.mpas,468 :: 		CP0.B [W4++]
0x0728	0xE00434  	CP0.B	[W4++]
;dspic_additional_string_library.mpas,469 :: 		BRA NZ ,la35
0x072A	0x3AFFFE  	BRA NZ	la35
;dspic_additional_string_library.mpas,470 :: 		DEC W4,W4
0x072C	0xE90204  	DEC	W4, W4
;dspic_additional_string_library.mpas,471 :: 		SUB W4,W6,W8
0x072E	0x520406  	SUB	W4, W6, W8
;dspic_additional_string_library.mpas,473 :: 		if W8 = 0 then exit;
0x0730	0xE14060  	CP	W8, #0
0x0732	0x3A0001  	BRA NZ	L__Str_Cut_Left45
L__Str_Cut_Left429:
0x0734	0x37000A  	BRA	L_end__Str_Cut_Left
L__Str_Cut_Left45:
;dspic_additional_string_library.mpas,474 :: 		if n = 0 then exit;
0x0736	0xE15860  	CP	W11, #0
0x0738	0x3A0001  	BRA NZ	L__Str_Cut_Left48
L__Str_Cut_Left430:
0x073A	0x370007  	BRA	L_end__Str_Cut_Left
L__Str_Cut_Left48:
;dspic_additional_string_library.mpas,475 :: 		if n > W8 then exit;
0x073C	0xE15808  	CP	W11, W8
0x073E	0x360001  	BRA LEU	L__Str_Cut_Left51
L__Str_Cut_Left431:
0x0740	0x370004  	BRA	L_end__Str_Cut_Left
L__Str_Cut_Left51:
;dspic_additional_string_library.mpas,476 :: 		W9 := W8 - n;
0x0742	0x54048B  	SUB	W8, W11, W9
;dspic_additional_string_library.mpas,477 :: 		W4 := W6 + n;
0x0744	0x43020B  	ADD	W6, W11, W4
;dspic_additional_string_library.mpas,479 :: 		REPEAT W9
0x0746	0x098009  	REPEAT	W9
;dspic_additional_string_library.mpas,480 :: 		MOV.B [W4++],[W6++]
0x0748	0x785B34  	MOV.B	[W4++], [W6++]
;dspic_additional_string_library.mpas,482 :: 		end;
L_end__Str_Cut_Left:
L_end_Str_Cut_Left:
0x074A	0x060000  	RETURN
; end of _Str_Cut_Left
_Str_Cat:
;dspic_additional_string_library.mpas,260 :: 		begin
;dspic_additional_string_library.mpas,261 :: 		W4 := @inst1;
0x085E	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,262 :: 		W5 := @inst2;
0x0860	0x78028B  	MOV	W11, W5
;dspic_additional_string_library.mpas,264 :: 		la2:
la2:
;dspic_additional_string_library.mpas,265 :: 		CP0.B [W4++]
0x0862	0xE00434  	CP0.B	[W4++]
;dspic_additional_string_library.mpas,266 :: 		BRA NZ ,la2
0x0864	0x3AFFFE  	BRA NZ	la2
;dspic_additional_string_library.mpas,267 :: 		DEC W4,W4
0x0866	0xE90204  	DEC	W4, W4
;dspic_additional_string_library.mpas,268 :: 		la4:
la4:
;dspic_additional_string_library.mpas,269 :: 		MOV.B [W5],[W4++]
0x0868	0x785A15  	MOV.B	[W5], [W4++]
;dspic_additional_string_library.mpas,270 :: 		CP0.B [W5++]
0x086A	0xE00435  	CP0.B	[W5++]
;dspic_additional_string_library.mpas,271 :: 		BRA NZ ,la4
0x086C	0x3AFFFD  	BRA NZ	la4
;dspic_additional_string_library.mpas,273 :: 		end;
L_end_Str_Cat:
0x086E	0x060000  	RETURN
; end of _Str_Cat
_Word2Str:
;dspic_additional_string_library.mpas,808 :: 		begin
;dspic_additional_string_library.mpas,809 :: 		Word2StrWithZeros(data_in1, data_str3);
0x0870	0x781F8A  	PUSH	W10
0x0872	0x07FDA5  	RCALL	_Word2StrWithZeros
;dspic_additional_string_library.mpas,810 :: 		Str_Cut_Chr(data_str3, '0');
0x0874	0x781F8B  	PUSH	W11
0x0876	0x78050B  	MOV	W11, W10
0x0878	0xB3C30B  	MOV.B	#48, W11
0x087A	0x07FDDB  	RCALL	_Str_Cut_Chr
0x087C	0x7805CF  	POP	W11
;dspic_additional_string_library.mpas,811 :: 		if Str_Len(data_str3) = 0 then
0x087E	0x78050B  	MOV	W11, W10
0x0880	0x07FDE4  	RCALL	_Str_Len
0x0882	0xE10060  	CP	W0, #0
0x0884	0x3A0005  	BRA NZ	L__Word2Str140
L__Word2Str464:
;dspic_additional_string_library.mpas,813 :: 		data_str3[0] := '0';
0x0886	0xB3C300  	MOV.B	#48, W0
0x0888	0x784D80  	MOV.B	W0, [W11]
;dspic_additional_string_library.mpas,814 :: 		data_str3[1] := 0;
0x088A	0x4580E1  	ADD	W11, #1, W1
0x088C	0xEF2000  	CLR	W0
0x088E	0x784880  	MOV.B	W0, [W1]
;dspic_additional_string_library.mpas,815 :: 		end;
L__Word2Str140:
;dspic_additional_string_library.mpas,816 :: 		end;
L_end_Word2Str:
0x0890	0x78054F  	POP	W10
0x0892	0x060000  	RETURN
; end of _Word2Str
_Word2StrWithZeros:
0x03BE	0xFA000E  	LNK	#14
;dspic_additional_string_library.mpas,575 :: 		begin
0x03C0	0x781F8A  	PUSH	W10
0x03C2	0x781F8C  	PUSH	W12
0x03C4	0x98076A  	MOV	W10, [W14+12]
;dspic_additional_string_library.mpas,576 :: 		W7 := @buf;
0x03C6	0x4700E0  	ADD	W14, #0, W1
0x03C8	0x780381  	MOV	W1, W7
;dspic_additional_string_library.mpas,577 :: 		Mem_Cpy(W7, @data_in, 2);
0x03CA	0x47006C  	ADD	W14, #12, W0
0x03CC	0x781F8B  	PUSH	W11
0x03CE	0x20002C  	MOV	#2, W12
0x03D0	0x780580  	MOV	W0, W11
0x03D2	0x780501  	MOV	W1, W10
0x03D4	0x07004C  	RCALL	_Mem_Cpy
;dspic_additional_string_library.mpas,578 :: 		Mem_Set(W7+2, 0, 4);
0x03D6	0x438062  	ADD	W7, #2, W0
0x03D8	0x20004C  	MOV	#4, W12
0x03DA	0xEF2016  	CLR	W11
0x03DC	0x780500  	MOV	W0, W10
0x03DE	0x07003E  	RCALL	_Mem_Set
0x03E0	0x7805CF  	POP	W11
;dspic_additional_string_library.mpas,579 :: 		W8 := 0;
0x03E2	0xEF2010  	CLR	W8
;dspic_additional_string_library.mpas,580 :: 		while W8 < 16 do
L__Word2StrWithZeros77:
0x03E4	0xE14070  	CP	W8, #16
0x03E6	0x310021  	BRA GEU	L__Word2StrWithZeros78
L__Word2StrWithZeros441:
;dspic_additional_string_library.mpas,583 :: 		MOV W7,W4
0x03E8	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,584 :: 		RLC [W4],[W4++]
0x03EA	0xD29A14  	RLC	[W4], [W4++]
;dspic_additional_string_library.mpas,585 :: 		RLC [W4],[W4++]
0x03EC	0xD29A14  	RLC	[W4], [W4++]
;dspic_additional_string_library.mpas,586 :: 		RLC [W4],[W4]
0x03EE	0xD28A14  	RLC	[W4], [W4]
;dspic_additional_string_library.mpas,588 :: 		if W8 = 15 then
0x03F0	0xE1406F  	CP	W8, #15
0x03F2	0x3A000C  	BRA NZ	L__Word2StrWithZeros82
L__Word2StrWithZeros442:
;dspic_additional_string_library.mpas,590 :: 		W5 := @data_str + 5;
0x03F4	0x4582E5  	ADD	W11, #5, W5
;dspic_additional_string_library.mpas,592 :: 		MOV W7,W4
0x03F6	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,593 :: 		ADD #2,W4
0x03F8	0xB00024  	ADD	#2, W4
;dspic_additional_string_library.mpas,594 :: 		CLR W6
0x03FA	0xEB0300  	CLR	W6
;dspic_additional_string_library.mpas,595 :: 		MOV.B W6,[W5--]
0x03FC	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,597 :: 		Adjust_1;
0x03FE	0x070040  	RCALL	dspic_additional_string_library_Adjust_1
;dspic_additional_string_library.mpas,598 :: 		Adjust_1;
0x0400	0x07003F  	RCALL	dspic_additional_string_library_Adjust_1
;dspic_additional_string_library.mpas,600 :: 		MOV.B [W4],W6
0x0402	0x784314  	MOV.B	[W4], W6
;dspic_additional_string_library.mpas,601 :: 		AND #15,W6
0x0404	0xB200F6  	AND	#15, W6
;dspic_additional_string_library.mpas,602 :: 		ADD #48,W6
0x0406	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,603 :: 		MOV.B W6,[W5--]
0x0408	0x785286  	MOV.B	W6, [W5--]
;dspic_additional_string_library.mpas,605 :: 		exit;
0x040A	0x37000F  	BRA	L_end__Word2StrWithZeros
;dspic_additional_string_library.mpas,606 :: 		end;
L__Word2StrWithZeros82:
;dspic_additional_string_library.mpas,608 :: 		MOV #3,W9
0x040C	0x200039  	MOV	#3, W9
;dspic_additional_string_library.mpas,609 :: 		MOV W7,W4
0x040E	0x880047  	MOV	W7, W4
;dspic_additional_string_library.mpas,610 :: 		ADD #1,W4
0x0410	0xB00014  	ADD	#1, W4
;dspic_additional_string_library.mpas,611 :: 		loop_2:
loop_2:
;dspic_additional_string_library.mpas,612 :: 		MOV.B [++W4],W6
0x0412	0x784354  	MOV.B	[++W4], W6
;dspic_additional_string_library.mpas,613 :: 		ADD #3,W6
0x0414	0xB00036  	ADD	#3, W6
;dspic_additional_string_library.mpas,614 :: 		BTSC W6,#3
0x0416	0xA73006  	BTSC	W6, #3
;dspic_additional_string_library.mpas,615 :: 		MOV.B W6,[W4]
0x0418	0x784A06  	MOV.B	W6, [W4]
;dspic_additional_string_library.mpas,616 :: 		MOV.B [W4],W6
0x041A	0x784314  	MOV.B	[W4], W6
;dspic_additional_string_library.mpas,617 :: 		ADD #48,W6
0x041C	0xB00306  	ADD	#48, W6
;dspic_additional_string_library.mpas,618 :: 		BTSC W6,#7
0x041E	0xA77006  	BTSC	W6, #7
;dspic_additional_string_library.mpas,619 :: 		MOV.B W6,[W4]
0x0420	0x784A06  	MOV.B	W6, [W4]
;dspic_additional_string_library.mpas,620 :: 		DEC W9,W9
0x0422	0xE90489  	DEC	W9, W9
;dspic_additional_string_library.mpas,621 :: 		BRA NZ,loop_2
0x0424	0x3AFFF6  	BRA NZ	loop_2
;dspic_additional_string_library.mpas,622 :: 		INC W8,W8
0x0426	0xE80408  	INC	W8, W8
;dspic_additional_string_library.mpas,624 :: 		end;
0x0428	0x37FFDD  	BRA	L__Word2StrWithZeros77
L__Word2StrWithZeros78:
;dspic_additional_string_library.mpas,625 :: 		end;
L_end__Word2StrWithZeros:
L_end_Word2StrWithZeros:
0x042A	0x78064F  	POP	W12
0x042C	0x78054F  	POP	W10
0x042E	0xFA8000  	ULNK
0x0430	0x060000  	RETURN
; end of _Word2StrWithZeros
_Str_Cut_Chr:
;dspic_additional_string_library.mpas,240 :: 		begin
;dspic_additional_string_library.mpas,241 :: 		W6 := ch;
0x0432	0xFB830B  	ZE	W11, W6
;dspic_additional_string_library.mpas,242 :: 		W4 := @inst;
0x0434	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,244 :: 		MOV W4,W5
0x0436	0x880054  	MOV	W4, W5
;dspic_additional_string_library.mpas,245 :: 		CP0.B W6
0x0438	0xE2400C  	CP0.B	W6
;dspic_additional_string_library.mpas,246 :: 		BRA Z ,la5
0x043A	0x320006  	BRA Z	la5
;dspic_additional_string_library.mpas,247 :: 		la6:
la6:
;dspic_additional_string_library.mpas,248 :: 		CP.B W6,[W4++]
0x043C	0xE13434  	CP.B	W6, [W4++]
;dspic_additional_string_library.mpas,249 :: 		BRA Z ,la6
0x043E	0x32FFFE  	BRA Z	la6
;dspic_additional_string_library.mpas,250 :: 		DEC W4,W4
0x0440	0xE90204  	DEC	W4, W4
;dspic_additional_string_library.mpas,251 :: 		la7:
la7:
;dspic_additional_string_library.mpas,252 :: 		MOV.B [W4],[W5++]
0x0442	0x785A94  	MOV.B	[W4], [W5++]
;dspic_additional_string_library.mpas,253 :: 		CP0.B [W4++]
0x0444	0xE00434  	CP0.B	[W4++]
;dspic_additional_string_library.mpas,254 :: 		BRA NZ ,la7
0x0446	0x3AFFFD  	BRA NZ	la7
;dspic_additional_string_library.mpas,255 :: 		la5:
la5:
;dspic_additional_string_library.mpas,257 :: 		end;
L_end_Str_Cut_Chr:
0x0448	0x060000  	RETURN
; end of _Str_Cut_Chr
_Str_Len:
;dspic_additional_string_library.mpas,226 :: 		begin
;dspic_additional_string_library.mpas,227 :: 		W4 := @data_str;
0x044A	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,229 :: 		MOV W4,W6
0x044C	0x880064  	MOV	W4, W6
;dspic_additional_string_library.mpas,230 :: 		la1:
la1:
;dspic_additional_string_library.mpas,231 :: 		CP0.B [W4++]
0x044E	0xE00434  	CP0.B	[W4++]
;dspic_additional_string_library.mpas,232 :: 		BRA NZ ,la1
0x0450	0x3AFFFE  	BRA NZ	la1
;dspic_additional_string_library.mpas,233 :: 		DEC W4,W4
0x0452	0xE90204  	DEC	W4, W4
;dspic_additional_string_library.mpas,234 :: 		SUB W4,W6,W6
0x0454	0x520306  	SUB	W4, W6, W6
;dspic_additional_string_library.mpas,236 :: 		result := W6;
; Result start address is: 2 (W1)
0x0456	0x780086  	MOV	W6, W1
;dspic_additional_string_library.mpas,237 :: 		end;
0x0458	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Str_Len:
0x045A	0x060000  	RETURN
; end of _Str_Len
_Eth_CloseUdpPort:
0x0CB4	0xFA0002  	LNK	#2
;protocol_udp.mpas,143 :: 		begin
;protocol_udp.mpas,144 :: 		iOpenPort := Eth_FindUdpPort(Port, iLastEmpty);
0x0CB6	0x781F8B  	PUSH	W11
0x0CB8	0x470060  	ADD	W14, #0, W0
0x0CBA	0x780580  	MOV	W0, W11
0x0CBC	0x0702EB  	RCALL	protocol_udp_Eth_FindUdpPort
; iOpenPort start address is: 4 (W2)
0x0CBE	0x780100  	MOV	W0, W2
;protocol_udp.mpas,145 :: 		if iOpenPort > -1 then
0x0CC0	0x2FFFF1  	MOV	#65535, W1
0x0CC2	0xE10001  	CP	W0, W1
0x0CC4	0x340006  	BRA LE	L__Eth_CloseUdpPort21
L__Eth_CloseUdpPort279:
;protocol_udp.mpas,146 :: 		UdpPorts[iOpenPort] := 0;
0x0CC6	0x200010  	MOV	#1, W0
0x0CC8	0xDD1080  	SL	W2, W0, W1
; iOpenPort end address is: 4 (W2)
0x0CCA	0x210B00  	MOV	#lo_addr(protocol_udp_UdpPorts), W0
0x0CCC	0x400081  	ADD	W0, W1, W1
0x0CCE	0xEF2000  	CLR	W0
0x0CD0	0x780880  	MOV	W0, [W1]
L__Eth_CloseUdpPort21:
;protocol_udp.mpas,147 :: 		end;
L_end_Eth_CloseUdpPort:
0x0CD2	0x7805CF  	POP	W11
0x0CD4	0xFA8000  	ULNK
0x0CD6	0x060000  	RETURN
; end of _Eth_CloseUdpPort
_CopyEthMem_CPToRam:
;lib1_enc600_V3_5_b.mpas,345 :: 		begin
;lib1_enc600_V3_5_b.mpas,346 :: 		if length_w = 0 then Exit;
0x1638	0xE15860  	CP	W11, #0
0x163A	0x3A0001  	BRA NZ	L__CopyEthMem_CPToRam94
L__CopyEthMem_CPToRam314:
0x163C	0x370013  	BRA	L_end__CopyEthMem_CPToRam
L__CopyEthMem_CPToRam94:
;lib1_enc600_V3_5_b.mpas,348 :: 		Eth_Select;
0x163E	0x07F8AB  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,349 :: 		Spi_Read_(RGPDATA_);
0x1640	0x781F8A  	PUSH	W10
0x1642	0xB3C28A  	MOV.B	#40, W10
0x1644	0x07F865  	RCALL	_Spi_Read_
0x1646	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,351 :: 		pt := dest_ram_address;
; pt start address is: 6 (W3)
0x1648	0x78018A  	MOV	W10, W3
;lib1_enc600_V3_5_b.mpas,352 :: 		i := 0;
; i start address is: 4 (W2)
0x164A	0xEF2004  	CLR	W2
; pt end address is: 6 (W3)
; i end address is: 4 (W2)
;lib1_enc600_V3_5_b.mpas,353 :: 		while i < length_w do
L__CopyEthMem_CPToRam97:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x164C	0xE1100B  	CP	W2, W11
0x164E	0x310009  	BRA GEU	L__CopyEthMem_CPToRam98
L__CopyEthMem_CPToRam315:
;lib1_enc600_V3_5_b.mpas,355 :: 		pt^ := Spi_Read_(0);
0x1650	0x781F8A  	PUSH	W10
0x1652	0xEF2014  	CLR	W10
0x1654	0x07F85D  	RCALL	_Spi_Read_
0x1656	0x78054F  	POP	W10
0x1658	0x784980  	MOV.B	W0, [W3]
;lib1_enc600_V3_5_b.mpas,356 :: 		pt := pt + 1;
; pt start address is: 0 (W0)
0x165A	0x418061  	ADD	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,357 :: 		inc(i);
0x165C	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,358 :: 		end;
0x165E	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x1660	0x37FFF5  	BRA	L__CopyEthMem_CPToRam97
L__CopyEthMem_CPToRam98:
;lib1_enc600_V3_5_b.mpas,360 :: 		Eth_UnSelect;
0x1662	0x071705  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,361 :: 		end;
L_end__CopyEthMem_CPToRam:
L_end_CopyEthMem_CPToRam:
0x1664	0x060000  	RETURN
; end of _CopyEthMem_CPToRam
_CopyEthMem_CPToRam_Inv:
;lib1_enc600_V3_5_b.mpas,388 :: 		begin
;lib1_enc600_V3_5_b.mpas,389 :: 		if length_w = 0 then Exit;
0x1666	0xE15860  	CP	W11, #0
0x1668	0x3A0001  	BRA NZ	L__CopyEthMem_CPToRam_Inv112
L__CopyEthMem_CPToRam_Inv320:
0x166A	0x370014  	BRA	L_end__CopyEthMem_CPToRam_Inv
L__CopyEthMem_CPToRam_Inv112:
;lib1_enc600_V3_5_b.mpas,391 :: 		Eth_Select;
0x166C	0x07F894  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,392 :: 		Spi_Read_(RGPDATA_);
0x166E	0x781F8A  	PUSH	W10
0x1670	0xB3C28A  	MOV.B	#40, W10
0x1672	0x07F84E  	RCALL	_Spi_Read_
0x1674	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,394 :: 		pt := dest_ram_address + length_w - 1;
0x1676	0x45000B  	ADD	W10, W11, W0
; pt start address is: 6 (W3)
0x1678	0x5001E1  	SUB	W0, #1, W3
;lib1_enc600_V3_5_b.mpas,395 :: 		i := 0;
; i start address is: 4 (W2)
0x167A	0xEF2004  	CLR	W2
; pt end address is: 6 (W3)
; i end address is: 4 (W2)
;lib1_enc600_V3_5_b.mpas,396 :: 		while i < length_w do
L__CopyEthMem_CPToRam_Inv115:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x167C	0xE1100B  	CP	W2, W11
0x167E	0x310009  	BRA GEU	L__CopyEthMem_CPToRam_Inv116
L__CopyEthMem_CPToRam_Inv321:
;lib1_enc600_V3_5_b.mpas,398 :: 		pt^ := Spi_Read_(0);
0x1680	0x781F8A  	PUSH	W10
0x1682	0xEF2014  	CLR	W10
0x1684	0x07F845  	RCALL	_Spi_Read_
0x1686	0x78054F  	POP	W10
0x1688	0x784980  	MOV.B	W0, [W3]
;lib1_enc600_V3_5_b.mpas,399 :: 		pt := pt - 1;
; pt start address is: 0 (W0)
0x168A	0x518061  	SUB	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,400 :: 		inc(i);
0x168C	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,401 :: 		end;
0x168E	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x1690	0x37FFF5  	BRA	L__CopyEthMem_CPToRam_Inv115
L__CopyEthMem_CPToRam_Inv116:
;lib1_enc600_V3_5_b.mpas,403 :: 		Eth_UnSelect;
0x1692	0x0716ED  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,404 :: 		end;
L_end__CopyEthMem_CPToRam_Inv:
L_end_CopyEthMem_CPToRam_Inv:
0x1694	0x060000  	RETURN
; end of _CopyEthMem_CPToRam_Inv
_Eth_TcpHandler:
0x246A	0xFA0014  	LNK	#20
;protocol_tcp.mpas,672 :: 		begin
;protocol_tcp.mpas,673 :: 		Hi(source_port2) := ReadFromEthMem(AddrPacket+36);
0x246C	0x781F8A  	PUSH	W10
0x246E	0x781F8B  	PUSH	W11
0x2470	0x781F8C  	PUSH	W12
0x2472	0x781F8D  	PUSH	W13
0x2474	0x470068  	ADD	W14, #8, W0
0x2476	0xEC2000  	INC	W0
0x2478	0x980F10  	MOV	W0, [W14+18]
0x247A	0x200241  	MOV	#36, W1
0x247C	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x247E	0x408010  	ADD	W1, [W0], W0
0x2480	0x780500  	MOV	W0, W10
0x2482	0x070D44  	RCALL	_ReadFromEthMem
0x2484	0x90089E  	MOV	[W14+18], W1
0x2486	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,674 :: 		Lo(source_port2) := Eth_GetByte;
0x2488	0x07FBBF  	RCALL	_Eth_GetByte
0x248A	0x984F00  	MOV.B	W0, [W14+8]
;protocol_tcp.mpas,675 :: 		if Search_Port(TCP, source_port2) = False then
0x248C	0x9005CE  	MOV	[W14+8], W11
0x248E	0xB3C64A  	MOV.B	#100, W10
0x2490	0x07F8A2  	RCALL	_Search_Port
0x2492	0xE10060  	CP	W0, #0
0x2494	0x3A0006  	BRA NZ	L__Eth_TcpHandler257
L__Eth_TcpHandler483:
;protocol_tcp.mpas,677 :: 		if policy = Reject then Eth_Reject;
0x2496	0x210260  	MOV	#lo_addr(_policy), W0
0x2498	0x784010  	MOV.B	[W0], W0
0x249A	0xE10461  	CP.B	W0, #1
0x249C	0x3A0001  	BRA NZ	L__Eth_TcpHandler260
L__Eth_TcpHandler484:
0x249E	0x07F693  	RCALL	_Eth_Reject
L__Eth_TcpHandler260:
;protocol_tcp.mpas,678 :: 		Exit;
0x24A0	0x3702DC  	BRA	L_end__Eth_TcpHandler
;protocol_tcp.mpas,679 :: 		end;
L__Eth_TcpHandler257:
;protocol_tcp.mpas,680 :: 		Hi(cksum_ip) :=  ReadFromEthMem(AddrPacket+24);
0x24A2	0x470064  	ADD	W14, #4, W0
0x24A4	0xEC2000  	INC	W0
0x24A6	0x980F10  	MOV	W0, [W14+18]
0x24A8	0x808080  	MOV	_AddrPacket, W0
0x24AA	0x400078  	ADD	W0, #24, W0
0x24AC	0x780500  	MOV	W0, W10
0x24AE	0x070D2E  	RCALL	_ReadFromEthMem
0x24B0	0x90089E  	MOV	[W14+18], W1
0x24B2	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,681 :: 		Lo(cksum_ip) :=  Eth_GetByte;
0x24B4	0x07FBA9  	RCALL	_Eth_GetByte
0x24B6	0x984740  	MOV.B	W0, [W14+4]
;protocol_tcp.mpas,682 :: 		Hi(cksum_tcp) := ReadFromEthMem(AddrPacket+50);
0x24B8	0x470062  	ADD	W14, #2, W0
0x24BA	0xEC2000  	INC	W0
0x24BC	0x980F10  	MOV	W0, [W14+18]
0x24BE	0x200321  	MOV	#50, W1
0x24C0	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x24C2	0x408010  	ADD	W1, [W0], W0
0x24C4	0x780500  	MOV	W0, W10
0x24C6	0x070D22  	RCALL	_ReadFromEthMem
0x24C8	0x90089E  	MOV	[W14+18], W1
0x24CA	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,683 :: 		Lo(cksum_tcp) := Eth_GetByte;
0x24CC	0x07FB9D  	RCALL	_Eth_GetByte
0x24CE	0x984720  	MOV.B	W0, [W14+2]
;protocol_tcp.mpas,684 :: 		Hi(len) := ReadFromEthMem(AddrPacket+16);
0x24D0	0x470060  	ADD	W14, #0, W0
0x24D2	0xEC2000  	INC	W0
0x24D4	0x980F10  	MOV	W0, [W14+18]
0x24D6	0x808080  	MOV	_AddrPacket, W0
0x24D8	0x400070  	ADD	W0, #16, W0
0x24DA	0x780500  	MOV	W0, W10
0x24DC	0x070D17  	RCALL	_ReadFromEthMem
0x24DE	0x90089E  	MOV	[W14+18], W1
0x24E0	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,685 :: 		Lo(len) := Eth_GetByte;
0x24E2	0x07FB92  	RCALL	_Eth_GetByte
0x24E4	0x984700  	MOV.B	W0, [W14+0]
;protocol_tcp.mpas,687 :: 		PacketLen := len - 40;
0x24E6	0x200282  	MOV	#40, W2
0x24E8	0x4700E0  	ADD	W14, #0, W1
0x24EA	0x470066  	ADD	W14, #6, W0
0x24EC	0x110811  	SUBR	W2, [W1], [W0]
;protocol_tcp.mpas,688 :: 		CopyEthMemToEthMem(AddrPacket,TXSTART,len+14);
0x24EE	0x90000E  	MOV	[W14+0], W0
0x24F0	0x40006E  	ADD	W0, #14, W0
0x24F2	0x780600  	MOV	W0, W12
0x24F4	0xEF2016  	CLR	W11
0x24F6	0x80808A  	MOV	_AddrPacket, W10
0x24F8	0x07FB64  	RCALL	_CopyEthMemToEthMem
;protocol_tcp.mpas,689 :: 		WriteToEthMem(TXSTART+24,$00);
0x24FA	0xEF2016  	CLR	W11
0x24FC	0x20018A  	MOV	#24, W10
0x24FE	0x07FF25  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,690 :: 		Eth_PutByte($00);
0x2500	0xEF2014  	CLR	W10
0x2502	0x07FF1B  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,691 :: 		if cksum_ip <> Eth_Cksum(TXSTART+14,20) then Exit;
0x2504	0x20014B  	MOV	#20, W11
0x2506	0x2000EA  	MOV	#14, W10
0x2508	0x07F6F0  	RCALL	_Eth_Cksum
0x250A	0x4700E4  	ADD	W14, #4, W1
0x250C	0xE10011  	CP	W0, [W1]
0x250E	0x320001  	BRA Z	L__Eth_TcpHandler263
L__Eth_TcpHandler485:
0x2510	0x3702A4  	BRA	L_end__Eth_TcpHandler
L__Eth_TcpHandler263:
;protocol_tcp.mpas,692 :: 		Align := len and $01;
0x2512	0x90400E  	MOV.B	[W14+0], W0
; Align start address is: 4 (W2)
0x2514	0x604161  	AND.B	W0, #1, W2
;protocol_tcp.mpas,693 :: 		WriteToEthMem(TXSTART+50,$00);
0x2516	0xEF2016  	CLR	W11
0x2518	0x20032A  	MOV	#50, W10
0x251A	0x07FF17  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,694 :: 		Eth_PutByte($00);
0x251C	0xEF2014  	CLR	W10
0x251E	0x07FF0D  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,695 :: 		WriteToEthMem(TXSTART+len+14,$00);
0x2520	0x90000E  	MOV	[W14+0], W0
0x2522	0x40006E  	ADD	W0, #14, W0
0x2524	0xEF2016  	CLR	W11
0x2526	0x780500  	MOV	W0, W10
0x2528	0x07FF10  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,696 :: 		Eth_PutByte($00);
0x252A	0xEF2014  	CLR	W10
0x252C	0x07FF06  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,697 :: 		CopyEthMemToEthMem(TXSTART+26,TXSTART+len+Align+14,8);
0x252E	0xFB8082  	ZE	W2, W1
0x2530	0x470060  	ADD	W14, #0, W0
0x2532	0x408010  	ADD	W1, [W0], W0
0x2534	0x40006E  	ADD	W0, #14, W0
0x2536	0x20008C  	MOV	#8, W12
0x2538	0x780580  	MOV	W0, W11
0x253A	0x2001AA  	MOV	#26, W10
0x253C	0x07FB42  	RCALL	_CopyEthMemToEthMem
;protocol_tcp.mpas,698 :: 		WriteToEthMem(TXSTART+len+Align+22,$00);
0x253E	0xFB8082  	ZE	W2, W1
0x2540	0x470060  	ADD	W14, #0, W0
0x2542	0x408010  	ADD	W1, [W0], W0
0x2544	0x400076  	ADD	W0, #22, W0
0x2546	0xEF2016  	CLR	W11
0x2548	0x780500  	MOV	W0, W10
0x254A	0x07FEFF  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,699 :: 		Eth_PutByte($06);
0x254C	0xB3C06A  	MOV.B	#6, W10
0x254E	0x07FEF5  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,700 :: 		len := len - 20;
0x2550	0x200141  	MOV	#20, W1
0x2552	0x470060  	ADD	W14, #0, W0
0x2554	0x108810  	SUBR	W1, [W0], [W0]
;protocol_tcp.mpas,701 :: 		Eth_PutByte(Hi(len));
0x2556	0x470060  	ADD	W14, #0, W0
0x2558	0xEC2000  	INC	W0
0x255A	0x784010  	MOV.B	[W0], W0
0x255C	0x784500  	MOV.B	W0, W10
0x255E	0x07FEED  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,702 :: 		Eth_PutByte(Lo(len));
0x2560	0x90450E  	MOV.B	[W14+0], W10
0x2562	0x07FEEB  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,703 :: 		if cksum_tcp <> Eth_Cksum(TXSTART+34,len + Align + 12) then Exit;
0x2564	0xFB8082  	ZE	W2, W1
; Align end address is: 4 (W2)
0x2566	0x470060  	ADD	W14, #0, W0
0x2568	0x408010  	ADD	W1, [W0], W0
0x256A	0x40006C  	ADD	W0, #12, W0
0x256C	0x780580  	MOV	W0, W11
0x256E	0x20022A  	MOV	#34, W10
0x2570	0x07F6BC  	RCALL	_Eth_Cksum
0x2572	0x4700E2  	ADD	W14, #2, W1
0x2574	0xE10011  	CP	W0, [W1]
0x2576	0x320001  	BRA Z	L__Eth_TcpHandler266
L__Eth_TcpHandler486:
0x2578	0x370270  	BRA	L_end__Eth_TcpHandler
L__Eth_TcpHandler266:
;protocol_tcp.mpas,704 :: 		Hi(dest_port2) := ReadFromEthMem(AddrPacket+34);
0x257A	0x47006A  	ADD	W14, #10, W0
0x257C	0xEC2000  	INC	W0
0x257E	0x980F10  	MOV	W0, [W14+18]
0x2580	0x200221  	MOV	#34, W1
0x2582	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x2584	0x408010  	ADD	W1, [W0], W0
0x2586	0x780500  	MOV	W0, W10
0x2588	0x070CC1  	RCALL	_ReadFromEthMem
0x258A	0x90089E  	MOV	[W14+18], W1
0x258C	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,705 :: 		Lo(dest_port2) := Eth_GetByte;
0x258E	0x07FB3C  	RCALL	_Eth_GetByte
0x2590	0x984F20  	MOV.B	W0, [W14+10]
;protocol_tcp.mpas,706 :: 		TCP_FlagR := ReadFromEthMem(AddrPacket + 47);
0x2592	0x2002F1  	MOV	#47, W1
0x2594	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x2596	0x408010  	ADD	W1, [W0], W0
0x2598	0x780500  	MOV	W0, W10
0x259A	0x070CB8  	RCALL	_ReadFromEthMem
0x259C	0x21CB61  	MOV	#lo_addr(_TCP_FlagR), W1
0x259E	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,707 :: 		CopyEthMemToRam_Inv(AddrPacket + 38,@SEQ_NoR,4);
0x25A0	0x200261  	MOV	#38, W1
0x25A2	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x25A4	0x408010  	ADD	W1, [W0], W0
0x25A6	0x20004C  	MOV	#4, W12
0x25A8	0x21CBEB  	MOV	#lo_addr(_SEQ_NoR), W11
0x25AA	0x780500  	MOV	W0, W10
0x25AC	0x07F582  	RCALL	_CopyEthMemToRam_Inv
;protocol_tcp.mpas,708 :: 		CopyEthMemToRam_Inv(AddrPacket + 42,@ACK_NoR,4);
0x25AE	0x2002A1  	MOV	#42, W1
0x25B0	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x25B2	0x408010  	ADD	W1, [W0], W0
0x25B4	0x20004C  	MOV	#4, W12
0x25B6	0x21CC6B  	MOV	#lo_addr(_ACK_NoR), W11
0x25B8	0x780500  	MOV	W0, W10
0x25BA	0x07F57B  	RCALL	_CopyEthMemToRam_Inv
;protocol_tcp.mpas,709 :: 		Hi(Window) := ReadFromEthMem(AddrPacket+48);
0x25BC	0x200301  	MOV	#48, W1
0x25BE	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x25C0	0x408010  	ADD	W1, [W0], W0
0x25C2	0x780500  	MOV	W0, W10
0x25C4	0x070CA3  	RCALL	_ReadFromEthMem
0x25C6	0x225491  	MOV	#lo_addr(_Window+1), W1
0x25C8	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,710 :: 		Lo(Window) := Eth_GetByte;
0x25CA	0x07FB1E  	RCALL	_Eth_GetByte
0x25CC	0x225481  	MOV	#lo_addr(_Window), W1
0x25CE	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,711 :: 		CopyEthMemToRam(AddrPacket + 26,@dest_ip_addr2,4);
0x25D0	0x808080  	MOV	_AddrPacket, W0
0x25D2	0x40007A  	ADD	W0, #26, W0
0x25D4	0x20004C  	MOV	#4, W12
0x25D6	0x21CC2B  	MOV	#lo_addr(_dest_ip_addr2), W11
0x25D8	0x780500  	MOV	W0, W10
0x25DA	0x07FA8F  	RCALL	_CopyEthMemToRam
;protocol_tcp.mpas,712 :: 		CopyEthMemToRam(AddrPacket + 6, @dest_mac2,6);
0x25DC	0x808080  	MOV	_AddrPacket, W0
0x25DE	0x4000E6  	ADD	W0, #6, W1
0x25E0	0x47006C  	ADD	W14, #12, W0
0x25E2	0x20006C  	MOV	#6, W12
0x25E4	0x780580  	MOV	W0, W11
0x25E6	0x780501  	MOV	W1, W10
0x25E8	0x07FA88  	RCALL	_CopyEthMemToRam
;protocol_tcp.mpas,714 :: 		if TCP_FlagR.RST = 1 then
0x25EA	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x25EC	0x784010  	MOV.B	[W0], W0
0x25EE	0xAE4000  	BTSS.B	W0, #2
0x25F0	0x37003E  	BRA	L__Eth_TcpHandler269
;protocol_tcp.mpas,716 :: 		i := 0;
; i start address is: 12 (W6)
0x25F2	0xEF200C  	CLR	W6
; i end address is: 12 (W6)
;protocol_tcp.mpas,717 :: 		while i < PORT_CACHE_LEN do  // search for opened socket
L__Eth_TcpHandler272:
; i start address is: 12 (W6)
0x25F4	0xE13062  	CP	W6, #2
0x25F6	0x31003A  	BRA GEU	L__Eth_TcpHandler273
L__Eth_TcpHandler487:
;protocol_tcp.mpas,719 :: 		if (Socket[i].State_S <> 0) and (Socket[i].dest_port_S = dest_port2)
0x25F8	0x2042C0  	MOV	#1068, W0
0x25FA	0xB80206  	MUL.UU	W0, W6, W4
0x25FC	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x25FE	0x400004  	ADD	W0, W4, W0
0x2600	0x780010  	MOV	[W0], W0
0x2602	0xE10060  	CP	W0, #0
0x2604	0xEF2004  	CLR	W2
0x2606	0x320001  	BRA Z	L__Eth_TcpHandler488
0x2608	0xEEA004  	COM	W2
L__Eth_TcpHandler488:
0x260A	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x260C	0x400004  	ADD	W0, W4, W0
0x260E	0x40006E  	ADD	W0, #14, W0
0x2610	0x780090  	MOV	[W0], W1
0x2612	0x47006A  	ADD	W14, #10, W0
0x2614	0xE10810  	CP	W1, [W0]
0x2616	0xEF2000  	CLR	W0
0x2618	0x3A0001  	BRA NZ	L__Eth_TcpHandler489
0x261A	0xEEA000  	COM	W0
L__Eth_TcpHandler489:
0x261C	0x610000  	AND	W2, W0, W0
0x261E	0x980F10  	MOV	W0, [W14+18]
;protocol_tcp.mpas,720 :: 		and (Mem_Cmp(@dest_ip_addr2, @Socket[i].Dest_Ip, 4) = 0) then
0x2620	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2622	0x400004  	ADD	W0, W4, W0
0x2624	0x400064  	ADD	W0, #4, W0
0x2626	0x20004C  	MOV	#4, W12
0x2628	0x780580  	MOV	W0, W11
0x262A	0x21CC2A  	MOV	#lo_addr(_dest_ip_addr2), W10
0x262C	0x07F7EF  	RCALL	_Mem_Cmp
0x262E	0xE10060  	CP	W0, #0
0x2630	0xEF2002  	CLR	W1
0x2632	0x3A0001  	BRA NZ	L__Eth_TcpHandler490
0x2634	0xEEA002  	COM	W1
L__Eth_TcpHandler490:
0x2636	0x90081E  	MOV	[W14+18], W0
0x2638	0x600001  	AND	W0, W1, W0
0x263A	0x320016  	BRA Z	L__Eth_TcpHandler277
L__Eth_TcpHandler491:
;protocol_tcp.mpas,722 :: 		Socket[i].State_S := 0; // disconnect
0x263C	0x2042C0  	MOV	#1068, W0
0x263E	0xB80106  	MUL.UU	W0, W6, W2
0x2640	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2642	0x400082  	ADD	W0, W2, W1
0x2644	0xEF2000  	CLR	W0
0x2646	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,723 :: 		Socket[i].Keep_Alive := False;
0x2648	0x2042C0  	MOV	#1068, W0
0x264A	0xB80106  	MUL.UU	W0, W6, W2
0x264C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x264E	0x400082  	ADD	W0, W2, W1
0x2650	0x200280  	MOV	#40, W0
0x2652	0x408080  	ADD	W1, W0, W1
0x2654	0xEF2000  	CLR	W0
0x2656	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,724 :: 		Socket[i].Wait_ACK := 0;
0x2658	0x2042C0  	MOV	#1068, W0
0x265A	0xB80106  	MUL.UU	W0, W6, W2
; i end address is: 12 (W6)
0x265C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x265E	0x400002  	ADD	W0, W2, W0
0x2660	0x4000F8  	ADD	W0, #24, W1
0x2662	0xEF2000  	CLR	W0
0x2664	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,725 :: 		break;
0x2666	0x370002  	BRA	L__Eth_TcpHandler273
;protocol_tcp.mpas,726 :: 		end;
L__Eth_TcpHandler277:
;protocol_tcp.mpas,727 :: 		inc(i);
; i start address is: 12 (W6)
0x2668	0xEC200C  	INC	W6
;protocol_tcp.mpas,728 :: 		end;
; i end address is: 12 (W6)
0x266A	0x37FFC4  	BRA	L__Eth_TcpHandler272
L__Eth_TcpHandler273:
;protocol_tcp.mpas,730 :: 		Exit;
0x266C	0x3701F6  	BRA	L_end__Eth_TcpHandler
;protocol_tcp.mpas,731 :: 		end;
L__Eth_TcpHandler269:
;protocol_tcp.mpas,733 :: 		if PacketLen = 0 then
0x266E	0x90003E  	MOV	[W14+6], W0
0x2670	0xE10060  	CP	W0, #0
0x2672	0x3A006C  	BRA NZ	L__Eth_TcpHandler280
L__Eth_TcpHandler492:
;protocol_tcp.mpas,735 :: 		if TCP_FlagR.FIN = 1 then
0x2674	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x2676	0x784010  	MOV.B	[W0], W0
0x2678	0xAE0000  	BTSS.B	W0, #0
0x267A	0x370068  	BRA	L__Eth_TcpHandler283
;protocol_tcp.mpas,737 :: 		i := 0;
; i start address is: 12 (W6)
0x267C	0xEF200C  	CLR	W6
; i end address is: 12 (W6)
;protocol_tcp.mpas,738 :: 		while i < PORT_CACHE_LEN do  // search for opened socket
L__Eth_TcpHandler286:
; i start address is: 12 (W6)
0x267E	0xE13062  	CP	W6, #2
0x2680	0x31003A  	BRA GEU	L__Eth_TcpHandler287
L__Eth_TcpHandler493:
;protocol_tcp.mpas,740 :: 		if (Socket[i].State_S <> 0) and (Socket[i].dest_port_S = dest_port2) and (Mem_Cmp(@dest_ip_addr2, @Socket[i].Dest_Ip, 4) = 0) then
0x2682	0x2042C0  	MOV	#1068, W0
0x2684	0xB80206  	MUL.UU	W0, W6, W4
0x2686	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2688	0x400004  	ADD	W0, W4, W0
0x268A	0x780010  	MOV	[W0], W0
0x268C	0xE10060  	CP	W0, #0
0x268E	0xEF2004  	CLR	W2
0x2690	0x320001  	BRA Z	L__Eth_TcpHandler494
0x2692	0xEEA004  	COM	W2
L__Eth_TcpHandler494:
0x2694	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2696	0x400004  	ADD	W0, W4, W0
0x2698	0x40006E  	ADD	W0, #14, W0
0x269A	0x780090  	MOV	[W0], W1
0x269C	0x47006A  	ADD	W14, #10, W0
0x269E	0xE10810  	CP	W1, [W0]
0x26A0	0xEF2000  	CLR	W0
0x26A2	0x3A0001  	BRA NZ	L__Eth_TcpHandler495
0x26A4	0xEEA000  	COM	W0
L__Eth_TcpHandler495:
0x26A6	0x610000  	AND	W2, W0, W0
0x26A8	0x980F10  	MOV	W0, [W14+18]
0x26AA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x26AC	0x400004  	ADD	W0, W4, W0
0x26AE	0x400064  	ADD	W0, #4, W0
0x26B0	0x20004C  	MOV	#4, W12
0x26B2	0x780580  	MOV	W0, W11
0x26B4	0x21CC2A  	MOV	#lo_addr(_dest_ip_addr2), W10
0x26B6	0x07F7AA  	RCALL	_Mem_Cmp
0x26B8	0xE10060  	CP	W0, #0
0x26BA	0xEF2002  	CLR	W1
0x26BC	0x3A0001  	BRA NZ	L__Eth_TcpHandler496
0x26BE	0xEEA002  	COM	W1
L__Eth_TcpHandler496:
0x26C0	0x90081E  	MOV	[W14+18], W0
0x26C2	0x600001  	AND	W0, W1, W0
0x26C4	0x320016  	BRA Z	L__Eth_TcpHandler291
L__Eth_TcpHandler497:
;protocol_tcp.mpas,742 :: 		Socket[i].State_S := 0; // disconnect
0x26C6	0x2042C0  	MOV	#1068, W0
0x26C8	0xB80106  	MUL.UU	W0, W6, W2
0x26CA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x26CC	0x400082  	ADD	W0, W2, W1
0x26CE	0xEF2000  	CLR	W0
0x26D0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,743 :: 		Socket[i].Keep_Alive := False;
0x26D2	0x2042C0  	MOV	#1068, W0
0x26D4	0xB80106  	MUL.UU	W0, W6, W2
0x26D6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x26D8	0x400082  	ADD	W0, W2, W1
0x26DA	0x200280  	MOV	#40, W0
0x26DC	0x408080  	ADD	W1, W0, W1
0x26DE	0xEF2000  	CLR	W0
0x26E0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,744 :: 		Socket[i].Wait_ACK := 0;
0x26E2	0x2042C0  	MOV	#1068, W0
0x26E4	0xB80106  	MUL.UU	W0, W6, W2
; i end address is: 12 (W6)
0x26E6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x26E8	0x400002  	ADD	W0, W2, W0
0x26EA	0x4000F8  	ADD	W0, #24, W1
0x26EC	0xEF2000  	CLR	W0
0x26EE	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,745 :: 		break;
0x26F0	0x370002  	BRA	L__Eth_TcpHandler287
;protocol_tcp.mpas,746 :: 		end;
L__Eth_TcpHandler291:
;protocol_tcp.mpas,747 :: 		inc(i);
; i start address is: 12 (W6)
0x26F2	0xEC200C  	INC	W6
;protocol_tcp.mpas,748 :: 		end;
; i end address is: 12 (W6)
0x26F4	0x37FFC4  	BRA	L__Eth_TcpHandler286
L__Eth_TcpHandler287:
;protocol_tcp.mpas,750 :: 		if TCP_FlagR.RST = 1 then
0x26F6	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x26F8	0x784010  	MOV.B	[W0], W0
0x26FA	0xAE4000  	BTSS.B	W0, #2
0x26FC	0x370001  	BRA	L__Eth_TcpHandler294
;protocol_tcp.mpas,751 :: 		Exit; // Note that RST packets are not acknowledged.
0x26FE	0x3701AD  	BRA	L_end__Eth_TcpHandler
L__Eth_TcpHandler294:
;protocol_tcp.mpas,753 :: 		SEQ_No := ACK_NoR;
0x2700	0x80E630  	MOV	_ACK_NoR, W0
0x2702	0x80E641  	MOV	_ACK_NoR+2, W1
0x2704	0x88E560  	MOV	W0, _SEQ_No
0x2706	0x88E571  	MOV	W1, _SEQ_No+2
;protocol_tcp.mpas,754 :: 		ACK_No := SEQ_NoR + 1;
0x2708	0x80E5F1  	MOV	_SEQ_NoR, W1
0x270A	0x80E602  	MOV	_SEQ_NoR+2, W2
0x270C	0x21CB00  	MOV	#lo_addr(_ACK_No), W0
0x270E	0x409861  	ADD	W1, #1, [W0++]
0x2710	0x491060  	ADDC	W2, #0, [W0--]
;protocol_tcp.mpas,756 :: 		if TCP_FlagR.ACK = 1 then
0x2712	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x2714	0x784010  	MOV.B	[W0], W0
0x2716	0xAE8000  	BTSS.B	W0, #4
0x2718	0x370004  	BRA	L__Eth_TcpHandler297
;protocol_tcp.mpas,757 :: 		TCP_Flag := ACK_S                 // FIN + ACK, response only with ACK
0x271A	0x21CB71  	MOV	#lo_addr(_TCP_Flag), W1
0x271C	0xB3C100  	MOV.B	#16, W0
0x271E	0x784880  	MOV.B	W0, [W1]
0x2720	0x370007  	BRA	L__Eth_TcpHandler298
;protocol_tcp.mpas,758 :: 		else begin
L__Eth_TcpHandler297:
;protocol_tcp.mpas,759 :: 		if TCP_FlagR.FIN = 1 then
0x2722	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x2724	0x784010  	MOV.B	[W0], W0
0x2726	0xAE0000  	BTSS.B	W0, #0
0x2728	0x370003  	BRA	L__Eth_TcpHandler300
;protocol_tcp.mpas,760 :: 		TCP_Flag := ACK_S + FIN_S;   // FIN response with FIN + ACK
0x272A	0x21CB71  	MOV	#lo_addr(_TCP_Flag), W1
0x272C	0xB3C110  	MOV.B	#17, W0
0x272E	0x784880  	MOV.B	W0, [W1]
L__Eth_TcpHandler300:
;protocol_tcp.mpas,761 :: 		end;
L__Eth_TcpHandler298:
;protocol_tcp.mpas,763 :: 		Eth_MacSwap;
0x2730	0x07F223  	RCALL	_Eth_MacSwap
;protocol_tcp.mpas,764 :: 		Eth_IpSwap;
0x2732	0x07F1E0  	RCALL	_Eth_IpSwap
;protocol_tcp.mpas,765 :: 		Eth_SendTCP(source_port2, dest_port2, 0, SEQ_No, ACK_No, TCP_Flag);
0x2734	0x21CB70  	MOV	#lo_addr(_TCP_Flag), W0
0x2736	0x784690  	MOV.B	[W0], W13
0x2738	0xEF2018  	CLR	W12
0x273A	0x9005DE  	MOV	[W14+10], W11
0x273C	0x90054E  	MOV	[W14+8], W10
0x273E	0xF81CB0  	PUSH	_ACK_No
0x2740	0xF81CB2  	PUSH	_ACK_No+2
0x2742	0xF81CAC  	PUSH	_SEQ_No
0x2744	0xF81CAE  	PUSH	_SEQ_No+2
0x2746	0x07F691  	RCALL	_Eth_SendTCP
0x2748	0xB1008F  	SUB	#8, W15
;protocol_tcp.mpas,767 :: 		Exit;
0x274A	0x370187  	BRA	L_end__Eth_TcpHandler
;protocol_tcp.mpas,768 :: 		end;
L__Eth_TcpHandler283:
;protocol_tcp.mpas,769 :: 		end;
L__Eth_TcpHandler280:
;protocol_tcp.mpas,771 :: 		if TCP_FlagR.SYN = 1 then // SYN
0x274C	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x274E	0x784010  	MOV.B	[W0], W0
0x2750	0xAE2000  	BTSS.B	W0, #1
0x2752	0x3700C5  	BRA	L__Eth_TcpHandler303
;protocol_tcp.mpas,774 :: 		i := 0;
; i start address is: 14 (W7)
0x2754	0xEF200E  	CLR	W7
; i end address is: 14 (W7)
;protocol_tcp.mpas,775 :: 		while i < PORT_CACHE_LEN do  // search for opened socket
L__Eth_TcpHandler306:
; i start address is: 14 (W7)
0x2756	0xE13862  	CP	W7, #2
0x2758	0x310025  	BRA GEU	L__Eth_TcpHandler307
L__Eth_TcpHandler498:
;protocol_tcp.mpas,777 :: 		if (Socket[i].State_S <> 0) and (Socket[i].dest_port_S = dest_port2)
0x275A	0x2042C0  	MOV	#1068, W0
0x275C	0xB80207  	MUL.UU	W0, W7, W4
0x275E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2760	0x400004  	ADD	W0, W4, W0
0x2762	0x780010  	MOV	[W0], W0
0x2764	0xE10060  	CP	W0, #0
0x2766	0xEF2004  	CLR	W2
0x2768	0x320001  	BRA Z	L__Eth_TcpHandler499
0x276A	0xEEA004  	COM	W2
L__Eth_TcpHandler499:
0x276C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x276E	0x400004  	ADD	W0, W4, W0
0x2770	0x40006E  	ADD	W0, #14, W0
0x2772	0x780090  	MOV	[W0], W1
0x2774	0x47006A  	ADD	W14, #10, W0
0x2776	0xE10810  	CP	W1, [W0]
0x2778	0xEF2000  	CLR	W0
0x277A	0x3A0001  	BRA NZ	L__Eth_TcpHandler500
0x277C	0xEEA000  	COM	W0
L__Eth_TcpHandler500:
0x277E	0x610000  	AND	W2, W0, W0
0x2780	0x980F10  	MOV	W0, [W14+18]
;protocol_tcp.mpas,778 :: 		and (Mem_Cmp(@dest_ip_addr2, @Socket[i].Dest_Ip, 4) = 0) then  break; // if connected
0x2782	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2784	0x400004  	ADD	W0, W4, W0
0x2786	0x400064  	ADD	W0, #4, W0
0x2788	0x20004C  	MOV	#4, W12
0x278A	0x780580  	MOV	W0, W11
0x278C	0x21CC2A  	MOV	#lo_addr(_dest_ip_addr2), W10
0x278E	0x07F73E  	RCALL	_Mem_Cmp
0x2790	0xE10060  	CP	W0, #0
0x2792	0xEF2002  	CLR	W1
0x2794	0x3A0001  	BRA NZ	L__Eth_TcpHandler501
0x2796	0xEEA002  	COM	W1
L__Eth_TcpHandler501:
0x2798	0x90081E  	MOV	[W14+18], W0
0x279A	0x600001  	AND	W0, W1, W0
0x279C	0x320001  	BRA Z	L__Eth_TcpHandler311
L__Eth_TcpHandler502:
0x279E	0x370002  	BRA	L__Eth_TcpHandler307
L__Eth_TcpHandler311:
;protocol_tcp.mpas,779 :: 		inc(i);
0x27A0	0xEC200E  	INC	W7
;protocol_tcp.mpas,780 :: 		end;
0x27A2	0x37FFD9  	BRA	L__Eth_TcpHandler306
L__Eth_TcpHandler307:
;protocol_tcp.mpas,781 :: 		if i = PORT_CACHE_LEN then
0x27A4	0xE13862  	CP	W7, #2
0x27A6	0x3A000E  	BRA NZ	L__Eth_TcpHandler396
L__Eth_TcpHandler503:
;protocol_tcp.mpas,783 :: 		i := 0;
0x27A8	0xEF200E  	CLR	W7
; i end address is: 14 (W7)
;protocol_tcp.mpas,784 :: 		while i < PORT_CACHE_LEN do  // search for free socket
L__Eth_TcpHandler317:
; i start address is: 14 (W7)
0x27AA	0xE13862  	CP	W7, #2
0x27AC	0x31000A  	BRA GEU	L__Eth_TcpHandler318
L__Eth_TcpHandler504:
;protocol_tcp.mpas,786 :: 		if Socket[i].State_S = 0 then break;
0x27AE	0x2042C0  	MOV	#1068, W0
0x27B0	0xB80107  	MUL.UU	W0, W7, W2
0x27B2	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x27B4	0x400002  	ADD	W0, W2, W0
0x27B6	0x780010  	MOV	[W0], W0
0x27B8	0xE10060  	CP	W0, #0
0x27BA	0x3A0001  	BRA NZ	L__Eth_TcpHandler322
L__Eth_TcpHandler505:
0x27BC	0x370002  	BRA	L__Eth_TcpHandler318
L__Eth_TcpHandler322:
;protocol_tcp.mpas,787 :: 		inc(i);
0x27BE	0xEC200E  	INC	W7
;protocol_tcp.mpas,788 :: 		end;
0x27C0	0x37FFF4  	BRA	L__Eth_TcpHandler317
L__Eth_TcpHandler318:
;protocol_tcp.mpas,789 :: 		end;
0x27C2	0x370000  	BRA	L__Eth_TcpHandler314
; i end address is: 14 (W7)
L__Eth_TcpHandler396:
;protocol_tcp.mpas,781 :: 		if i = PORT_CACHE_LEN then
;protocol_tcp.mpas,789 :: 		end;
L__Eth_TcpHandler314:
;protocol_tcp.mpas,790 :: 		if i = PORT_CACHE_LEN then Exit;
; i start address is: 14 (W7)
0x27C4	0xE13862  	CP	W7, #2
0x27C6	0x3A0001  	BRA NZ	L__Eth_TcpHandler325
L__Eth_TcpHandler506:
; i end address is: 14 (W7)
0x27C8	0x370148  	BRA	L_end__Eth_TcpHandler
L__Eth_TcpHandler325:
;protocol_tcp.mpas,792 :: 		SEQ_No := ACK_NoR;
; i start address is: 14 (W7)
0x27CA	0x80E630  	MOV	_ACK_NoR, W0
0x27CC	0x80E641  	MOV	_ACK_NoR+2, W1
0x27CE	0x88E560  	MOV	W0, _SEQ_No
0x27D0	0x88E571  	MOV	W1, _SEQ_No+2
;protocol_tcp.mpas,793 :: 		ACK_No := SEQ_NoR + 1;
0x27D2	0x80E5F1  	MOV	_SEQ_NoR, W1
0x27D4	0x80E602  	MOV	_SEQ_NoR+2, W2
0x27D6	0x21CB00  	MOV	#lo_addr(_ACK_No), W0
0x27D8	0x409861  	ADD	W1, #1, [W0++]
0x27DA	0x491060  	ADDC	W2, #0, [W0--]
;protocol_tcp.mpas,795 :: 		if TCP_FlagR.ACK = 1 then // ACK
0x27DC	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x27DE	0x784010  	MOV.B	[W0], W0
0x27E0	0xAE8000  	BTSS.B	W0, #4
0x27E2	0x37000C  	BRA	L__Eth_TcpHandler328
;protocol_tcp.mpas,797 :: 		TCP_Flag := ACK_S;
0x27E4	0x21CB71  	MOV	#lo_addr(_TCP_Flag), W1
0x27E6	0xB3C100  	MOV.B	#16, W0
0x27E8	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,798 :: 		Align := 0;
; Align start address is: 8 (W4)
0x27EA	0xEF2008  	CLR	W4
;protocol_tcp.mpas,799 :: 		Socket[i].State_S := 2; // Connected
0x27EC	0x2042C0  	MOV	#1068, W0
0x27EE	0xB80107  	MUL.UU	W0, W7, W2
0x27F0	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x27F2	0x400082  	ADD	W0, W2, W1
0x27F4	0x200020  	MOV	#2, W0
0x27F6	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,800 :: 		end
0x27F8	0x784404  	MOV.B	W4, W8
; Align end address is: 8 (W4)
0x27FA	0x37000B  	BRA	L__Eth_TcpHandler329
;protocol_tcp.mpas,801 :: 		else
L__Eth_TcpHandler328:
;protocol_tcp.mpas,803 :: 		TCP_Flag := SYN_S + ACK_S;
0x27FC	0x21CB71  	MOV	#lo_addr(_TCP_Flag), W1
0x27FE	0xB3C120  	MOV.B	#18, W0
0x2800	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,804 :: 		Align := 8;
; Align start address is: 8 (W4)
0x2802	0xB3C084  	MOV.B	#8, W4
;protocol_tcp.mpas,805 :: 		Socket[i].State_S := 1; // Wait for Connection
0x2804	0x2042C0  	MOV	#1068, W0
0x2806	0xB80107  	MUL.UU	W0, W7, W2
0x2808	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x280A	0x400082  	ADD	W0, W2, W1
0x280C	0x200010  	MOV	#1, W0
0x280E	0x780880  	MOV	W0, [W1]
; Align end address is: 8 (W4)
0x2810	0x784404  	MOV.B	W4, W8
;protocol_tcp.mpas,806 :: 		end;
L__Eth_TcpHandler329:
;protocol_tcp.mpas,808 :: 		Socket[i].Wait_Ack := 0;
; Align start address is: 16 (W8)
0x2812	0x2042C0  	MOV	#1068, W0
0x2814	0xB80107  	MUL.UU	W0, W7, W2
0x2816	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2818	0x400002  	ADD	W0, W2, W0
0x281A	0x4000F8  	ADD	W0, #24, W1
0x281C	0xEF2000  	CLR	W0
0x281E	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,809 :: 		Socket[i].SEQ_No_S := SEQ_No;
0x2820	0x2042C0  	MOV	#1068, W0
0x2822	0xB80107  	MUL.UU	W0, W7, W2
0x2824	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2826	0x400002  	ADD	W0, W2, W0
0x2828	0x400170  	ADD	W0, #16, W2
0x282A	0x80E560  	MOV	_SEQ_No, W0
0x282C	0x80E571  	MOV	_SEQ_No+2, W1
0x282E	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,810 :: 		Socket[i].ACK_No_S := ACK_No;
0x2830	0x2042C0  	MOV	#1068, W0
0x2832	0xB80107  	MUL.UU	W0, W7, W2
0x2834	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2836	0x400002  	ADD	W0, W2, W0
0x2838	0x400174  	ADD	W0, #20, W2
0x283A	0x80E580  	MOV	_ACK_No, W0
0x283C	0x80E591  	MOV	_ACK_No+2, W1
0x283E	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,811 :: 		Socket[i].dest_port_S := dest_port2;
0x2840	0x2042C0  	MOV	#1068, W0
0x2842	0xB80107  	MUL.UU	W0, W7, W2
0x2844	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2846	0x400002  	ADD	W0, W2, W0
0x2848	0x4000EE  	ADD	W0, #14, W1
0x284A	0x90005E  	MOV	[W14+10], W0
0x284C	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,812 :: 		Socket[i].source_port_S := source_port2;
0x284E	0x2042C0  	MOV	#1068, W0
0x2850	0xB80107  	MUL.UU	W0, W7, W2
0x2852	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2854	0x400002  	ADD	W0, W2, W0
0x2856	0x4000E2  	ADD	W0, #2, W1
0x2858	0x90004E  	MOV	[W14+8], W0
0x285A	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,813 :: 		Mem_Cpy(@Socket[i].Dest_Ip, @dest_ip_addr2, 4);
0x285C	0x2042C0  	MOV	#1068, W0
0x285E	0xB80107  	MUL.UU	W0, W7, W2
0x2860	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2862	0x400002  	ADD	W0, W2, W0
0x2864	0x400064  	ADD	W0, #4, W0
0x2866	0x20004C  	MOV	#4, W12
0x2868	0x21CC2B  	MOV	#lo_addr(_dest_ip_addr2), W11
0x286A	0x780500  	MOV	W0, W10
0x286C	0x07EE00  	RCALL	_Mem_Cpy
;protocol_tcp.mpas,814 :: 		Mem_Cpy(@Socket[i].Dest_Mac, @dest_mac2, 6);
0x286E	0x2042C0  	MOV	#1068, W0
0x2870	0xB80107  	MUL.UU	W0, W7, W2
0x2872	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2874	0x400002  	ADD	W0, W2, W0
0x2876	0x4000E8  	ADD	W0, #8, W1
0x2878	0x47006C  	ADD	W14, #12, W0
0x287A	0x20006C  	MOV	#6, W12
0x287C	0x780580  	MOV	W0, W11
0x287E	0x780501  	MOV	W1, W10
0x2880	0x07EDF6  	RCALL	_Mem_Cpy
;protocol_tcp.mpas,815 :: 		Socket[i].Exp_Time := 0;
0x2882	0x2042C0  	MOV	#1068, W0
0x2884	0xB80107  	MUL.UU	W0, W7, W2
0x2886	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2888	0x400002  	ADD	W0, W2, W0
0x288A	0x4000FA  	ADD	W0, #26, W1
0x288C	0xEF2000  	CLR	W0
0x288E	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,816 :: 		Socket[i].Start_addr := 0;
0x2890	0x2042C0  	MOV	#1068, W0
0x2892	0xB80107  	MUL.UU	W0, W7, W2
0x2894	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2896	0x400002  	ADD	W0, W2, W0
0x2898	0x40017E  	ADD	W0, #30, W2
0x289A	0xEF2000  	CLR	W0
0x289C	0xEF2002  	CLR	W1
0x289E	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,817 :: 		Socket[i].Stop_addr := 0;
0x28A0	0x2042C0  	MOV	#1068, W0
0x28A2	0xB80107  	MUL.UU	W0, W7, W2
0x28A4	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x28A6	0x400082  	ADD	W0, W2, W1
0x28A8	0x200220  	MOV	#34, W0
0x28AA	0x408100  	ADD	W1, W0, W2
0x28AC	0xEF2000  	CLR	W0
0x28AE	0xEF2002  	CLR	W1
0x28B0	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,818 :: 		Socket[i].Keep_Alive := True; // Keep Alive
0x28B2	0x2042C0  	MOV	#1068, W0
0x28B4	0xB80107  	MUL.UU	W0, W7, W2
; i end address is: 14 (W7)
0x28B6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x28B8	0x400082  	ADD	W0, W2, W1
0x28BA	0x200280  	MOV	#40, W0
0x28BC	0x408080  	ADD	W1, W0, W1
0x28BE	0x2FFFF0  	MOV	#65535, W0
0x28C0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,820 :: 		Eth_MacSwap;
0x28C2	0x07F15A  	RCALL	_Eth_MacSwap
;protocol_tcp.mpas,821 :: 		Eth_IpSwap;
0x28C4	0x07F117  	RCALL	_Eth_IpSwap
;protocol_tcp.mpas,822 :: 		Eth_SendTCP(source_port2, dest_port2, Align, SEQ_No, ACK_No, TCP_Flag);
0x28C6	0x21CB70  	MOV	#lo_addr(_TCP_Flag), W0
0x28C8	0x784690  	MOV.B	[W0], W13
0x28CA	0xFB8608  	ZE	W8, W12
; Align end address is: 16 (W8)
0x28CC	0x9005DE  	MOV	[W14+10], W11
0x28CE	0x90054E  	MOV	[W14+8], W10
0x28D0	0xF81CB0  	PUSH	_ACK_No
0x28D2	0xF81CB2  	PUSH	_ACK_No+2
0x28D4	0xF81CAC  	PUSH	_SEQ_No
0x28D6	0xF81CAE  	PUSH	_SEQ_No+2
0x28D8	0x07F5C8  	RCALL	_Eth_SendTCP
0x28DA	0xB1008F  	SUB	#8, W15
;protocol_tcp.mpas,824 :: 		Exit;
0x28DC	0x3700BE  	BRA	L_end__Eth_TcpHandler
;protocol_tcp.mpas,825 :: 		end;
L__Eth_TcpHandler303:
;protocol_tcp.mpas,827 :: 		if TCP_FlagR.ACK = 1 then // ACK
0x28DE	0x21CB60  	MOV	#lo_addr(_TCP_FlagR), W0
0x28E0	0x784010  	MOV.B	[W0], W0
0x28E2	0xAE8000  	BTSS.B	W0, #4
0x28E4	0x3700BA  	BRA	L__Eth_TcpHandler331
;protocol_tcp.mpas,830 :: 		i := 0;
; i start address is: 12 (W6)
0x28E6	0xEF200C  	CLR	W6
; i end address is: 12 (W6)
;protocol_tcp.mpas,831 :: 		while i < PORT_CACHE_LEN do  // search for connected socket
L__Eth_TcpHandler334:
; i start address is: 12 (W6)
0x28E8	0xE13062  	CP	W6, #2
0x28EA	0x310025  	BRA GEU	L__Eth_TcpHandler335
L__Eth_TcpHandler507:
;protocol_tcp.mpas,833 :: 		if (Socket[i].State_S <> 0) and (Socket[i].dest_port_S = dest_port2)
0x28EC	0x2042C0  	MOV	#1068, W0
0x28EE	0xB80206  	MUL.UU	W0, W6, W4
0x28F0	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x28F2	0x400004  	ADD	W0, W4, W0
0x28F4	0x780010  	MOV	[W0], W0
0x28F6	0xE10060  	CP	W0, #0
0x28F8	0xEF2004  	CLR	W2
0x28FA	0x320001  	BRA Z	L__Eth_TcpHandler508
0x28FC	0xEEA004  	COM	W2
L__Eth_TcpHandler508:
0x28FE	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2900	0x400004  	ADD	W0, W4, W0
0x2902	0x40006E  	ADD	W0, #14, W0
0x2904	0x780090  	MOV	[W0], W1
0x2906	0x47006A  	ADD	W14, #10, W0
0x2908	0xE10810  	CP	W1, [W0]
0x290A	0xEF2000  	CLR	W0
0x290C	0x3A0001  	BRA NZ	L__Eth_TcpHandler509
0x290E	0xEEA000  	COM	W0
L__Eth_TcpHandler509:
0x2910	0x610000  	AND	W2, W0, W0
0x2912	0x980F10  	MOV	W0, [W14+18]
;protocol_tcp.mpas,834 :: 		and (Mem_Cmp(@dest_ip_addr2, @Socket[i].Dest_Ip, 4) = 0) then break;
0x2914	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2916	0x400004  	ADD	W0, W4, W0
0x2918	0x400064  	ADD	W0, #4, W0
0x291A	0x20004C  	MOV	#4, W12
0x291C	0x780580  	MOV	W0, W11
0x291E	0x21CC2A  	MOV	#lo_addr(_dest_ip_addr2), W10
0x2920	0x07F675  	RCALL	_Mem_Cmp
0x2922	0xE10060  	CP	W0, #0
0x2924	0xEF2002  	CLR	W1
0x2926	0x3A0001  	BRA NZ	L__Eth_TcpHandler510
0x2928	0xEEA002  	COM	W1
L__Eth_TcpHandler510:
0x292A	0x90081E  	MOV	[W14+18], W0
0x292C	0x600001  	AND	W0, W1, W0
0x292E	0x320001  	BRA Z	L__Eth_TcpHandler339
L__Eth_TcpHandler511:
0x2930	0x370002  	BRA	L__Eth_TcpHandler335
L__Eth_TcpHandler339:
;protocol_tcp.mpas,835 :: 		inc(i);
0x2932	0xEC200C  	INC	W6
;protocol_tcp.mpas,836 :: 		end;
0x2934	0x37FFD9  	BRA	L__Eth_TcpHandler334
L__Eth_TcpHandler335:
;protocol_tcp.mpas,837 :: 		if i < PORT_CACHE_LEN then
0x2936	0xE13062  	CP	W6, #2
0x2938	0x310090  	BRA GEU	L__Eth_TcpHandler342
L__Eth_TcpHandler512:
;protocol_tcp.mpas,839 :: 		if (Socket[i].State_S = 1) or (Socket[i].Wait_ACK <> 0) then
0x293A	0x2042C0  	MOV	#1068, W0
0x293C	0xB80106  	MUL.UU	W0, W6, W2
0x293E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2940	0x400002  	ADD	W0, W2, W0
0x2942	0x780010  	MOV	[W0], W0
0x2944	0xE10061  	CP	W0, #1
0x2946	0xEF2002  	CLR	W1
0x2948	0x3A0001  	BRA NZ	L__Eth_TcpHandler513
0x294A	0xEEA002  	COM	W1
L__Eth_TcpHandler513:
0x294C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x294E	0x400002  	ADD	W0, W2, W0
0x2950	0x400078  	ADD	W0, #24, W0
0x2952	0x780010  	MOV	[W0], W0
0x2954	0xE10060  	CP	W0, #0
0x2956	0xEF2000  	CLR	W0
0x2958	0x320001  	BRA Z	L__Eth_TcpHandler514
0x295A	0xEEA000  	COM	W0
L__Eth_TcpHandler514:
0x295C	0x708000  	IOR	W1, W0, W0
0x295E	0x320025  	BRA Z	L__Eth_TcpHandler345
L__Eth_TcpHandler515:
;protocol_tcp.mpas,841 :: 		Socket[i].State_S := 2; // Connected
0x2960	0x2042C0  	MOV	#1068, W0
0x2962	0xB80106  	MUL.UU	W0, W6, W2
0x2964	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2966	0x400082  	ADD	W0, W2, W1
0x2968	0x200020  	MOV	#2, W0
0x296A	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,842 :: 		Socket[i].Wait_ACK := 0;
0x296C	0x2042C0  	MOV	#1068, W0
0x296E	0xB80106  	MUL.UU	W0, W6, W2
0x2970	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2972	0x400002  	ADD	W0, W2, W0
0x2974	0x4000F8  	ADD	W0, #24, W1
0x2976	0xEF2000  	CLR	W0
0x2978	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,843 :: 		Socket[i].ACK_No_S := SEQ_NoR;
0x297A	0x2042C0  	MOV	#1068, W0
0x297C	0xB80106  	MUL.UU	W0, W6, W2
0x297E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2980	0x400002  	ADD	W0, W2, W0
0x2982	0x400174  	ADD	W0, #20, W2
0x2984	0x80E5F0  	MOV	_SEQ_NoR, W0
0x2986	0x80E601  	MOV	_SEQ_NoR+2, W1
0x2988	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,844 :: 		Socket[i].SEQ_No_S := ACK_NoR;
0x298A	0x2042C0  	MOV	#1068, W0
0x298C	0xB80106  	MUL.UU	W0, W6, W2
0x298E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2990	0x400002  	ADD	W0, W2, W0
0x2992	0x400170  	ADD	W0, #16, W2
0x2994	0x80E630  	MOV	_ACK_NoR, W0
0x2996	0x80E641  	MOV	_ACK_NoR+2, W1
0x2998	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,845 :: 		Socket[i].Exp_Time := 0; // keep Alive
0x299A	0x2042C0  	MOV	#1068, W0
0x299C	0xB80106  	MUL.UU	W0, W6, W2
; i end address is: 12 (W6)
0x299E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x29A0	0x400002  	ADD	W0, W2, W0
0x29A2	0x4000FA  	ADD	W0, #26, W1
0x29A4	0xEF2000  	CLR	W0
0x29A6	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,846 :: 		Exit;
0x29A8	0x370058  	BRA	L_end__Eth_TcpHandler
;protocol_tcp.mpas,848 :: 		else
L__Eth_TcpHandler345:
;protocol_tcp.mpas,850 :: 		SEQ_No := ACK_NoR;
; i start address is: 12 (W6)
0x29AA	0x80E630  	MOV	_ACK_NoR, W0
0x29AC	0x80E641  	MOV	_ACK_NoR+2, W1
0x29AE	0x88E560  	MOV	W0, _SEQ_No
0x29B0	0x88E571  	MOV	W1, _SEQ_No+2
;protocol_tcp.mpas,851 :: 		ACK_No := SEQ_NoR + PacketLen;
0x29B2	0x90013E  	MOV	[W14+6], W2
0x29B4	0xEB0180  	CLR	W3
0x29B6	0x21CBE1  	MOV	#lo_addr(_SEQ_NoR), W1
0x29B8	0x21CB00  	MOV	#lo_addr(_ACK_No), W0
0x29BA	0x411831  	ADD	W2, [W1++], [W0++]
0x29BC	0x499021  	ADDC	W3, [W1--], [W0--]
;protocol_tcp.mpas,852 :: 		TCP_Flag := ACK_S;
0x29BE	0x21CB71  	MOV	#lo_addr(_TCP_Flag), W1
0x29C0	0xB3C100  	MOV.B	#16, W0
0x29C2	0x784880  	MOV.B	W0, [W1]
;protocol_tcp.mpas,854 :: 		Socket[i].Wait_ACK := 0;
0x29C4	0x2042C0  	MOV	#1068, W0
0x29C6	0xB80106  	MUL.UU	W0, W6, W2
0x29C8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x29CA	0x400002  	ADD	W0, W2, W0
0x29CC	0x4000F8  	ADD	W0, #24, W1
0x29CE	0xEF2000  	CLR	W0
0x29D0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,855 :: 		Socket[i].SEQ_No_S := SEQ_No;
0x29D2	0x2042C0  	MOV	#1068, W0
0x29D4	0xB80106  	MUL.UU	W0, W6, W2
0x29D6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x29D8	0x400002  	ADD	W0, W2, W0
0x29DA	0x400170  	ADD	W0, #16, W2
0x29DC	0x80E560  	MOV	_SEQ_No, W0
0x29DE	0x80E571  	MOV	_SEQ_No+2, W1
0x29E0	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,856 :: 		Socket[i].ACK_No_S := ACK_No;
0x29E2	0x2042C0  	MOV	#1068, W0
0x29E4	0xB80106  	MUL.UU	W0, W6, W2
0x29E6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x29E8	0x400002  	ADD	W0, W2, W0
0x29EA	0x400174  	ADD	W0, #20, W2
0x29EC	0x80E580  	MOV	_ACK_No, W0
0x29EE	0x80E591  	MOV	_ACK_No+2, W1
0x29F0	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,857 :: 		Socket[i].dest_port_S := dest_port2;
0x29F2	0x2042C0  	MOV	#1068, W0
0x29F4	0xB80106  	MUL.UU	W0, W6, W2
0x29F6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x29F8	0x400002  	ADD	W0, W2, W0
0x29FA	0x4000EE  	ADD	W0, #14, W1
0x29FC	0x90005E  	MOV	[W14+10], W0
0x29FE	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,858 :: 		Socket[i].source_port_S := source_port2;
0x2A00	0x2042C0  	MOV	#1068, W0
0x2A02	0xB80106  	MUL.UU	W0, W6, W2
0x2A04	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2A06	0x400002  	ADD	W0, W2, W0
0x2A08	0x4000E2  	ADD	W0, #2, W1
0x2A0A	0x90004E  	MOV	[W14+8], W0
0x2A0C	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,859 :: 		Socket[i].Exp_Time := 0; // keep Alive
0x2A0E	0x2042C0  	MOV	#1068, W0
0x2A10	0xB80106  	MUL.UU	W0, W6, W2
0x2A12	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x2A14	0x400002  	ADD	W0, W2, W0
0x2A16	0x4000FA  	ADD	W0, #26, W1
0x2A18	0xEF2000  	CLR	W0
0x2A1A	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,861 :: 		Eth_MacSwap;
0x2A1C	0x07F0AD  	RCALL	_Eth_MacSwap
;protocol_tcp.mpas,862 :: 		Eth_IpSwap;
0x2A1E	0x07F06A  	RCALL	_Eth_IpSwap
;protocol_tcp.mpas,864 :: 		Eth_SendTCP(source_port2, dest_port2, 0, SEQ_No, ACK_No, TCP_Flag);
0x2A20	0x21CB70  	MOV	#lo_addr(_TCP_Flag), W0
0x2A22	0x784690  	MOV.B	[W0], W13
0x2A24	0xEF2018  	CLR	W12
0x2A26	0x9005DE  	MOV	[W14+10], W11
0x2A28	0x90054E  	MOV	[W14+8], W10
0x2A2A	0xF81CB0  	PUSH	_ACK_No
0x2A2C	0xF81CB2  	PUSH	_ACK_No+2
0x2A2E	0xF81CAC  	PUSH	_SEQ_No
0x2A30	0xF81CAE  	PUSH	_SEQ_No+2
0x2A32	0x07F51B  	RCALL	_Eth_SendTCP
0x2A34	0xB1008F  	SUB	#8, W15
;protocol_tcp.mpas,866 :: 		Align := ReadFromEthMem(AddrPacket + 53); // put rx pointer to start of TCP data.
0x2A36	0x200351  	MOV	#53, W1
0x2A38	0x210100  	MOV	#lo_addr(_AddrPacket), W0
0x2A3A	0x408010  	ADD	W1, [W0], W0
0x2A3C	0x780500  	MOV	W0, W10
0x2A3E	0x070A66  	RCALL	_ReadFromEthMem
;protocol_tcp.mpas,867 :: 		if PacketLen <> 0 then Eth_UserTCP(dest_ip_addr2, source_port2, dest_port2, PacketLen, i);
0x2A40	0x90003E  	MOV	[W14+6], W0
0x2A42	0xE10060  	CP	W0, #0
0x2A44	0x32000A  	BRA Z	L__Eth_TcpHandler348
L__Eth_TcpHandler516:
0x2A46	0x470166  	ADD	W14, #6, W2
0x2A48	0x4700EA  	ADD	W14, #10, W1
0x2A4A	0x470068  	ADD	W14, #8, W0
0x2A4C	0x780682  	MOV	W2, W13
0x2A4E	0x780601  	MOV	W1, W12
0x2A50	0x780580  	MOV	W0, W11
0x2A52	0x21CC2A  	MOV	#lo_addr(_dest_ip_addr2), W10
0x2A54	0x781F86  	PUSH	W6
; i end address is: 12 (W6)
0x2A56	0x07F506  	RCALL	_Eth_UserTCP
0x2A58	0xB1002F  	SUB	#2, W15
L__Eth_TcpHandler348:
;protocol_tcp.mpas,869 :: 		end;
L__Eth_TcpHandler342:
;protocol_tcp.mpas,870 :: 		end;
L__Eth_TcpHandler331:
;protocol_tcp.mpas,871 :: 		end;
L_end__Eth_TcpHandler:
L_end_Eth_TcpHandler:
0x2A5A	0x7806CF  	POP	W13
0x2A5C	0x78064F  	POP	W12
0x2A5E	0x7805CF  	POP	W11
0x2A60	0x78054F  	POP	W10
0x2A62	0xFA8000  	ULNK
0x2A64	0x060000  	RETURN
; end of _Eth_TcpHandler
_Search_Port:
;port_utilities.mpas,34 :: 		begin
;port_utilities.mpas,35 :: 		result := false;
; Result start address is: 2 (W1)
0x15D6	0xEF2002  	CLR	W1
;port_utilities.mpas,36 :: 		if port_ = 0 then exit;
0x15D8	0xE15860  	CP	W11, #0
0x15DA	0x3A0001  	BRA NZ	L__Search_Port2
L__Search_Port55:
0x15DC	0x370015  	BRA	L_end__Search_Port
L__Search_Port2:
;port_utilities.mpas,37 :: 		if protocol = TCP then
0x15DE	0xB3C640  	MOV.B	#100, W0
0x15E0	0xE15400  	CP.B	W10, W0
0x15E2	0x3A0002  	BRA NZ	L__Search_Port5
L__Search_Port56:
;port_utilities.mpas,38 :: 		pt := @TCP_Opened_Ports
; pt start address is: 6 (W3)
0x15E4	0x21CA83  	MOV	#lo_addr(_TCP_Opened_Ports), W3
; pt end address is: 6 (W3)
0x15E6	0x370001  	BRA	L__Search_Port6
;port_utilities.mpas,39 :: 		else pt := @UDP_Opened_Ports;
L__Search_Port5:
; pt start address is: 6 (W3)
0x15E8	0x21CA03  	MOV	#lo_addr(_UDP_Opened_Ports), W3
; pt end address is: 6 (W3)
L__Search_Port6:
;port_utilities.mpas,40 :: 		i := 0;
; pt start address is: 6 (W3)
; i start address is: 0 (W0)
0x15EA	0xEF2000  	CLR	W0
; pt end address is: 6 (W3)
; i end address is: 0 (W0)
; Result end address is: 2 (W1)
0x15EC	0x780101  	MOV	W1, W2
0x15EE	0x784080  	MOV.B	W0, W1
;port_utilities.mpas,41 :: 		while i < PORT_CACHE_LEN do
L__Search_Port8:
; i start address is: 2 (W1)
; pt start address is: 6 (W3)
; Result start address is: 4 (W2)
0x15F0	0xE10C62  	CP.B	W1, #2
0x15F2	0x310009  	BRA GEU	L__Search_Port9
L__Search_Port57:
;port_utilities.mpas,43 :: 		if pt^ = port_ then
0x15F4	0x780013  	MOV	[W3], W0
0x15F6	0xE1000B  	CP	W0, W11
0x15F8	0x3A0002  	BRA NZ	L__Search_Port13
L__Search_Port58:
; i end address is: 2 (W1)
; Result end address is: 4 (W2)
; pt end address is: 6 (W3)
;port_utilities.mpas,45 :: 		result := true;
; Result start address is: 2 (W1)
0x15FA	0x2FFFF1  	MOV	#65535, W1
;port_utilities.mpas,46 :: 		exit;
; Result end address is: 2 (W1)
0x15FC	0x370005  	BRA	L_end__Search_Port
;port_utilities.mpas,47 :: 		end;
L__Search_Port13:
;port_utilities.mpas,48 :: 		pt := pt + 1;
; pt start address is: 6 (W3)
; Result start address is: 4 (W2)
; i start address is: 2 (W1)
0x15FE	0xECA006  	INC2	W3
;port_utilities.mpas,49 :: 		inc(i);
; i start address is: 0 (W0)
0x1600	0x40C061  	ADD.B	W1, #1, W0
; i end address is: 2 (W1)
;port_utilities.mpas,50 :: 		end;
; pt end address is: 6 (W3)
; i end address is: 0 (W0)
0x1602	0x784080  	MOV.B	W0, W1
0x1604	0x37FFF5  	BRA	L__Search_Port8
L__Search_Port9:
;port_utilities.mpas,51 :: 		end;
0x1606	0x780082  	MOV	W2, W1
L_end__Search_Port:
; Result end address is: 4 (W2)
; Result start address is: 2 (W1)
0x1608	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Search_Port:
0x160A	0x060000  	RETURN
; end of _Search_Port
_Mem_Cmp:
;dspic_additional_string_library.mpas,164 :: 		begin
;dspic_additional_string_library.mpas,165 :: 		W4 := p1;
0x160C	0x78020A  	MOV	W10, W4
;dspic_additional_string_library.mpas,166 :: 		W5 := p2;
0x160E	0x78028B  	MOV	W11, W5
;dspic_additional_string_library.mpas,167 :: 		W8 := n;
0x1610	0x78040C  	MOV	W12, W8
;dspic_additional_string_library.mpas,169 :: 		SETM W9
0x1612	0xEB8480  	SETM	W9
;dspic_additional_string_library.mpas,170 :: 		CP0 W8
0x1614	0xE20010  	CP0	W8
;dspic_additional_string_library.mpas,171 :: 		BRA Z,la24
0x1616	0x320007  	BRA Z	la24
;dspic_additional_string_library.mpas,172 :: 		CLR W9
0x1618	0xEB0480  	CLR	W9
;dspic_additional_string_library.mpas,173 :: 		la16:
la16:
;dspic_additional_string_library.mpas,174 :: 		MOV.B [W5++],W9
0x161A	0x7844B5  	MOV.B	[W5++], W9
;dspic_additional_string_library.mpas,175 :: 		CP.B W9,[W4++]
0x161C	0xE14C34  	CP.B	W9, [W4++]
;dspic_additional_string_library.mpas,176 :: 		BRA NZ,la15
0x161E	0x3A0002  	BRA NZ	la15
;dspic_additional_string_library.mpas,177 :: 		DEC W8,W8
0x1620	0xE90408  	DEC	W8, W8
;dspic_additional_string_library.mpas,178 :: 		BRA NZ,la16
0x1622	0x3AFFFB  	BRA NZ	la16
;dspic_additional_string_library.mpas,179 :: 		la15:
la15:
;dspic_additional_string_library.mpas,180 :: 		SUB.B W9,[--W4],W9
0x1624	0x54C4C4  	SUB.B	W9, [--W4], W9
;dspic_additional_string_library.mpas,181 :: 		la24:
la24:
;dspic_additional_string_library.mpas,183 :: 		result := W9;
; Result start address is: 2 (W1)
0x1626	0x780089  	MOV	W9, W1
;dspic_additional_string_library.mpas,184 :: 		end;
0x1628	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Mem_Cmp:
0x162A	0x060000  	RETURN
; end of _Mem_Cmp
_Eth_SendTCP:
0x146A	0xFA0006  	LNK	#6
;protocol_tcp.mpas,606 :: 		begin
0x146C	0x781F8A  	PUSH	W10
0x146E	0x781F8B  	PUSH	W11
0x1470	0x781F8C  	PUSH	W12
0x1472	0x97B81E  	MOV	[W14-14], W0
0x1474	0x97B8AE  	MOV	[W14-12], W1
0x1476	0x9FBF10  	MOV	W0, [W14-14]
0x1478	0x9FBF21  	MOV	W1, [W14-12]
;protocol_tcp.mpas,607 :: 		WriteToEthMem(TXSTART+12,$08);
0x147A	0xBE9F8A  	PUSH.D	W10
0x147C	0xB3C08B  	MOV.B	#8, W11
0x147E	0x2000CA  	MOV	#12, W10
0x1480	0x070764  	RCALL	_WriteToEthMem
0x1482	0xBE054F  	POP.D	W10
;protocol_tcp.mpas,608 :: 		Eth_PutByte($00);
0x1484	0x781F8A  	PUSH	W10
0x1486	0xEF2014  	CLR	W10
0x1488	0x070758  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,609 :: 		Eth_PutByte($45);
0x148A	0xB3C45A  	MOV.B	#69, W10
0x148C	0x070756  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,610 :: 		Eth_PutByte($00);
0x148E	0xEF2014  	CLR	W10
0x1490	0x070754  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,611 :: 		TotalLen := 40 + PacketLenT;
0x1492	0x200281  	MOV	#40, W1
0x1494	0x470064  	ADD	W14, #4, W0
0x1496	0x40880C  	ADD	W1, W12, [W0]
;protocol_tcp.mpas,612 :: 		Eth_PutByte(Hi(TotalLen));
0x1498	0x470064  	ADD	W14, #4, W0
0x149A	0xEC2000  	INC	W0
0x149C	0x784010  	MOV.B	[W0], W0
0x149E	0x784500  	MOV.B	W0, W10
0x14A0	0x07074C  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,613 :: 		Eth_PutByte(Lo(TotalLen));
0x14A2	0x90454E  	MOV.B	[W14+4], W10
0x14A4	0x07074A  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,614 :: 		inc(tcp_counter);
0x14A6	0x200011  	MOV	#1, W1
0x14A8	0x2254A0  	MOV	#lo_addr(protocol_tcp_Tcp_Counter), W0
0x14AA	0x408810  	ADD	W1, [W0], [W0]
;protocol_tcp.mpas,615 :: 		Eth_PutByte(Hi(tcp_counter));
0x14AC	0x2254B0  	MOV	#lo_addr(protocol_tcp_Tcp_Counter+1), W0
0x14AE	0x784510  	MOV.B	[W0], W10
0x14B0	0x070744  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,616 :: 		Eth_PutByte(Lo(tcp_counter));
0x14B2	0x2254A0  	MOV	#lo_addr(protocol_tcp_Tcp_Counter), W0
0x14B4	0x784510  	MOV.B	[W0], W10
0x14B6	0x070741  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,617 :: 		Eth_PutByte($40);
0x14B8	0xB3C40A  	MOV.B	#64, W10
0x14BA	0x07073F  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,618 :: 		Eth_PutByte($00);
0x14BC	0xEF2014  	CLR	W10
0x14BE	0x07073D  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,619 :: 		Eth_PutByte($80);
0x14C0	0xB3C80A  	MOV.B	#128, W10
0x14C2	0x07073B  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,620 :: 		Eth_PutByte($06);
0x14C4	0xB3C06A  	MOV.B	#6, W10
0x14C6	0x070739  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,621 :: 		Eth_PutByte($00);
0x14C8	0xEF2014  	CLR	W10
0x14CA	0x070737  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,622 :: 		Eth_PutByte($00);
0x14CC	0xEF2014  	CLR	W10
0x14CE	0x070735  	RCALL	_Eth_PutByte
0x14D0	0x78054F  	POP	W10
;protocol_tcp.mpas,623 :: 		cksum_ip := Eth_Cksum(TXSTART+14,20);
0x14D2	0xBE9F8A  	PUSH.D	W10
0x14D4	0x20014B  	MOV	#20, W11
0x14D6	0x2000EA  	MOV	#14, W10
0x14D8	0x07FF08  	RCALL	_Eth_Cksum
0x14DA	0x980710  	MOV	W0, [W14+2]
;protocol_tcp.mpas,624 :: 		WriteToEthMem(TXSTART+24,Hi(cksum_ip));
0x14DC	0x470062  	ADD	W14, #2, W0
0x14DE	0xEC2000  	INC	W0
0x14E0	0x784010  	MOV.B	[W0], W0
0x14E2	0x784580  	MOV.B	W0, W11
0x14E4	0x20018A  	MOV	#24, W10
0x14E6	0x070731  	RCALL	_WriteToEthMem
0x14E8	0xBE054F  	POP.D	W10
;protocol_tcp.mpas,625 :: 		Eth_PutByte(Lo(cksum_ip));
0x14EA	0x781F8A  	PUSH	W10
0x14EC	0x90452E  	MOV.B	[W14+2], W10
0x14EE	0x070725  	RCALL	_Eth_PutByte
0x14F0	0x78054F  	POP	W10
;protocol_tcp.mpas,626 :: 		WriteToEthMem(TXSTART+34,Hi(source_portT));
0x14F2	0x200140  	MOV	#lo_addr(W10), W0
0x14F4	0xEC2000  	INC	W0
0x14F6	0x784010  	MOV.B	[W0], W0
0x14F8	0xBE9F8A  	PUSH.D	W10
0x14FA	0x784580  	MOV.B	W0, W11
0x14FC	0x20022A  	MOV	#34, W10
0x14FE	0x070725  	RCALL	_WriteToEthMem
0x1500	0xBE054F  	POP.D	W10
;protocol_tcp.mpas,627 :: 		Eth_PutByte(Lo(source_portT));
0x1502	0x07071B  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,628 :: 		Eth_PutByte(Hi(dest_portT));
0x1504	0x200160  	MOV	#lo_addr(W11), W0
0x1506	0xEC2000  	INC	W0
0x1508	0x784010  	MOV.B	[W0], W0
0x150A	0x784500  	MOV.B	W0, W10
0x150C	0x070716  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,629 :: 		Eth_PutByte(Lo(dest_portT));
0x150E	0x78450B  	MOV.B	W11, W10
0x1510	0x070714  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,630 :: 		CopyRamToEthMem_Inv(@SEQ_NoT,TXSTART+38,4);
0x1512	0x57006A  	SUB	W14, #10, W0
0x1514	0x20004C  	MOV	#4, W12
0x1516	0x20026B  	MOV	#38, W11
0x1518	0x780500  	MOV	W0, W10
0x151A	0x07FBB0  	RCALL	_CopyRamToEthMem_Inv
;protocol_tcp.mpas,631 :: 		CopyRamToEthMem_Inv(@ACK_NoT,TXSTART+42,4);
0x151C	0x57006E  	SUB	W14, #14, W0
0x151E	0x20004C  	MOV	#4, W12
0x1520	0x2002AB  	MOV	#42, W11
0x1522	0x780500  	MOV	W0, W10
0x1524	0x07FBAB  	RCALL	_CopyRamToEthMem_Inv
;protocol_tcp.mpas,632 :: 		if TCP_FlagT = $12 then WriteToEthMem(TXSTART+46,$70)
0x1526	0xE16C72  	CP.B	W13, #18
0x1528	0x3A0004  	BRA NZ	L__Eth_SendTCP252
L__Eth_SendTCP481:
0x152A	0xB3C70B  	MOV.B	#112, W11
0x152C	0x2002EA  	MOV	#46, W10
0x152E	0x07070D  	RCALL	_WriteToEthMem
0x1530	0x370003  	BRA	L__Eth_SendTCP253
;protocol_tcp.mpas,633 :: 		else WriteToEthMem(TXSTART+46,$50);
L__Eth_SendTCP252:
0x1532	0xB3C50B  	MOV.B	#80, W11
0x1534	0x2002EA  	MOV	#46, W10
0x1536	0x070709  	RCALL	_WriteToEthMem
L__Eth_SendTCP253:
;protocol_tcp.mpas,634 :: 		WriteToEthMem(TXSTART+47,TCP_FlagT);
0x1538	0x78458D  	MOV.B	W13, W11
0x153A	0x2002FA  	MOV	#47, W10
0x153C	0x070706  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,635 :: 		Window := 65200;
0x153E	0x2FEB00  	MOV	#65200, W0
0x1540	0x892A40  	MOV	W0, _Window
;protocol_tcp.mpas,636 :: 		Eth_PutByte(Hi(Window));
0x1542	0x225490  	MOV	#lo_addr(_Window+1), W0
0x1544	0x784510  	MOV.B	[W0], W10
0x1546	0x0706F9  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,637 :: 		Eth_PutByte(Lo(Window));
0x1548	0x225480  	MOV	#lo_addr(_Window), W0
0x154A	0x784510  	MOV.B	[W0], W10
0x154C	0x0706F6  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,638 :: 		WriteToEthMem(TXSTART+50,$00);
0x154E	0xEF2016  	CLR	W11
0x1550	0x20032A  	MOV	#50, W10
0x1552	0x0706FB  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,639 :: 		Eth_PutByte($00);
0x1554	0xEF2014  	CLR	W10
0x1556	0x0706F1  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,640 :: 		WriteToEthMem(TXSTART+14+TotalLen,$00);
0x1558	0x90002E  	MOV	[W14+4], W0
0x155A	0x40006E  	ADD	W0, #14, W0
0x155C	0xEF2016  	CLR	W11
0x155E	0x780500  	MOV	W0, W10
0x1560	0x0706F4  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,641 :: 		Eth_PutByte($00);
0x1562	0xEF2014  	CLR	W10
0x1564	0x0706EA  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,642 :: 		Align := TotalLen and $01;
0x1566	0x90002E  	MOV	[W14+4], W0
0x1568	0x600161  	AND	W0, #1, W2
; Align start address is: 6 (W3)
0x156A	0x784182  	MOV.B	W2, W3
;protocol_tcp.mpas,643 :: 		CopyEthMemToEthMem(TXSTART+26,TXSTART+14+TotalLen+Align,8);
0x156C	0x90002E  	MOV	[W14+4], W0
0x156E	0x4000EE  	ADD	W0, #14, W1
0x1570	0xFB8002  	ZE	W2, W0
0x1572	0x408000  	ADD	W1, W0, W0
0x1574	0x20008C  	MOV	#8, W12
0x1576	0x780580  	MOV	W0, W11
0x1578	0x2001AA  	MOV	#26, W10
0x157A	0x070323  	RCALL	_CopyEthMemToEthMem
;protocol_tcp.mpas,644 :: 		WriteToEthMem(TXSTART+22+TotalLen+Align,$00);
0x157C	0x90002E  	MOV	[W14+4], W0
0x157E	0x4000F6  	ADD	W0, #22, W1
0x1580	0xFB8003  	ZE	W3, W0
0x1582	0x408000  	ADD	W1, W0, W0
0x1584	0xEF2016  	CLR	W11
0x1586	0x780500  	MOV	W0, W10
0x1588	0x0706E0  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,645 :: 		Eth_PutByte($06);
0x158A	0xB3C06A  	MOV.B	#6, W10
0x158C	0x0706D6  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,646 :: 		TotalLen :=TotalLen - 20;
0x158E	0x200141  	MOV	#20, W1
0x1590	0x470064  	ADD	W14, #4, W0
0x1592	0x108810  	SUBR	W1, [W0], [W0]
;protocol_tcp.mpas,647 :: 		Eth_PutByte(Hi(TotalLen));
0x1594	0x470064  	ADD	W14, #4, W0
0x1596	0xEC2000  	INC	W0
0x1598	0x784010  	MOV.B	[W0], W0
0x159A	0x784500  	MOV.B	W0, W10
0x159C	0x0706CE  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,648 :: 		Eth_PutByte(Lo(TotalLen));
0x159E	0x90454E  	MOV.B	[W14+4], W10
0x15A0	0x0706CC  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,649 :: 		cksum_tcp := Eth_Cksum(TXSTART+34,12+TotalLen+Align);
0x15A2	0x90002E  	MOV	[W14+4], W0
0x15A4	0x4000EC  	ADD	W0, #12, W1
0x15A6	0xFB8003  	ZE	W3, W0
; Align end address is: 6 (W3)
0x15A8	0x408000  	ADD	W1, W0, W0
0x15AA	0x780580  	MOV	W0, W11
0x15AC	0x20022A  	MOV	#34, W10
0x15AE	0x07FE9D  	RCALL	_Eth_Cksum
0x15B0	0x980700  	MOV	W0, [W14+0]
;protocol_tcp.mpas,650 :: 		WriteToEthMem(TXSTART+50,Hi(cksum_tcp));
0x15B2	0x470060  	ADD	W14, #0, W0
0x15B4	0xEC2000  	INC	W0
0x15B6	0x784010  	MOV.B	[W0], W0
0x15B8	0x784580  	MOV.B	W0, W11
0x15BA	0x20032A  	MOV	#50, W10
0x15BC	0x0706C6  	RCALL	_WriteToEthMem
;protocol_tcp.mpas,651 :: 		Eth_PutByte(Lo(cksum_tcp));
0x15BE	0x90450E  	MOV.B	[W14+0], W10
0x15C0	0x0706BC  	RCALL	_Eth_PutByte
;protocol_tcp.mpas,652 :: 		Eth_SendPacket(34+TotalLen);
0x15C2	0x200221  	MOV	#34, W1
0x15C4	0x470064  	ADD	W14, #4, W0
0x15C6	0x408010  	ADD	W1, [W0], W0
0x15C8	0x780500  	MOV	W0, W10
0x15CA	0x0706CD  	RCALL	_Eth_SendPacket
;protocol_tcp.mpas,653 :: 		end;
L_end_Eth_SendTCP:
0x15CC	0x78064F  	POP	W12
0x15CE	0x7805CF  	POP	W11
0x15D0	0x78054F  	POP	W10
0x15D2	0xFA8000  	ULNK
0x15D4	0x060000  	RETURN
; end of _Eth_SendTCP
_CopyRamToEthMem_Inv:
;lib1_enc600_V3_5_b.mpas,442 :: 		begin
;lib1_enc600_V3_5_b.mpas,443 :: 		if length_w = 0 then Exit;
0x0C7C	0xE16060  	CP	W12, #0
0x0C7E	0x3A0001  	BRA NZ	L__CopyRamToEthMem_Inv139
L__CopyRamToEthMem_Inv329:
0x0C80	0x370018  	BRA	L_end__CopyRamToEthMem_Inv
L__CopyRamToEthMem_Inv139:
;lib1_enc600_V3_5_b.mpas,444 :: 		Eth_WriteReg(EGPWRPT_, dest_eth_address);
0x0C82	0x781F8A  	PUSH	W10
0x0C84	0xB3C88A  	MOV.B	#136, W10
0x0C86	0x07072E  	RCALL	_Eth_WriteReg
0x0C88	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,446 :: 		Eth_Select;
0x0C8A	0x07FD85  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,447 :: 		Spi_Read_(WGPDATA_);
0x0C8C	0x781F8A  	PUSH	W10
0x0C8E	0xB3C2AA  	MOV.B	#42, W10
0x0C90	0x07FD3F  	RCALL	_Spi_Read_
0x0C92	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,449 :: 		pt := start_ram_address + length_w - 1;
0x0C94	0x45000C  	ADD	W10, W12, W0
; pt start address is: 0 (W0)
0x0C96	0xED2000  	DEC	W0
;lib1_enc600_V3_5_b.mpas,450 :: 		i := 0;
; i start address is: 4 (W2)
0x0C98	0xEF2004  	CLR	W2
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x0C9A	0x780180  	MOV	W0, W3
;lib1_enc600_V3_5_b.mpas,451 :: 		while i < length_w do
L__CopyRamToEthMem_Inv142:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x0C9C	0xE1100C  	CP	W2, W12
0x0C9E	0x310008  	BRA GEU	L__CopyRamToEthMem_Inv143
L__CopyRamToEthMem_Inv330:
;lib1_enc600_V3_5_b.mpas,453 :: 		Spi_Read_(pt^);
0x0CA0	0x781F8A  	PUSH	W10
0x0CA2	0x784513  	MOV.B	[W3], W10
0x0CA4	0x07FD35  	RCALL	_Spi_Read_
0x0CA6	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,454 :: 		pt := pt - 1;
; pt start address is: 0 (W0)
0x0CA8	0x518061  	SUB	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,455 :: 		inc(i);
0x0CAA	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,456 :: 		end;
0x0CAC	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x0CAE	0x37FFF6  	BRA	L__CopyRamToEthMem_Inv142
L__CopyRamToEthMem_Inv143:
;lib1_enc600_V3_5_b.mpas,458 :: 		Eth_UnSelect;
0x0CB0	0x071BDE  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,459 :: 		end;
L_end__CopyRamToEthMem_Inv:
L_end_CopyRamToEthMem_Inv:
0x0CB2	0x060000  	RETURN
; end of _CopyRamToEthMem_Inv
_Eth_UserTCP:
0x1464	0xFA0000  	LNK	#0
;enc_lib_user.mpas,114 :: 		begin
;enc_lib_user.mpas,116 :: 		end;
L_end_Eth_UserTCP:
0x1466	0xFA8000  	ULNK
0x1468	0x060000  	RETURN
; end of _Eth_UserTCP
_UART1_Data_Ready:
0x53FC	0xFA0000  	LNK	#0
;__Lib_UART_1234_p24_p33.mpas,307 :: 		
;__Lib_UART_1234_p24_p33.mpas,308 :: 		
; Result start address is: 2 (W1)
0x53FE	0xEF2002  	CLR	W1
0x5400	0xAF0222  	BTSC	U1STA, #0
0x5402	0xEC2002  	INC	W1
;__Lib_UART_1234_p24_p33.mpas,309 :: 		
0x5404	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_UART1_Data_Ready:
0x5406	0xFA8000  	ULNK
0x5408	0x060000  	RETURN
; end of _UART1_Data_Ready
_UART1_Read:
0x53D6	0xFA0000  	LNK	#0
;__Lib_UART_1234_p24_p33.mpas,312 :: 		
;__Lib_UART_1234_p24_p33.mpas,313 :: 		
; Result start address is: 2 (W1)
0x53D8	0x801131  	MOV	U1RXREG, W1
;__Lib_UART_1234_p24_p33.mpas,314 :: 		
0x53DA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_UART1_Read:
0x53DC	0xFA8000  	ULNK
0x53DE	0x060000  	RETURN
; end of _UART1_Read
_MapAndPrint:
0x4EE2	0xFA0012  	LNK	#18
;ENC624J600_Exampe.mpas,44 :: 		begin
;ENC624J600_Exampe.mpas,45 :: 		Slot := Eth_Arp_MapMacAddress(TestIP);
0x4EE4	0x781F8A  	PUSH	W10
0x4EE6	0x07F5D6  	RCALL	_Eth_Arp_MapMacAddress
; Slot start address is: 2 (W1)
0x4EE8	0x780080  	MOV	W0, W1
;ENC624J600_Exampe.mpas,46 :: 		if Slot <> nil then
0x4EEA	0xE10060  	CP	W0, #0
0x4EEC	0x320003  	BRA Z	L__MapAndPrint7
L__MapAndPrint72:
;ENC624J600_Exampe.mpas,47 :: 		Eth_PrintArpCacheSlot(Slot)
0x4EEE	0x780501  	MOV	W1, W10
; Slot end address is: 2 (W1)
0x4EF0	0x07F03E  	RCALL	_Eth_PrintArpCacheSlot
0x4EF2	0x370026  	BRA	L__MapAndPrint8
;ENC624J600_Exampe.mpas,48 :: 		else
L__MapAndPrint7:
;ENC624J600_Exampe.mpas,49 :: 		UART1_Write_Text('Mapping Failed' + CRLF);
0x4EF4	0x4700E0  	ADD	W14, #0, W1
0x4EF6	0xB3C4D0  	MOV.B	#77, W0
0x4EF8	0x785880  	MOV.B	W0, [W1++]
0x4EFA	0xB3C610  	MOV.B	#97, W0
0x4EFC	0x785880  	MOV.B	W0, [W1++]
0x4EFE	0xB3C700  	MOV.B	#112, W0
0x4F00	0x785880  	MOV.B	W0, [W1++]
0x4F02	0xB3C700  	MOV.B	#112, W0
0x4F04	0x785880  	MOV.B	W0, [W1++]
0x4F06	0xB3C690  	MOV.B	#105, W0
0x4F08	0x785880  	MOV.B	W0, [W1++]
0x4F0A	0xB3C6E0  	MOV.B	#110, W0
0x4F0C	0x785880  	MOV.B	W0, [W1++]
0x4F0E	0xB3C670  	MOV.B	#103, W0
0x4F10	0x785880  	MOV.B	W0, [W1++]
0x4F12	0xB3C200  	MOV.B	#32, W0
0x4F14	0x785880  	MOV.B	W0, [W1++]
0x4F16	0xB3C460  	MOV.B	#70, W0
0x4F18	0x785880  	MOV.B	W0, [W1++]
0x4F1A	0xB3C610  	MOV.B	#97, W0
0x4F1C	0x785880  	MOV.B	W0, [W1++]
0x4F1E	0xB3C690  	MOV.B	#105, W0
0x4F20	0x785880  	MOV.B	W0, [W1++]
0x4F22	0xB3C6C0  	MOV.B	#108, W0
0x4F24	0x785880  	MOV.B	W0, [W1++]
0x4F26	0xB3C650  	MOV.B	#101, W0
0x4F28	0x785880  	MOV.B	W0, [W1++]
0x4F2A	0xB3C640  	MOV.B	#100, W0
0x4F2C	0x785880  	MOV.B	W0, [W1++]
0x4F2E	0xB3C0D0  	MOV.B	#13, W0
0x4F30	0x785880  	MOV.B	W0, [W1++]
0x4F32	0xB3C0A0  	MOV.B	#10, W0
0x4F34	0x785880  	MOV.B	W0, [W1++]
0x4F36	0xB3C000  	MOV.B	#0, W0
0x4F38	0x785880  	MOV.B	W0, [W1++]
0x4F3A	0x470060  	ADD	W14, #0, W0
0x4F3C	0x780500  	MOV	W0, W10
0x4F3E	0x070099  	RCALL	_UART1_Write_Text
L__MapAndPrint8:
;ENC624J600_Exampe.mpas,50 :: 		UART1_Write_Text(CRLF);
0x4F40	0x28030A  	MOV	#lo_addr(_CRLF), W10
0x4F42	0x070097  	RCALL	_UART1_Write_Text
;ENC624J600_Exampe.mpas,51 :: 		end;
L_end_MapAndPrint:
0x4F44	0x78054F  	POP	W10
0x4F46	0xFA8000  	ULNK
0x4F48	0x060000  	RETURN
; end of _MapAndPrint
_Eth_Arp_MapMacAddress:
0x3A94	0xFA000A  	LNK	#10
;protocol_arp.mpas,140 :: 		begin
;protocol_arp.mpas,141 :: 		Result := nil;
0x3A96	0x781F8A  	PUSH	W10
0x3A98	0x781F8B  	PUSH	W11
0x3A9A	0x781F8C  	PUSH	W12
0x3A9C	0xEF2000  	CLR	W0
0x3A9E	0x980700  	MOV	W0, [W14+0]
;protocol_arp.mpas,143 :: 		if Check_Link = False then                                                    // Ensure the physical link is still up before trying
0x3AA0	0x070481  	RCALL	_Check_Link
0x3AA2	0xE10060  	CP	W0, #0
0x3AA4	0x3A0002  	BRA NZ	L__Eth_Arp_MapMacAddress27
L__Eth_Arp_MapMacAddress103:
;protocol_arp.mpas,145 :: 		Eth_Arp_EraseCache;                                                         // Link is down, reset everything
0x3AA6	0x070361  	RCALL	_Eth_Arp_EraseCache
;protocol_arp.mpas,146 :: 		Exit;
0x3AA8	0x370108  	BRA	L_end__Eth_Arp_MapMacAddress
;protocol_arp.mpas,147 :: 		end;
L__Eth_Arp_MapMacAddress27:
;protocol_arp.mpas,150 :: 		OldestSlot := -1;
0x3AAA	0x2FFFF0  	MOV	#65535, W0
0x3AAC	0x980710  	MOV	W0, [W14+2]
;protocol_arp.mpas,151 :: 		EmptySlot := -1;
0x3AAE	0x2FFFF0  	MOV	#65535, W0
0x3AB0	0x980720  	MOV	W0, [W14+4]
;protocol_arp.mpas,152 :: 		i := 0;
; i start address is: 10 (W5)
0x3AB2	0xEF200A  	CLR	W5
; i end address is: 10 (W5)
;protocol_arp.mpas,153 :: 		while i < ARP_CACHE_LEN do                                                    // Do we have it stored in the Cache or is it currently waiting for a response?
L__Eth_Arp_MapMacAddress30:
; i start address is: 10 (W5)
0x3AB4	0xE12862  	CP	W5, #2
0x3AB6	0x3D0081  	BRA GE	L__Eth_Arp_MapMacAddress31
L__Eth_Arp_MapMacAddress104:
;protocol_arp.mpas,155 :: 		if ArpCache[i].Valid = True then                                            // Found a valid cache?
0x3AB8	0x200040  	MOV	#4, W0
0x3ABA	0xDD2880  	SL	W5, W0, W1
0x3ABC	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3ABE	0x400001  	ADD	W0, W1, W0
0x3AC0	0x780090  	MOV	[W0], W1
0x3AC2	0x2FFFF0  	MOV	#65535, W0
0x3AC4	0xE10800  	CP	W1, W0
0x3AC6	0x3A0021  	BRA NZ	L__Eth_Arp_MapMacAddress35
L__Eth_Arp_MapMacAddress105:
;protocol_arp.mpas,157 :: 		if memcmp(@TargetIP[0], @ArpCache[i].Ip[0], 4) = 0 then                   // Matching IP Address?
0x3AC8	0x200040  	MOV	#4, W0
0x3ACA	0xDD2880  	SL	W5, W0, W1
0x3ACC	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3ACE	0x400001  	ADD	W0, W1, W0
0x3AD0	0x400066  	ADD	W0, #6, W0
0x3AD2	0x20004C  	MOV	#4, W12
0x3AD4	0x780580  	MOV	W0, W11
0x3AD6	0x07EC57  	RCALL	_memcmp
0x3AD8	0xE10060  	CP	W0, #0
0x3ADA	0x3A0016  	BRA NZ	L__Eth_Arp_MapMacAddress38
L__Eth_Arp_MapMacAddress106:
;protocol_arp.mpas,159 :: 		Eth_EnableTimer_1s(False);                                              // Don't change the timer values in the middle of a comparison
0x3ADC	0x781F85  	PUSH	W5
0x3ADE	0xEF2014  	CLR	W10
0x3AE0	0x07F08D  	RCALL	_Eth_EnableTimer_1s
0x3AE2	0x7802CF  	POP	W5
;protocol_arp.mpas,160 :: 		ArpCache[i].Timer := 0;                                                  // Reset the timer for how long has it been since the cached information was used
0x3AE4	0x200040  	MOV	#4, W0
0x3AE6	0xDD2880  	SL	W5, W0, W1
0x3AE8	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3AEA	0x400001  	ADD	W0, W1, W0
0x3AEC	0x400162  	ADD	W0, #2, W2
0x3AEE	0xEF2000  	CLR	W0
0x3AF0	0xEF2002  	CLR	W1
0x3AF2	0xBE8900  	MOV.D	W0, [W2]
;protocol_arp.mpas,161 :: 		Eth_EnableTimer_1s(True);
0x3AF4	0x781F85  	PUSH	W5
0x3AF6	0x2FFFFA  	MOV	#65535, W10
0x3AF8	0x07F081  	RCALL	_Eth_EnableTimer_1s
0x3AFA	0x7802CF  	POP	W5
;protocol_arp.mpas,162 :: 		Result := @ArpCache[i];                                                 // Yup, get the slot address and exit
0x3AFC	0x200040  	MOV	#4, W0
0x3AFE	0xDD2900  	SL	W5, W0, W2
; i end address is: 10 (W5)
0x3B00	0x225281  	MOV	#lo_addr(_ArpCache), W1
0x3B02	0x470060  	ADD	W14, #0, W0
0x3B04	0x408802  	ADD	W1, W2, [W0]
;protocol_arp.mpas,163 :: 		Exit;
0x3B06	0x3700D9  	BRA	L_end__Eth_Arp_MapMacAddress
;protocol_arp.mpas,164 :: 		end;                                                                      // Nope, do we have a message pending?
L__Eth_Arp_MapMacAddress38:
;protocol_arp.mpas,165 :: 		end else
; i start address is: 10 (W5)
0x3B08	0x370024  	BRA	L__Eth_Arp_MapMacAddress36
L__Eth_Arp_MapMacAddress35:
;protocol_arp.mpas,166 :: 		if ArpCache[i].Valid = Waiting then
0x3B0A	0x200040  	MOV	#4, W0
0x3B0C	0xDD2880  	SL	W5, W0, W1
0x3B0E	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B10	0x400001  	ADD	W0, W1, W0
0x3B12	0x780090  	MOV	[W0], W1
0x3B14	0x2007F0  	MOV	#127, W0
0x3B16	0xE10800  	CP	W1, W0
0x3B18	0x3A001C  	BRA NZ	L__Eth_Arp_MapMacAddress41
L__Eth_Arp_MapMacAddress107:
;protocol_arp.mpas,168 :: 		if memcmp(@TargetIP[0], @ArpCache[i].Ip[0], 4) = 0 then                   // Matching IP Address?
0x3B1A	0x200040  	MOV	#4, W0
0x3B1C	0xDD2880  	SL	W5, W0, W1
0x3B1E	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B20	0x400001  	ADD	W0, W1, W0
0x3B22	0x400066  	ADD	W0, #6, W0
0x3B24	0x20004C  	MOV	#4, W12
0x3B26	0x780580  	MOV	W0, W11
0x3B28	0x07EC2E  	RCALL	_memcmp
0x3B2A	0xE10060  	CP	W0, #0
0x3B2C	0x3A0012  	BRA NZ	L__Eth_Arp_MapMacAddress44
L__Eth_Arp_MapMacAddress108:
;protocol_arp.mpas,170 :: 		if ArpWaitFor(@ArpCache[i]) then
0x3B2E	0x200040  	MOV	#4, W0
0x3B30	0xDD2880  	SL	W5, W0, W1
0x3B32	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B34	0x400001  	ADD	W0, W1, W0
0x3B36	0x781F85  	PUSH	W5
0x3B38	0x781F8A  	PUSH	W10
0x3B3A	0x780500  	MOV	W0, W10
0x3B3C	0x07F433  	RCALL	protocol_arp_ArpWaitFor
0x3B3E	0x78054F  	POP	W10
0x3B40	0x7802CF  	POP	W5
0x3B42	0xE20000  	CP0	W0
0x3B44	0x320005  	BRA Z	L__Eth_Arp_MapMacAddress47
L__Eth_Arp_MapMacAddress109:
;protocol_arp.mpas,171 :: 		Result := @ArpCache[i];                                                 // Yup, get the slot address and exit
0x3B46	0x200040  	MOV	#4, W0
0x3B48	0xDD2900  	SL	W5, W0, W2
; i end address is: 10 (W5)
0x3B4A	0x225281  	MOV	#lo_addr(_ArpCache), W1
0x3B4C	0x470060  	ADD	W14, #0, W0
0x3B4E	0x408802  	ADD	W1, W2, [W0]
L__Eth_Arp_MapMacAddress47:
;protocol_arp.mpas,172 :: 		Exit;
0x3B50	0x3700B4  	BRA	L_end__Eth_Arp_MapMacAddress
;protocol_arp.mpas,173 :: 		end;
L__Eth_Arp_MapMacAddress44:
;protocol_arp.mpas,174 :: 		end;
; i start address is: 10 (W5)
L__Eth_Arp_MapMacAddress41:
L__Eth_Arp_MapMacAddress36:
;protocol_arp.mpas,177 :: 		if ArpCache[i].Valid = False then                                           // Found an empty slot
0x3B52	0x200040  	MOV	#4, W0
0x3B54	0xDD2880  	SL	W5, W0, W1
0x3B56	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B58	0x400001  	ADD	W0, W1, W0
0x3B5A	0x780010  	MOV	[W0], W0
0x3B5C	0xE10060  	CP	W0, #0
0x3B5E	0x3A0001  	BRA NZ	L__Eth_Arp_MapMacAddress50
L__Eth_Arp_MapMacAddress110:
;protocol_arp.mpas,178 :: 		EmptySlot := i;                                                           // Yup, save the index
0x3B60	0x980725  	MOV	W5, [W14+4]
L__Eth_Arp_MapMacAddress50:
;protocol_arp.mpas,180 :: 		if ArpCache[i].Valid <> False then
0x3B62	0x200040  	MOV	#4, W0
0x3B64	0xDD2880  	SL	W5, W0, W1
0x3B66	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B68	0x400001  	ADD	W0, W1, W0
0x3B6A	0x780010  	MOV	[W0], W0
0x3B6C	0xE10060  	CP	W0, #0
0x3B6E	0x320022  	BRA Z	L__Eth_Arp_MapMacAddress53
L__Eth_Arp_MapMacAddress111:
;protocol_arp.mpas,182 :: 		if OldestSlot < 0 then
0x3B70	0x90001E  	MOV	[W14+2], W0
0x3B72	0xE10060  	CP	W0, #0
0x3B74	0x3D0002  	BRA GE	L__Eth_Arp_MapMacAddress56
L__Eth_Arp_MapMacAddress112:
;protocol_arp.mpas,183 :: 		OldestSlot := i
0x3B76	0x980715  	MOV	W5, [W14+2]
0x3B78	0x37001D  	BRA	L__Eth_Arp_MapMacAddress57
;protocol_arp.mpas,184 :: 		else begin
L__Eth_Arp_MapMacAddress56:
;protocol_arp.mpas,185 :: 		Eth_EnableTimer_1s(False);                                                  // Don't change the timer values in the middle of a comparison
0x3B7A	0x781F85  	PUSH	W5
0x3B7C	0x781F8A  	PUSH	W10
0x3B7E	0xEF2014  	CLR	W10
0x3B80	0x07F03D  	RCALL	_Eth_EnableTimer_1s
0x3B82	0x78054F  	POP	W10
0x3B84	0x7802CF  	POP	W5
;protocol_arp.mpas,186 :: 		if ArpCache[i].Timer > ArpCache[OldestSlot].Timer then                        // Look for the oldest slot to take owership of just in case there are no empty ones
0x3B86	0x200040  	MOV	#4, W0
0x3B88	0xDD2880  	SL	W5, W0, W1
0x3B8A	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B8C	0x400001  	ADD	W0, W1, W0
0x3B8E	0x400262  	ADD	W0, #2, W4
0x3B90	0x200041  	MOV	#4, W1
0x3B92	0x90001E  	MOV	[W14+2], W0
0x3B94	0xDD0081  	SL	W0, W1, W1
0x3B96	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3B98	0x400001  	ADD	W0, W1, W0
0x3B9A	0xECA000  	INC2	W0
0x3B9C	0xBE0110  	MOV.D	[W0], W2
0x3B9E	0xBE0014  	MOV.D	[W4], W0
0x3BA0	0xE10002  	CP	W0, W2
0x3BA2	0xE18803  	CPB	W1, W3
0x3BA4	0x360001  	BRA LEU	L__Eth_Arp_MapMacAddress59
L__Eth_Arp_MapMacAddress113:
;protocol_arp.mpas,187 :: 		OldestSlot := i;
0x3BA6	0x980715  	MOV	W5, [W14+2]
L__Eth_Arp_MapMacAddress59:
;protocol_arp.mpas,188 :: 		Eth_EnableTimer_1s(True);
0x3BA8	0x781F85  	PUSH	W5
0x3BAA	0x781F8A  	PUSH	W10
0x3BAC	0x2FFFFA  	MOV	#65535, W10
0x3BAE	0x07F026  	RCALL	_Eth_EnableTimer_1s
0x3BB0	0x78054F  	POP	W10
0x3BB2	0x7802CF  	POP	W5
;protocol_arp.mpas,189 :: 		end;
L__Eth_Arp_MapMacAddress57:
;protocol_arp.mpas,191 :: 		end;
L__Eth_Arp_MapMacAddress53:
;protocol_arp.mpas,193 :: 		Inc(i);                                                                     // Update our loop counter
; i start address is: 0 (W0)
0x3BB4	0x428061  	ADD	W5, #1, W0
; i end address is: 10 (W5)
;protocol_arp.mpas,194 :: 		end;                                                                          // Nope, not cached or waiting...
0x3BB6	0x780280  	MOV	W0, W5
; i end address is: 0 (W0)
0x3BB8	0x37FF7D  	BRA	L__Eth_Arp_MapMacAddress30
L__Eth_Arp_MapMacAddress31:
;protocol_arp.mpas,197 :: 		memcpy(@ArpIp[0], @TargetIP[0], 4);                                           // Copy the Destinatin IP to a local copy
0x3BBA	0x470066  	ADD	W14, #6, W0
0x3BBC	0x781F8A  	PUSH	W10
0x3BBE	0x20004C  	MOV	#4, W12
0x3BC0	0x78058A  	MOV	W10, W11
0x3BC2	0x780500  	MOV	W0, W10
0x3BC4	0x07EFB6  	RCALL	_memcpy
;protocol_arp.mpas,198 :: 		ArpMapIpMask(ArpIp);                                                          // Decide if it is unchanged or maps to the gateway
0x3BC6	0x470066  	ADD	W14, #6, W0
0x3BC8	0x780500  	MOV	W0, W10
0x3BCA	0x07EFC0  	RCALL	protocol_arp_ArpMapIpMask
;protocol_arp.mpas,200 :: 		EthMemSet(TXSTART, $FF, 6);                                                   // Destination Hardware Address is Global FF.FF.FF.FF.FF.FF
0x3BCC	0x20006C  	MOV	#6, W12
0x3BCE	0xB3CFFB  	MOV.B	#255, W11
0x3BD0	0xEF2014  	CLR	W10
0x3BD2	0x07EBC0  	RCALL	_EthMemSet
;protocol_arp.mpas,201 :: 		CopyRamToEthMem(@eth_mac, TXSTART+6, 6);                                      // Souce is us
0x3BD4	0x20006C  	MOV	#6, W12
0x3BD6	0x20006B  	MOV	#6, W11
0x3BD8	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x3BDA	0x07F419  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,202 :: 		WriteToEthMem(TXSTART+12, $08);                                               // Hi EtherType =  = 0x0806 ARP
0x3BDC	0xB3C08B  	MOV.B	#8, W11
0x3BDE	0x2000CA  	MOV	#12, W10
0x3BE0	0x07F3B4  	RCALL	_WriteToEthMem
;protocol_arp.mpas,203 :: 		Eth_PutByte($06);                                                             // Lo EtherType
0x3BE2	0xB3C06A  	MOV.B	#6, W10
0x3BE4	0x07F3AA  	RCALL	_Eth_PutByte
;protocol_arp.mpas,204 :: 		Eth_PutByte($00);                                                             // Hi Hardware Type
0x3BE6	0xEF2014  	CLR	W10
0x3BE8	0x07F3A8  	RCALL	_Eth_PutByte
;protocol_arp.mpas,205 :: 		Eth_PutByte($01);                                                             // Lo Hardware Type (0x0001 = Ethernet)
0x3BEA	0xB3C01A  	MOV.B	#1, W10
0x3BEC	0x07F3A6  	RCALL	_Eth_PutByte
;protocol_arp.mpas,206 :: 		Eth_PutByte($08);                                                             // Hi Protocol Type  (0x8000 = Ping)
0x3BEE	0xB3C08A  	MOV.B	#8, W10
0x3BF0	0x07F3A4  	RCALL	_Eth_PutByte
;protocol_arp.mpas,207 :: 		Eth_PutByte($00);                                                             // Lo Protocol Type
0x3BF2	0xEF2014  	CLR	W10
0x3BF4	0x07F3A2  	RCALL	_Eth_PutByte
;protocol_arp.mpas,208 :: 		Eth_PutByte($06);                                                             // Hardware Address Length (MAC = 6)
0x3BF6	0xB3C06A  	MOV.B	#6, W10
0x3BF8	0x07F3A0  	RCALL	_Eth_PutByte
;protocol_arp.mpas,209 :: 		Eth_PutByte($04);                                                             // IP Address Length (IP = 4 for IP4)
0x3BFA	0xB3C04A  	MOV.B	#4, W10
0x3BFC	0x07F39E  	RCALL	_Eth_PutByte
;protocol_arp.mpas,210 :: 		Eth_PutByte($00);                                                             // Hi Operation
0x3BFE	0xEF2014  	CLR	W10
0x3C00	0x07F39C  	RCALL	_Eth_PutByte
;protocol_arp.mpas,211 :: 		Eth_PutByte($01);                                                             // Lo Operation (0x0001 = ARP)
0x3C02	0xB3C01A  	MOV.B	#1, W10
0x3C04	0x07F39A  	RCALL	_Eth_PutByte
;protocol_arp.mpas,212 :: 		CopyRamToEthMem(@eth_mac, TXSTART+22, 6);                                     // Sender Hardware Address (Us)
0x3C06	0x20006C  	MOV	#6, W12
0x3C08	0x20016B  	MOV	#22, W11
0x3C0A	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x3C0C	0x07F400  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,213 :: 		CopyRamToEthMem(@eth_ip_addr, TXSTART+28, 4);                                 // Sender Protocol Address (Us)
0x3C0E	0x20004C  	MOV	#4, W12
0x3C10	0x2001CB  	MOV	#28, W11
0x3C12	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x3C14	0x07F3FC  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,214 :: 		EthMemSet(TXSTART+32, $00, 6);                                                // Target Hardware Address (all zeros)
0x3C16	0x20006C  	MOV	#6, W12
0x3C18	0xEF2016  	CLR	W11
0x3C1A	0x20020A  	MOV	#32, W10
0x3C1C	0x07EB9B  	RCALL	_EthMemSet
;protocol_arp.mpas,215 :: 		CopyRamToEthMem(@ArpIp[0], TXSTART+38, 4);                                    // Target Protocol Address (actual or mapped to gateway)
0x3C1E	0x470066  	ADD	W14, #6, W0
0x3C20	0x20004C  	MOV	#4, W12
0x3C22	0x20026B  	MOV	#38, W11
0x3C24	0x780500  	MOV	W0, W10
0x3C26	0x07F3F3  	RCALL	_CopyRamToEthMem
;protocol_arp.mpas,216 :: 		Eth_SendPacket(42);
0x3C28	0x2002AA  	MOV	#42, W10
0x3C2A	0x07F39D  	RCALL	_Eth_SendPacket
0x3C2C	0x78054F  	POP	W10
;protocol_arp.mpas,218 :: 		if EmptySlot < 0 then                                                         // If none empty then take the oldest
0x3C2E	0x90002E  	MOV	[W14+4], W0
0x3C30	0xE10060  	CP	W0, #0
0x3C32	0x3D0002  	BRA GE	L__Eth_Arp_MapMacAddress62
L__Eth_Arp_MapMacAddress114:
;protocol_arp.mpas,219 :: 		EmptySlot := OldestSlot;
0x3C34	0x90001E  	MOV	[W14+2], W0
0x3C36	0x980720  	MOV	W0, [W14+4]
L__Eth_Arp_MapMacAddress62:
;protocol_arp.mpas,226 :: 		ArpCache[EmptySlot].Valid := False;                                           // Make sure no one sees this as a valid slot while we are modifiying it
0x3C38	0x200041  	MOV	#4, W1
0x3C3A	0x90002E  	MOV	[W14+4], W0
0x3C3C	0xDD0081  	SL	W0, W1, W1
0x3C3E	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3C40	0x400081  	ADD	W0, W1, W1
0x3C42	0xEF2000  	CLR	W0
0x3C44	0x780880  	MOV	W0, [W1]
;protocol_arp.mpas,227 :: 		memcpy(@ArpCache[EmptySlot].Ip[0], @ArpIp[0], 4);                             // Copy our target IP into the cache slot
0x3C46	0x200041  	MOV	#4, W1
0x3C48	0x90002E  	MOV	[W14+4], W0
0x3C4A	0xDD0081  	SL	W0, W1, W1
0x3C4C	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3C4E	0x400001  	ADD	W0, W1, W0
0x3C50	0x4000E6  	ADD	W0, #6, W1
0x3C52	0x470066  	ADD	W14, #6, W0
0x3C54	0x781F8A  	PUSH	W10
0x3C56	0x20004C  	MOV	#4, W12
0x3C58	0x780580  	MOV	W0, W11
0x3C5A	0x780501  	MOV	W1, W10
0x3C5C	0x07EF6A  	RCALL	_memcpy
;protocol_arp.mpas,228 :: 		memset(@ArpCache[EmptySlot].Mac[0], 0x00, 6);                                 // Clear the cache slot fields
0x3C5E	0x200041  	MOV	#4, W1
0x3C60	0x90002E  	MOV	[W14+4], W0
0x3C62	0xDD0081  	SL	W0, W1, W1
0x3C64	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3C66	0x400001  	ADD	W0, W1, W0
0x3C68	0x40006A  	ADD	W0, #10, W0
0x3C6A	0x20006C  	MOV	#6, W12
0x3C6C	0xEF2016  	CLR	W11
0x3C6E	0x780500  	MOV	W0, W10
0x3C70	0x07E5CC  	RCALL	_memset
;protocol_arp.mpas,229 :: 		Eth_EnableTimer_1s(False);
0x3C72	0xEF2014  	CLR	W10
0x3C74	0x07EFC3  	RCALL	_Eth_EnableTimer_1s
;protocol_arp.mpas,230 :: 		ArpCache[EmptySlot].Timer := 0;
0x3C76	0x200041  	MOV	#4, W1
0x3C78	0x90002E  	MOV	[W14+4], W0
0x3C7A	0xDD0081  	SL	W0, W1, W1
0x3C7C	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3C7E	0x400001  	ADD	W0, W1, W0
0x3C80	0x400162  	ADD	W0, #2, W2
0x3C82	0xEF2000  	CLR	W0
0x3C84	0xEF2002  	CLR	W1
0x3C86	0xBE8900  	MOV.D	W0, [W2]
;protocol_arp.mpas,231 :: 		Eth_EnableTimer_1s(True);
0x3C88	0x2FFFFA  	MOV	#65535, W10
0x3C8A	0x07EFB8  	RCALL	_Eth_EnableTimer_1s
;protocol_arp.mpas,232 :: 		ArpCache[EmptySlot].Valid := Waiting;                                         // Set it up for waiting
0x3C8C	0x200041  	MOV	#4, W1
0x3C8E	0x90002E  	MOV	[W14+4], W0
0x3C90	0xDD0081  	SL	W0, W1, W1
0x3C92	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3C94	0x400081  	ADD	W0, W1, W1
0x3C96	0x2007F0  	MOV	#127, W0
0x3C98	0x780880  	MOV	W0, [W1]
;protocol_arp.mpas,233 :: 		if ArpWaitFor(@ArpCache[EmptySlot]) then                                      // Wait for the reply
0x3C9A	0x200041  	MOV	#4, W1
0x3C9C	0x90002E  	MOV	[W14+4], W0
0x3C9E	0xDD0081  	SL	W0, W1, W1
0x3CA0	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x3CA2	0x400001  	ADD	W0, W1, W0
0x3CA4	0x780500  	MOV	W0, W10
0x3CA6	0x07F37E  	RCALL	protocol_arp_ArpWaitFor
0x3CA8	0x78054F  	POP	W10
0x3CAA	0xE20000  	CP0	W0
0x3CAC	0x320006  	BRA Z	L__Eth_Arp_MapMacAddress65
L__Eth_Arp_MapMacAddress115:
;protocol_arp.mpas,234 :: 		Result := @ArpCache[EmptySlot];                                             // Yup, get the slot address and exit
0x3CAE	0x200041  	MOV	#4, W1
0x3CB0	0x90002E  	MOV	[W14+4], W0
0x3CB2	0xDD0101  	SL	W0, W1, W2
0x3CB4	0x225281  	MOV	#lo_addr(_ArpCache), W1
0x3CB6	0x470060  	ADD	W14, #0, W0
0x3CB8	0x408802  	ADD	W1, W2, [W0]
L__Eth_Arp_MapMacAddress65:
;protocol_arp.mpas,235 :: 		end;
L_end__Eth_Arp_MapMacAddress:
0x3CBA	0x90000E  	MOV	[W14+0], W0
L_end_Eth_Arp_MapMacAddress:
0x3CBC	0x78064F  	POP	W12
0x3CBE	0x7805CF  	POP	W11
0x3CC0	0x78054F  	POP	W10
0x3CC2	0xFA8000  	ULNK
0x3CC4	0x060000  	RETURN
; end of _Eth_Arp_MapMacAddress
_memcmp:
0x1386	0xFA0000  	LNK	#0
;__Lib_String.mpas,61 :: 		
;__Lib_String.mpas,62 :: 		
; chptr1 start address is: 6 (W3)
0x1388	0x78018A  	MOV	W10, W3
;__Lib_String.mpas,63 :: 		
; chptr2 start address is: 4 (W2)
0x138A	0x78010B  	MOV	W11, W2
;__Lib_String.mpas,64 :: 		
; Result start address is: 0 (W0)
0x138C	0xEF2000  	CLR	W0
; Result end address is: 0 (W0)
; chptr1 end address is: 6 (W3)
; chptr2 end address is: 4 (W2)
;__Lib_String.mpas,65 :: 		
L__memcmp11:
; Result start address is: 0 (W0)
; chptr2 start address is: 4 (W2)
; chptr1 start address is: 6 (W3)
0x138E	0xE16060  	CP	W12, #0
0x1390	0x32000D  	BRA Z	L__memcmp12
L__memcmp225:
; Result end address is: 0 (W0)
;__Lib_String.mpas,67 :: 		
0x1392	0x560061  	SUB	W12, #1, W0
0x1394	0x780600  	MOV	W0, W12
;__Lib_String.mpas,68 :: 		
0x1396	0x784013  	MOV.B	[W3], W0
0x1398	0xFB8080  	ZE	W0, W1
0x139A	0xFB8012  	ZE	[W2], W0
; Result start address is: 0 (W0)
0x139C	0x508000  	SUB	W1, W0, W0
;__Lib_String.mpas,69 :: 		
0x139E	0xE10060  	CP	W0, #0
0x13A0	0x320002  	BRA Z	L__memcmp16
L__memcmp226:
; chptr1 end address is: 6 (W3)
; chptr2 end address is: 4 (W2)
;__Lib_String.mpas,70 :: 		
0x13A2	0x780080  	MOV	W0, W1
0x13A4	0x370004  	BRA	L_end__memcmp
L__memcmp16:
;__Lib_String.mpas,71 :: 		
; chptr2 start address is: 4 (W2)
; chptr1 start address is: 6 (W3)
0x13A6	0xEC2006  	INC	W3
;__Lib_String.mpas,72 :: 		
0x13A8	0xEC2004  	INC	W2
;__Lib_String.mpas,73 :: 		
; chptr1 end address is: 6 (W3)
; chptr2 end address is: 4 (W2)
0x13AA	0x37FFF1  	BRA	L__memcmp11
L__memcmp12:
;__Lib_String.mpas,74 :: 		
0x13AC	0x780080  	MOV	W0, W1
L_end__memcmp:
; Result end address is: 0 (W0)
; Result start address is: 2 (W1)
0x13AE	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_memcmp:
0x13B0	0xFA8000  	ULNK
0x13B2	0x060000  	RETURN
; end of _memcmp
protocol_arp_ArpWaitFor:
0x23A4	0xFA0006  	LNK	#6
;protocol_arp.mpas,103 :: 		begin
;protocol_arp.mpas,104 :: 		Result := False;
0x23A6	0xEF2000  	CLR	W0
0x23A8	0x980700  	MOV	W0, [W14+0]
;protocol_arp.mpas,105 :: 		Eth_EnableTimer_1s(False);                                                    // This may not be an atomic increase so stall the timer and grab a copy
0x23AA	0x781F8A  	PUSH	W10
0x23AC	0xEF2014  	CLR	W10
0x23AE	0x07FC26  	RCALL	_Eth_EnableTimer_1s
0x23B0	0x78054F  	POP	W10
;protocol_arp.mpas,106 :: 		LocalTime := Arp^.Timer;                                                       // Grab a copy of the timeout time
0x23B2	0x450162  	ADD	W10, #2, W2
0x23B4	0xBE0012  	MOV.D	[W2], W0
0x23B6	0x980710  	MOV	W0, [W14+2]
0x23B8	0x980721  	MOV	W1, [W14+4]
;protocol_arp.mpas,107 :: 		Eth_EnableTimer_1s(True);
0x23BA	0x781F8A  	PUSH	W10
0x23BC	0x2FFFFA  	MOV	#65535, W10
0x23BE	0x07FC1E  	RCALL	_Eth_EnableTimer_1s
0x23C0	0x78054F  	POP	W10
;protocol_arp.mpas,108 :: 		while LocalTime < ARP_Wait do                                                 // Loop till done....  Timer is reset when the message is sent
L_protocol_arp_ArpWaitFor15:
0x23C2	0x812931  	MOV	_ARP_Wait, W1
0x23C4	0xEB0100  	CLR	W2
0x23C6	0x470062  	ADD	W14, #2, W0
0x23C8	0xE10830  	CP	W1, [W0++]
0x23CA	0xE19020  	CPB	W2, [W0--]
0x23CC	0x360018  	BRA LEU	L_protocol_arp_ArpWaitFor16
L_protocol_arp_ArpWaitFor99:
;protocol_arp.mpas,110 :: 		Do_EthernetProc(n);                                                         // Pump messages looking for the ARP Reply, this can get reentrant so be careful
0x23CE	0x781F8A  	PUSH	W10
0x23D0	0x20003A  	MOV	#3, W10
0x23D2	0x07F3EB  	RCALL	_Do_EthernetProc
0x23D4	0x78054F  	POP	W10
;protocol_arp.mpas,111 :: 		if Arp^.Valid = True then
0x23D6	0x78009A  	MOV	[W10], W1
0x23D8	0x2FFFF0  	MOV	#65535, W0
0x23DA	0xE10800  	CP	W1, W0
0x23DC	0x3A0003  	BRA NZ	L_protocol_arp_ArpWaitFor20
L_protocol_arp_ArpWaitFor100:
;protocol_arp.mpas,113 :: 		Result := True;
0x23DE	0x2FFFF0  	MOV	#65535, W0
0x23E0	0x980700  	MOV	W0, [W14+0]
;protocol_arp.mpas,114 :: 		Break;
0x23E2	0x37000D  	BRA	L_protocol_arp_ArpWaitFor16
;protocol_arp.mpas,115 :: 		end;
L_protocol_arp_ArpWaitFor20:
;protocol_arp.mpas,116 :: 		Eth_EnableTimer_1s(False);                                                  // This may not be an atomic increase so stall the timer and grab a copy
0x23E4	0x781F8A  	PUSH	W10
0x23E6	0xEF2014  	CLR	W10
0x23E8	0x07FC09  	RCALL	_Eth_EnableTimer_1s
0x23EA	0x78054F  	POP	W10
;protocol_arp.mpas,117 :: 		LocalTime := Arp^.Timer;                                                     // Update the local time with a new value
0x23EC	0x450162  	ADD	W10, #2, W2
0x23EE	0xBE0012  	MOV.D	[W2], W0
0x23F0	0x980710  	MOV	W0, [W14+2]
0x23F2	0x980721  	MOV	W1, [W14+4]
;protocol_arp.mpas,118 :: 		Eth_EnableTimer_1s(True);
0x23F4	0x781F8A  	PUSH	W10
0x23F6	0x2FFFFA  	MOV	#65535, W10
0x23F8	0x07FC01  	RCALL	_Eth_EnableTimer_1s
0x23FA	0x78054F  	POP	W10
;protocol_arp.mpas,119 :: 		end;
0x23FC	0x37FFE2  	BRA	L_protocol_arp_ArpWaitFor15
L_protocol_arp_ArpWaitFor16:
;protocol_arp.mpas,120 :: 		if Result = False then
0x23FE	0x90000E  	MOV	[W14+0], W0
0x2400	0xE10060  	CP	W0, #0
0x2402	0x3A0002  	BRA NZ	L_protocol_arp_ArpWaitFor23
L_protocol_arp_ArpWaitFor101:
;protocol_arp.mpas,121 :: 		Arp^.Valid := False;                                                        // If we failed then release the slot
0x2404	0xEF2000  	CLR	W0
0x2406	0x780D00  	MOV	W0, [W10]
L_protocol_arp_ArpWaitFor23:
;protocol_arp.mpas,122 :: 		end;
0x2408	0x90000E  	MOV	[W14+0], W0
L_end_ArpWaitFor:
0x240A	0xFA8000  	ULNK
0x240C	0x060000  	RETURN
; end of protocol_arp_ArpWaitFor
_Do_EthernetProc:
0x0BAA	0xFA0002  	LNK	#2
;lib2_enc600_V3_5_b.mpas,311 :: 		begin
;lib2_enc600_V3_5_b.mpas,312 :: 		i := 0;
0x0BAC	0xEF2000  	CLR	W0
0x0BAE	0x980700  	MOV	W0, [W14+0]
;lib2_enc600_V3_5_b.mpas,313 :: 		while i < n do
L__Do_EthernetProc97:
0x0BB0	0x470060  	ADD	W14, #0, W0
0x0BB2	0xE15010  	CP	W10, [W0]
0x0BB4	0x36000B  	BRA LEU	L__Do_EthernetProc98
L__Do_EthernetProc156:
;lib2_enc600_V3_5_b.mpas,315 :: 		Eth_DoPacket;
0x0BB6	0x781F8A  	PUSH	W10
0x0BB8	0x0722C5  	RCALL	_Eth_DoPacket
0x0BBA	0x78054F  	POP	W10
;lib2_enc600_V3_5_b.mpas,316 :: 		Eth_UserProcess;
0x0BBC	0x07FE25  	RCALL	_Eth_UserProcess
;lib2_enc600_V3_5_b.mpas,317 :: 		Eth_ProcessTcpStack;
0x0BBE	0x781F8A  	PUSH	W10
0x0BC0	0x07FE69  	RCALL	_Eth_ProcessTcpStack
0x0BC2	0x78054F  	POP	W10
;lib2_enc600_V3_5_b.mpas,318 :: 		inc(i);
0x0BC4	0x90008E  	MOV	[W14+0], W1
0x0BC6	0x470060  	ADD	W14, #0, W0
0x0BC8	0x408861  	ADD	W1, #1, [W0]
;lib2_enc600_V3_5_b.mpas,319 :: 		end;
0x0BCA	0x37FFF2  	BRA	L__Do_EthernetProc97
L__Do_EthernetProc98:
;lib2_enc600_V3_5_b.mpas,320 :: 		end;
L_end_Do_EthernetProc:
0x0BCC	0xFA8000  	ULNK
0x0BCE	0x060000  	RETURN
; end of _Do_EthernetProc
_Eth_UserProcess:
;enc_lib_user.mpas,109 :: 		begin
;enc_lib_user.mpas,111 :: 		end;
L_end_Eth_UserProcess:
0x0808	0x060000  	RETURN
; end of _Eth_UserProcess
_Eth_ProcessTcpStack:
;protocol_tcp.mpas,880 :: 		begin
;protocol_tcp.mpas,881 :: 		i := 0;
0x0894	0x781F8A  	PUSH	W10
0x0896	0x781F8B  	PUSH	W11
0x0898	0x781F8C  	PUSH	W12
0x089A	0x781F8D  	PUSH	W13
; i start address is: 14 (W7)
0x089C	0xEF200E  	CLR	W7
; i end address is: 14 (W7)
;protocol_tcp.mpas,882 :: 		while i < PORT_CACHE_LEN do  // search for opened socket
L__Eth_ProcessTcpStack352:
; i start address is: 14 (W7)
0x089E	0xE13C62  	CP.B	W7, #2
0x08A0	0x310113  	BRA GEU	L__Eth_ProcessTcpStack353
L__Eth_ProcessTcpStack518:
;protocol_tcp.mpas,884 :: 		if (Socket[i].State_S = 2) then  // if connected
0x08A2	0xFB8087  	ZE	W7, W1
0x08A4	0x2042C0  	MOV	#1068, W0
0x08A6	0xB80101  	MUL.UU	W0, W1, W2
0x08A8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x08AA	0x400002  	ADD	W0, W2, W0
0x08AC	0x780010  	MOV	[W0], W0
0x08AE	0xE10062  	CP	W0, #2
0x08B0	0x3A00CB  	BRA NZ	L__Eth_ProcessTcpStack357
L__Eth_ProcessTcpStack519:
;protocol_tcp.mpas,886 :: 		if (Socket[i].Start_addr <> Socket[i].Stop_addr) then
0x08B2	0xFB8087  	ZE	W7, W1
0x08B4	0x2042C0  	MOV	#1068, W0
0x08B6	0xB80101  	MUL.UU	W0, W1, W2
0x08B8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x08BA	0x400002  	ADD	W0, W2, W0
0x08BC	0x40027E  	ADD	W0, #30, W4
0x08BE	0xFB8087  	ZE	W7, W1
0x08C0	0x2042C0  	MOV	#1068, W0
0x08C2	0xB80101  	MUL.UU	W0, W1, W2
0x08C4	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x08C6	0x400082  	ADD	W0, W2, W1
0x08C8	0x200220  	MOV	#34, W0
0x08CA	0x408000  	ADD	W1, W0, W0
0x08CC	0xBE0110  	MOV.D	[W0], W2
0x08CE	0xBE0014  	MOV.D	[W4], W0
0x08D0	0xE10002  	CP	W0, W2
0x08D2	0xE18803  	CPB	W1, W3
0x08D4	0x32002E  	BRA Z	L__Eth_ProcessTcpStack360
L__Eth_ProcessTcpStack520:
;protocol_tcp.mpas,888 :: 		if Send_TCP_R(PSH_S + ACK_S, i, 1) = False then
0x08D6	0x781F87  	PUSH	W7
0x08D8	0xB3C01C  	MOV.B	#1, W12
0x08DA	0x784587  	MOV.B	W7, W11
0x08DC	0xB3C18A  	MOV.B	#24, W10
0x08DE	0x07FDDA  	RCALL	protocol_tcp_Send_TCP_R
0x08E0	0x7803CF  	POP	W7
0x08E2	0xE10060  	CP	W0, #0
0x08E4	0x3A001D  	BRA NZ	L__Eth_ProcessTcpStack363
L__Eth_ProcessTcpStack521:
;protocol_tcp.mpas,890 :: 		Socket[i].Keep_Alive := False;
0x08E6	0xFB8087  	ZE	W7, W1
0x08E8	0x2042C0  	MOV	#1068, W0
0x08EA	0xB80101  	MUL.UU	W0, W1, W2
0x08EC	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x08EE	0x400082  	ADD	W0, W2, W1
0x08F0	0x200280  	MOV	#40, W0
0x08F2	0x408080  	ADD	W1, W0, W1
0x08F4	0xEF2000  	CLR	W0
0x08F6	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,891 :: 		Socket[i].Start_addr := 0;
0x08F8	0xFB8087  	ZE	W7, W1
0x08FA	0x2042C0  	MOV	#1068, W0
0x08FC	0xB80101  	MUL.UU	W0, W1, W2
0x08FE	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0900	0x400002  	ADD	W0, W2, W0
0x0902	0x40017E  	ADD	W0, #30, W2
0x0904	0xEF2000  	CLR	W0
0x0906	0xEF2002  	CLR	W1
0x0908	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,892 :: 		Socket[i].Stop_addr := 0;
0x090A	0xFB8087  	ZE	W7, W1
0x090C	0x2042C0  	MOV	#1068, W0
0x090E	0xB80101  	MUL.UU	W0, W1, W2
0x0910	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0912	0x400082  	ADD	W0, W2, W1
0x0914	0x200220  	MOV	#34, W0
0x0916	0x408100  	ADD	W1, W0, W2
0x0918	0xEF2000  	CLR	W0
0x091A	0xEF2002  	CLR	W1
0x091C	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,893 :: 		end
0x091E	0x370008  	BRA	L__Eth_ProcessTcpStack364
;protocol_tcp.mpas,894 :: 		else Socket[i].Exp_Time := 0;
L__Eth_ProcessTcpStack363:
0x0920	0xFB8087  	ZE	W7, W1
0x0922	0x2042C0  	MOV	#1068, W0
0x0924	0xB80101  	MUL.UU	W0, W1, W2
0x0926	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0928	0x400002  	ADD	W0, W2, W0
0x092A	0x4000FA  	ADD	W0, #26, W1
0x092C	0xEF2000  	CLR	W0
0x092E	0x780880  	MOV	W0, [W1]
L__Eth_ProcessTcpStack364:
;protocol_tcp.mpas,895 :: 		end
0x0930	0x37008A  	BRA	L__Eth_ProcessTcpStack361
;protocol_tcp.mpas,896 :: 		else
L__Eth_ProcessTcpStack360:
;protocol_tcp.mpas,897 :: 		if (Socket[i].Keep_Alive = False) or (Socket[i].Exp_Time > Socket[i].Exp_Time_Val) then // 1 minutes without activity (60 * 1) sec
0x0932	0xFB8087  	ZE	W7, W1
0x0934	0x2042C0  	MOV	#1068, W0
0x0936	0xB80101  	MUL.UU	W0, W1, W2
0x0938	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x093A	0x400082  	ADD	W0, W2, W1
0x093C	0x200280  	MOV	#40, W0
0x093E	0x408000  	ADD	W1, W0, W0
0x0940	0x780010  	MOV	[W0], W0
0x0942	0xE10060  	CP	W0, #0
0x0944	0xEF200A  	CLR	W5
0x0946	0x3A0001  	BRA NZ	L__Eth_ProcessTcpStack522
0x0948	0xEEA00A  	COM	W5
L__Eth_ProcessTcpStack522:
0x094A	0xFB8087  	ZE	W7, W1
0x094C	0x2042C0  	MOV	#1068, W0
0x094E	0xB80101  	MUL.UU	W0, W1, W2
0x0950	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0952	0x400002  	ADD	W0, W2, W0
0x0954	0x40027A  	ADD	W0, #26, W4
0x0956	0xFB8087  	ZE	W7, W1
0x0958	0x2042C0  	MOV	#1068, W0
0x095A	0xB80101  	MUL.UU	W0, W1, W2
0x095C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x095E	0x400002  	ADD	W0, W2, W0
0x0960	0x40007C  	ADD	W0, #28, W0
0x0962	0x780090  	MOV	[W0], W1
0x0964	0x780014  	MOV	[W4], W0
0x0966	0xE10001  	CP	W0, W1
0x0968	0xEF2000  	CLR	W0
0x096A	0x360001  	BRA LEU	L__Eth_ProcessTcpStack523
0x096C	0xEEA000  	COM	W0
L__Eth_ProcessTcpStack523:
0x096E	0x728000  	IOR	W5, W0, W0
0x0970	0x32006A  	BRA Z	L__Eth_ProcessTcpStack366
L__Eth_ProcessTcpStack524:
;protocol_tcp.mpas,899 :: 		Socket[i].RAM_ROM := 0;
0x0972	0xFB8087  	ZE	W7, W1
0x0974	0x2042C0  	MOV	#1068, W0
0x0976	0xB80101  	MUL.UU	W0, W1, W2
0x0978	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x097A	0x400082  	ADD	W0, W2, W1
0x097C	0x200260  	MOV	#38, W0
0x097E	0x408080  	ADD	W1, W0, W1
0x0980	0xEF2000  	CLR	W0
0x0982	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,900 :: 		Socket[i].Start_addr := 0;
0x0984	0xFB8087  	ZE	W7, W1
0x0986	0x2042C0  	MOV	#1068, W0
0x0988	0xB80101  	MUL.UU	W0, W1, W2
0x098A	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x098C	0x400002  	ADD	W0, W2, W0
0x098E	0x40017E  	ADD	W0, #30, W2
0x0990	0xEF2000  	CLR	W0
0x0992	0xEF2002  	CLR	W1
0x0994	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,901 :: 		Socket[i].Stop_addr := 0;
0x0996	0xFB8087  	ZE	W7, W1
0x0998	0x2042C0  	MOV	#1068, W0
0x099A	0xB80101  	MUL.UU	W0, W1, W2
0x099C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x099E	0x400082  	ADD	W0, W2, W1
0x09A0	0x200220  	MOV	#34, W0
0x09A2	0x408100  	ADD	W1, W0, W2
0x09A4	0xEF2000  	CLR	W0
0x09A6	0xEF2002  	CLR	W1
0x09A8	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,902 :: 		CopyRamToEthMem(@Socket[i].Dest_Mac,TXSTART,6);
0x09AA	0xFB8087  	ZE	W7, W1
0x09AC	0x2042C0  	MOV	#1068, W0
0x09AE	0xB80101  	MUL.UU	W0, W1, W2
0x09B0	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x09B2	0x400002  	ADD	W0, W2, W0
0x09B4	0x400068  	ADD	W0, #8, W0
0x09B6	0x20006C  	MOV	#6, W12
0x09B8	0xEF2016  	CLR	W11
0x09BA	0x780500  	MOV	W0, W10
0x09BC	0x070D28  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,903 :: 		CopyRamToEthMem(@eth_mac,TXSTART+6,6);
0x09BE	0x20006C  	MOV	#6, W12
0x09C0	0x20006B  	MOV	#6, W11
0x09C2	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x09C4	0x070D24  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,904 :: 		CopyRamToEthMem(@eth_ip_addr,TXSTART+26,4);
0x09C6	0x20004C  	MOV	#4, W12
0x09C8	0x2001AB  	MOV	#26, W11
0x09CA	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x09CC	0x070D20  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,905 :: 		CopyRamToEthMem(@Socket[i].Dest_Ip,TXSTART+30,4);
0x09CE	0xFB8087  	ZE	W7, W1
0x09D0	0x2042C0  	MOV	#1068, W0
0x09D2	0xB80101  	MUL.UU	W0, W1, W2
0x09D4	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x09D6	0x400002  	ADD	W0, W2, W0
0x09D8	0x400064  	ADD	W0, #4, W0
0x09DA	0x20004C  	MOV	#4, W12
0x09DC	0x2001EB  	MOV	#30, W11
0x09DE	0x780500  	MOV	W0, W10
0x09E0	0x070D16  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,906 :: 		Eth_SendTCP(Socket[i].source_port_S, Socket[i].dest_port_S, 0, Socket[i].SEQ_No_S, Socket[i].ACK_No_S, FIN_S + ACK_S);
0x09E2	0xFB8087  	ZE	W7, W1
0x09E4	0x2042C0  	MOV	#1068, W0
0x09E6	0xB80101  	MUL.UU	W0, W1, W2
0x09E8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x09EA	0x400002  	ADD	W0, W2, W0
0x09EC	0x400362  	ADD	W0, #2, W6
0x09EE	0xFB8087  	ZE	W7, W1
0x09F0	0x2042C0  	MOV	#1068, W0
0x09F2	0xB80101  	MUL.UU	W0, W1, W2
0x09F4	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x09F6	0x400002  	ADD	W0, W2, W0
0x09F8	0x4002EE  	ADD	W0, #14, W5
0x09FA	0xFB8087  	ZE	W7, W1
0x09FC	0x2042C0  	MOV	#1068, W0
0x09FE	0xB80101  	MUL.UU	W0, W1, W2
0x0A00	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A02	0x400002  	ADD	W0, W2, W0
0x0A04	0x400270  	ADD	W0, #16, W4
0x0A06	0xFB8087  	ZE	W7, W1
0x0A08	0x2042C0  	MOV	#1068, W0
0x0A0A	0xB80101  	MUL.UU	W0, W1, W2
0x0A0C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A0E	0x400002  	ADD	W0, W2, W0
0x0A10	0x400074  	ADD	W0, #20, W0
0x0A12	0xB3C11D  	MOV.B	#17, W13
0x0A14	0xEF2018  	CLR	W12
0x0A16	0x780595  	MOV	[W5], W11
0x0A18	0x780516  	MOV	[W6], W10
0x0A1A	0x781FB0  	PUSH	[W0++]
0x0A1C	0x781FA0  	PUSH	[W0--]
0x0A1E	0x781FB4  	PUSH	[W4++]
0x0A20	0x781FA4  	PUSH	[W4--]
0x0A22	0x070523  	RCALL	_Eth_SendTCP
0x0A24	0xB1008F  	SUB	#8, W15
;protocol_tcp.mpas,907 :: 		Socket[i].State_S := 0; // disconnect
0x0A26	0xFB8087  	ZE	W7, W1
0x0A28	0x2042C0  	MOV	#1068, W0
0x0A2A	0xB80101  	MUL.UU	W0, W1, W2
0x0A2C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A2E	0x400082  	ADD	W0, W2, W1
0x0A30	0xEF2000  	CLR	W0
0x0A32	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,908 :: 		Socket[i].Keep_Alive := False;
0x0A34	0xFB8087  	ZE	W7, W1
0x0A36	0x2042C0  	MOV	#1068, W0
0x0A38	0xB80101  	MUL.UU	W0, W1, W2
0x0A3A	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A3C	0x400082  	ADD	W0, W2, W1
0x0A3E	0x200280  	MOV	#40, W0
0x0A40	0x408080  	ADD	W1, W0, W1
0x0A42	0xEF2000  	CLR	W0
0x0A44	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,909 :: 		end;
L__Eth_ProcessTcpStack366:
L__Eth_ProcessTcpStack361:
;protocol_tcp.mpas,910 :: 		end
0x0A46	0x37003D  	BRA	L__Eth_ProcessTcpStack358
;protocol_tcp.mpas,911 :: 		else if (Socket[i].State_S = 1) then // waiting for connection
L__Eth_ProcessTcpStack357:
0x0A48	0xFB8087  	ZE	W7, W1
0x0A4A	0x2042C0  	MOV	#1068, W0
0x0A4C	0xB80101  	MUL.UU	W0, W1, W2
0x0A4E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A50	0x400002  	ADD	W0, W2, W0
0x0A52	0x780010  	MOV	[W0], W0
0x0A54	0xE10061  	CP	W0, #1
0x0A56	0x3A0035  	BRA NZ	L__Eth_ProcessTcpStack369
L__Eth_ProcessTcpStack525:
;protocol_tcp.mpas,913 :: 		if (Socket[i].Exp_Time > 9) then // 10 sec without response at SYN
0x0A58	0xFB8087  	ZE	W7, W1
0x0A5A	0x2042C0  	MOV	#1068, W0
0x0A5C	0xB80101  	MUL.UU	W0, W1, W2
0x0A5E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A60	0x400002  	ADD	W0, W2, W0
0x0A62	0x40007A  	ADD	W0, #26, W0
0x0A64	0x780010  	MOV	[W0], W0
0x0A66	0xE10069  	CP	W0, #9
0x0A68	0x36002C  	BRA LEU	L__Eth_ProcessTcpStack372
L__Eth_ProcessTcpStack526:
;protocol_tcp.mpas,915 :: 		Socket[i].RAM_ROM := 0;
0x0A6A	0xFB8087  	ZE	W7, W1
0x0A6C	0x2042C0  	MOV	#1068, W0
0x0A6E	0xB80101  	MUL.UU	W0, W1, W2
0x0A70	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A72	0x400082  	ADD	W0, W2, W1
0x0A74	0x200260  	MOV	#38, W0
0x0A76	0x408080  	ADD	W1, W0, W1
0x0A78	0xEF2000  	CLR	W0
0x0A7A	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,916 :: 		Socket[i].Start_addr := 0;
0x0A7C	0xFB8087  	ZE	W7, W1
0x0A7E	0x2042C0  	MOV	#1068, W0
0x0A80	0xB80101  	MUL.UU	W0, W1, W2
0x0A82	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A84	0x400002  	ADD	W0, W2, W0
0x0A86	0x40017E  	ADD	W0, #30, W2
0x0A88	0xEF2000  	CLR	W0
0x0A8A	0xEF2002  	CLR	W1
0x0A8C	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,917 :: 		Socket[i].Stop_addr := 0;
0x0A8E	0xFB8087  	ZE	W7, W1
0x0A90	0x2042C0  	MOV	#1068, W0
0x0A92	0xB80101  	MUL.UU	W0, W1, W2
0x0A94	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0A96	0x400082  	ADD	W0, W2, W1
0x0A98	0x200220  	MOV	#34, W0
0x0A9A	0x408100  	ADD	W1, W0, W2
0x0A9C	0xEF2000  	CLR	W0
0x0A9E	0xEF2002  	CLR	W1
0x0AA0	0xBE8900  	MOV.D	W0, [W2]
;protocol_tcp.mpas,918 :: 		Socket[i].State_S := 0; // disconnect
0x0AA2	0xFB8087  	ZE	W7, W1
0x0AA4	0x2042C0  	MOV	#1068, W0
0x0AA6	0xB80101  	MUL.UU	W0, W1, W2
0x0AA8	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0AAA	0x400082  	ADD	W0, W2, W1
0x0AAC	0xEF2000  	CLR	W0
0x0AAE	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,919 :: 		Socket[i].Keep_Alive := False;
0x0AB0	0xFB8087  	ZE	W7, W1
0x0AB2	0x2042C0  	MOV	#1068, W0
0x0AB4	0xB80101  	MUL.UU	W0, W1, W2
0x0AB6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0AB8	0x400082  	ADD	W0, W2, W1
0x0ABA	0x200280  	MOV	#40, W0
0x0ABC	0x408080  	ADD	W1, W0, W1
0x0ABE	0xEF2000  	CLR	W0
0x0AC0	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,920 :: 		end;
L__Eth_ProcessTcpStack372:
;protocol_tcp.mpas,921 :: 		end;
L__Eth_ProcessTcpStack369:
L__Eth_ProcessTcpStack358:
;protocol_tcp.mpas,922 :: 		inc(i);
; i start address is: 0 (W0)
0x0AC2	0x43C061  	ADD.B	W7, #1, W0
; i end address is: 14 (W7)
;protocol_tcp.mpas,923 :: 		end;
0x0AC4	0x784380  	MOV.B	W0, W7
; i end address is: 0 (W0)
0x0AC6	0x37FEEB  	BRA	L__Eth_ProcessTcpStack352
L__Eth_ProcessTcpStack353:
;protocol_tcp.mpas,924 :: 		end;
L_end_Eth_ProcessTcpStack:
0x0AC8	0x7806CF  	POP	W13
0x0ACA	0x78064F  	POP	W12
0x0ACC	0x7805CF  	POP	W11
0x0ACE	0x78054F  	POP	W10
0x0AD0	0x060000  	RETURN
; end of _Eth_ProcessTcpStack
protocol_tcp_Send_TCP_R:
0x0494	0xFA0014  	LNK	#20
;protocol_tcp.mpas,379 :: 		begin
;protocol_tcp.mpas,380 :: 		Stop_addr_S := Socket[CC_Sock].Stop_addr;
0x0496	0xFB808B  	ZE	W11, W1
0x0498	0x2042C0  	MOV	#1068, W0
0x049A	0xB80101  	MUL.UU	W0, W1, W2
0x049C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x049E	0x400082  	ADD	W0, W2, W1
0x04A0	0x200220  	MOV	#34, W0
0x04A2	0x408100  	ADD	W1, W0, W2
0x04A4	0xBE0012  	MOV.D	[W2], W0
0x04A6	0x980740  	MOV	W0, [W14+8]
0x04A8	0x980751  	MOV	W1, [W14+10]
;protocol_tcp.mpas,381 :: 		Start_addr_S := Socket[CC_Sock].Start_addr;
0x04AA	0xFB808B  	ZE	W11, W1
0x04AC	0x2042C0  	MOV	#1068, W0
0x04AE	0xB80101  	MUL.UU	W0, W1, W2
0x04B0	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x04B2	0x400002  	ADD	W0, W2, W0
0x04B4	0x40017E  	ADD	W0, #30, W2
0x04B6	0xBE0012  	MOV.D	[W2], W0
0x04B8	0x980760  	MOV	W0, [W14+12]
0x04BA	0x980771  	MOV	W1, [W14+14]
;protocol_tcp.mpas,383 :: 		Result := False;
0x04BC	0xEF2000  	CLR	W0
0x04BE	0x980700  	MOV	W0, [W14+0]
;protocol_tcp.mpas,385 :: 		i := 0;
0x04C0	0xEF2000  	CLR	W0
0x04C2	0x980730  	MOV	W0, [W14+6]
;protocol_tcp.mpas,386 :: 		while i < 3 do
L_protocol_tcp_Send_TCP_R118:
0x04C4	0x90003E  	MOV	[W14+6], W0
0x04C6	0xE10063  	CP	W0, #3
0x04C8	0x31008C  	BRA GEU	L_protocol_tcp_Send_TCP_R119
L_protocol_tcp_Send_TCP_R433:
;protocol_tcp.mpas,388 :: 		jj := 0;
0x04CA	0xEF2000  	CLR	W0
0x04CC	0x980720  	MOV	W0, [W14+4]
;protocol_tcp.mpas,391 :: 		Eth_DoPacket;
0x04CE	0x781F8C  	PUSH	W12
0x04D0	0xBE9F8A  	PUSH.D	W10
0x04D2	0x072638  	RCALL	_Eth_DoPacket
;protocol_tcp.mpas,392 :: 		Eth_DoPacket;
0x04D4	0x072637  	RCALL	_Eth_DoPacket
0x04D6	0xBE054F  	POP.D	W10
0x04D8	0x78064F  	POP	W12
;protocol_tcp.mpas,394 :: 		packet_size_ := 1300;
0x04DA	0x205140  	MOV	#1300, W0
0x04DC	0x88E5E0  	MOV	W0, protocol_tcp_packet_size_
;protocol_tcp.mpas,396 :: 		seq_buf := Socket[CC_Sock].SEQ_No_S;
0x04DE	0xFB808B  	ZE	W11, W1
0x04E0	0x2042C0  	MOV	#1068, W0
0x04E2	0xB80101  	MUL.UU	W0, W1, W2
0x04E4	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x04E6	0x400002  	ADD	W0, W2, W0
0x04E8	0x400170  	ADD	W0, #16, W2
0x04EA	0xBE0012  	MOV.D	[W2], W0
0x04EC	0x980F00  	MOV	W0, [W14+16]
0x04EE	0x980F11  	MOV	W1, [W14+18]
;protocol_tcp.mpas,398 :: 		Socket[CC_Sock].Wait_ACK := 1;
0x04F0	0xFB808B  	ZE	W11, W1
0x04F2	0x2042C0  	MOV	#1068, W0
0x04F4	0xB80101  	MUL.UU	W0, W1, W2
0x04F6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x04F8	0x400002  	ADD	W0, W2, W0
0x04FA	0x4000F8  	ADD	W0, #24, W1
0x04FC	0x200010  	MOV	#1, W0
0x04FE	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,401 :: 		xx_ := (Stop_addr_S - Start_addr_S);
0x0500	0x90024E  	MOV	[W14+8], W4
0x0502	0x9002DE  	MOV	[W14+10], W5
0x0504	0x47006C  	ADD	W14, #12, W0
0x0506	0x520130  	SUB	W4, [W0++], W2
0x0508	0x5A81A0  	SUBB	W5, [W0--], W3
0x050A	0x88E5C2  	MOV	W2, protocol_tcp_xx_
0x050C	0x88E5D3  	MOV	W3, protocol_tcp_xx_+2
;protocol_tcp.mpas,402 :: 		if xx_ <= mm then
0x050E	0x205140  	MOV	#1300, W0
0x0510	0x200001  	MOV	#0, W1
0x0512	0xE11000  	CP	W2, W0
0x0514	0xE19801  	CPB	W3, W1
0x0516	0x3E0014  	BRA GTU	L_protocol_tcp_Send_TCP_R123
L_protocol_tcp_Send_TCP_R434:
;protocol_tcp.mpas,404 :: 		if fragment <> 0 then
0x0518	0xE16460  	CP.B	W12, #0
0x051A	0x320011  	BRA Z	L_protocol_tcp_Send_TCP_R126
L_protocol_tcp_Send_TCP_R435:
;protocol_tcp.mpas,405 :: 		if xx_ >= 4 then
0x051C	0x80E5C0  	MOV	protocol_tcp_xx_, W0
0x051E	0x80E5D1  	MOV	protocol_tcp_xx_+2, W1
0x0520	0xE10064  	CP	W0, #4
0x0522	0xE18860  	CPB	W1, #0
0x0524	0x39000C  	BRA LTU	L_protocol_tcp_Send_TCP_R129
L_protocol_tcp_Send_TCP_R436:
;protocol_tcp.mpas,407 :: 		packet_size_ := xx_ div 2;
0x0526	0x21CB82  	MOV	#lo_addr(protocol_tcp_xx_), W2
0x0528	0xD100D2  	LSR	[++W2], W1
0x052A	0xD38042  	RRC	[--W2], W0
0x052C	0x88E5E0  	MOV	W0, protocol_tcp_packet_size_
;protocol_tcp.mpas,408 :: 		jj := Send_TCP_R1(ACK_S,CC_Sock,jj);
0x052E	0x781F8C  	PUSH	W12
0x0530	0x781F8A  	PUSH	W10
0x0532	0x90062E  	MOV	[W14+4], W12
0x0534	0xB3C10A  	MOV.B	#16, W10
0x0536	0x07FE84  	RCALL	protocol_tcp_Send_TCP_R1
0x0538	0x78054F  	POP	W10
0x053A	0x78064F  	POP	W12
0x053C	0x980720  	MOV	W0, [W14+4]
;protocol_tcp.mpas,409 :: 		end;
L_protocol_tcp_Send_TCP_R129:
L_protocol_tcp_Send_TCP_R126:
;protocol_tcp.mpas,410 :: 		end
0x053E	0x370008  	BRA	L_protocol_tcp_Send_TCP_R124
;protocol_tcp.mpas,411 :: 		else jj := Send_TCP_R1(ACK_S,CC_Sock,jj);
L_protocol_tcp_Send_TCP_R123:
0x0540	0x781F8C  	PUSH	W12
0x0542	0x781F8A  	PUSH	W10
0x0544	0x90062E  	MOV	[W14+4], W12
0x0546	0xB3C10A  	MOV.B	#16, W10
0x0548	0x07FE7B  	RCALL	protocol_tcp_Send_TCP_R1
0x054A	0x78054F  	POP	W10
0x054C	0x78064F  	POP	W12
0x054E	0x980720  	MOV	W0, [W14+4]
L_protocol_tcp_Send_TCP_R124:
;protocol_tcp.mpas,413 :: 		if TCP_Flag_T.FIN = 0 then
0x0550	0xAF0014  	BTSC.B	W10, #0
0x0552	0x37000D  	BRA	L_protocol_tcp_Send_TCP_R132
;protocol_tcp.mpas,414 :: 		if TCP_Flag_T.SYN = 0 then
0x0554	0xAF2014  	BTSC.B	W10, #1
0x0556	0x37000B  	BRA	L_protocol_tcp_Send_TCP_R135
;protocol_tcp.mpas,415 :: 		if Socket[CC_Sock].State_S <> 2 then
0x0558	0xFB808B  	ZE	W11, W1
0x055A	0x2042C0  	MOV	#1068, W0
0x055C	0xB80101  	MUL.UU	W0, W1, W2
0x055E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0560	0x400002  	ADD	W0, W2, W0
0x0562	0x780010  	MOV	[W0], W0
0x0564	0xE10062  	CP	W0, #2
0x0566	0x320003  	BRA Z	L_protocol_tcp_Send_TCP_R138
L_protocol_tcp_Send_TCP_R437:
;protocol_tcp.mpas,417 :: 		Result := False;
0x0568	0xEF2000  	CLR	W0
0x056A	0x980700  	MOV	W0, [W14+0]
;protocol_tcp.mpas,418 :: 		Exit;
0x056C	0x3700CE  	BRA	L_end_protocol_tcp_Send_TCP_R
;protocol_tcp.mpas,419 :: 		end;
L_protocol_tcp_Send_TCP_R138:
L_protocol_tcp_Send_TCP_R135:
L_protocol_tcp_Send_TCP_R132:
;protocol_tcp.mpas,421 :: 		packet_size_ := 1300;
0x056E	0x205140  	MOV	#1300, W0
0x0570	0x88E5E0  	MOV	W0, protocol_tcp_packet_size_
;protocol_tcp.mpas,423 :: 		j := Send_TCP_R1(TCP_Flag_T,CC_Sock,jj);
0x0572	0x781F8C  	PUSH	W12
0x0574	0x90062E  	MOV	[W14+4], W12
0x0576	0x07FE64  	RCALL	protocol_tcp_Send_TCP_R1
0x0578	0x78064F  	POP	W12
0x057A	0x980710  	MOV	W0, [W14+2]
;protocol_tcp.mpas,425 :: 		TickCounter10 := 0;
0x057C	0xEF2000  	CLR	W0
0x057E	0x888160  	MOV	W0, _TickCounter10
;protocol_tcp.mpas,426 :: 		while TickCounter10 < TCP_Wait do // wait for ack
L_protocol_tcp_Send_TCP_R141:
0x0580	0x808161  	MOV	_TickCounter10, W1
0x0582	0x21C9C0  	MOV	#lo_addr(_TCP_Wait), W0
0x0584	0xE10810  	CP	W1, [W0]
0x0586	0x310024  	BRA GEU	L_protocol_tcp_Send_TCP_R142
L_protocol_tcp_Send_TCP_R438:
;protocol_tcp.mpas,428 :: 		Eth_DoPacket;
0x0588	0x781F8C  	PUSH	W12
0x058A	0xBE9F8A  	PUSH.D	W10
0x058C	0x0725DB  	RCALL	_Eth_DoPacket
0x058E	0xBE054F  	POP.D	W10
0x0590	0x78064F  	POP	W12
;protocol_tcp.mpas,429 :: 		if Socket[CC_Sock].Wait_ACK = 0 then
0x0592	0xFB808B  	ZE	W11, W1
0x0594	0x2042C0  	MOV	#1068, W0
0x0596	0xB80101  	MUL.UU	W0, W1, W2
0x0598	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x059A	0x400002  	ADD	W0, W2, W0
0x059C	0x400078  	ADD	W0, #24, W0
0x059E	0x780010  	MOV	[W0], W0
0x05A0	0xE10060  	CP	W0, #0
0x05A2	0x3A0015  	BRA NZ	L_protocol_tcp_Send_TCP_R146
L_protocol_tcp_Send_TCP_R439:
;protocol_tcp.mpas,431 :: 		Socket[CC_Sock].Wait_ACK := 1;
0x05A4	0xFB808B  	ZE	W11, W1
0x05A6	0x2042C0  	MOV	#1068, W0
0x05A8	0xB80101  	MUL.UU	W0, W1, W2
0x05AA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x05AC	0x400002  	ADD	W0, W2, W0
0x05AE	0x4000F8  	ADD	W0, #24, W1
0x05B0	0x200010  	MOV	#1, W0
0x05B2	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,432 :: 		if seq_buf <> Socket[CC_Sock].SEQ_No_S then break;
0x05B4	0xFB808B  	ZE	W11, W1
0x05B6	0x2042C0  	MOV	#1068, W0
0x05B8	0xB80101  	MUL.UU	W0, W1, W2
0x05BA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x05BC	0x400002  	ADD	W0, W2, W0
0x05BE	0x400070  	ADD	W0, #16, W0
0x05C0	0x7800B0  	MOV	[W0++], W1
0x05C2	0x780120  	MOV	[W0--], W2
0x05C4	0x470070  	ADD	W14, #16, W0
0x05C6	0xE10830  	CP	W1, [W0++]
0x05C8	0xE19020  	CPB	W2, [W0--]
0x05CA	0x320001  	BRA Z	L_protocol_tcp_Send_TCP_R149
L_protocol_tcp_Send_TCP_R440:
0x05CC	0x370001  	BRA	L_protocol_tcp_Send_TCP_R142
L_protocol_tcp_Send_TCP_R149:
;protocol_tcp.mpas,433 :: 		end;
L_protocol_tcp_Send_TCP_R146:
;protocol_tcp.mpas,434 :: 		end;
0x05CE	0x37FFD8  	BRA	L_protocol_tcp_Send_TCP_R141
L_protocol_tcp_Send_TCP_R142:
;protocol_tcp.mpas,435 :: 		if TickCounter10 < TCP_Wait then break;
0x05D0	0x808161  	MOV	_TickCounter10, W1
0x05D2	0x21C9C0  	MOV	#lo_addr(_TCP_Wait), W0
0x05D4	0xE10810  	CP	W1, [W0]
0x05D6	0x310001  	BRA GEU	L_protocol_tcp_Send_TCP_R152
L_protocol_tcp_Send_TCP_R441:
0x05D8	0x370004  	BRA	L_protocol_tcp_Send_TCP_R119
L_protocol_tcp_Send_TCP_R152:
;protocol_tcp.mpas,436 :: 		inc(i);
0x05DA	0x9000BE  	MOV	[W14+6], W1
0x05DC	0x470066  	ADD	W14, #6, W0
0x05DE	0x408861  	ADD	W1, #1, [W0]
;protocol_tcp.mpas,437 :: 		end;
0x05E0	0x37FF71  	BRA	L_protocol_tcp_Send_TCP_R118
L_protocol_tcp_Send_TCP_R119:
;protocol_tcp.mpas,439 :: 		if i = 3 then Exit;
0x05E2	0x90003E  	MOV	[W14+6], W0
0x05E4	0xE10063  	CP	W0, #3
0x05E6	0x3A0001  	BRA NZ	L_protocol_tcp_Send_TCP_R155
L_protocol_tcp_Send_TCP_R442:
0x05E8	0x370090  	BRA	L_end_protocol_tcp_Send_TCP_R
L_protocol_tcp_Send_TCP_R155:
;protocol_tcp.mpas,441 :: 		if TCP_Flag_T.FIN = 0 then
0x05EA	0xAF0014  	BTSC.B	W10, #0
0x05EC	0x370059  	BRA	L_protocol_tcp_Send_TCP_R158
;protocol_tcp.mpas,442 :: 		if TCP_Flag_T.SYN = 0 then
0x05EE	0xAF2014  	BTSC.B	W10, #1
0x05F0	0x370057  	BRA	L_protocol_tcp_Send_TCP_R161
;protocol_tcp.mpas,443 :: 		if (seq_buf + jj + j) <> Socket[CC_Sock].SEQ_No_S then
0x05F2	0x90022E  	MOV	[W14+4], W4
0x05F4	0xEB0280  	CLR	W5
0x05F6	0x470070  	ADD	W14, #16, W0
0x05F8	0x420130  	ADD	W4, [W0++], W2
0x05FA	0x4A81A0  	ADDC	W5, [W0--], W3
0x05FC	0x90001E  	MOV	[W14+2], W0
0x05FE	0xEB0080  	CLR	W1
0x0600	0x410200  	ADD	W2, W0, W4
0x0602	0x498281  	ADDC	W3, W1, W5
0x0604	0xFB808B  	ZE	W11, W1
0x0606	0x2042C0  	MOV	#1068, W0
0x0608	0xB80101  	MUL.UU	W0, W1, W2
0x060A	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x060C	0x400002  	ADD	W0, W2, W0
0x060E	0x400170  	ADD	W0, #16, W2
0x0610	0xBE0012  	MOV.D	[W2], W0
0x0612	0xE12000  	CP	W4, W0
0x0614	0xE1A801  	CPB	W5, W1
0x0616	0x320044  	BRA Z	L_protocol_tcp_Send_TCP_R164
L_protocol_tcp_Send_TCP_R443:
;protocol_tcp.mpas,445 :: 		if (seq_buf + jj) = Socket[CC_Sock].SEQ_No_S then
0x0618	0x9000AE  	MOV	[W14+4], W1
0x061A	0xEB0100  	CLR	W2
0x061C	0x470070  	ADD	W14, #16, W0
0x061E	0x408230  	ADD	W1, [W0++], W4
0x0620	0x4902A0  	ADDC	W2, [W0--], W5
0x0622	0xFB808B  	ZE	W11, W1
0x0624	0x2042C0  	MOV	#1068, W0
0x0626	0xB80101  	MUL.UU	W0, W1, W2
0x0628	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x062A	0x400002  	ADD	W0, W2, W0
0x062C	0x400170  	ADD	W0, #16, W2
0x062E	0xBE0012  	MOV.D	[W2], W0
0x0630	0xE12000  	CP	W4, W0
0x0632	0xE1A801  	CPB	W5, W1
0x0634	0x3A0034  	BRA NZ	L_protocol_tcp_Send_TCP_R167
L_protocol_tcp_Send_TCP_R444:
;protocol_tcp.mpas,447 :: 		Socket[CC_Sock].Wait_ACK := 1;
0x0636	0xFB808B  	ZE	W11, W1
0x0638	0x2042C0  	MOV	#1068, W0
0x063A	0xB80101  	MUL.UU	W0, W1, W2
0x063C	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x063E	0x400002  	ADD	W0, W2, W0
0x0640	0x4000F8  	ADD	W0, #24, W1
0x0642	0x200010  	MOV	#1, W0
0x0644	0x780880  	MOV	W0, [W1]
;protocol_tcp.mpas,448 :: 		TickCounter10 := 0;
0x0646	0xEF2000  	CLR	W0
0x0648	0x888160  	MOV	W0, _TickCounter10
;protocol_tcp.mpas,449 :: 		while TickCounter10 < TCP_Wait do // wait for 2nd ack
L_protocol_tcp_Send_TCP_R170:
0x064A	0x808161  	MOV	_TickCounter10, W1
0x064C	0x21C9C0  	MOV	#lo_addr(_TCP_Wait), W0
0x064E	0xE10810  	CP	W1, [W0]
0x0650	0x310025  	BRA GEU	L_protocol_tcp_Send_TCP_R171
L_protocol_tcp_Send_TCP_R445:
;protocol_tcp.mpas,451 :: 		Eth_DoPacket;
0x0652	0x781F8C  	PUSH	W12
0x0654	0xBE9F8A  	PUSH.D	W10
0x0656	0x072576  	RCALL	_Eth_DoPacket
0x0658	0xBE054F  	POP.D	W10
0x065A	0x78064F  	POP	W12
;protocol_tcp.mpas,452 :: 		if Socket[CC_Sock].Wait_ACK = 0 then // received
0x065C	0xFB808B  	ZE	W11, W1
0x065E	0x2042C0  	MOV	#1068, W0
0x0660	0xB80101  	MUL.UU	W0, W1, W2
0x0662	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0664	0x400002  	ADD	W0, W2, W0
0x0666	0x400078  	ADD	W0, #24, W0
0x0668	0x780010  	MOV	[W0], W0
0x066A	0xE10060  	CP	W0, #0
0x066C	0x3A0016  	BRA NZ	L_protocol_tcp_Send_TCP_R175
L_protocol_tcp_Send_TCP_R446:
;protocol_tcp.mpas,454 :: 		if (seq_buf + jj + j) <> Socket[CC_Sock].SEQ_No_S then j := 0;
0x066E	0x90022E  	MOV	[W14+4], W4
0x0670	0xEB0280  	CLR	W5
0x0672	0x470070  	ADD	W14, #16, W0
0x0674	0x420130  	ADD	W4, [W0++], W2
0x0676	0x4A81A0  	ADDC	W5, [W0--], W3
0x0678	0x90001E  	MOV	[W14+2], W0
0x067A	0xEB0080  	CLR	W1
0x067C	0x410200  	ADD	W2, W0, W4
0x067E	0x498281  	ADDC	W3, W1, W5
0x0680	0xFB808B  	ZE	W11, W1
0x0682	0x2042C0  	MOV	#1068, W0
0x0684	0xB80101  	MUL.UU	W0, W1, W2
0x0686	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0688	0x400002  	ADD	W0, W2, W0
0x068A	0x400170  	ADD	W0, #16, W2
0x068C	0xBE0012  	MOV.D	[W2], W0
0x068E	0xE12000  	CP	W4, W0
0x0690	0xE1A801  	CPB	W5, W1
0x0692	0x320002  	BRA Z	L_protocol_tcp_Send_TCP_R178
L_protocol_tcp_Send_TCP_R447:
0x0694	0xEF2000  	CLR	W0
0x0696	0x980710  	MOV	W0, [W14+2]
L_protocol_tcp_Send_TCP_R178:
;protocol_tcp.mpas,455 :: 		break;
0x0698	0x370001  	BRA	L_protocol_tcp_Send_TCP_R171
;protocol_tcp.mpas,456 :: 		end;
L_protocol_tcp_Send_TCP_R175:
;protocol_tcp.mpas,457 :: 		end;
0x069A	0x37FFD7  	BRA	L_protocol_tcp_Send_TCP_R170
L_protocol_tcp_Send_TCP_R171:
;protocol_tcp.mpas,458 :: 		end
0x069C	0x370001  	BRA	L_protocol_tcp_Send_TCP_R168
;protocol_tcp.mpas,459 :: 		else Exit;
L_protocol_tcp_Send_TCP_R167:
0x069E	0x370035  	BRA	L_end_protocol_tcp_Send_TCP_R
L_protocol_tcp_Send_TCP_R168:
;protocol_tcp.mpas,460 :: 		end;
L_protocol_tcp_Send_TCP_R164:
L_protocol_tcp_Send_TCP_R161:
L_protocol_tcp_Send_TCP_R158:
;protocol_tcp.mpas,462 :: 		if (Socket[CC_Sock].Start_addr = Start_addr_S) and (Socket[CC_Sock].Stop_addr = Stop_addr_S) then
0x06A0	0xFB808B  	ZE	W11, W1
0x06A2	0x2042C0  	MOV	#1068, W0
0x06A4	0xB80101  	MUL.UU	W0, W1, W2
0x06A6	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x06A8	0x400002  	ADD	W0, W2, W0
0x06AA	0x40007E  	ADD	W0, #30, W0
0x06AC	0x7800B0  	MOV	[W0++], W1
0x06AE	0x780120  	MOV	[W0--], W2
0x06B0	0x47006C  	ADD	W14, #12, W0
0x06B2	0xE10830  	CP	W1, [W0++]
0x06B4	0xE19020  	CPB	W2, [W0--]
0x06B6	0xEF2008  	CLR	W4
0x06B8	0x3A0001  	BRA NZ	L_protocol_tcp_Send_TCP_R448
0x06BA	0xEEA008  	COM	W4
L_protocol_tcp_Send_TCP_R448:
0x06BC	0xFB808B  	ZE	W11, W1
0x06BE	0x2042C0  	MOV	#1068, W0
0x06C0	0xB80101  	MUL.UU	W0, W1, W2
0x06C2	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x06C4	0x400082  	ADD	W0, W2, W1
0x06C6	0x200220  	MOV	#34, W0
0x06C8	0x408000  	ADD	W1, W0, W0
0x06CA	0xBE0110  	MOV.D	[W0], W2
0x06CC	0x4700E8  	ADD	W14, #8, W1
0x06CE	0xE11031  	CP	W2, [W1++]
0x06D0	0xE19821  	CPB	W3, [W1--]
0x06D2	0xEF2000  	CLR	W0
0x06D4	0x3A0001  	BRA NZ	L_protocol_tcp_Send_TCP_R449
0x06D6	0xEEA000  	COM	W0
L_protocol_tcp_Send_TCP_R449:
0x06D8	0x620000  	AND	W4, W0, W0
0x06DA	0x320015  	BRA Z	L_protocol_tcp_Send_TCP_R181
L_protocol_tcp_Send_TCP_R450:
;protocol_tcp.mpas,463 :: 		Socket[CC_Sock].Start_addr := Socket[CC_Sock].Start_addr + j + jj;
0x06DC	0xFB808B  	ZE	W11, W1
0x06DE	0x2042C0  	MOV	#1068, W0
0x06E0	0xB80101  	MUL.UU	W0, W1, W2
0x06E2	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x06E4	0x400002  	ADD	W0, W2, W0
0x06E6	0x4002FE  	ADD	W0, #30, W5
0x06E8	0xFB808B  	ZE	W11, W1
0x06EA	0x2042C0  	MOV	#1068, W0
0x06EC	0xB80101  	MUL.UU	W0, W1, W2
0x06EE	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x06F0	0x400002  	ADD	W0, W2, W0
0x06F2	0x40027E  	ADD	W0, #30, W4
0x06F4	0x90001E  	MOV	[W14+2], W0
0x06F6	0xEB0080  	CLR	W1
0x06F8	0x400134  	ADD	W0, [W4++], W2
0x06FA	0x4881A4  	ADDC	W1, [W4--], W3
0x06FC	0x90002E  	MOV	[W14+4], W0
0x06FE	0xEB0080  	CLR	W1
0x0700	0x410000  	ADD	W2, W0, W0
0x0702	0x498081  	ADDC	W3, W1, W1
0x0704	0xBE8A80  	MOV.D	W0, [W5]
L_protocol_tcp_Send_TCP_R181:
;protocol_tcp.mpas,465 :: 		Result := True;
0x0706	0x2FFFF0  	MOV	#65535, W0
0x0708	0x980700  	MOV	W0, [W14+0]
;protocol_tcp.mpas,466 :: 		end;
L_end_protocol_tcp_Send_TCP_R:
0x070A	0x90000E  	MOV	[W14+0], W0
L_end_Send_TCP_R:
0x070C	0xFA8000  	ULNK
0x070E	0x060000  	RETURN
; end of protocol_tcp_Send_TCP_R
protocol_tcp_Send_TCP_R1:
0x0240	0xFA0002  	LNK	#2
;protocol_tcp.mpas,328 :: 		begin
;protocol_tcp.mpas,329 :: 		Result := 0;
0x0242	0x781F8A  	PUSH	W10
0x0244	0x781F8B  	PUSH	W11
0x0246	0x781F8C  	PUSH	W12
0x0248	0x781F8D  	PUSH	W13
; Result start address is: 8 (W4)
0x024A	0xEF2008  	CLR	W4
;protocol_tcp.mpas,330 :: 		Stop_addr_S := Socket[CC_Sock].Stop_addr;
0x024C	0xFB808B  	ZE	W11, W1
0x024E	0x2042C0  	MOV	#1068, W0
0x0250	0xB80101  	MUL.UU	W0, W1, W2
0x0252	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0254	0x400082  	ADD	W0, W2, W1
0x0256	0x200220  	MOV	#34, W0
0x0258	0x408000  	ADD	W1, W0, W0
; Stop_addr_S start address is: 10 (W5)
0x025A	0x7802B0  	MOV	[W0++], W5
0x025C	0x780320  	MOV	[W0--], W6
;protocol_tcp.mpas,331 :: 		Start_addr_S := Socket[CC_Sock].Start_addr;
0x025E	0xFB808B  	ZE	W11, W1
0x0260	0x2042C0  	MOV	#1068, W0
0x0262	0xB80101  	MUL.UU	W0, W1, W2
0x0264	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0266	0x400002  	ADD	W0, W2, W0
0x0268	0x40007E  	ADD	W0, #30, W0
; Start_addr_S start address is: 14 (W7)
0x026A	0x7803B0  	MOV	[W0++], W7
0x026C	0x780420  	MOV	[W0--], W8
;protocol_tcp.mpas,333 :: 		CopyRamToEthMem(@Socket[CC_Sock].Dest_Mac,TXSTART,6);
0x026E	0xFB808B  	ZE	W11, W1
0x0270	0x2042C0  	MOV	#1068, W0
0x0272	0xB80101  	MUL.UU	W0, W1, W2
0x0274	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0276	0x400002  	ADD	W0, W2, W0
0x0278	0x400068  	ADD	W0, #8, W0
0x027A	0x781F8C  	PUSH	W12
0x027C	0xBE9F8A  	PUSH.D	W10
0x027E	0x20006C  	MOV	#6, W12
0x0280	0xEF2016  	CLR	W11
0x0282	0x780500  	MOV	W0, W10
0x0284	0x0710C4  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,334 :: 		CopyRamToEthMem(@eth_mac,TXSTART+6,6);
0x0286	0x20006C  	MOV	#6, W12
0x0288	0x20006B  	MOV	#6, W11
0x028A	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x028C	0x0710C0  	RCALL	_CopyRamToEthMem
;protocol_tcp.mpas,335 :: 		CopyRamToEthMem(@eth_ip_addr,TXSTART+26,4);
0x028E	0x20004C  	MOV	#4, W12
0x0290	0x2001AB  	MOV	#26, W11
0x0292	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x0294	0x0710BC  	RCALL	_CopyRamToEthMem
0x0296	0xBE054F  	POP.D	W10
;protocol_tcp.mpas,336 :: 		CopyRamToEthMem(@Socket[CC_Sock].Dest_Ip,TXSTART+30,4);
0x0298	0xFB808B  	ZE	W11, W1
0x029A	0x2042C0  	MOV	#1068, W0
0x029C	0xB80101  	MUL.UU	W0, W1, W2
0x029E	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x02A0	0x400002  	ADD	W0, W2, W0
0x02A2	0x400064  	ADD	W0, #4, W0
0x02A4	0xBE9F8A  	PUSH.D	W10
0x02A6	0x20004C  	MOV	#4, W12
0x02A8	0x2001EB  	MOV	#30, W11
0x02AA	0x780500  	MOV	W0, W10
0x02AC	0x0710B0  	RCALL	_CopyRamToEthMem
0x02AE	0xBE054F  	POP.D	W10
0x02B0	0x78064F  	POP	W12
;protocol_tcp.mpas,337 :: 		Put_TCPPointer;
0x02B2	0x07FFBE  	RCALL	_Put_TCPPointer
;protocol_tcp.mpas,339 :: 		if Socket[CC_Sock].RAM_ROM = 0 then
0x02B4	0xFB808B  	ZE	W11, W1
0x02B6	0x2042C0  	MOV	#1068, W0
0x02B8	0xB80101  	MUL.UU	W0, W1, W2
0x02BA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x02BC	0x400082  	ADD	W0, W2, W1
0x02BE	0x200260  	MOV	#38, W0
0x02C0	0x408000  	ADD	W1, W0, W0
0x02C2	0x780010  	MOV	[W0], W0
0x02C4	0xE10060  	CP	W0, #0
0x02C6	0x3A0016  	BRA NZ	L_protocol_tcp_Send_TCP_R191
L_protocol_tcp_Send_TCP_R1424:
; Result end address is: 8 (W4)
;protocol_tcp.mpas,341 :: 		j := dword(Stop_addr_S - (Start_addr_S + jj));
0x02C8	0x78000C  	MOV	W12, W0
0x02CA	0xEB0080  	CLR	W1
0x02CC	0x438000  	ADD	W7, W0, W0
0x02CE	0x4C0081  	ADDC	W8, W1, W1
0x02D0	0x528100  	SUB	W5, W0, W2
0x02D2	0x5B0181  	SUBB	W6, W1, W3
; Stop_addr_S end address is: 10 (W5)
0x02D4	0x980702  	MOV	W2, [W14+0]
;protocol_tcp.mpas,342 :: 		if j >= packet_size_ then j := packet_size_;
0x02D6	0x21CBC0  	MOV	#lo_addr(protocol_tcp_packet_size_), W0
0x02D8	0xE11010  	CP	W2, [W0]
0x02DA	0x390002  	BRA LTU	L_protocol_tcp_Send_TCP_R194
L_protocol_tcp_Send_TCP_R1425:
0x02DC	0x80E5E0  	MOV	protocol_tcp_packet_size_, W0
0x02DE	0x980700  	MOV	W0, [W14+0]
L_protocol_tcp_Send_TCP_R194:
;protocol_tcp.mpas,343 :: 		if j <> 0 then CopyRamToEthMem_CP((Start_addr_S + jj), j);
0x02E0	0x90000E  	MOV	[W14+0], W0
0x02E2	0xE10060  	CP	W0, #0
0x02E4	0x320006  	BRA Z	L_protocol_tcp_Send_TCP_R197
L_protocol_tcp_Send_TCP_R1426:
0x02E6	0x43800C  	ADD	W7, W12, W0
; Start_addr_S end address is: 14 (W7)
0x02E8	0xBE9F8A  	PUSH.D	W10
0x02EA	0x90058E  	MOV	[W14+0], W11
0x02EC	0x780500  	MOV	W0, W10
0x02EE	0x07FF88  	RCALL	_CopyRamToEthMem_CP
0x02F0	0xBE054F  	POP.D	W10
L_protocol_tcp_Send_TCP_R197:
;protocol_tcp.mpas,344 :: 		end
0x02F2	0x370038  	BRA	L_protocol_tcp_Send_TCP_R192
;protocol_tcp.mpas,345 :: 		else
L_protocol_tcp_Send_TCP_R191:
;protocol_tcp.mpas,346 :: 		if Socket[CC_Sock].RAM_ROM = 1 then
; Result start address is: 8 (W4)
; Start_addr_S start address is: 14 (W7)
; Stop_addr_S start address is: 10 (W5)
0x02F4	0xFB808B  	ZE	W11, W1
0x02F6	0x2042C0  	MOV	#1068, W0
0x02F8	0xB80101  	MUL.UU	W0, W1, W2
0x02FA	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x02FC	0x400082  	ADD	W0, W2, W1
0x02FE	0x200260  	MOV	#38, W0
0x0300	0x408000  	ADD	W1, W0, W0
0x0302	0x780010  	MOV	[W0], W0
0x0304	0xE10061  	CP	W0, #1
0x0306	0x3A0024  	BRA NZ	L_protocol_tcp_Send_TCP_R1100
L_protocol_tcp_Send_TCP_R1427:
;protocol_tcp.mpas,348 :: 		ptf := Start_addr_S + jj;
0x0308	0x78000C  	MOV	W12, W0
0x030A	0xEB0080  	CLR	W1
; ptf start address is: 4 (W2)
0x030C	0x438100  	ADD	W7, W0, W2
0x030E	0x4C0181  	ADDC	W8, W1, W3
; Start_addr_S end address is: 14 (W7)
;protocol_tcp.mpas,349 :: 		j := 0;
0x0310	0xEF2000  	CLR	W0
0x0312	0x980700  	MOV	W0, [W14+0]
; Stop_addr_S end address is: 10 (W5)
; ptf end address is: 4 (W2)
; Result end address is: 8 (W4)
0x0314	0xBE9F82  	PUSH.D	W2
0x0316	0x780105  	MOV	W5, W2
0x0318	0x780186  	MOV	W6, W3
0x031A	0x78034F  	POP	W6
0x031C	0x7802CF  	POP	W5
;protocol_tcp.mpas,350 :: 		while dword(ptf) < Stop_addr_S do
L_protocol_tcp_Send_TCP_R1103:
; ptf start address is: 10 (W5)
; Stop_addr_S start address is: 4 (W2)
; Result start address is: 8 (W4)
0x031E	0xE12802  	CP	W5, W2
0x0320	0xE1B003  	CPB	W6, W3
0x0322	0x310010  	BRA GEU	L_protocol_tcp_Send_TCP_R1104
L_protocol_tcp_Send_TCP_R1428:
;protocol_tcp.mpas,352 :: 		Eth_PutByte(ptf^);
0x0324	0x880196  	MOV	W6, DSRPAG
0x0326	0x000000  	NOP
0x0328	0x781F8A  	PUSH	W10
0x032A	0x784515  	MOV.B	[W5], W10
0x032C	0x071006  	RCALL	_Eth_PutByte
0x032E	0x78054F  	POP	W10
;protocol_tcp.mpas,353 :: 		ptf := ptf + 1;
0x0330	0x4282E1  	ADD	W5, #1, W5
0x0332	0x4B0360  	ADDC	W6, #0, W6
;protocol_tcp.mpas,354 :: 		if inc(j) >= packet_size_ then break;
0x0334	0x90000E  	MOV	[W14+0], W0
0x0336	0x4000E1  	ADD	W0, #1, W1
0x0338	0x980701  	MOV	W1, [W14+0]
0x033A	0x21CBC0  	MOV	#lo_addr(protocol_tcp_packet_size_), W0
0x033C	0xE10810  	CP	W1, [W0]
0x033E	0x390001  	BRA LTU	L_protocol_tcp_Send_TCP_R1108
L_protocol_tcp_Send_TCP_R1429:
; Stop_addr_S end address is: 4 (W2)
; ptf end address is: 10 (W5)
0x0340	0x370001  	BRA	L_protocol_tcp_Send_TCP_R1104
L_protocol_tcp_Send_TCP_R1108:
;protocol_tcp.mpas,355 :: 		end;
; ptf start address is: 10 (W5)
; Stop_addr_S start address is: 4 (W2)
; Stop_addr_S end address is: 4 (W2)
; ptf end address is: 10 (W5)
0x0342	0x37FFED  	BRA	L_protocol_tcp_Send_TCP_R1103
L_protocol_tcp_Send_TCP_R1104:
;protocol_tcp.mpas,356 :: 		if j = 0 then Exit;
0x0344	0x90000E  	MOV	[W14+0], W0
0x0346	0xE10060  	CP	W0, #0
0x0348	0x3A0002  	BRA NZ	L_protocol_tcp_Send_TCP_R1111
L_protocol_tcp_Send_TCP_R1430:
0x034A	0x780084  	MOV	W4, W1
; Result end address is: 8 (W4)
0x034C	0x370031  	BRA	L_end_protocol_tcp_Send_TCP_R1
L_protocol_tcp_Send_TCP_R1111:
;protocol_tcp.mpas,357 :: 		end
0x034E	0x37000A  	BRA	L_protocol_tcp_Send_TCP_R1101
;protocol_tcp.mpas,358 :: 		else
L_protocol_tcp_Send_TCP_R1100:
;protocol_tcp.mpas,359 :: 		if Socket[CC_Sock].RAM_ROM = 2 then
0x0350	0xFB808B  	ZE	W11, W1
0x0352	0x2042C0  	MOV	#1068, W0
0x0354	0xB80101  	MUL.UU	W0, W1, W2
0x0356	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0358	0x400082  	ADD	W0, W2, W1
0x035A	0x200260  	MOV	#38, W0
0x035C	0x408000  	ADD	W1, W0, W0
0x035E	0x780010  	MOV	[W0], W0
0x0360	0xE10062  	CP	W0, #2
0x0362	0x3A0000  	BRA NZ	L_protocol_tcp_Send_TCP_R1114
L_protocol_tcp_Send_TCP_R1431:
;protocol_tcp.mpas,365 :: 		end;
L_protocol_tcp_Send_TCP_R1114:
L_protocol_tcp_Send_TCP_R1101:
L_protocol_tcp_Send_TCP_R192:
;protocol_tcp.mpas,367 :: 		Eth_SendTCP(Socket[CC_Sock].source_port_S, Socket[CC_Sock].dest_port_S, j, (Socket[CC_Sock].SEQ_No_S + jj), Socket[CC_Sock].ACK_No_S, TCP_Flag_T);
0x0364	0xFB808B  	ZE	W11, W1
0x0366	0x2042C0  	MOV	#1068, W0
0x0368	0xB80101  	MUL.UU	W0, W1, W2
0x036A	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x036C	0x400002  	ADD	W0, W2, W0
0x036E	0x4003E2  	ADD	W0, #2, W7
0x0370	0xFB808B  	ZE	W11, W1
0x0372	0x2042C0  	MOV	#1068, W0
0x0374	0xB80101  	MUL.UU	W0, W1, W2
0x0376	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0378	0x400002  	ADD	W0, W2, W0
0x037A	0x40036E  	ADD	W0, #14, W6
0x037C	0xFB808B  	ZE	W11, W1
0x037E	0x2042C0  	MOV	#1068, W0
0x0380	0xB80101  	MUL.UU	W0, W1, W2
0x0382	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0384	0x400002  	ADD	W0, W2, W0
0x0386	0x400170  	ADD	W0, #16, W2
0x0388	0x78000C  	MOV	W12, W0
0x038A	0xEB0080  	CLR	W1
0x038C	0x400232  	ADD	W0, [W2++], W4
0x038E	0x4882A2  	ADDC	W1, [W2--], W5
0x0390	0xFB808B  	ZE	W11, W1
0x0392	0x2042C0  	MOV	#1068, W0
0x0394	0xB80101  	MUL.UU	W0, W1, W2
0x0396	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x0398	0x400002  	ADD	W0, W2, W0
0x039A	0x400074  	ADD	W0, #20, W0
0x039C	0x78468A  	MOV.B	W10, W13
0x039E	0x90060E  	MOV	[W14+0], W12
0x03A0	0x780596  	MOV	[W6], W11
0x03A2	0x780517  	MOV	[W7], W10
0x03A4	0x781FB0  	PUSH	[W0++]
0x03A6	0x781FA0  	PUSH	[W0--]
0x03A8	0xBE9F84  	PUSH.D	W4
0x03AA	0x07085F  	RCALL	_Eth_SendTCP
0x03AC	0xB1008F  	SUB	#8, W15
;protocol_tcp.mpas,369 :: 		Result := j;
; Result start address is: 2 (W1)
0x03AE	0x90008E  	MOV	[W14+0], W1
; Result end address is: 2 (W1)
;protocol_tcp.mpas,370 :: 		end;
L_end_protocol_tcp_Send_TCP_R1:
; Result start address is: 2 (W1)
0x03B0	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Send_TCP_R1:
0x03B2	0x7806CF  	POP	W13
0x03B4	0x78064F  	POP	W12
0x03B6	0x7805CF  	POP	W11
0x03B8	0x78054F  	POP	W10
0x03BA	0xFA8000  	ULNK
0x03BC	0x060000  	RETURN
; end of protocol_tcp_Send_TCP_R1
_Put_TCPPointer:
;port_utilities.mpas,128 :: 		begin
;port_utilities.mpas,129 :: 		WriteToEthMem(TXSTART+53,$00);
0x0230	0x781F8A  	PUSH	W10
0x0232	0x781F8B  	PUSH	W11
0x0234	0xEF2016  	CLR	W11
0x0236	0x20035A  	MOV	#53, W10
0x0238	0x071088  	RCALL	_WriteToEthMem
;port_utilities.mpas,130 :: 		end;
L_end_Put_TCPPointer:
0x023A	0x7805CF  	POP	W11
0x023C	0x78054F  	POP	W10
0x023E	0x060000  	RETURN
; end of _Put_TCPPointer
_CopyRamToEthMem_CP:
;lib1_enc600_V3_5_b.mpas,464 :: 		begin
;lib1_enc600_V3_5_b.mpas,465 :: 		if length_w = 0 then Exit;
0x0200	0xE15860  	CP	W11, #0
0x0202	0x3A0001  	BRA NZ	L__CopyRamToEthMem_CP148
L__CopyRamToEthMem_CP332:
0x0204	0x370014  	BRA	L_end__CopyRamToEthMem_CP
L__CopyRamToEthMem_CP148:
;lib1_enc600_V3_5_b.mpas,467 :: 		Eth_Select;
0x0206	0x0702C7  	RCALL	_Eth_Select
;lib1_enc600_V3_5_b.mpas,468 :: 		Spi_Read_(WGPDATA_);
0x0208	0x781F8A  	PUSH	W10
0x020A	0xB3C2AA  	MOV.B	#42, W10
0x020C	0x070281  	RCALL	_Spi_Read_
0x020E	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,470 :: 		pt := start_ram_address;
; pt start address is: 2 (W1)
0x0210	0x78008A  	MOV	W10, W1
;lib1_enc600_V3_5_b.mpas,471 :: 		i := 0;
; i start address is: 0 (W0)
0x0212	0xEF2000  	CLR	W0
; pt end address is: 2 (W1)
; i end address is: 0 (W0)
0x0214	0x780181  	MOV	W1, W3
0x0216	0x780100  	MOV	W0, W2
;lib1_enc600_V3_5_b.mpas,472 :: 		while i < length_w do
L__CopyRamToEthMem_CP151:
; i start address is: 4 (W2)
; pt start address is: 6 (W3)
0x0218	0xE1100B  	CP	W2, W11
0x021A	0x310008  	BRA GEU	L__CopyRamToEthMem_CP152
L__CopyRamToEthMem_CP333:
;lib1_enc600_V3_5_b.mpas,474 :: 		Spi_Read_(pt^);
0x021C	0x781F8A  	PUSH	W10
0x021E	0x784513  	MOV.B	[W3], W10
0x0220	0x070277  	RCALL	_Spi_Read_
0x0222	0x78054F  	POP	W10
;lib1_enc600_V3_5_b.mpas,475 :: 		pt := pt + 1;
; pt start address is: 0 (W0)
0x0224	0x418061  	ADD	W3, #1, W0
; pt end address is: 6 (W3)
;lib1_enc600_V3_5_b.mpas,476 :: 		inc(i);
0x0226	0xEC2004  	INC	W2
;lib1_enc600_V3_5_b.mpas,477 :: 		end;
0x0228	0x780180  	MOV	W0, W3
; pt end address is: 0 (W0)
; i end address is: 4 (W2)
0x022A	0x37FFF6  	BRA	L__CopyRamToEthMem_CP151
L__CopyRamToEthMem_CP152:
;lib1_enc600_V3_5_b.mpas,479 :: 		Eth_UnSelect;
0x022C	0x072120  	RCALL	_Eth_UnSelect
;lib1_enc600_V3_5_b.mpas,480 :: 		end;
L_end__CopyRamToEthMem_CP:
L_end_CopyRamToEthMem_CP:
0x022E	0x060000  	RETURN
; end of _CopyRamToEthMem_CP
_memcpy:
0x1B32	0xFA0000  	LNK	#0
;__Lib_String.mpas,79 :: 		
;__Lib_String.mpas,80 :: 		
; chptr1 start address is: 4 (W2)
0x1B34	0x78010A  	MOV	W10, W2
;__Lib_String.mpas,81 :: 		
; chptr2 start address is: 2 (W1)
0x1B36	0x78008B  	MOV	W11, W1
; chptr1 end address is: 4 (W2)
; chptr2 end address is: 2 (W1)
;__Lib_String.mpas,82 :: 		
L__memcpy20:
; chptr2 start address is: 2 (W1)
; chptr1 start address is: 4 (W2)
0x1B38	0xE16060  	CP	W12, #0
0x1B3A	0x320006  	BRA Z	L__memcpy21
L__memcpy228:
;__Lib_String.mpas,84 :: 		
0x1B3C	0x560061  	SUB	W12, #1, W0
0x1B3E	0x780600  	MOV	W0, W12
;__Lib_String.mpas,85 :: 		
0x1B40	0x784911  	MOV.B	[W1], [W2]
;__Lib_String.mpas,86 :: 		
0x1B42	0xEC2004  	INC	W2
;__Lib_String.mpas,87 :: 		
0x1B44	0xEC2002  	INC	W1
;__Lib_String.mpas,88 :: 		
; chptr1 end address is: 4 (W2)
; chptr2 end address is: 2 (W1)
0x1B46	0x37FFF8  	BRA	L__memcpy20
L__memcpy21:
;__Lib_String.mpas,89 :: 		
L_end_memcpy:
0x1B48	0xFA8000  	ULNK
0x1B4A	0x060000  	RETURN
; end of _memcpy
protocol_arp_ArpMapIpMask:
0x1B4C	0xFA0008  	LNK	#8
;protocol_arp.mpas,70 :: 		begin
;protocol_arp.mpas,72 :: 		ip_masked[0] := eth_ip_addr[0] and eth_mask[0];
0x1B4E	0x781F8B  	PUSH	W11
0x1B50	0x781F8C  	PUSH	W12
0x1B52	0x210880  	MOV	#lo_addr(_eth_ip_addr), W0
0x1B54	0x784110  	MOV.B	[W0], W2
0x1B56	0x210801  	MOV	#lo_addr(_eth_mask), W1
0x1B58	0x470060  	ADD	W14, #0, W0
0x1B5A	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,73 :: 		ip_masked[1] := eth_ip_addr[1] and eth_mask[1];
0x1B5C	0x210890  	MOV	#lo_addr(_eth_ip_addr+1), W0
0x1B5E	0x784110  	MOV.B	[W0], W2
0x1B60	0x210811  	MOV	#lo_addr(_eth_mask+1), W1
0x1B62	0x470061  	ADD	W14, #1, W0
0x1B64	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,74 :: 		ip_masked[2] := eth_ip_addr[2] and eth_mask[2];
0x1B66	0x2108A0  	MOV	#lo_addr(_eth_ip_addr+2), W0
0x1B68	0x784110  	MOV.B	[W0], W2
0x1B6A	0x210821  	MOV	#lo_addr(_eth_mask+2), W1
0x1B6C	0x470062  	ADD	W14, #2, W0
0x1B6E	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,75 :: 		ip_masked[3] := eth_ip_addr[3] and eth_mask[3];
0x1B70	0x2108B0  	MOV	#lo_addr(_eth_ip_addr+3), W0
0x1B72	0x784110  	MOV.B	[W0], W2
0x1B74	0x210831  	MOV	#lo_addr(_eth_mask+3), W1
0x1B76	0x470063  	ADD	W14, #3, W0
0x1B78	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,78 :: 		ipb_masked[0] := Ip[0] and eth_mask[0];
0x1B7A	0x78411A  	MOV.B	[W10], W2
0x1B7C	0x210801  	MOV	#lo_addr(_eth_mask), W1
0x1B7E	0x470064  	ADD	W14, #4, W0
0x1B80	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,79 :: 		ipb_masked[1] := Ip[1] and eth_mask[1];
0x1B82	0x450061  	ADD	W10, #1, W0
0x1B84	0x784110  	MOV.B	[W0], W2
0x1B86	0x210811  	MOV	#lo_addr(_eth_mask+1), W1
0x1B88	0x470065  	ADD	W14, #5, W0
0x1B8A	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,80 :: 		ipb_masked[2] := Ip[2] and eth_mask[2];
0x1B8C	0x450062  	ADD	W10, #2, W0
0x1B8E	0x784110  	MOV.B	[W0], W2
0x1B90	0x210821  	MOV	#lo_addr(_eth_mask+2), W1
0x1B92	0x470066  	ADD	W14, #6, W0
0x1B94	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,81 :: 		ipb_masked[3] := Ip[3] and eth_mask[3];
0x1B96	0x450063  	ADD	W10, #3, W0
0x1B98	0x784110  	MOV.B	[W0], W2
0x1B9A	0x210831  	MOV	#lo_addr(_eth_mask+3), W1
0x1B9C	0x470067  	ADD	W14, #7, W0
0x1B9E	0x614811  	AND.B	W2, [W1], [W0]
;protocol_arp.mpas,84 :: 		if memcmp(@ip_masked, @ipb_masked, 4) <> 0 then
0x1BA0	0x4700E0  	ADD	W14, #0, W1
0x1BA2	0x470064  	ADD	W14, #4, W0
0x1BA4	0x781F8A  	PUSH	W10
0x1BA6	0x20004C  	MOV	#4, W12
0x1BA8	0x780580  	MOV	W0, W11
0x1BAA	0x780501  	MOV	W1, W10
0x1BAC	0x07FBEC  	RCALL	_memcmp
0x1BAE	0x78054F  	POP	W10
0x1BB0	0xE10060  	CP	W0, #0
0x1BB2	0x320003  	BRA Z	L_protocol_arp_ArpMapIpMask11
L_protocol_arp_ArpMapIpMask97:
;protocol_arp.mpas,87 :: 		memcpy(@Ip[0], @eth_gateway, 4);
0x1BB4	0x20004C  	MOV	#4, W12
0x1BB6	0x2107AB  	MOV	#lo_addr(_eth_gateway), W11
0x1BB8	0x07FFBC  	RCALL	_memcpy
;protocol_arp.mpas,88 :: 		end;
L_protocol_arp_ArpMapIpMask11:
;protocol_arp.mpas,89 :: 		end;
L_end_ArpMapIpMask:
0x1BBA	0x78064F  	POP	W12
0x1BBC	0x7805CF  	POP	W11
0x1BBE	0xFA8000  	ULNK
0x1BC0	0x060000  	RETURN
; end of protocol_arp_ArpMapIpMask
_Eth_PrintArpCacheSlot:
0x2F6E	0xFA0048  	LNK	#72
;protocol_arp.mpas,322 :: 		begin
;protocol_arp.mpas,323 :: 		LongWordToStr(Slot^.Valid, s2);
0x2F70	0x781F8A  	PUSH	W10
0x2F72	0x781F8B  	PUSH	W11
0x2F74	0x781F8C  	PUSH	W12
0x2F76	0x470060  	ADD	W14, #0, W0
0x2F78	0x982730  	MOV	W0, [W14+70]
0x2F7A	0x781F8A  	PUSH	W10
0x2F7C	0x780600  	MOV	W0, W12
0x2F7E	0x78051A  	MOV	[W10], W10
0x2F80	0xEB0580  	CLR	W11
0x2F82	0x07F983  	RCALL	_LongWordToStr
0x2F84	0x78054F  	POP	W10
;protocol_arp.mpas,324 :: 		UART1_Write_Text('State: ' + s2 + CRLF);
0x2F86	0x47006B  	ADD	W14, #11, W0
0x2F88	0xB3C532  	MOV.B	#83, W2
0x2F8A	0x785802  	MOV.B	W2, [W0++]
0x2F8C	0xB3C742  	MOV.B	#116, W2
0x2F8E	0x785802  	MOV.B	W2, [W0++]
0x2F90	0xB3C612  	MOV.B	#97, W2
0x2F92	0x785802  	MOV.B	W2, [W0++]
0x2F94	0xB3C742  	MOV.B	#116, W2
0x2F96	0x785802  	MOV.B	W2, [W0++]
0x2F98	0xB3C652  	MOV.B	#101, W2
0x2F9A	0x785802  	MOV.B	W2, [W0++]
0x2F9C	0xB3C3A2  	MOV.B	#58, W2
0x2F9E	0x785802  	MOV.B	W2, [W0++]
0x2FA0	0xB3C202  	MOV.B	#32, W2
0x2FA2	0x785802  	MOV.B	W2, [W0++]
0x2FA4	0x90213E  	MOV	[W14+70], W2
0x2FA6	0x780082  	MOV	W2, W1
0x2FA8	0x07EDF8  	RCALL	___CS2S
0x2FAA	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2FAC	0x202012  	MOV	#513, W2
0x2FAE	0x880192  	MOV	W2, DSRPAG
0x2FB0	0x000000  	NOP
0x2FB2	0x07EDF3  	RCALL	___CS2S
0x2FB4	0x780080  	MOV	W0, W1
0x2FB6	0xEF2000  	CLR	W0
0x2FB8	0x785880  	MOV.B	W0, [W1++]
0x2FBA	0x47006B  	ADD	W14, #11, W0
0x2FBC	0x781F8A  	PUSH	W10
0x2FBE	0x780500  	MOV	W0, W10
0x2FC0	0x071058  	RCALL	_UART1_Write_Text
0x2FC2	0x78054F  	POP	W10
;protocol_arp.mpas,325 :: 		UART1_Write_Text('IP: ' + IPAddressToStr(Slot^.ip) + CRLF);
0x2FC4	0x450066  	ADD	W10, #6, W0
0x2FC6	0x781F8A  	PUSH	W10
0x2FC8	0x780500  	MOV	W0, W10
0x2FCA	0x2002C0  	MOV	#44, W0
0x2FCC	0x470000  	ADD	W14, W0, W0
0x2FCE	0x9807B0  	MOV	W0, [W15+6]
0x2FD0	0x07EE83  	RCALL	_IPAddressToStr
0x2FD2	0x78054F  	POP	W10
0x2FD4	0x47006B  	ADD	W14, #11, W0
0x2FD6	0xB3C492  	MOV.B	#73, W2
0x2FD8	0x785802  	MOV.B	W2, [W0++]
0x2FDA	0xB3C502  	MOV.B	#80, W2
0x2FDC	0x785802  	MOV.B	W2, [W0++]
0x2FDE	0xB3C3A2  	MOV.B	#58, W2
0x2FE0	0x785802  	MOV.B	W2, [W0++]
0x2FE2	0xB3C202  	MOV.B	#32, W2
0x2FE4	0x785802  	MOV.B	W2, [W0++]
0x2FE6	0x2002C1  	MOV	#44, W1
0x2FE8	0x470081  	ADD	W14, W1, W1
0x2FEA	0x07EDD7  	RCALL	___CS2S
0x2FEC	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2FEE	0x202012  	MOV	#513, W2
0x2FF0	0x880192  	MOV	W2, DSRPAG
0x2FF2	0x000000  	NOP
0x2FF4	0x07EDD2  	RCALL	___CS2S
0x2FF6	0x780080  	MOV	W0, W1
0x2FF8	0xEF2000  	CLR	W0
0x2FFA	0x785880  	MOV.B	W0, [W1++]
0x2FFC	0x47006B  	ADD	W14, #11, W0
0x2FFE	0x781F8A  	PUSH	W10
0x3000	0x780500  	MOV	W0, W10
0x3002	0x071037  	RCALL	_UART1_Write_Text
0x3004	0x78054F  	POP	W10
;protocol_arp.mpas,326 :: 		UART1_Write_Text('MAC: ' + MACAddressToStr(Slot^.mac) + CRLF);
0x3006	0x45006A  	ADD	W10, #10, W0
0x3008	0x781F8A  	PUSH	W10
0x300A	0x780500  	MOV	W0, W10
0x300C	0x2002C0  	MOV	#44, W0
0x300E	0x470000  	ADD	W14, W0, W0
0x3010	0x9807B0  	MOV	W0, [W15+6]
0x3012	0x07EEC6  	RCALL	_MACAddressToStr
0x3014	0x78054F  	POP	W10
0x3016	0x47006B  	ADD	W14, #11, W0
0x3018	0xB3C4D2  	MOV.B	#77, W2
0x301A	0x785802  	MOV.B	W2, [W0++]
0x301C	0xB3C412  	MOV.B	#65, W2
0x301E	0x785802  	MOV.B	W2, [W0++]
0x3020	0xB3C432  	MOV.B	#67, W2
0x3022	0x785802  	MOV.B	W2, [W0++]
0x3024	0xB3C3A2  	MOV.B	#58, W2
0x3026	0x785802  	MOV.B	W2, [W0++]
0x3028	0xB3C202  	MOV.B	#32, W2
0x302A	0x785802  	MOV.B	W2, [W0++]
0x302C	0x2002C1  	MOV	#44, W1
0x302E	0x470081  	ADD	W14, W1, W1
0x3030	0x07EDB4  	RCALL	___CS2S
0x3032	0x280301  	MOV	#lo_addr(_CRLF), W1
0x3034	0x202012  	MOV	#513, W2
0x3036	0x880192  	MOV	W2, DSRPAG
0x3038	0x000000  	NOP
0x303A	0x07EDAF  	RCALL	___CS2S
0x303C	0x780080  	MOV	W0, W1
0x303E	0xEF2000  	CLR	W0
0x3040	0x785880  	MOV.B	W0, [W1++]
0x3042	0x47006B  	ADD	W14, #11, W0
0x3044	0x781F8A  	PUSH	W10
0x3046	0x780500  	MOV	W0, W10
0x3048	0x071014  	RCALL	_UART1_Write_Text
;protocol_arp.mpas,327 :: 		Eth_EnableTimer_1s(False);
0x304A	0xEF2014  	CLR	W10
0x304C	0x07F5D7  	RCALL	_Eth_EnableTimer_1s
0x304E	0x78054F  	POP	W10
;protocol_arp.mpas,328 :: 		LocalTime := Slot^.Timer;
0x3050	0x450062  	ADD	W10, #2, W0
; LocalTime start address is: 2 (W1)
0x3052	0x7800B0  	MOV	[W0++], W1
0x3054	0x780120  	MOV	[W0--], W2
;protocol_arp.mpas,329 :: 		Eth_EnableTimer_1s(True);
0x3056	0x781F81  	PUSH	W1
0x3058	0x781F82  	PUSH	W2
0x305A	0x2FFFFA  	MOV	#65535, W10
0x305C	0x07F5CF  	RCALL	_Eth_EnableTimer_1s
0x305E	0x78014F  	POP	W2
0x3060	0x7800CF  	POP	W1
;protocol_arp.mpas,330 :: 		LongWordToStr(LocalTime, s2);
0x3062	0x470060  	ADD	W14, #0, W0
0x3064	0x780600  	MOV	W0, W12
0x3066	0x780501  	MOV	W1, W10
0x3068	0x780582  	MOV	W2, W11
; LocalTime end address is: 2 (W1)
0x306A	0x07F90F  	RCALL	_LongWordToStr
;protocol_arp.mpas,331 :: 		UART1_Write_Text('Time: ' + s2 + CRLF);
0x306C	0x47006B  	ADD	W14, #11, W0
0x306E	0xB3C542  	MOV.B	#84, W2
0x3070	0x785802  	MOV.B	W2, [W0++]
0x3072	0xB3C692  	MOV.B	#105, W2
0x3074	0x785802  	MOV.B	W2, [W0++]
0x3076	0xB3C6D2  	MOV.B	#109, W2
0x3078	0x785802  	MOV.B	W2, [W0++]
0x307A	0xB3C652  	MOV.B	#101, W2
0x307C	0x785802  	MOV.B	W2, [W0++]
0x307E	0xB3C3A2  	MOV.B	#58, W2
0x3080	0x785802  	MOV.B	W2, [W0++]
0x3082	0xB3C202  	MOV.B	#32, W2
0x3084	0x785802  	MOV.B	W2, [W0++]
0x3086	0x90213E  	MOV	[W14+70], W2
0x3088	0x780082  	MOV	W2, W1
0x308A	0x07ED87  	RCALL	___CS2S
0x308C	0x280301  	MOV	#lo_addr(_CRLF), W1
0x308E	0x202012  	MOV	#513, W2
0x3090	0x880192  	MOV	W2, DSRPAG
0x3092	0x000000  	NOP
0x3094	0x07ED82  	RCALL	___CS2S
0x3096	0x780080  	MOV	W0, W1
0x3098	0xEF2000  	CLR	W0
0x309A	0x785880  	MOV.B	W0, [W1++]
0x309C	0x47006B  	ADD	W14, #11, W0
0x309E	0x780500  	MOV	W0, W10
0x30A0	0x070FE8  	RCALL	_UART1_Write_Text
;protocol_arp.mpas,332 :: 		UART1_Write_Text(CRLF);
0x30A2	0x28030A  	MOV	#lo_addr(_CRLF), W10
0x30A4	0x070FE6  	RCALL	_UART1_Write_Text
;protocol_arp.mpas,333 :: 		end;
L_end_Eth_PrintArpCacheSlot:
0x30A6	0x78064F  	POP	W12
0x30A8	0x7805CF  	POP	W11
0x30AA	0x78054F  	POP	W10
0x30AC	0xFA8000  	ULNK
0x30AE	0x060000  	RETURN
; end of _Eth_PrintArpCacheSlot
_LongWordToStr:
0x228A	0xFA0002  	LNK	#2
;__Lib_Conversions.mpas,249 :: 		
;__Lib_Conversions.mpas,251 :: 		
0x228C	0x78008C  	MOV	W12, W1
0x228E	0xB3C200  	MOV.B	#32, W0
0x2290	0x785880  	MOV.B	W0, [W1++]
0x2292	0xB3C200  	MOV.B	#32, W0
0x2294	0x785880  	MOV.B	W0, [W1++]
0x2296	0xB3C200  	MOV.B	#32, W0
0x2298	0x785880  	MOV.B	W0, [W1++]
0x229A	0xB3C200  	MOV.B	#32, W0
0x229C	0x785880  	MOV.B	W0, [W1++]
0x229E	0xB3C200  	MOV.B	#32, W0
0x22A0	0x785880  	MOV.B	W0, [W1++]
0x22A2	0xB3C200  	MOV.B	#32, W0
0x22A4	0x785880  	MOV.B	W0, [W1++]
0x22A6	0xB3C200  	MOV.B	#32, W0
0x22A8	0x785880  	MOV.B	W0, [W1++]
0x22AA	0xB3C200  	MOV.B	#32, W0
0x22AC	0x785880  	MOV.B	W0, [W1++]
0x22AE	0xB3C200  	MOV.B	#32, W0
0x22B0	0x785880  	MOV.B	W0, [W1++]
0x22B2	0xB3C300  	MOV.B	#48, W0
0x22B4	0x785880  	MOV.B	W0, [W1++]
0x22B6	0xEF2000  	CLR	W0
0x22B8	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,252 :: 		
0x22BA	0x470060  	ADD	W14, #0, W0
0x22BC	0x460869  	ADD	W12, #9, [W0]
;__Lib_Conversions.mpas,253 :: 		
L__LongWordToStr71:
0x22BE	0xE15060  	CP	W10, #0
0x22C0	0xE1D860  	CPB	W11, #0
0x22C2	0x32001A  	BRA Z	L__LongWordToStr72
L__LongWordToStr229:
;__Lib_Conversions.mpas,255 :: 		
0x22C4	0x781F8C  	PUSH	W12
0x22C6	0xBE9F8A  	PUSH.D	W10
0x22C8	0x2000A2  	MOV	#10, W2
0x22CA	0x200003  	MOV	#0, W3
0x22CC	0xBE000A  	MOV.D	W10, W0
0x22CE	0xEB0200  	CLR	W4
0x22D0	0x0703CA  	RCALL	__Modulus_32x32
0x22D2	0xBE054F  	POP.D	W10
0x22D4	0x200302  	MOV	#48, W2
0x22D6	0x200003  	MOV	#0, W3
0x22D8	0x400102  	ADD	W0, W2, W2
0x22DA	0x90000E  	MOV	[W14+0], W0
0x22DC	0x784802  	MOV.B	W2, [W0]
;__Lib_Conversions.mpas,256 :: 		
0x22DE	0xBE9F8A  	PUSH.D	W10
0x22E0	0x2000A2  	MOV	#10, W2
0x22E2	0x200003  	MOV	#0, W3
0x22E4	0xBE000A  	MOV.D	W10, W0
0x22E6	0xEB0200  	CLR	W4
0x22E8	0x070DE8  	RCALL	__Divide_32x32
0x22EA	0xBE054F  	POP.D	W10
0x22EC	0x78064F  	POP	W12
0x22EE	0xBE0500  	MOV.D	W0, W10
;__Lib_Conversions.mpas,257 :: 		
0x22F0	0x90008E  	MOV	[W14+0], W1
0x22F2	0x470060  	ADD	W14, #0, W0
0x22F4	0x508861  	SUB	W1, #1, [W0]
;__Lib_Conversions.mpas,258 :: 		
0x22F6	0x37FFE3  	BRA	L__LongWordToStr71
L__LongWordToStr72:
;__Lib_Conversions.mpas,259 :: 		
L_end_LongWordToStr:
0x22F8	0xFA8000  	ULNK
0x22FA	0x060000  	RETURN
; end of _LongWordToStr
_NtpRequest:
0x536A	0xFA0004  	LNK	#4
;ENC624J600_Exampe.mpas,70 :: 		begin
;ENC624J600_Exampe.mpas,71 :: 		NtpIP[0] := 192; NtpIP[1] := 168; NtpIP[2] := 0; NtpIP[3] := 200;            // Local Ntp Server with ntpd
0x536C	0x781F8A  	PUSH	W10
0x536E	0xB3CC00  	MOV.B	#192, W0
0x5370	0x984700  	MOV.B	W0, [W14+0]
0x5372	0xB3CA80  	MOV.B	#168, W0
0x5374	0x984710  	MOV.B	W0, [W14+1]
0x5376	0xEF2000  	CLR	W0
0x5378	0x984720  	MOV.B	W0, [W14+2]
0x537A	0xB3CC80  	MOV.B	#200, W0
0x537C	0x984730  	MOV.B	W0, [W14+3]
;ENC624J600_Exampe.mpas,72 :: 		Eth_SendNtpRequest(NtpIP);
0x537E	0x470060  	ADD	W14, #0, W0
0x5380	0x780500  	MOV	W0, W10
0x5382	0x07F4A1  	RCALL	_Eth_SendNtpRequest
;ENC624J600_Exampe.mpas,73 :: 		end;
L_end_NtpRequest:
0x5384	0x78054F  	POP	W10
0x5386	0xFA8000  	ULNK
0x5388	0x060000  	RETURN
; end of _NtpRequest
_Eth_SendNtpRequest:
0x3CC6	0xFA0026  	LNK	#38
;protocol_ntp.mpas,90 :: 		begin
;protocol_ntp.mpas,92 :: 		{$IFDEF DEBUG_STRING}Eth_Udp_PrintPorts;UART1_Write_Text('Opening NTP Port 123' + CRLF);{$ENDIF}
0x3CC8	0x781F8A  	PUSH	W10
0x3CCA	0x781F8B  	PUSH	W11
0x3CCC	0x781F8C  	PUSH	W12
0x3CCE	0x781F8A  	PUSH	W10
0x3CD0	0x07EB71  	RCALL	_Eth_Udp_PrintPorts
0x3CD2	0x4700E0  	ADD	W14, #0, W1
0x3CD4	0xB3C4F0  	MOV.B	#79, W0
0x3CD6	0x785880  	MOV.B	W0, [W1++]
0x3CD8	0xB3C700  	MOV.B	#112, W0
0x3CDA	0x785880  	MOV.B	W0, [W1++]
0x3CDC	0xB3C650  	MOV.B	#101, W0
0x3CDE	0x785880  	MOV.B	W0, [W1++]
0x3CE0	0xB3C6E0  	MOV.B	#110, W0
0x3CE2	0x785880  	MOV.B	W0, [W1++]
0x3CE4	0xB3C690  	MOV.B	#105, W0
0x3CE6	0x785880  	MOV.B	W0, [W1++]
0x3CE8	0xB3C6E0  	MOV.B	#110, W0
0x3CEA	0x785880  	MOV.B	W0, [W1++]
0x3CEC	0xB3C670  	MOV.B	#103, W0
0x3CEE	0x785880  	MOV.B	W0, [W1++]
0x3CF0	0xB3C200  	MOV.B	#32, W0
0x3CF2	0x785880  	MOV.B	W0, [W1++]
0x3CF4	0xB3C4E0  	MOV.B	#78, W0
0x3CF6	0x785880  	MOV.B	W0, [W1++]
0x3CF8	0xB3C540  	MOV.B	#84, W0
0x3CFA	0x785880  	MOV.B	W0, [W1++]
0x3CFC	0xB3C500  	MOV.B	#80, W0
0x3CFE	0x785880  	MOV.B	W0, [W1++]
0x3D00	0xB3C200  	MOV.B	#32, W0
0x3D02	0x785880  	MOV.B	W0, [W1++]
0x3D04	0xB3C500  	MOV.B	#80, W0
0x3D06	0x785880  	MOV.B	W0, [W1++]
0x3D08	0xB3C6F0  	MOV.B	#111, W0
0x3D0A	0x785880  	MOV.B	W0, [W1++]
0x3D0C	0xB3C720  	MOV.B	#114, W0
0x3D0E	0x785880  	MOV.B	W0, [W1++]
0x3D10	0xB3C740  	MOV.B	#116, W0
0x3D12	0x785880  	MOV.B	W0, [W1++]
0x3D14	0xB3C200  	MOV.B	#32, W0
0x3D16	0x785880  	MOV.B	W0, [W1++]
0x3D18	0xB3C310  	MOV.B	#49, W0
0x3D1A	0x785880  	MOV.B	W0, [W1++]
0x3D1C	0xB3C320  	MOV.B	#50, W0
0x3D1E	0x785880  	MOV.B	W0, [W1++]
0x3D20	0xB3C330  	MOV.B	#51, W0
0x3D22	0x785880  	MOV.B	W0, [W1++]
0x3D24	0xB3C0D0  	MOV.B	#13, W0
0x3D26	0x785880  	MOV.B	W0, [W1++]
0x3D28	0xB3C0A0  	MOV.B	#10, W0
0x3D2A	0x785880  	MOV.B	W0, [W1++]
0x3D2C	0xB3C000  	MOV.B	#0, W0
0x3D2E	0x785880  	MOV.B	W0, [W1++]
0x3D30	0x470060  	ADD	W14, #0, W0
0x3D32	0x780500  	MOV	W0, W10
0x3D34	0x07099E  	RCALL	_UART1_Write_Text
;protocol_ntp.mpas,93 :: 		if Eth_OpenUdpPort(NTP_PORT) then
0x3D36	0x2007BA  	MOV	#123, W10
0x3D38	0x07F2E1  	RCALL	_Eth_OpenUdpPort
0x3D3A	0x78054F  	POP	W10
0x3D3C	0xE20000  	CP0	W0
0x3D3E	0x3200B6  	BRA Z	L__Eth_SendNtpRequest2
L__Eth_SendNtpRequest110:
;protocol_ntp.mpas,95 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Port 123 open, allocating UDP Slot' + CRLF);Eth_Udp_PrintPorts;{$ENDIF}
0x3D40	0x4700E0  	ADD	W14, #0, W1
0x3D42	0xB3C500  	MOV.B	#80, W0
0x3D44	0x785880  	MOV.B	W0, [W1++]
0x3D46	0xB3C6F0  	MOV.B	#111, W0
0x3D48	0x785880  	MOV.B	W0, [W1++]
0x3D4A	0xB3C720  	MOV.B	#114, W0
0x3D4C	0x785880  	MOV.B	W0, [W1++]
0x3D4E	0xB3C740  	MOV.B	#116, W0
0x3D50	0x785880  	MOV.B	W0, [W1++]
0x3D52	0xB3C200  	MOV.B	#32, W0
0x3D54	0x785880  	MOV.B	W0, [W1++]
0x3D56	0xB3C310  	MOV.B	#49, W0
0x3D58	0x785880  	MOV.B	W0, [W1++]
0x3D5A	0xB3C320  	MOV.B	#50, W0
0x3D5C	0x785880  	MOV.B	W0, [W1++]
0x3D5E	0xB3C330  	MOV.B	#51, W0
0x3D60	0x785880  	MOV.B	W0, [W1++]
0x3D62	0xB3C200  	MOV.B	#32, W0
0x3D64	0x785880  	MOV.B	W0, [W1++]
0x3D66	0xB3C6F0  	MOV.B	#111, W0
0x3D68	0x785880  	MOV.B	W0, [W1++]
0x3D6A	0xB3C700  	MOV.B	#112, W0
0x3D6C	0x785880  	MOV.B	W0, [W1++]
0x3D6E	0xB3C650  	MOV.B	#101, W0
0x3D70	0x785880  	MOV.B	W0, [W1++]
0x3D72	0xB3C6E0  	MOV.B	#110, W0
0x3D74	0x785880  	MOV.B	W0, [W1++]
0x3D76	0xB3C2C0  	MOV.B	#44, W0
0x3D78	0x785880  	MOV.B	W0, [W1++]
0x3D7A	0xB3C200  	MOV.B	#32, W0
0x3D7C	0x785880  	MOV.B	W0, [W1++]
0x3D7E	0xB3C610  	MOV.B	#97, W0
0x3D80	0x785880  	MOV.B	W0, [W1++]
0x3D82	0xB3C6C0  	MOV.B	#108, W0
0x3D84	0x785880  	MOV.B	W0, [W1++]
0x3D86	0xB3C6C0  	MOV.B	#108, W0
0x3D88	0x785880  	MOV.B	W0, [W1++]
0x3D8A	0xB3C6F0  	MOV.B	#111, W0
0x3D8C	0x785880  	MOV.B	W0, [W1++]
0x3D8E	0xB3C630  	MOV.B	#99, W0
0x3D90	0x785880  	MOV.B	W0, [W1++]
0x3D92	0xB3C610  	MOV.B	#97, W0
0x3D94	0x785880  	MOV.B	W0, [W1++]
0x3D96	0xB3C740  	MOV.B	#116, W0
0x3D98	0x785880  	MOV.B	W0, [W1++]
0x3D9A	0xB3C690  	MOV.B	#105, W0
0x3D9C	0x785880  	MOV.B	W0, [W1++]
0x3D9E	0xB3C6E0  	MOV.B	#110, W0
0x3DA0	0x785880  	MOV.B	W0, [W1++]
0x3DA2	0xB3C670  	MOV.B	#103, W0
0x3DA4	0x785880  	MOV.B	W0, [W1++]
0x3DA6	0xB3C200  	MOV.B	#32, W0
0x3DA8	0x785880  	MOV.B	W0, [W1++]
0x3DAA	0xB3C550  	MOV.B	#85, W0
0x3DAC	0x785880  	MOV.B	W0, [W1++]
0x3DAE	0xB3C440  	MOV.B	#68, W0
0x3DB0	0x785880  	MOV.B	W0, [W1++]
0x3DB2	0xB3C500  	MOV.B	#80, W0
0x3DB4	0x785880  	MOV.B	W0, [W1++]
0x3DB6	0xB3C200  	MOV.B	#32, W0
0x3DB8	0x785880  	MOV.B	W0, [W1++]
0x3DBA	0xB3C530  	MOV.B	#83, W0
0x3DBC	0x785880  	MOV.B	W0, [W1++]
0x3DBE	0xB3C6C0  	MOV.B	#108, W0
0x3DC0	0x785880  	MOV.B	W0, [W1++]
0x3DC2	0xB3C6F0  	MOV.B	#111, W0
0x3DC4	0x785880  	MOV.B	W0, [W1++]
0x3DC6	0xB3C740  	MOV.B	#116, W0
0x3DC8	0x785880  	MOV.B	W0, [W1++]
0x3DCA	0xB3C0D0  	MOV.B	#13, W0
0x3DCC	0x785880  	MOV.B	W0, [W1++]
0x3DCE	0xB3C0A0  	MOV.B	#10, W0
0x3DD0	0x785880  	MOV.B	W0, [W1++]
0x3DD2	0xB3C000  	MOV.B	#0, W0
0x3DD4	0x785880  	MOV.B	W0, [W1++]
0x3DD6	0x470060  	ADD	W14, #0, W0
0x3DD8	0x781F8A  	PUSH	W10
0x3DDA	0x780500  	MOV	W0, W10
0x3DDC	0x07094A  	RCALL	_UART1_Write_Text
0x3DDE	0x07EAEA  	RCALL	_Eth_Udp_PrintPorts
0x3DE0	0x78054F  	POP	W10
;protocol_ntp.mpas,96 :: 		UdpSlot := Eth_AllocateUdpSlot;
0x3DE2	0x07F238  	RCALL	_Eth_AllocateUdpSlot
; UdpSlot start address is: 6 (W3)
0x3DE4	0x780180  	MOV	W0, W3
;protocol_ntp.mpas,97 :: 		if UdpSlot <> nil then
0x3DE6	0xE10060  	CP	W0, #0
0x3DE8	0x320061  	BRA Z	L__Eth_SendNtpRequest5
L__Eth_SendNtpRequest111:
;protocol_ntp.mpas,99 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Slot open' + CRLF);{$ENDIF}
0x3DEA	0x4700E0  	ADD	W14, #0, W1
0x3DEC	0xB3C550  	MOV.B	#85, W0
0x3DEE	0x785880  	MOV.B	W0, [W1++]
0x3DF0	0xB3C640  	MOV.B	#100, W0
0x3DF2	0x785880  	MOV.B	W0, [W1++]
0x3DF4	0xB3C700  	MOV.B	#112, W0
0x3DF6	0x785880  	MOV.B	W0, [W1++]
0x3DF8	0xB3C200  	MOV.B	#32, W0
0x3DFA	0x785880  	MOV.B	W0, [W1++]
0x3DFC	0xB3C530  	MOV.B	#83, W0
0x3DFE	0x785880  	MOV.B	W0, [W1++]
0x3E00	0xB3C6C0  	MOV.B	#108, W0
0x3E02	0x785880  	MOV.B	W0, [W1++]
0x3E04	0xB3C6F0  	MOV.B	#111, W0
0x3E06	0x785880  	MOV.B	W0, [W1++]
0x3E08	0xB3C740  	MOV.B	#116, W0
0x3E0A	0x785880  	MOV.B	W0, [W1++]
0x3E0C	0xB3C200  	MOV.B	#32, W0
0x3E0E	0x785880  	MOV.B	W0, [W1++]
0x3E10	0xB3C6F0  	MOV.B	#111, W0
0x3E12	0x785880  	MOV.B	W0, [W1++]
0x3E14	0xB3C700  	MOV.B	#112, W0
0x3E16	0x785880  	MOV.B	W0, [W1++]
0x3E18	0xB3C650  	MOV.B	#101, W0
0x3E1A	0x785880  	MOV.B	W0, [W1++]
0x3E1C	0xB3C6E0  	MOV.B	#110, W0
0x3E1E	0x785880  	MOV.B	W0, [W1++]
0x3E20	0xB3C0D0  	MOV.B	#13, W0
0x3E22	0x785880  	MOV.B	W0, [W1++]
0x3E24	0xB3C0A0  	MOV.B	#10, W0
0x3E26	0x785880  	MOV.B	W0, [W1++]
0x3E28	0xB3C000  	MOV.B	#0, W0
0x3E2A	0x785880  	MOV.B	W0, [W1++]
0x3E2C	0x470060  	ADD	W14, #0, W0
0x3E2E	0x781F8A  	PUSH	W10
0x3E30	0x780500  	MOV	W0, W10
0x3E32	0x07091F  	RCALL	_UART1_Write_Text
0x3E34	0x78054F  	POP	W10
;protocol_ntp.mpas,100 :: 		memcpy(@UdpSlot^.DestIP[0], @NtpServer[0], 4);
0x3E36	0x418062  	ADD	W3, #2, W0
0x3E38	0x20004C  	MOV	#4, W12
0x3E3A	0x78058A  	MOV	W10, W11
0x3E3C	0x780500  	MOV	W0, W10
0x3E3E	0x07EE79  	RCALL	_memcpy
;protocol_ntp.mpas,101 :: 		memcpy(@UdpSlot^.SourceIP[0], @eth_ip_addr[0], 4);
0x3E40	0x41806E  	ADD	W3, #14, W0
0x3E42	0x20004C  	MOV	#4, W12
0x3E44	0x21088B  	MOV	#lo_addr(_eth_ip_addr), W11
0x3E46	0x780500  	MOV	W0, W10
0x3E48	0x07EE74  	RCALL	_memcpy
;protocol_ntp.mpas,102 :: 		memcpy(@UdpSlot^.SourceMAC[0], @eth_mac[0], 6);
0x3E4A	0x418072  	ADD	W3, #18, W0
0x3E4C	0x20006C  	MOV	#6, W12
0x3E4E	0x21018B  	MOV	#lo_addr(_eth_mac), W11
0x3E50	0x780500  	MOV	W0, W10
0x3E52	0x07EE6F  	RCALL	_memcpy
;protocol_ntp.mpas,103 :: 		UdpSlot^.Broadcast := nil;
0x3E54	0xEF2000  	CLR	W0
0x3E56	0x780980  	MOV	W0, [W3]
;protocol_ntp.mpas,104 :: 		UdpSlot^.WaitForResult := False;
0x3E58	0x205DC0  	MOV	#1500, W0
0x3E5A	0x418080  	ADD	W3, W0, W1
0x3E5C	0xEF2000  	CLR	W0
0x3E5E	0x780880  	MOV	W0, [W1]
;protocol_ntp.mpas,105 :: 		UdpSlot^.ValidatewithARP := True;
0x3E60	0x205DE0  	MOV	#1502, W0
0x3E62	0x418080  	ADD	W3, W0, W1
0x3E64	0x2FFFF0  	MOV	#65535, W0
0x3E66	0x780880  	MOV	W0, [W1]
;protocol_ntp.mpas,106 :: 		UdpSlot^.DestPort := NTP_PORT;               // NTP
0x3E68	0x4180EC  	ADD	W3, #12, W1
0x3E6A	0x2007B0  	MOV	#123, W0
0x3E6C	0x780880  	MOV	W0, [W1]
;protocol_ntp.mpas,107 :: 		UdpSlot^.SourcePort := NTP_PORT;             // Back at me
0x3E6E	0x4180F8  	ADD	W3, #24, W1
0x3E70	0x2007B0  	MOV	#123, W0
0x3E72	0x780880  	MOV	W0, [W1]
;protocol_ntp.mpas,108 :: 		UdpSlot^.DataLen := 48;
0x3E74	0x4180FA  	ADD	W3, #26, W1
0x3E76	0x200300  	MOV	#48, W0
0x3E78	0x780880  	MOV	W0, [W1]
;protocol_ntp.mpas,109 :: 		NtpRequestPtr := @NTP_REQUEST_MESSAGE.Flags;
; NtpRequestPtr start address is: 8 (W4)
0x3E7A	0x280004  	MOV	#lo_addr(_NTP_REQUEST_MESSAGE), W4
;protocol_ntp.mpas,110 :: 		for i := 0 to 47 do
; i start address is: 4 (W2)
0x3E7C	0xEF2004  	CLR	W2
; UdpSlot end address is: 6 (W3)
; i end address is: 4 (W2)
L__Eth_SendNtpRequest8:
;protocol_ntp.mpas,112 :: 		UdpSlot^.DataArray[i] := NtpRequestPtr^;
; i start address is: 4 (W2)
; NtpRequestPtr start address is: 8 (W4)
; UdpSlot start address is: 6 (W3)
0x3E7E	0x41807C  	ADD	W3, #28, W0
0x3E80	0x400082  	ADD	W0, W2, W1
0x3E82	0x202010  	MOV	#513, W0
0x3E84	0xB7A032  	MOV	WREG, DSRPAG
0x3E86	0x000000  	NOP
0x3E88	0x784014  	MOV.B	[W4], W0
0x3E8A	0x784880  	MOV.B	W0, [W1]
;protocol_ntp.mpas,113 :: 		Inc(NtpRequestPtr);
0x3E8C	0xEC2008  	INC	W4
; NtpRequestPtr end address is: 8 (W4)
;protocol_ntp.mpas,114 :: 		end;
0x3E8E	0x2002F0  	MOV	#47, W0
0x3E90	0xE11000  	CP	W2, W0
0x3E92	0x320002  	BRA Z	L__Eth_SendNtpRequest11
L__Eth_SendNtpRequest112:
; NtpRequestPtr end address is: 8 (W4)
; i start address is: 4 (W2)
; NtpRequestPtr start address is: 8 (W4)
0x3E94	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; NtpRequestPtr end address is: 8 (W4)
; i end address is: 4 (W2)
0x3E96	0x37FFF3  	BRA	L__Eth_SendNtpRequest8
L__Eth_SendNtpRequest11:
;protocol_ntp.mpas,115 :: 		Eth_SendUdpMessage(UdpSlot);
0x3E98	0x781F83  	PUSH	W3
0x3E9A	0x781F8A  	PUSH	W10
0x3E9C	0x780503  	MOV	W3, W10
0x3E9E	0x07EEBB  	RCALL	_Eth_SendUdpMessage
0x3EA0	0x78054F  	POP	W10
0x3EA2	0x7801CF  	POP	W3
;protocol_ntp.mpas,116 :: 		Eth_FreeUdpSlot(UdpSlot);
0x3EA4	0x781F8A  	PUSH	W10
; UdpSlot end address is: 6 (W3)
0x3EA6	0x780503  	MOV	W3, W10
0x3EA8	0x07E451  	RCALL	_Eth_FreeUdpSlot
0x3EAA	0x78054F  	POP	W10
;protocol_ntp.mpas,117 :: 		end;
L__Eth_SendNtpRequest5:
;protocol_ntp.mpas,118 :: 		end;
L__Eth_SendNtpRequest2:
;protocol_ntp.mpas,119 :: 		end;
L_end_Eth_SendNtpRequest:
0x3EAC	0x78064F  	POP	W12
0x3EAE	0x7805CF  	POP	W11
0x3EB0	0x78054F  	POP	W10
0x3EB2	0xFA8000  	ULNK
0x3EB4	0x060000  	RETURN
; end of _Eth_SendNtpRequest
_Eth_OpenUdpPort:
0x22FC	0xFA0002  	LNK	#2
;protocol_udp.mpas,124 :: 		begin
;protocol_udp.mpas,125 :: 		Result := False;
0x22FE	0x781F8B  	PUSH	W11
; Result start address is: 6 (W3)
0x2300	0xEF2006  	CLR	W3
;protocol_udp.mpas,126 :: 		iLastEmpty := -1;                                                             // Expect the worse
0x2302	0x2FFFF0  	MOV	#65535, W0
0x2304	0x980700  	MOV	W0, [W14+0]
;protocol_udp.mpas,127 :: 		if Eth_FindUdpPort(Port, iLastEmpty) > -1 then
0x2306	0x470060  	ADD	W14, #0, W0
0x2308	0x780580  	MOV	W0, W11
0x230A	0x07F7C4  	RCALL	protocol_udp_Eth_FindUdpPort
0x230C	0x2FFFF1  	MOV	#65535, W1
0x230E	0xE10001  	CP	W0, W1
0x2310	0x340002  	BRA LE	L__Eth_OpenUdpPort14
L__Eth_OpenUdpPort276:
; Result end address is: 6 (W3)
;protocol_udp.mpas,128 :: 		Result := True
; Result start address is: 2 (W1)
0x2312	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
0x2314	0x37000E  	BRA	L__Eth_OpenUdpPort15
;protocol_udp.mpas,129 :: 		else begin
L__Eth_OpenUdpPort14:
;protocol_udp.mpas,130 :: 		if iLastEmpty > -1 then
; Result start address is: 6 (W3)
0x2316	0x2FFFF1  	MOV	#65535, W1
0x2318	0x470060  	ADD	W14, #0, W0
0x231A	0xE10810  	CP	W1, [W0]
0x231C	0x3D0009  	BRA GE	L__Eth_OpenUdpPort269
L__Eth_OpenUdpPort277:
; Result end address is: 6 (W3)
;protocol_udp.mpas,132 :: 		UdpPorts[iLastEmpty] := Port;
0x231E	0x200011  	MOV	#1, W1
0x2320	0x90000E  	MOV	[W14+0], W0
0x2322	0xDD0081  	SL	W0, W1, W1
0x2324	0x210B00  	MOV	#lo_addr(protocol_udp_UdpPorts), W0
0x2326	0x400001  	ADD	W0, W1, W0
0x2328	0x78080A  	MOV	W10, [W0]
;protocol_udp.mpas,133 :: 		Result := True;
; Result start address is: 0 (W0)
0x232A	0x2FFFF0  	MOV	#65535, W0
; Result end address is: 0 (W0)
0x232C	0x780080  	MOV	W0, W1
;protocol_udp.mpas,134 :: 		end;
0x232E	0x370001  	BRA	L__Eth_OpenUdpPort17
L__Eth_OpenUdpPort269:
;protocol_udp.mpas,130 :: 		if iLastEmpty > -1 then
0x2330	0x780083  	MOV	W3, W1
;protocol_udp.mpas,134 :: 		end;
L__Eth_OpenUdpPort17:
;protocol_udp.mpas,135 :: 		end;
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
L__Eth_OpenUdpPort15:
;protocol_udp.mpas,136 :: 		end;
; Result start address is: 2 (W1)
0x2332	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Eth_OpenUdpPort:
0x2334	0x7805CF  	POP	W11
0x2336	0xFA8000  	ULNK
0x2338	0x060000  	RETURN
; end of _Eth_OpenUdpPort
_Eth_AllocateUdpSlot:
0x2254	0xFA0002  	LNK	#2
;protocol_udp.mpas,361 :: 		begin
;protocol_udp.mpas,362 :: 		i := 0;
0x2256	0x781F8A  	PUSH	W10
; i start address is: 8 (W4)
0x2258	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;protocol_udp.mpas,363 :: 		while i < UDP_CACHE_LEN do
L__Eth_AllocateUdpSlot74:
; i start address is: 8 (W4)
0x225A	0xE12062  	CP	W4, #2
0x225C	0x3D0012  	BRA GE	L__Eth_AllocateUdpSlot75
L__Eth_AllocateUdpSlot302:
;protocol_udp.mpas,365 :: 		if UdpCache[i].Valid = False then
0x225E	0x205E60  	MOV	#1510, W0
0x2260	0xB80104  	MUL.UU	W0, W4, W2
0x2262	0x210C40  	MOV	#lo_addr(_UdpCache), W0
0x2264	0x400082  	ADD	W0, W2, W1
0x2266	0x205E00  	MOV	#1504, W0
0x2268	0x408000  	ADD	W1, W0, W0
0x226A	0x780010  	MOV	[W0], W0
0x226C	0xE10060  	CP	W0, #0
0x226E	0x3A0008  	BRA NZ	L__Eth_AllocateUdpSlot79
L__Eth_AllocateUdpSlot303:
;protocol_udp.mpas,367 :: 		Result := @UdpCache[i];
0x2270	0x205E60  	MOV	#1510, W0
0x2272	0xB80104  	MUL.UU	W0, W4, W2
; i end address is: 8 (W4)
0x2274	0x210C41  	MOV	#lo_addr(_UdpCache), W1
0x2276	0x470060  	ADD	W14, #0, W0
0x2278	0x408802  	ADD	W1, W2, [W0]
;protocol_udp.mpas,368 :: 		Eth_Udp_EraseSlot(Result);
0x227A	0x90050E  	MOV	[W14+0], W10
0x227C	0x07F746  	RCALL	protocol_udp_Eth_Udp_EraseSlot
;protocol_udp.mpas,369 :: 		Break
0x227E	0x370001  	BRA	L__Eth_AllocateUdpSlot75
;protocol_udp.mpas,370 :: 		end
L__Eth_AllocateUdpSlot79:
;protocol_udp.mpas,371 :: 		end
; i start address is: 8 (W4)
; i end address is: 8 (W4)
0x2280	0x37FFEC  	BRA	L__Eth_AllocateUdpSlot74
L__Eth_AllocateUdpSlot75:
;protocol_udp.mpas,372 :: 		end;
0x2282	0x90000E  	MOV	[W14+0], W0
L_end_Eth_AllocateUdpSlot:
0x2284	0x78054F  	POP	W10
0x2286	0xFA8000  	ULNK
0x2288	0x060000  	RETURN
; end of _Eth_AllocateUdpSlot
_Eth_SendUdpMessage:
0x1C16	0xFA0060  	LNK	#96
;protocol_udp.mpas,257 :: 		begin
;protocol_udp.mpas,258 :: 		Result := False;
0x1C18	0x781F8A  	PUSH	W10
0x1C1A	0x781F8B  	PUSH	W11
0x1C1C	0x781F8C  	PUSH	W12
; Result start address is: 6 (W3)
0x1C1E	0xEF2006  	CLR	W3
;protocol_udp.mpas,259 :: 		if UdpSlot^.Broadcast then
0x1C20	0x78001A  	MOV	[W10], W0
0x1C22	0xE20000  	CP0	W0
0x1C24	0x320042  	BRA Z	L__Eth_SendUdpMessage55
L__Eth_SendUdpMessage293:
;protocol_udp.mpas,260 :: 		begin   {$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Broadcast' + CRLF);{$ENDIF}
0x1C26	0x4700E6  	ADD	W14, #6, W1
0x1C28	0xB3C550  	MOV.B	#85, W0
0x1C2A	0x785880  	MOV.B	W0, [W1++]
0x1C2C	0xB3C640  	MOV.B	#100, W0
0x1C2E	0x785880  	MOV.B	W0, [W1++]
0x1C30	0xB3C700  	MOV.B	#112, W0
0x1C32	0x785880  	MOV.B	W0, [W1++]
0x1C34	0xB3C200  	MOV.B	#32, W0
0x1C36	0x785880  	MOV.B	W0, [W1++]
0x1C38	0xB3C420  	MOV.B	#66, W0
0x1C3A	0x785880  	MOV.B	W0, [W1++]
0x1C3C	0xB3C720  	MOV.B	#114, W0
0x1C3E	0x785880  	MOV.B	W0, [W1++]
0x1C40	0xB3C6F0  	MOV.B	#111, W0
0x1C42	0x785880  	MOV.B	W0, [W1++]
0x1C44	0xB3C610  	MOV.B	#97, W0
0x1C46	0x785880  	MOV.B	W0, [W1++]
0x1C48	0xB3C640  	MOV.B	#100, W0
0x1C4A	0x785880  	MOV.B	W0, [W1++]
0x1C4C	0xB3C630  	MOV.B	#99, W0
0x1C4E	0x785880  	MOV.B	W0, [W1++]
0x1C50	0xB3C610  	MOV.B	#97, W0
0x1C52	0x785880  	MOV.B	W0, [W1++]
0x1C54	0xB3C730  	MOV.B	#115, W0
0x1C56	0x785880  	MOV.B	W0, [W1++]
0x1C58	0xB3C740  	MOV.B	#116, W0
0x1C5A	0x785880  	MOV.B	W0, [W1++]
0x1C5C	0xB3C0D0  	MOV.B	#13, W0
0x1C5E	0x785880  	MOV.B	W0, [W1++]
0x1C60	0xB3C0A0  	MOV.B	#10, W0
0x1C62	0x785880  	MOV.B	W0, [W1++]
0x1C64	0xB3C000  	MOV.B	#0, W0
0x1C66	0x785880  	MOV.B	W0, [W1++]
0x1C68	0x470066  	ADD	W14, #6, W0
0x1C6A	0x781F8A  	PUSH	W10
0x1C6C	0x780500  	MOV	W0, W10
0x1C6E	0x071A01  	RCALL	_UART1_Write_Text
0x1C70	0x78054F  	POP	W10
;protocol_udp.mpas,261 :: 		UdpSlot^.DestMac[0] := $FF;
0x1C72	0x4500E6  	ADD	W10, #6, W1
0x1C74	0xB3CFF0  	MOV.B	#255, W0
0x1C76	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,262 :: 		UdpSlot^.DestMac[1] := $FF;
0x1C78	0x450066  	ADD	W10, #6, W0
0x1C7A	0x4000E1  	ADD	W0, #1, W1
0x1C7C	0xB3CFF0  	MOV.B	#255, W0
0x1C7E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,263 :: 		UdpSlot^.DestMac[2] := $FF;
0x1C80	0x450066  	ADD	W10, #6, W0
0x1C82	0x4000E2  	ADD	W0, #2, W1
0x1C84	0xB3CFF0  	MOV.B	#255, W0
0x1C86	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,264 :: 		UdpSlot^.DestMac[3] := $FF;
0x1C88	0x450066  	ADD	W10, #6, W0
0x1C8A	0x4000E3  	ADD	W0, #3, W1
0x1C8C	0xB3CFF0  	MOV.B	#255, W0
0x1C8E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,265 :: 		UdpSlot^.DestMac[4] := $FF;
0x1C90	0x450066  	ADD	W10, #6, W0
0x1C92	0x4000E4  	ADD	W0, #4, W1
0x1C94	0xB3CFF0  	MOV.B	#255, W0
0x1C96	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,266 :: 		UdpSlot^.DestMac[5] := $FF;
0x1C98	0x450066  	ADD	W10, #6, W0
0x1C9A	0x4000E5  	ADD	W0, #5, W1
0x1C9C	0xB3CFF0  	MOV.B	#255, W0
0x1C9E	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,267 :: 		UdpSlot^.DestIP[3] := $FF;
0x1CA0	0x450062  	ADD	W10, #2, W0
0x1CA2	0x4000E3  	ADD	W0, #3, W1
0x1CA4	0xB3CFF0  	MOV.B	#255, W0
0x1CA6	0x784880  	MOV.B	W0, [W1]
;protocol_udp.mpas,268 :: 		end else
0x1CA8	0x370075  	BRA	L__Eth_SendUdpMessage56
L__Eth_SendUdpMessage55:
;protocol_udp.mpas,269 :: 		if UdpSlot^.ValidatewithARP then   // Broadcast can not validate with ARP
0x1CAA	0x205DE0  	MOV	#1502, W0
0x1CAC	0x450000  	ADD	W10, W0, W0
0x1CAE	0xE00010  	CP0	[W0]
0x1CB0	0x320071  	BRA Z	L__Eth_SendUdpMessage58
L__Eth_SendUdpMessage294:
;protocol_udp.mpas,270 :: 		begin     {$IFDEF DEBUG_STRING}UART1_Write_Text('Udp with ARP' + CRLF);{$ENDIF}
0x1CB2	0x4700E6  	ADD	W14, #6, W1
0x1CB4	0xB3C550  	MOV.B	#85, W0
0x1CB6	0x785880  	MOV.B	W0, [W1++]
0x1CB8	0xB3C640  	MOV.B	#100, W0
0x1CBA	0x785880  	MOV.B	W0, [W1++]
0x1CBC	0xB3C700  	MOV.B	#112, W0
0x1CBE	0x785880  	MOV.B	W0, [W1++]
0x1CC0	0xB3C200  	MOV.B	#32, W0
0x1CC2	0x785880  	MOV.B	W0, [W1++]
0x1CC4	0xB3C770  	MOV.B	#119, W0
0x1CC6	0x785880  	MOV.B	W0, [W1++]
0x1CC8	0xB3C690  	MOV.B	#105, W0
0x1CCA	0x785880  	MOV.B	W0, [W1++]
0x1CCC	0xB3C740  	MOV.B	#116, W0
0x1CCE	0x785880  	MOV.B	W0, [W1++]
0x1CD0	0xB3C680  	MOV.B	#104, W0
0x1CD2	0x785880  	MOV.B	W0, [W1++]
0x1CD4	0xB3C200  	MOV.B	#32, W0
0x1CD6	0x785880  	MOV.B	W0, [W1++]
0x1CD8	0xB3C410  	MOV.B	#65, W0
0x1CDA	0x785880  	MOV.B	W0, [W1++]
0x1CDC	0xB3C520  	MOV.B	#82, W0
0x1CDE	0x785880  	MOV.B	W0, [W1++]
0x1CE0	0xB3C500  	MOV.B	#80, W0
0x1CE2	0x785880  	MOV.B	W0, [W1++]
0x1CE4	0xB3C0D0  	MOV.B	#13, W0
0x1CE6	0x785880  	MOV.B	W0, [W1++]
0x1CE8	0xB3C0A0  	MOV.B	#10, W0
0x1CEA	0x785880  	MOV.B	W0, [W1++]
0x1CEC	0xB3C000  	MOV.B	#0, W0
0x1CEE	0x785880  	MOV.B	W0, [W1++]
0x1CF0	0x470066  	ADD	W14, #6, W0
0x1CF2	0x781F8A  	PUSH	W10
0x1CF4	0x780500  	MOV	W0, W10
0x1CF6	0x0719BD  	RCALL	_UART1_Write_Text
0x1CF8	0x78054F  	POP	W10
;protocol_udp.mpas,271 :: 		Arp := Eth_Arp_MapMacAddress(UdpSlot^.DestIP);
0x1CFA	0x450062  	ADD	W10, #2, W0
0x1CFC	0x781F83  	PUSH	W3
0x1CFE	0x781F8A  	PUSH	W10
0x1D00	0x780500  	MOV	W0, W10
0x1D02	0x070EC8  	RCALL	_Eth_Arp_MapMacAddress
0x1D04	0x78054F  	POP	W10
0x1D06	0x7801CF  	POP	W3
; Arp start address is: 4 (W2)
0x1D08	0x780100  	MOV	W0, W2
;protocol_udp.mpas,272 :: 		if Arp <> nil then
0x1D0A	0xE10060  	CP	W0, #0
0x1D0C	0x320009  	BRA Z	L__Eth_SendUdpMessage61
L__Eth_SendUdpMessage295:
;protocol_udp.mpas,273 :: 		memcpy(@UdpSlot^.DestMac[0], @Arp^.Mac, 6)
0x1D0E	0x4500E6  	ADD	W10, #6, W1
0x1D10	0x41006A  	ADD	W2, #10, W0
; Arp end address is: 4 (W2)
0x1D12	0x781F8A  	PUSH	W10
0x1D14	0x20006C  	MOV	#6, W12
0x1D16	0x780580  	MOV	W0, W11
0x1D18	0x780501  	MOV	W1, W10
0x1D1A	0x07FF0B  	RCALL	_memcpy
0x1D1C	0x78054F  	POP	W10
0x1D1E	0x37003A  	BRA	L__Eth_SendUdpMessage62
;protocol_udp.mpas,274 :: 		else begin  {$IFDEF DEBUG_STRING}UART1_Write_Text('Udp with ARP failed ARP' + CRLF);{$ENDIF}
L__Eth_SendUdpMessage61:
0x1D20	0x4700E6  	ADD	W14, #6, W1
0x1D22	0xB3C550  	MOV.B	#85, W0
0x1D24	0x785880  	MOV.B	W0, [W1++]
0x1D26	0xB3C640  	MOV.B	#100, W0
0x1D28	0x785880  	MOV.B	W0, [W1++]
0x1D2A	0xB3C700  	MOV.B	#112, W0
0x1D2C	0x785880  	MOV.B	W0, [W1++]
0x1D2E	0xB3C200  	MOV.B	#32, W0
0x1D30	0x785880  	MOV.B	W0, [W1++]
0x1D32	0xB3C770  	MOV.B	#119, W0
0x1D34	0x785880  	MOV.B	W0, [W1++]
0x1D36	0xB3C690  	MOV.B	#105, W0
0x1D38	0x785880  	MOV.B	W0, [W1++]
0x1D3A	0xB3C740  	MOV.B	#116, W0
0x1D3C	0x785880  	MOV.B	W0, [W1++]
0x1D3E	0xB3C680  	MOV.B	#104, W0
0x1D40	0x785880  	MOV.B	W0, [W1++]
0x1D42	0xB3C200  	MOV.B	#32, W0
0x1D44	0x785880  	MOV.B	W0, [W1++]
0x1D46	0xB3C410  	MOV.B	#65, W0
0x1D48	0x785880  	MOV.B	W0, [W1++]
0x1D4A	0xB3C520  	MOV.B	#82, W0
0x1D4C	0x785880  	MOV.B	W0, [W1++]
0x1D4E	0xB3C500  	MOV.B	#80, W0
0x1D50	0x785880  	MOV.B	W0, [W1++]
0x1D52	0xB3C200  	MOV.B	#32, W0
0x1D54	0x785880  	MOV.B	W0, [W1++]
0x1D56	0xB3C660  	MOV.B	#102, W0
0x1D58	0x785880  	MOV.B	W0, [W1++]
0x1D5A	0xB3C610  	MOV.B	#97, W0
0x1D5C	0x785880  	MOV.B	W0, [W1++]
0x1D5E	0xB3C690  	MOV.B	#105, W0
0x1D60	0x785880  	MOV.B	W0, [W1++]
0x1D62	0xB3C6C0  	MOV.B	#108, W0
0x1D64	0x785880  	MOV.B	W0, [W1++]
0x1D66	0xB3C650  	MOV.B	#101, W0
0x1D68	0x785880  	MOV.B	W0, [W1++]
0x1D6A	0xB3C640  	MOV.B	#100, W0
0x1D6C	0x785880  	MOV.B	W0, [W1++]
0x1D6E	0xB3C200  	MOV.B	#32, W0
0x1D70	0x785880  	MOV.B	W0, [W1++]
0x1D72	0xB3C410  	MOV.B	#65, W0
0x1D74	0x785880  	MOV.B	W0, [W1++]
0x1D76	0xB3C520  	MOV.B	#82, W0
0x1D78	0x785880  	MOV.B	W0, [W1++]
0x1D7A	0xB3C500  	MOV.B	#80, W0
0x1D7C	0x785880  	MOV.B	W0, [W1++]
0x1D7E	0xB3C0D0  	MOV.B	#13, W0
0x1D80	0x785880  	MOV.B	W0, [W1++]
0x1D82	0xB3C0A0  	MOV.B	#10, W0
0x1D84	0x785880  	MOV.B	W0, [W1++]
0x1D86	0xB3C000  	MOV.B	#0, W0
0x1D88	0x785880  	MOV.B	W0, [W1++]
0x1D8A	0x470066  	ADD	W14, #6, W0
0x1D8C	0x780500  	MOV	W0, W10
0x1D8E	0x071971  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,275 :: 		Exit      // No ARP reply, fail out
0x1D90	0x780083  	MOV	W3, W1
0x1D92	0x37021B  	BRA	L_end__Eth_SendUdpMessage
;protocol_udp.mpas,276 :: 		end;
L__Eth_SendUdpMessage62:
;protocol_udp.mpas,277 :: 		end;
L__Eth_SendUdpMessage58:
L__Eth_SendUdpMessage56:
;protocol_udp.mpas,281 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('DestMac ' + MACAddressToStr(UdpSlot^.DestMac) + CRLF);{$ENDIF}
0x1D94	0x450066  	ADD	W10, #6, W0
0x1D96	0x781F83  	PUSH	W3
0x1D98	0x781F8A  	PUSH	W10
0x1D9A	0x780500  	MOV	W0, W10
0x1D9C	0x200460  	MOV	#70, W0
0x1D9E	0x470000  	ADD	W14, W0, W0
0x1DA0	0x9807B0  	MOV	W0, [W15+6]
0x1DA2	0x07F7FE  	RCALL	_MACAddressToStr
0x1DA4	0x78054F  	POP	W10
0x1DA6	0x7801CF  	POP	W3
0x1DA8	0x200200  	MOV	#32, W0
0x1DAA	0x470000  	ADD	W14, W0, W0
0x1DAC	0xB3C442  	MOV.B	#68, W2
0x1DAE	0x785802  	MOV.B	W2, [W0++]
0x1DB0	0xB3C652  	MOV.B	#101, W2
0x1DB2	0x785802  	MOV.B	W2, [W0++]
0x1DB4	0xB3C732  	MOV.B	#115, W2
0x1DB6	0x785802  	MOV.B	W2, [W0++]
0x1DB8	0xB3C742  	MOV.B	#116, W2
0x1DBA	0x785802  	MOV.B	W2, [W0++]
0x1DBC	0xB3C4D2  	MOV.B	#77, W2
0x1DBE	0x785802  	MOV.B	W2, [W0++]
0x1DC0	0xB3C612  	MOV.B	#97, W2
0x1DC2	0x785802  	MOV.B	W2, [W0++]
0x1DC4	0xB3C632  	MOV.B	#99, W2
0x1DC6	0x785802  	MOV.B	W2, [W0++]
0x1DC8	0xB3C202  	MOV.B	#32, W2
0x1DCA	0x785802  	MOV.B	W2, [W0++]
0x1DCC	0x200461  	MOV	#70, W1
0x1DCE	0x470081  	ADD	W14, W1, W1
0x1DD0	0x07F6E4  	RCALL	___CS2S
0x1DD2	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1DD4	0x202012  	MOV	#513, W2
0x1DD6	0x880192  	MOV	W2, DSRPAG
0x1DD8	0x000000  	NOP
0x1DDA	0x07F6DF  	RCALL	___CS2S
0x1DDC	0x780080  	MOV	W0, W1
0x1DDE	0xEF2000  	CLR	W0
0x1DE0	0x785880  	MOV.B	W0, [W1++]
0x1DE2	0x200200  	MOV	#32, W0
0x1DE4	0x470000  	ADD	W14, W0, W0
0x1DE6	0x781F8A  	PUSH	W10
0x1DE8	0x780500  	MOV	W0, W10
0x1DEA	0x071943  	RCALL	_UART1_Write_Text
0x1DEC	0x78054F  	POP	W10
;protocol_udp.mpas,282 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('SourceMac ' + MACAddressToStr(eth_mac) + CRLF);{$ENDIF}
0x1DEE	0x781F83  	PUSH	W3
0x1DF0	0x781F8A  	PUSH	W10
0x1DF2	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x1DF4	0x200460  	MOV	#70, W0
0x1DF6	0x470000  	ADD	W14, W0, W0
0x1DF8	0x9807B0  	MOV	W0, [W15+6]
0x1DFA	0x07F7D2  	RCALL	_MACAddressToStr
0x1DFC	0x78054F  	POP	W10
0x1DFE	0x7801CF  	POP	W3
0x1E00	0x200200  	MOV	#32, W0
0x1E02	0x470000  	ADD	W14, W0, W0
0x1E04	0xB3C532  	MOV.B	#83, W2
0x1E06	0x785802  	MOV.B	W2, [W0++]
0x1E08	0xB3C6F2  	MOV.B	#111, W2
0x1E0A	0x785802  	MOV.B	W2, [W0++]
0x1E0C	0xB3C752  	MOV.B	#117, W2
0x1E0E	0x785802  	MOV.B	W2, [W0++]
0x1E10	0xB3C722  	MOV.B	#114, W2
0x1E12	0x785802  	MOV.B	W2, [W0++]
0x1E14	0xB3C632  	MOV.B	#99, W2
0x1E16	0x785802  	MOV.B	W2, [W0++]
0x1E18	0xB3C652  	MOV.B	#101, W2
0x1E1A	0x785802  	MOV.B	W2, [W0++]
0x1E1C	0xB3C4D2  	MOV.B	#77, W2
0x1E1E	0x785802  	MOV.B	W2, [W0++]
0x1E20	0xB3C612  	MOV.B	#97, W2
0x1E22	0x785802  	MOV.B	W2, [W0++]
0x1E24	0xB3C632  	MOV.B	#99, W2
0x1E26	0x785802  	MOV.B	W2, [W0++]
0x1E28	0xB3C202  	MOV.B	#32, W2
0x1E2A	0x785802  	MOV.B	W2, [W0++]
0x1E2C	0x200461  	MOV	#70, W1
0x1E2E	0x470081  	ADD	W14, W1, W1
0x1E30	0x07F6B4  	RCALL	___CS2S
0x1E32	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1E34	0x202012  	MOV	#513, W2
0x1E36	0x880192  	MOV	W2, DSRPAG
0x1E38	0x000000  	NOP
0x1E3A	0x07F6AF  	RCALL	___CS2S
0x1E3C	0x780080  	MOV	W0, W1
0x1E3E	0xEF2000  	CLR	W0
0x1E40	0x785880  	MOV.B	W0, [W1++]
0x1E42	0x200200  	MOV	#32, W0
0x1E44	0x470000  	ADD	W14, W0, W0
0x1E46	0x781F8A  	PUSH	W10
0x1E48	0x780500  	MOV	W0, W10
0x1E4A	0x071913  	RCALL	_UART1_Write_Text
0x1E4C	0x78054F  	POP	W10
;protocol_udp.mpas,283 :: 		CopyRamToEthMem(@UdpSlot^.DestMac[0], TXSTART,6);                             // Load the Destination MAC
0x1E4E	0x450066  	ADD	W10, #6, W0
0x1E50	0x781F83  	PUSH	W3
0x1E52	0x781F8A  	PUSH	W10
0x1E54	0x20006C  	MOV	#6, W12
0x1E56	0xEF2016  	CLR	W11
0x1E58	0x780500  	MOV	W0, W10
0x1E5A	0x0702D9  	RCALL	_CopyRamToEthMem
0x1E5C	0x78054F  	POP	W10
;protocol_udp.mpas,284 :: 		CopyRamToEthMem(@UdpSlot^.SourceMac[0], TXSTART+6, 6);                        // Load the Source MAC
0x1E5E	0x450072  	ADD	W10, #18, W0
0x1E60	0x781F8A  	PUSH	W10
0x1E62	0x20006C  	MOV	#6, W12
0x1E64	0x20006B  	MOV	#6, W11
0x1E66	0x780500  	MOV	W0, W10
0x1E68	0x0702D2  	RCALL	_CopyRamToEthMem
0x1E6A	0x78054F  	POP	W10
0x1E6C	0x7801CF  	POP	W3
;protocol_udp.mpas,285 :: 		WriteToEthMem(TXSTART+12,$08);                                                // EtherType = Ethernet protocol vIP4 ($8000)
0x1E6E	0x781F8A  	PUSH	W10
0x1E70	0xB3C08B  	MOV.B	#8, W11
0x1E72	0x2000CA  	MOV	#12, W10
0x1E74	0x07026A  	RCALL	_WriteToEthMem
;protocol_udp.mpas,286 :: 		Eth_PutByte($00);
0x1E76	0xEF2014  	CLR	W10
0x1E78	0x070260  	RCALL	_Eth_PutByte
;protocol_udp.mpas,289 :: 		Eth_PutByte($45);                                                             // Version = 4 (IPV4), Heder Size = 5 - 32 bit words (5*4=20 bytes)
0x1E7A	0xB3C45A  	MOV.B	#69, W10
0x1E7C	0x07025E  	RCALL	_Eth_PutByte
;protocol_udp.mpas,290 :: 		Eth_PutByte($00);                                                             // DSCP/ECN
0x1E7E	0xEF2014  	CLR	W10
0x1E80	0x07025C  	RCALL	_Eth_PutByte
0x1E82	0x78054F  	POP	W10
;protocol_udp.mpas,291 :: 		TotalLen := UdpSlot^.DataLen + 28;
0x1E84	0x45007A  	ADD	W10, #26, W0
0x1E86	0x780090  	MOV	[W0], W1
0x1E88	0x470064  	ADD	W14, #4, W0
0x1E8A	0x40887C  	ADD	W1, #28, [W0]
;protocol_udp.mpas,292 :: 		Eth_PutByte(Hi(TotalLen));                                                    // Hi Total length
0x1E8C	0x470064  	ADD	W14, #4, W0
0x1E8E	0xEC2000  	INC	W0
0x1E90	0x784010  	MOV.B	[W0], W0
0x1E92	0x781F8A  	PUSH	W10
0x1E94	0x784500  	MOV.B	W0, W10
0x1E96	0x070251  	RCALL	_Eth_PutByte
;protocol_udp.mpas,293 :: 		Eth_PutByte(Lo(TotalLen));                                                    // Lo Total length
0x1E98	0x90454E  	MOV.B	[W14+4], W10
0x1E9A	0x07024F  	RCALL	_Eth_PutByte
;protocol_udp.mpas,294 :: 		Inc(Udp_Counter);
0x1E9C	0x200011  	MOV	#1, W1
0x1E9E	0x210AE0  	MOV	#lo_addr(protocol_udp_Udp_Counter), W0
0x1EA0	0x408810  	ADD	W1, [W0], [W0]
;protocol_udp.mpas,295 :: 		Eth_PutByte(Hi(Udp_Counter));                                                 // Hi Identification
0x1EA2	0x210AF0  	MOV	#lo_addr(protocol_udp_Udp_Counter+1), W0
0x1EA4	0x784510  	MOV.B	[W0], W10
0x1EA6	0x070249  	RCALL	_Eth_PutByte
;protocol_udp.mpas,296 :: 		Eth_PutByte(Lo(Udp_Counter));                                                 // Lo Identification
0x1EA8	0x210AE0  	MOV	#lo_addr(protocol_udp_Udp_Counter), W0
0x1EAA	0x784510  	MOV.B	[W0], W10
0x1EAC	0x070246  	RCALL	_Eth_PutByte
;protocol_udp.mpas,297 :: 		Eth_PutByte($00);                                                             // Flags/Fragment Offset
0x1EAE	0xEF2014  	CLR	W10
0x1EB0	0x070244  	RCALL	_Eth_PutByte
;protocol_udp.mpas,298 :: 		Eth_PutByte($00);                                                             // Fragment Offset
0x1EB2	0xEF2014  	CLR	W10
0x1EB4	0x070242  	RCALL	_Eth_PutByte
;protocol_udp.mpas,299 :: 		Eth_PutByte($80);                                                             // Time to live   (only allow 128 hops before the packet dies)
0x1EB6	0xB3C80A  	MOV.B	#128, W10
0x1EB8	0x070240  	RCALL	_Eth_PutByte
;protocol_udp.mpas,300 :: 		Eth_PutByte($11);                                                             // UDP Protocol
0x1EBA	0xB3C11A  	MOV.B	#17, W10
0x1EBC	0x07023E  	RCALL	_Eth_PutByte
;protocol_udp.mpas,301 :: 		Eth_PutByte($00);                                                             // Hi Clear Checksum until all the bytes are there to do the checksum on
0x1EBE	0xEF2014  	CLR	W10
0x1EC0	0x07023C  	RCALL	_Eth_PutByte
;protocol_udp.mpas,302 :: 		Eth_PutByte($00);                                                             // Lo Clear Checksum until all the bytes are there to do the checksum on
0x1EC2	0xEF2014  	CLR	W10
0x1EC4	0x07023A  	RCALL	_Eth_PutByte
;protocol_udp.mpas,303 :: 		cksum_ip := Eth_Cksum(TXSTART+14,20);
0x1EC6	0x20014B  	MOV	#20, W11
0x1EC8	0x2000EA  	MOV	#14, W10
0x1ECA	0x07FA0F  	RCALL	_Eth_Cksum
0x1ECC	0x980700  	MOV	W0, [W14+0]
;protocol_udp.mpas,304 :: 		WriteToEthMem(TXSTART+24,Hi(cksum_ip));
0x1ECE	0x470060  	ADD	W14, #0, W0
0x1ED0	0xEC2000  	INC	W0
0x1ED2	0x784010  	MOV.B	[W0], W0
0x1ED4	0x784580  	MOV.B	W0, W11
0x1ED6	0x20018A  	MOV	#24, W10
0x1ED8	0x070238  	RCALL	_WriteToEthMem
;protocol_udp.mpas,305 :: 		Eth_PutByte(Lo(cksum_ip));
0x1EDA	0x90450E  	MOV.B	[W14+0], W10
0x1EDC	0x07022E  	RCALL	_Eth_PutByte
0x1EDE	0x78054F  	POP	W10
;protocol_udp.mpas,306 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('DestIP ' + IPAddressToStr(UdpSlot^.DestIP) + CRLF);{$ENDIF}
0x1EE0	0x450062  	ADD	W10, #2, W0
0x1EE2	0x781F83  	PUSH	W3
0x1EE4	0x781F8A  	PUSH	W10
0x1EE6	0x780500  	MOV	W0, W10
0x1EE8	0x200460  	MOV	#70, W0
0x1EEA	0x470000  	ADD	W14, W0, W0
0x1EEC	0x9807B0  	MOV	W0, [W15+6]
0x1EEE	0x07F6F4  	RCALL	_IPAddressToStr
0x1EF0	0x78054F  	POP	W10
0x1EF2	0x7801CF  	POP	W3
0x1EF4	0x200200  	MOV	#32, W0
0x1EF6	0x470000  	ADD	W14, W0, W0
0x1EF8	0xB3C442  	MOV.B	#68, W2
0x1EFA	0x785802  	MOV.B	W2, [W0++]
0x1EFC	0xB3C652  	MOV.B	#101, W2
0x1EFE	0x785802  	MOV.B	W2, [W0++]
0x1F00	0xB3C732  	MOV.B	#115, W2
0x1F02	0x785802  	MOV.B	W2, [W0++]
0x1F04	0xB3C742  	MOV.B	#116, W2
0x1F06	0x785802  	MOV.B	W2, [W0++]
0x1F08	0xB3C492  	MOV.B	#73, W2
0x1F0A	0x785802  	MOV.B	W2, [W0++]
0x1F0C	0xB3C502  	MOV.B	#80, W2
0x1F0E	0x785802  	MOV.B	W2, [W0++]
0x1F10	0xB3C202  	MOV.B	#32, W2
0x1F12	0x785802  	MOV.B	W2, [W0++]
0x1F14	0x200461  	MOV	#70, W1
0x1F16	0x470081  	ADD	W14, W1, W1
0x1F18	0x07F640  	RCALL	___CS2S
0x1F1A	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1F1C	0x202012  	MOV	#513, W2
0x1F1E	0x880192  	MOV	W2, DSRPAG
0x1F20	0x000000  	NOP
0x1F22	0x07F63B  	RCALL	___CS2S
0x1F24	0x780080  	MOV	W0, W1
0x1F26	0xEF2000  	CLR	W0
0x1F28	0x785880  	MOV.B	W0, [W1++]
0x1F2A	0x200200  	MOV	#32, W0
0x1F2C	0x470000  	ADD	W14, W0, W0
0x1F2E	0x781F8A  	PUSH	W10
0x1F30	0x780500  	MOV	W0, W10
0x1F32	0x07189F  	RCALL	_UART1_Write_Text
0x1F34	0x78054F  	POP	W10
;protocol_udp.mpas,307 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('SourceIP ' + IPAddressToStr(eth_ip_addr) + CRLF);{$ENDIF}
0x1F36	0x781F83  	PUSH	W3
0x1F38	0x781F8A  	PUSH	W10
0x1F3A	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x1F3C	0x200460  	MOV	#70, W0
0x1F3E	0x470000  	ADD	W14, W0, W0
0x1F40	0x9807B0  	MOV	W0, [W15+6]
0x1F42	0x07F6CA  	RCALL	_IPAddressToStr
0x1F44	0x78054F  	POP	W10
0x1F46	0x7801CF  	POP	W3
0x1F48	0x200200  	MOV	#32, W0
0x1F4A	0x470000  	ADD	W14, W0, W0
0x1F4C	0xB3C532  	MOV.B	#83, W2
0x1F4E	0x785802  	MOV.B	W2, [W0++]
0x1F50	0xB3C6F2  	MOV.B	#111, W2
0x1F52	0x785802  	MOV.B	W2, [W0++]
0x1F54	0xB3C752  	MOV.B	#117, W2
0x1F56	0x785802  	MOV.B	W2, [W0++]
0x1F58	0xB3C722  	MOV.B	#114, W2
0x1F5A	0x785802  	MOV.B	W2, [W0++]
0x1F5C	0xB3C632  	MOV.B	#99, W2
0x1F5E	0x785802  	MOV.B	W2, [W0++]
0x1F60	0xB3C652  	MOV.B	#101, W2
0x1F62	0x785802  	MOV.B	W2, [W0++]
0x1F64	0xB3C492  	MOV.B	#73, W2
0x1F66	0x785802  	MOV.B	W2, [W0++]
0x1F68	0xB3C502  	MOV.B	#80, W2
0x1F6A	0x785802  	MOV.B	W2, [W0++]
0x1F6C	0xB3C202  	MOV.B	#32, W2
0x1F6E	0x785802  	MOV.B	W2, [W0++]
0x1F70	0x200461  	MOV	#70, W1
0x1F72	0x470081  	ADD	W14, W1, W1
0x1F74	0x07F612  	RCALL	___CS2S
0x1F76	0x280301  	MOV	#lo_addr(_CRLF), W1
0x1F78	0x202012  	MOV	#513, W2
0x1F7A	0x880192  	MOV	W2, DSRPAG
0x1F7C	0x000000  	NOP
0x1F7E	0x07F60D  	RCALL	___CS2S
0x1F80	0x780080  	MOV	W0, W1
0x1F82	0xEF2000  	CLR	W0
0x1F84	0x785880  	MOV.B	W0, [W1++]
0x1F86	0x200200  	MOV	#32, W0
0x1F88	0x470000  	ADD	W14, W0, W0
0x1F8A	0x781F8A  	PUSH	W10
0x1F8C	0x780500  	MOV	W0, W10
0x1F8E	0x071871  	RCALL	_UART1_Write_Text
0x1F90	0x78054F  	POP	W10
;protocol_udp.mpas,308 :: 		CopyRamToEthMem(@UdpSlot^.SourceIP[0], TXSTART+26, 4);                       // Source IP Address
0x1F92	0x45006E  	ADD	W10, #14, W0
0x1F94	0x781F83  	PUSH	W3
0x1F96	0x781F8A  	PUSH	W10
0x1F98	0x20004C  	MOV	#4, W12
0x1F9A	0x2001AB  	MOV	#26, W11
0x1F9C	0x780500  	MOV	W0, W10
0x1F9E	0x070237  	RCALL	_CopyRamToEthMem
0x1FA0	0x78054F  	POP	W10
;protocol_udp.mpas,309 :: 		CopyRamToEthMem(@UdpSlot^.DestIP[0], TXSTART+30, 4);                          // Destination IP Address
0x1FA2	0x450062  	ADD	W10, #2, W0
0x1FA4	0x781F8A  	PUSH	W10
0x1FA6	0x20004C  	MOV	#4, W12
0x1FA8	0x2001EB  	MOV	#30, W11
0x1FAA	0x780500  	MOV	W0, W10
0x1FAC	0x070230  	RCALL	_CopyRamToEthMem
0x1FAE	0x78054F  	POP	W10
0x1FB0	0x7801CF  	POP	W3
;protocol_udp.mpas,312 :: 		WriteToEthMem(TXSTART+34,Hi(UdpSlot^.SourcePort));                            // Hi Source Port
0x1FB2	0x450078  	ADD	W10, #24, W0
0x1FB4	0xEC2000  	INC	W0
0x1FB6	0x781F8A  	PUSH	W10
0x1FB8	0x784590  	MOV.B	[W0], W11
0x1FBA	0x20022A  	MOV	#34, W10
0x1FBC	0x0701C6  	RCALL	_WriteToEthMem
0x1FBE	0x78054F  	POP	W10
;protocol_udp.mpas,313 :: 		Eth_PutByte(Lo(UdpSlot^.SourcePort));                                         // Lo Source Port
0x1FC0	0x450078  	ADD	W10, #24, W0
0x1FC2	0x781F8A  	PUSH	W10
0x1FC4	0x784510  	MOV.B	[W0], W10
0x1FC6	0x0701B9  	RCALL	_Eth_PutByte
0x1FC8	0x78054F  	POP	W10
;protocol_udp.mpas,314 :: 		Eth_PutByte(Hi(UdpSlot^.DestPort));                                           // Hi Destination Port
0x1FCA	0x45006C  	ADD	W10, #12, W0
0x1FCC	0xEC2000  	INC	W0
0x1FCE	0x781F8A  	PUSH	W10
0x1FD0	0x784510  	MOV.B	[W0], W10
0x1FD2	0x0701B3  	RCALL	_Eth_PutByte
0x1FD4	0x78054F  	POP	W10
;protocol_udp.mpas,315 :: 		Eth_PutByte(Lo(UdpSlot^.DestPort));                                           // Lo Destination Port
0x1FD6	0x45006C  	ADD	W10, #12, W0
0x1FD8	0x781F8A  	PUSH	W10
0x1FDA	0x784510  	MOV.B	[W0], W10
0x1FDC	0x0701AE  	RCALL	_Eth_PutByte
0x1FDE	0x78054F  	POP	W10
;protocol_udp.mpas,316 :: 		TotalLen := UdpSlot^.DataLen + 8;
0x1FE0	0x45007A  	ADD	W10, #26, W0
0x1FE2	0x780090  	MOV	[W0], W1
0x1FE4	0x470064  	ADD	W14, #4, W0
0x1FE6	0x408868  	ADD	W1, #8, [W0]
;protocol_udp.mpas,317 :: 		Eth_PutByte(Hi(TotalLen));                                                    // Hi Length of UDP part of message
0x1FE8	0x470064  	ADD	W14, #4, W0
0x1FEA	0xEC2000  	INC	W0
0x1FEC	0x784010  	MOV.B	[W0], W0
0x1FEE	0x781F8A  	PUSH	W10
0x1FF0	0x784500  	MOV.B	W0, W10
0x1FF2	0x0701A3  	RCALL	_Eth_PutByte
;protocol_udp.mpas,318 :: 		Eth_PutByte(Lo(TotalLen));                                                    // Lo Length of UDP part of message
0x1FF4	0x90454E  	MOV.B	[W14+4], W10
0x1FF6	0x0701A1  	RCALL	_Eth_PutByte
;protocol_udp.mpas,319 :: 		Eth_PutByte($00);                                                             // Zero the Checksum to do the calculation
0x1FF8	0xEF2014  	CLR	W10
0x1FFA	0x07019F  	RCALL	_Eth_PutByte
;protocol_udp.mpas,320 :: 		Eth_PutByte($00);                                                             // Zero the Checksum to do the calculation
0x1FFC	0xEF2014  	CLR	W10
0x1FFE	0x07019D  	RCALL	_Eth_PutByte
0x2000	0x78054F  	POP	W10
;protocol_udp.mpas,321 :: 		CopyRamToEthMem(@UdpSlot^.DataArray, TXSTART+42, UdpSlot^.DataLen);
0x2002	0x4500FC  	ADD	W10, #28, W1
0x2004	0x45007A  	ADD	W10, #26, W0
0x2006	0x781F83  	PUSH	W3
0x2008	0x781F8A  	PUSH	W10
0x200A	0x780610  	MOV	[W0], W12
0x200C	0x2002AB  	MOV	#42, W11
0x200E	0x780501  	MOV	W1, W10
0x2010	0x0701FE  	RCALL	_CopyRamToEthMem
0x2012	0x78054F  	POP	W10
0x2014	0x7801CF  	POP	W3
;protocol_udp.mpas,324 :: 		Align := TotalLen and $01;                                                    // Length must be a multiple of 2 per the spec
0x2016	0x90404E  	MOV.B	[W14+4], W0
; Align start address is: 4 (W2)
0x2018	0x604161  	AND.B	W0, #1, W2
;protocol_udp.mpas,325 :: 		WriteToEthMem(TXSTART+UdpSlot^.DataLen+42,$00);                               // Zero the word past the actual message; Create the IP Psudo header in the space above the real message
0x201A	0x4500FA  	ADD	W10, #26, W1
0x201C	0x2002A0  	MOV	#42, W0
0x201E	0x400011  	ADD	W0, [W1], W0
0x2020	0x781F8A  	PUSH	W10
0x2022	0xEF2016  	CLR	W11
0x2024	0x780500  	MOV	W0, W10
0x2026	0x070191  	RCALL	_WriteToEthMem
;protocol_udp.mpas,326 :: 		Eth_PutByte($00);                                                             // Zero
0x2028	0xEF2014  	CLR	W10
0x202A	0x070187  	RCALL	_Eth_PutByte
0x202C	0x78054F  	POP	W10
;protocol_udp.mpas,327 :: 		CopyEthMemToEthMem(TXSTART+26, TXSTART+UdpSlot^.DataLen+Align+42, 8);         // Copy the Source IP AND the Dest IP in one block from the earlier message
0x202E	0x4500FA  	ADD	W10, #26, W1
0x2030	0xFB8002  	ZE	W2, W0
0x2032	0x400091  	ADD	W0, [W1], W1
0x2034	0x2002A0  	MOV	#42, W0
0x2036	0x408000  	ADD	W1, W0, W0
0x2038	0x781F8A  	PUSH	W10
0x203A	0x20008C  	MOV	#8, W12
0x203C	0x780580  	MOV	W0, W11
0x203E	0x2001AA  	MOV	#26, W10
0x2040	0x07FDC0  	RCALL	_CopyEthMemToEthMem
0x2042	0x78054F  	POP	W10
;protocol_udp.mpas,328 :: 		WriteToEthMem(TXSTART+UdpSlot^.DataLen+Align+42+8, $00);                      // "Zeros" field
0x2044	0x4500FA  	ADD	W10, #26, W1
0x2046	0xFB8002  	ZE	W2, W0
0x2048	0x400091  	ADD	W0, [W1], W1
0x204A	0x2002A0  	MOV	#42, W0
0x204C	0x408000  	ADD	W1, W0, W0
0x204E	0x400068  	ADD	W0, #8, W0
0x2050	0x781F8A  	PUSH	W10
0x2052	0xEF2016  	CLR	W11
0x2054	0x780500  	MOV	W0, W10
0x2056	0x070179  	RCALL	_WriteToEthMem
;protocol_udp.mpas,329 :: 		Eth_PutByte($11);                                                             // Protocol (UDP = $11)
0x2058	0xB3C11A  	MOV.B	#17, W10
0x205A	0x07016F  	RCALL	_Eth_PutByte
;protocol_udp.mpas,330 :: 		Eth_PutByte(Hi(TotalLen));                                                    // Hi UDP Length
0x205C	0x470064  	ADD	W14, #4, W0
0x205E	0xEC2000  	INC	W0
0x2060	0x784010  	MOV.B	[W0], W0
0x2062	0x784500  	MOV.B	W0, W10
0x2064	0x07016A  	RCALL	_Eth_PutByte
;protocol_udp.mpas,331 :: 		Eth_PutByte(Lo(TotalLen));                                                    // Lo UDP Length
0x2066	0x90454E  	MOV.B	[W14+4], W10
0x2068	0x070168  	RCALL	_Eth_PutByte
;protocol_udp.mpas,332 :: 		cksum_udp := Eth_Cksum(TXSTART+34, TotalLen+Align+12);                        // Check sum of Psudo IP and UDP (note that the order is BACKWARDS but the check sum will calculate the same
0x206A	0xFB8082  	ZE	W2, W1
; Align end address is: 4 (W2)
0x206C	0x470064  	ADD	W14, #4, W0
0x206E	0x408010  	ADD	W1, [W0], W0
0x2070	0x40006C  	ADD	W0, #12, W0
0x2072	0x780580  	MOV	W0, W11
0x2074	0x20022A  	MOV	#34, W10
0x2076	0x07F939  	RCALL	_Eth_Cksum
0x2078	0x78054F  	POP	W10
0x207A	0x980710  	MOV	W0, [W14+2]
;protocol_udp.mpas,333 :: 		if cksum_udp = 0 then
0x207C	0xE10060  	CP	W0, #0
0x207E	0x3A0002  	BRA NZ	L__Eth_SendUdpMessage64
L__Eth_SendUdpMessage296:
;protocol_udp.mpas,334 :: 		cksum_udp := $FFFF;                                                         // Checksum can't be $0000
0x2080	0x2FFFF0  	MOV	#65535, W0
0x2082	0x980710  	MOV	W0, [W14+2]
L__Eth_SendUdpMessage64:
;protocol_udp.mpas,335 :: 		WriteToEthMem(TXSTART+40,Hi(cksum_udp));                                      // Write in the checksum
0x2084	0x470062  	ADD	W14, #2, W0
0x2086	0xEC2000  	INC	W0
0x2088	0x784010  	MOV.B	[W0], W0
0x208A	0x781F8A  	PUSH	W10
0x208C	0x784580  	MOV.B	W0, W11
0x208E	0x20028A  	MOV	#40, W10
0x2090	0x07015C  	RCALL	_WriteToEthMem
;protocol_udp.mpas,336 :: 		Eth_PutByte(Lo(cksum_udp));
0x2092	0x90452E  	MOV.B	[W14+2], W10
0x2094	0x070152  	RCALL	_Eth_PutByte
0x2096	0x78054F  	POP	W10
;protocol_udp.mpas,337 :: 		TotalLen := UdpSlot^.DataLen + 42;
0x2098	0x4500FA  	ADD	W10, #26, W1
0x209A	0x2002A0  	MOV	#42, W0
0x209C	0x400011  	ADD	W0, [W1], W0
0x209E	0x980720  	MOV	W0, [W14+4]
;protocol_udp.mpas,338 :: 		Eth_SendPacket(TotalLen);                                                     // Ship it...
0x20A0	0x781F8A  	PUSH	W10
0x20A2	0x780500  	MOV	W0, W10
0x20A4	0x070160  	RCALL	_Eth_SendPacket
;protocol_udp.mpas,340 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Sent' + CRLF);{$ENDIF}
0x20A6	0x4700E6  	ADD	W14, #6, W1
0x20A8	0xB3C550  	MOV.B	#85, W0
0x20AA	0x785880  	MOV.B	W0, [W1++]
0x20AC	0xB3C640  	MOV.B	#100, W0
0x20AE	0x785880  	MOV.B	W0, [W1++]
0x20B0	0xB3C700  	MOV.B	#112, W0
0x20B2	0x785880  	MOV.B	W0, [W1++]
0x20B4	0xB3C200  	MOV.B	#32, W0
0x20B6	0x785880  	MOV.B	W0, [W1++]
0x20B8	0xB3C530  	MOV.B	#83, W0
0x20BA	0x785880  	MOV.B	W0, [W1++]
0x20BC	0xB3C650  	MOV.B	#101, W0
0x20BE	0x785880  	MOV.B	W0, [W1++]
0x20C0	0xB3C6E0  	MOV.B	#110, W0
0x20C2	0x785880  	MOV.B	W0, [W1++]
0x20C4	0xB3C740  	MOV.B	#116, W0
0x20C6	0x785880  	MOV.B	W0, [W1++]
0x20C8	0xB3C0D0  	MOV.B	#13, W0
0x20CA	0x785880  	MOV.B	W0, [W1++]
0x20CC	0xB3C0A0  	MOV.B	#10, W0
0x20CE	0x785880  	MOV.B	W0, [W1++]
0x20D0	0xB3C000  	MOV.B	#0, W0
0x20D2	0x785880  	MOV.B	W0, [W1++]
0x20D4	0x470066  	ADD	W14, #6, W0
0x20D6	0x780500  	MOV	W0, W10
0x20D8	0x0717CC  	RCALL	_UART1_Write_Text
0x20DA	0x78054F  	POP	W10
;protocol_udp.mpas,342 :: 		if (UdpSlot^.Broadcast = False) and (UdpSlot^.WaitForResult = True) then
0x20DC	0x78001A  	MOV	[W10], W0
0x20DE	0xE10060  	CP	W0, #0
0x20E0	0xEF2004  	CLR	W2
0x20E2	0x3A0001  	BRA NZ	L__Eth_SendUdpMessage297
0x20E4	0xEEA004  	COM	W2
L__Eth_SendUdpMessage297:
0x20E6	0x205DC0  	MOV	#1500, W0
0x20E8	0x450000  	ADD	W10, W0, W0
0x20EA	0x780090  	MOV	[W0], W1
0x20EC	0x2FFFF0  	MOV	#65535, W0
0x20EE	0xE10800  	CP	W1, W0
0x20F0	0xEF2000  	CLR	W0
0x20F2	0x3A0001  	BRA NZ	L__Eth_SendUdpMessage298
0x20F4	0xEEA000  	COM	W0
L__Eth_SendUdpMessage298:
0x20F6	0x610000  	AND	W2, W0, W0
0x20F8	0x320066  	BRA Z	L__Eth_SendUdpMessage67
L__Eth_SendUdpMessage299:
;protocol_udp.mpas,344 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Waiting' + CRLF);{$ENDIF}
0x20FA	0x4700E6  	ADD	W14, #6, W1
0x20FC	0xB3C550  	MOV.B	#85, W0
0x20FE	0x785880  	MOV.B	W0, [W1++]
0x2100	0xB3C640  	MOV.B	#100, W0
0x2102	0x785880  	MOV.B	W0, [W1++]
0x2104	0xB3C700  	MOV.B	#112, W0
0x2106	0x785880  	MOV.B	W0, [W1++]
0x2108	0xB3C200  	MOV.B	#32, W0
0x210A	0x785880  	MOV.B	W0, [W1++]
0x210C	0xB3C570  	MOV.B	#87, W0
0x210E	0x785880  	MOV.B	W0, [W1++]
0x2110	0xB3C610  	MOV.B	#97, W0
0x2112	0x785880  	MOV.B	W0, [W1++]
0x2114	0xB3C690  	MOV.B	#105, W0
0x2116	0x785880  	MOV.B	W0, [W1++]
0x2118	0xB3C740  	MOV.B	#116, W0
0x211A	0x785880  	MOV.B	W0, [W1++]
0x211C	0xB3C690  	MOV.B	#105, W0
0x211E	0x785880  	MOV.B	W0, [W1++]
0x2120	0xB3C6E0  	MOV.B	#110, W0
0x2122	0x785880  	MOV.B	W0, [W1++]
0x2124	0xB3C670  	MOV.B	#103, W0
0x2126	0x785880  	MOV.B	W0, [W1++]
0x2128	0xB3C0D0  	MOV.B	#13, W0
0x212A	0x785880  	MOV.B	W0, [W1++]
0x212C	0xB3C0A0  	MOV.B	#10, W0
0x212E	0x785880  	MOV.B	W0, [W1++]
0x2130	0xB3C000  	MOV.B	#0, W0
0x2132	0x785880  	MOV.B	W0, [W1++]
0x2134	0x470066  	ADD	W14, #6, W0
0x2136	0x781F8A  	PUSH	W10
0x2138	0x780500  	MOV	W0, W10
0x213A	0x07179B  	RCALL	_UART1_Write_Text
0x213C	0x78054F  	POP	W10
;protocol_udp.mpas,345 :: 		Eth_EnableTimer_1s(False);
0x213E	0x781F83  	PUSH	W3
0x2140	0x781F8A  	PUSH	W10
0x2142	0xEF2014  	CLR	W10
0x2144	0x07FD5B  	RCALL	_Eth_EnableTimer_1s
0x2146	0x78054F  	POP	W10
;protocol_udp.mpas,346 :: 		UdpSlot^.Timer := 0;
0x2148	0x205E20  	MOV	#1506, W0
0x214A	0x450100  	ADD	W10, W0, W2
0x214C	0xEF2000  	CLR	W0
0x214E	0xEF2002  	CLR	W1
0x2150	0xBE8900  	MOV.D	W0, [W2]
;protocol_udp.mpas,347 :: 		Eth_EnableTimer_1s(True);
0x2152	0x781F8A  	PUSH	W10
0x2154	0x2FFFFA  	MOV	#65535, W10
0x2156	0x07FD52  	RCALL	_Eth_EnableTimer_1s
0x2158	0x78054F  	POP	W10
;protocol_udp.mpas,348 :: 		UdpSlot^.Valid := Waiting;                                                  // Set it up for waiting
0x215A	0x205E00  	MOV	#1504, W0
0x215C	0x450080  	ADD	W10, W0, W1
0x215E	0x2007F0  	MOV	#127, W0
0x2160	0x780880  	MOV	W0, [W1]
;protocol_udp.mpas,349 :: 		if UdpWaitFor(UdpSlot) then                                                 // Wait for the reply
0x2162	0x07F536  	RCALL	protocol_udp_UdpWaitFor
0x2164	0x7801CF  	POP	W3
0x2166	0xE20000  	CP0	W0
0x2168	0x320002  	BRA Z	L__Eth_SendUdpMessage270
L__Eth_SendUdpMessage300:
;protocol_udp.mpas,350 :: 		Result := True;                                                           // Yup, Success in the wait
0x216A	0x2FFFF3  	MOV	#65535, W3
; Result end address is: 6 (W3)
0x216C	0x370000  	BRA	L__Eth_SendUdpMessage70
L__Eth_SendUdpMessage270:
;protocol_udp.mpas,349 :: 		if UdpWaitFor(UdpSlot) then                                                 // Wait for the reply
;protocol_udp.mpas,350 :: 		Result := True;                                                           // Yup, Success in the wait
L__Eth_SendUdpMessage70:
;protocol_udp.mpas,351 :: 		{$IFDEF DEBUG_STRING}UART1_Write_Text('Udp Waiting Over' + CRLF);{$ENDIF}
; Result start address is: 6 (W3)
0x216E	0x4700E6  	ADD	W14, #6, W1
0x2170	0xB3C550  	MOV.B	#85, W0
0x2172	0x785880  	MOV.B	W0, [W1++]
0x2174	0xB3C640  	MOV.B	#100, W0
0x2176	0x785880  	MOV.B	W0, [W1++]
0x2178	0xB3C700  	MOV.B	#112, W0
0x217A	0x785880  	MOV.B	W0, [W1++]
0x217C	0xB3C200  	MOV.B	#32, W0
0x217E	0x785880  	MOV.B	W0, [W1++]
0x2180	0xB3C570  	MOV.B	#87, W0
0x2182	0x785880  	MOV.B	W0, [W1++]
0x2184	0xB3C610  	MOV.B	#97, W0
0x2186	0x785880  	MOV.B	W0, [W1++]
0x2188	0xB3C690  	MOV.B	#105, W0
0x218A	0x785880  	MOV.B	W0, [W1++]
0x218C	0xB3C740  	MOV.B	#116, W0
0x218E	0x785880  	MOV.B	W0, [W1++]
0x2190	0xB3C690  	MOV.B	#105, W0
0x2192	0x785880  	MOV.B	W0, [W1++]
0x2194	0xB3C6E0  	MOV.B	#110, W0
0x2196	0x785880  	MOV.B	W0, [W1++]
0x2198	0xB3C670  	MOV.B	#103, W0
0x219A	0x785880  	MOV.B	W0, [W1++]
0x219C	0xB3C200  	MOV.B	#32, W0
0x219E	0x785880  	MOV.B	W0, [W1++]
0x21A0	0xB3C4F0  	MOV.B	#79, W0
0x21A2	0x785880  	MOV.B	W0, [W1++]
0x21A4	0xB3C760  	MOV.B	#118, W0
0x21A6	0x785880  	MOV.B	W0, [W1++]
0x21A8	0xB3C650  	MOV.B	#101, W0
0x21AA	0x785880  	MOV.B	W0, [W1++]
0x21AC	0xB3C720  	MOV.B	#114, W0
0x21AE	0x785880  	MOV.B	W0, [W1++]
0x21B0	0xB3C0D0  	MOV.B	#13, W0
0x21B2	0x785880  	MOV.B	W0, [W1++]
0x21B4	0xB3C0A0  	MOV.B	#10, W0
0x21B6	0x785880  	MOV.B	W0, [W1++]
0x21B8	0xB3C000  	MOV.B	#0, W0
0x21BA	0x785880  	MOV.B	W0, [W1++]
0x21BC	0x470066  	ADD	W14, #6, W0
0x21BE	0x780500  	MOV	W0, W10
0x21C0	0x071758  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,352 :: 		end else
0x21C2	0x780083  	MOV	W3, W1
; Result end address is: 6 (W3)
0x21C4	0x370002  	BRA	L__Eth_SendUdpMessage68
L__Eth_SendUdpMessage67:
;protocol_udp.mpas,353 :: 		Result := True;
; Result start address is: 0 (W0)
0x21C6	0x2FFFF0  	MOV	#65535, W0
; Result end address is: 0 (W0)
0x21C8	0x780080  	MOV	W0, W1
L__Eth_SendUdpMessage68:
;protocol_udp.mpas,354 :: 		end;
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
L_end__Eth_SendUdpMessage:
; Result start address is: 2 (W1)
0x21CA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_Eth_SendUdpMessage:
0x21CC	0x78064F  	POP	W12
0x21CE	0x7805CF  	POP	W11
0x21D0	0x78054F  	POP	W10
0x21D2	0xFA8000  	ULNK
0x21D4	0x060000  	RETURN
; end of _Eth_SendUdpMessage
protocol_udp_UdpWaitFor:
0x0BD0	0xFA0014  	LNK	#20
;protocol_udp.mpas,219 :: 		begin  {$IFDEF DEBUG_STRING}UART1_Write_Text('UdpWaitFor' + CRLF);{$ENDIF}
0x0BD2	0x4700E6  	ADD	W14, #6, W1
0x0BD4	0xB3C550  	MOV.B	#85, W0
0x0BD6	0x785880  	MOV.B	W0, [W1++]
0x0BD8	0xB3C640  	MOV.B	#100, W0
0x0BDA	0x785880  	MOV.B	W0, [W1++]
0x0BDC	0xB3C700  	MOV.B	#112, W0
0x0BDE	0x785880  	MOV.B	W0, [W1++]
0x0BE0	0xB3C570  	MOV.B	#87, W0
0x0BE2	0x785880  	MOV.B	W0, [W1++]
0x0BE4	0xB3C610  	MOV.B	#97, W0
0x0BE6	0x785880  	MOV.B	W0, [W1++]
0x0BE8	0xB3C690  	MOV.B	#105, W0
0x0BEA	0x785880  	MOV.B	W0, [W1++]
0x0BEC	0xB3C740  	MOV.B	#116, W0
0x0BEE	0x785880  	MOV.B	W0, [W1++]
0x0BF0	0xB3C460  	MOV.B	#70, W0
0x0BF2	0x785880  	MOV.B	W0, [W1++]
0x0BF4	0xB3C6F0  	MOV.B	#111, W0
0x0BF6	0x785880  	MOV.B	W0, [W1++]
0x0BF8	0xB3C720  	MOV.B	#114, W0
0x0BFA	0x785880  	MOV.B	W0, [W1++]
0x0BFC	0xB3C0D0  	MOV.B	#13, W0
0x0BFE	0x785880  	MOV.B	W0, [W1++]
0x0C00	0xB3C0A0  	MOV.B	#10, W0
0x0C02	0x785880  	MOV.B	W0, [W1++]
0x0C04	0xB3C000  	MOV.B	#0, W0
0x0C06	0x785880  	MOV.B	W0, [W1++]
0x0C08	0x470066  	ADD	W14, #6, W0
0x0C0A	0x781F8A  	PUSH	W10
0x0C0C	0x780500  	MOV	W0, W10
0x0C0E	0x072231  	RCALL	_UART1_Write_Text
;protocol_udp.mpas,220 :: 		Result := False;
0x0C10	0xEF2000  	CLR	W0
0x0C12	0x980700  	MOV	W0, [W14+0]
;protocol_udp.mpas,221 :: 		Eth_EnableTimer_1s(False);                                                    // This may not be an atomic increase so stall the timer and grab a copy
0x0C14	0xEF2014  	CLR	W10
0x0C16	0x0707F2  	RCALL	_Eth_EnableTimer_1s
0x0C18	0x78054F  	POP	W10
;protocol_udp.mpas,222 :: 		LocalTime := Udp^.Timer;                                                      // Grab a copy of the timeout time
0x0C1A	0x205E20  	MOV	#1506, W0
0x0C1C	0x450100  	ADD	W10, W0, W2
0x0C1E	0xBE0012  	MOV.D	[W2], W0
0x0C20	0x980710  	MOV	W0, [W14+2]
0x0C22	0x980721  	MOV	W1, [W14+4]
;protocol_udp.mpas,223 :: 		Eth_EnableTimer_1s(True);
0x0C24	0x781F8A  	PUSH	W10
0x0C26	0x2FFFFA  	MOV	#65535, W10
0x0C28	0x0707E9  	RCALL	_Eth_EnableTimer_1s
0x0C2A	0x78054F  	POP	W10
;protocol_udp.mpas,224 :: 		while LocalTime < UDP_Wait do                                                 // Loop till done....  Timer is reset when the message is sent
L_protocol_udp_UdpWaitFor39:
0x0C2C	0x80E5A1  	MOV	_UDP_Wait, W1
0x0C2E	0xEB0100  	CLR	W2
0x0C30	0x470062  	ADD	W14, #2, W0
0x0C32	0xE10830  	CP	W1, [W0++]
0x0C34	0xE19020  	CPB	W2, [W0--]
0x0C36	0x36001B  	BRA LEU	L_protocol_udp_UdpWaitFor40
L_protocol_udp_UdpWaitFor287:
;protocol_udp.mpas,226 :: 		Do_EthernetProc(n);                                                         // Pump messages looking for the ARP Reply, this can get reentrant so be careful
0x0C38	0x781F8A  	PUSH	W10
0x0C3A	0x20003A  	MOV	#3, W10
0x0C3C	0x07FFB6  	RCALL	_Do_EthernetProc
0x0C3E	0x78054F  	POP	W10
;protocol_udp.mpas,227 :: 		if Udp^.Valid = True then
0x0C40	0x205E00  	MOV	#1504, W0
0x0C42	0x450000  	ADD	W10, W0, W0
0x0C44	0x780090  	MOV	[W0], W1
0x0C46	0x2FFFF0  	MOV	#65535, W0
0x0C48	0xE10800  	CP	W1, W0
0x0C4A	0x3A0003  	BRA NZ	L_protocol_udp_UdpWaitFor44
L_protocol_udp_UdpWaitFor288:
;protocol_udp.mpas,229 :: 		Result := True;
0x0C4C	0x2FFFF0  	MOV	#65535, W0
0x0C4E	0x980700  	MOV	W0, [W14+0]
;protocol_udp.mpas,230 :: 		Break;
0x0C50	0x37000E  	BRA	L_protocol_udp_UdpWaitFor40
;protocol_udp.mpas,231 :: 		end;
L_protocol_udp_UdpWaitFor44:
;protocol_udp.mpas,232 :: 		Eth_EnableTimer_1s(False);                                                  // This may not be an atomic increase so stall the timer and grab a copy
0x0C52	0x781F8A  	PUSH	W10
0x0C54	0xEF2014  	CLR	W10
0x0C56	0x0707D2  	RCALL	_Eth_EnableTimer_1s
0x0C58	0x78054F  	POP	W10
;protocol_udp.mpas,233 :: 		LocalTime := Udp^.Timer;                                                    // Update the local time with a new value
0x0C5A	0x205E20  	MOV	#1506, W0
0x0C5C	0x450100  	ADD	W10, W0, W2
0x0C5E	0xBE0012  	MOV.D	[W2], W0
0x0C60	0x980710  	MOV	W0, [W14+2]
0x0C62	0x980721  	MOV	W1, [W14+4]
;protocol_udp.mpas,234 :: 		Eth_EnableTimer_1s(True);
0x0C64	0x781F8A  	PUSH	W10
0x0C66	0x2FFFFA  	MOV	#65535, W10
0x0C68	0x0707C9  	RCALL	_Eth_EnableTimer_1s
0x0C6A	0x78054F  	POP	W10
;protocol_udp.mpas,235 :: 		end;
0x0C6C	0x37FFDF  	BRA	L_protocol_udp_UdpWaitFor39
L_protocol_udp_UdpWaitFor40:
;protocol_udp.mpas,236 :: 		if Result = False then
0x0C6E	0x90000E  	MOV	[W14+0], W0
0x0C70	0xE10060  	CP	W0, #0
0x0C72	0x3A0001  	BRA NZ	L_protocol_udp_UdpWaitFor47
L_protocol_udp_UdpWaitFor289:
;protocol_udp.mpas,237 :: 		Eth_FreeUdpSlot(Udp)                                                        // If we failed then release the UdpSlot
0x0C74	0x07FD6B  	RCALL	_Eth_FreeUdpSlot
L_protocol_udp_UdpWaitFor47:
;protocol_udp.mpas,238 :: 		end;
0x0C76	0x90000E  	MOV	[W14+0], W0
L_end_UdpWaitFor:
0x0C78	0xFA8000  	ULNK
0x0C7A	0x060000  	RETURN
; end of protocol_udp_UdpWaitFor
_Eth_FreeUdpSlot:
;protocol_udp.mpas,243 :: 		begin
;protocol_udp.mpas,244 :: 		if UdpSlot <> nil then
0x074C	0xE15060  	CP	W10, #0
0x074E	0x320004  	BRA Z	L__Eth_FreeUdpSlot51
L__Eth_FreeUdpSlot291:
;protocol_udp.mpas,245 :: 		UdpSlot^.Valid := False;
0x0750	0x205E00  	MOV	#1504, W0
0x0752	0x450080  	ADD	W10, W0, W1
0x0754	0xEF2000  	CLR	W0
0x0756	0x780880  	MOV	W0, [W1]
L__Eth_FreeUdpSlot51:
;protocol_udp.mpas,246 :: 		end;
L_end_Eth_FreeUdpSlot:
0x0758	0x060000  	RETURN
; end of _Eth_FreeUdpSlot
_PingAndPrint:
0x500C	0xFA000E  	LNK	#14
;ENC624J600_Exampe.mpas,56 :: 		begin
;ENC624J600_Exampe.mpas,57 :: 		Slot := Eth_SendPing(TestIP);
0x500E	0x781F8A  	PUSH	W10
0x5010	0x07EE95  	RCALL	_Eth_SendPing
; Slot start address is: 2 (W1)
0x5012	0x780080  	MOV	W0, W1
;ENC624J600_Exampe.mpas,58 :: 		if Slot <> nil then
0x5014	0xE10060  	CP	W0, #0
0x5016	0x320007  	BRA Z	L__PingAndPrint11
L__PingAndPrint74:
;ENC624J600_Exampe.mpas,60 :: 		Eth_PrintPingCacheSlot(Slot);
0x5018	0x781F81  	PUSH	W1
0x501A	0x780501  	MOV	W1, W10
0x501C	0x07ED60  	RCALL	_Eth_PrintPingCacheSlot
0x501E	0x7800CF  	POP	W1
;ENC624J600_Exampe.mpas,61 :: 		Slot^.Valid := False;
0x5020	0xEF2000  	CLR	W0
0x5022	0x780880  	MOV	W0, [W1]
; Slot end address is: 2 (W1)
;ENC624J600_Exampe.mpas,62 :: 		end else
0x5024	0x370020  	BRA	L__PingAndPrint12
L__PingAndPrint11:
;ENC624J600_Exampe.mpas,63 :: 		UART1_Write_Text('Ping Failed' + CRLF);
0x5026	0x4700E0  	ADD	W14, #0, W1
0x5028	0xB3C500  	MOV.B	#80, W0
0x502A	0x785880  	MOV.B	W0, [W1++]
0x502C	0xB3C690  	MOV.B	#105, W0
0x502E	0x785880  	MOV.B	W0, [W1++]
0x5030	0xB3C6E0  	MOV.B	#110, W0
0x5032	0x785880  	MOV.B	W0, [W1++]
0x5034	0xB3C670  	MOV.B	#103, W0
0x5036	0x785880  	MOV.B	W0, [W1++]
0x5038	0xB3C200  	MOV.B	#32, W0
0x503A	0x785880  	MOV.B	W0, [W1++]
0x503C	0xB3C460  	MOV.B	#70, W0
0x503E	0x785880  	MOV.B	W0, [W1++]
0x5040	0xB3C610  	MOV.B	#97, W0
0x5042	0x785880  	MOV.B	W0, [W1++]
0x5044	0xB3C690  	MOV.B	#105, W0
0x5046	0x785880  	MOV.B	W0, [W1++]
0x5048	0xB3C6C0  	MOV.B	#108, W0
0x504A	0x785880  	MOV.B	W0, [W1++]
0x504C	0xB3C650  	MOV.B	#101, W0
0x504E	0x785880  	MOV.B	W0, [W1++]
0x5050	0xB3C640  	MOV.B	#100, W0
0x5052	0x785880  	MOV.B	W0, [W1++]
0x5054	0xB3C0D0  	MOV.B	#13, W0
0x5056	0x785880  	MOV.B	W0, [W1++]
0x5058	0xB3C0A0  	MOV.B	#10, W0
0x505A	0x785880  	MOV.B	W0, [W1++]
0x505C	0xB3C000  	MOV.B	#0, W0
0x505E	0x785880  	MOV.B	W0, [W1++]
0x5060	0x470060  	ADD	W14, #0, W0
0x5062	0x780500  	MOV	W0, W10
0x5064	0x070006  	RCALL	_UART1_Write_Text
L__PingAndPrint12:
;ENC624J600_Exampe.mpas,64 :: 		UART1_Write_Text(CRLF);
0x5066	0x28030A  	MOV	#lo_addr(_CRLF), W10
0x5068	0x070004  	RCALL	_UART1_Write_Text
;ENC624J600_Exampe.mpas,65 :: 		end;
L_end_PingAndPrint:
0x506A	0x78054F  	POP	W10
0x506C	0xFA8000  	ULNK
0x506E	0x060000  	RETURN
; end of _PingAndPrint
_Eth_SendPing:
0x2D3C	0xFA000C  	LNK	#12
;protocol_ping.mpas,116 :: 		Begin
;protocol_ping.mpas,117 :: 		Result := nil;
0x2D3E	0x781F8A  	PUSH	W10
0x2D40	0x781F8B  	PUSH	W11
0x2D42	0x781F8C  	PUSH	W12
0x2D44	0xEF2000  	CLR	W0
0x2D46	0x980700  	MOV	W0, [W14+0]
;protocol_ping.mpas,119 :: 		ArpSlot := Eth_Arp_MapMacAddress(TargetIP);                                   // Make sure the target exists, or did exist and we have a cache
0x2D48	0x0706A5  	RCALL	_Eth_Arp_MapMacAddress
0x2D4A	0x980750  	MOV	W0, [W14+10]
;protocol_ping.mpas,120 :: 		if ArpSlot = nil then
0x2D4C	0xE10060  	CP	W0, #0
0x2D4E	0x3A0001  	BRA NZ	L__Eth_SendPing32
L__Eth_SendPing87:
;protocol_ping.mpas,123 :: 		Exit;
0x2D50	0x370108  	BRA	L_end__Eth_SendPing
;protocol_ping.mpas,124 :: 		end;
L__Eth_SendPing32:
;protocol_ping.mpas,128 :: 		OldestSlot := -1;
0x2D52	0x2FFFF0  	MOV	#65535, W0
0x2D54	0x980730  	MOV	W0, [W14+6]
;protocol_ping.mpas,129 :: 		EmptySlot := -1;
0x2D56	0x2FFFF0  	MOV	#65535, W0
0x2D58	0x980740  	MOV	W0, [W14+8]
;protocol_ping.mpas,130 :: 		i := 0;
0x2D5A	0xEF2000  	CLR	W0
0x2D5C	0x980710  	MOV	W0, [W14+2]
;protocol_ping.mpas,131 :: 		while i < PING_CACHE_LENGTH do
L__Eth_SendPing35:
0x2D5E	0x90001E  	MOV	[W14+2], W0
0x2D60	0xE10062  	CP	W0, #2
0x2D62	0x310072  	BRA GEU	L__Eth_SendPing36
L__Eth_SendPing88:
;protocol_ping.mpas,133 :: 		if PingCache[i].Valid = False then
0x2D64	0x200121  	MOV	#18, W1
0x2D66	0x470062  	ADD	W14, #2, W0
0x2D68	0xB80910  	MUL.UU	W1, [W0], W2
0x2D6A	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2D6C	0x400002  	ADD	W0, W2, W0
0x2D6E	0x780010  	MOV	[W0], W0
0x2D70	0xE10060  	CP	W0, #0
0x2D72	0x3A003E  	BRA NZ	L__Eth_SendPing40
L__Eth_SendPing89:
;protocol_ping.mpas,135 :: 		PingCache[i].Valid := Waiting;
0x2D74	0x200121  	MOV	#18, W1
0x2D76	0x470062  	ADD	W14, #2, W0
0x2D78	0xB80910  	MUL.UU	W1, [W0], W2
0x2D7A	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2D7C	0x400082  	ADD	W0, W2, W1
0x2D7E	0x2007F0  	MOV	#127, W0
0x2D80	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,136 :: 		memcpy(@PingCache[i].ip[0], @ArpSlot^.Ip[0], 4);
0x2D82	0x200121  	MOV	#18, W1
0x2D84	0x470062  	ADD	W14, #2, W0
0x2D86	0xB80910  	MUL.UU	W1, [W0], W2
0x2D88	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2D8A	0x400002  	ADD	W0, W2, W0
0x2D8C	0x4000E2  	ADD	W0, #2, W1
0x2D8E	0x90005E  	MOV	[W14+10], W0
0x2D90	0x400066  	ADD	W0, #6, W0
0x2D92	0x20004C  	MOV	#4, W12
0x2D94	0x780580  	MOV	W0, W11
0x2D96	0x780501  	MOV	W1, W10
0x2D98	0x07F6CC  	RCALL	_memcpy
;protocol_ping.mpas,137 :: 		memcpy(@PingCache[i].mac[0], @ArpSlot^.Mac[0], 6);
0x2D9A	0x200121  	MOV	#18, W1
0x2D9C	0x470062  	ADD	W14, #2, W0
0x2D9E	0xB80910  	MUL.UU	W1, [W0], W2
0x2DA0	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2DA2	0x400002  	ADD	W0, W2, W0
0x2DA4	0x4000E6  	ADD	W0, #6, W1
0x2DA6	0x90005E  	MOV	[W14+10], W0
0x2DA8	0x40006A  	ADD	W0, #10, W0
0x2DAA	0x20006C  	MOV	#6, W12
0x2DAC	0x780580  	MOV	W0, W11
0x2DAE	0x780501  	MOV	W1, W10
0x2DB0	0x07F6C0  	RCALL	_memcpy
;protocol_ping.mpas,138 :: 		Eth_EnableTimer_1s(False);                                                // Don't change the timer values in the middle of a comparison
0x2DB2	0xEF2014  	CLR	W10
0x2DB4	0x07F723  	RCALL	_Eth_EnableTimer_1s
;protocol_ping.mpas,139 :: 		PingCache[i].Time := 0;
0x2DB6	0x200121  	MOV	#18, W1
0x2DB8	0x470062  	ADD	W14, #2, W0
0x2DBA	0xB80910  	MUL.UU	W1, [W0], W2
0x2DBC	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2DBE	0x400002  	ADD	W0, W2, W0
0x2DC0	0x4000EC  	ADD	W0, #12, W1
0x2DC2	0xEF2000  	CLR	W0
0x2DC4	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,140 :: 		PingCache[i].RoundTripTime := 0;
0x2DC6	0x200121  	MOV	#18, W1
0x2DC8	0x470062  	ADD	W14, #2, W0
0x2DCA	0xB80910  	MUL.UU	W1, [W0], W2
0x2DCC	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2DCE	0x400002  	ADD	W0, W2, W0
0x2DD0	0x4000EE  	ADD	W0, #14, W1
0x2DD2	0xEF2000  	CLR	W0
0x2DD4	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,141 :: 		Eth_EnableTimer_1s(True);                                                 // Don't change the timer values in the middle of a comparison
0x2DD6	0x2FFFFA  	MOV	#65535, W10
0x2DD8	0x07F711  	RCALL	_Eth_EnableTimer_1s
;protocol_ping.mpas,142 :: 		PingCache[i].RoundTripTTL := 255;
0x2DDA	0x200121  	MOV	#18, W1
0x2DDC	0x470062  	ADD	W14, #2, W0
0x2DDE	0xB80910  	MUL.UU	W1, [W0], W2
0x2DE0	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2DE2	0x400002  	ADD	W0, W2, W0
0x2DE4	0x4000F0  	ADD	W0, #16, W1
0x2DE6	0xB3CFF0  	MOV.B	#255, W0
0x2DE8	0x784880  	MOV.B	W0, [W1]
;protocol_ping.mpas,143 :: 		EmptySlot := i;
0x2DEA	0x90001E  	MOV	[W14+2], W0
0x2DEC	0x980740  	MOV	W0, [W14+8]
;protocol_ping.mpas,144 :: 		Break;
0x2DEE	0x37002C  	BRA	L__Eth_SendPing36
;protocol_ping.mpas,145 :: 		end;
L__Eth_SendPing40:
;protocol_ping.mpas,147 :: 		if PingCache[i].Valid <> False then                                         // If the slot is Waiting or True then use it for the oldest slot test
0x2DF0	0x200121  	MOV	#18, W1
0x2DF2	0x470062  	ADD	W14, #2, W0
0x2DF4	0xB80910  	MUL.UU	W1, [W0], W2
0x2DF6	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2DF8	0x400002  	ADD	W0, W2, W0
0x2DFA	0x780010  	MOV	[W0], W0
0x2DFC	0xE10060  	CP	W0, #0
0x2DFE	0x320020  	BRA Z	L__Eth_SendPing43
L__Eth_SendPing90:
;protocol_ping.mpas,149 :: 		if OldestSlot < 0 then
0x2E00	0x90003E  	MOV	[W14+6], W0
0x2E02	0xE10060  	CP	W0, #0
0x2E04	0x3D0003  	BRA GE	L__Eth_SendPing46
L__Eth_SendPing91:
;protocol_ping.mpas,150 :: 		OldestSlot := i
0x2E06	0x90001E  	MOV	[W14+2], W0
0x2E08	0x980730  	MOV	W0, [W14+6]
0x2E0A	0x37001A  	BRA	L__Eth_SendPing47
;protocol_ping.mpas,151 :: 		else begin
L__Eth_SendPing46:
;protocol_ping.mpas,152 :: 		Eth_EnableTimer_1s(False);                                              // Don't change the timer values in the middle of a comparison
0x2E0C	0x781F8A  	PUSH	W10
0x2E0E	0xEF2014  	CLR	W10
0x2E10	0x07F6F5  	RCALL	_Eth_EnableTimer_1s
0x2E12	0x78054F  	POP	W10
;protocol_ping.mpas,153 :: 		if PingCache[i].Time > PingCache[OldestSlot].Time then
0x2E14	0x200121  	MOV	#18, W1
0x2E16	0x470062  	ADD	W14, #2, W0
0x2E18	0xB80910  	MUL.UU	W1, [W0], W2
0x2E1A	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2E1C	0x400002  	ADD	W0, W2, W0
0x2E1E	0x40026C  	ADD	W0, #12, W4
0x2E20	0x200121  	MOV	#18, W1
0x2E22	0x470066  	ADD	W14, #6, W0
0x2E24	0xB80910  	MUL.UU	W1, [W0], W2
0x2E26	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2E28	0x400002  	ADD	W0, W2, W0
0x2E2A	0x40006C  	ADD	W0, #12, W0
0x2E2C	0x780090  	MOV	[W0], W1
0x2E2E	0x780014  	MOV	[W4], W0
0x2E30	0xE10001  	CP	W0, W1
0x2E32	0x360002  	BRA LEU	L__Eth_SendPing49
L__Eth_SendPing92:
;protocol_ping.mpas,154 :: 		OldestSlot := i;
0x2E34	0x90001E  	MOV	[W14+2], W0
0x2E36	0x980730  	MOV	W0, [W14+6]
L__Eth_SendPing49:
;protocol_ping.mpas,155 :: 		Eth_EnableTimer_1s(True);                                               // Don't change the timer values in the middle of a comparison
0x2E38	0x781F8A  	PUSH	W10
0x2E3A	0x2FFFFA  	MOV	#65535, W10
0x2E3C	0x07F6DF  	RCALL	_Eth_EnableTimer_1s
0x2E3E	0x78054F  	POP	W10
;protocol_ping.mpas,156 :: 		end;
L__Eth_SendPing47:
;protocol_ping.mpas,158 :: 		end;
L__Eth_SendPing43:
;protocol_ping.mpas,160 :: 		Inc(i)
0x2E40	0x90009E  	MOV	[W14+2], W1
0x2E42	0x470062  	ADD	W14, #2, W0
0x2E44	0x408861  	ADD	W1, #1, [W0]
;protocol_ping.mpas,161 :: 		end;
0x2E46	0x37FF8B  	BRA	L__Eth_SendPing35
L__Eth_SendPing36:
;protocol_ping.mpas,163 :: 		if EmptySlot < 0 then
0x2E48	0x90004E  	MOV	[W14+8], W0
0x2E4A	0xE10060  	CP	W0, #0
0x2E4C	0x3D0002  	BRA GE	L__Eth_SendPing52
L__Eth_SendPing93:
;protocol_ping.mpas,164 :: 		EmptySlot := OldestSlot;
0x2E4E	0x90003E  	MOV	[W14+6], W0
0x2E50	0x980740  	MOV	W0, [W14+8]
L__Eth_SendPing52:
;protocol_ping.mpas,167 :: 		CopyRamToEthMem(@ArpSlot^.Mac[0], TXSTART,6);                                 // Copy the destination MAC address into the transmit buffer
0x2E52	0x90005E  	MOV	[W14+10], W0
0x2E54	0x40006A  	ADD	W0, #10, W0
0x2E56	0x20006C  	MOV	#6, W12
0x2E58	0xEF2016  	CLR	W11
0x2E5A	0x780500  	MOV	W0, W10
0x2E5C	0x07FAD8  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,168 :: 		CopyRamToEthMem(@eth_mac, TXSTART+6, 6);                                      // Copy the source MAC address into the transmit buffer
0x2E5E	0x20006C  	MOV	#6, W12
0x2E60	0x20006B  	MOV	#6, W11
0x2E62	0x21018A  	MOV	#lo_addr(_eth_mac), W10
0x2E64	0x07FAD4  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,169 :: 		WriteToEthMem(TXSTART+12, $08);                                               // Hi EtherType = Ethernet protocol vIP4 ($8000)
0x2E66	0xB3C08B  	MOV.B	#8, W11
0x2E68	0x2000CA  	MOV	#12, W10
0x2E6A	0x07FA6F  	RCALL	_WriteToEthMem
;protocol_ping.mpas,170 :: 		Eth_PutByte($00);                                                             // EtherType Lo
0x2E6C	0xEF2014  	CLR	W10
0x2E6E	0x07FA65  	RCALL	_Eth_PutByte
;protocol_ping.mpas,171 :: 		i := 60;                                                                      // Message Length, minus the MAC address header (that is 20 bytes without the 802.1Q tag else add 2)
0x2E70	0x2003C0  	MOV	#60, W0
0x2E72	0x980710  	MOV	W0, [W14+2]
;protocol_ping.mpas,174 :: 		Eth_PutByte($45);                                                             // Version = 4 (IPV4), Heder Size = 5 - 32 bit words (5*4=20 bytes)
0x2E74	0xB3C45A  	MOV.B	#69, W10
0x2E76	0x07FA61  	RCALL	_Eth_PutByte
;protocol_ping.mpas,175 :: 		Eth_PutByte($00);                                                             // DSCP/ECN
0x2E78	0xEF2014  	CLR	W10
0x2E7A	0x07FA5F  	RCALL	_Eth_PutByte
;protocol_ping.mpas,176 :: 		Eth_PutByte(Hi(i));                                                           // Hi Total length
0x2E7C	0x470062  	ADD	W14, #2, W0
0x2E7E	0xEC2000  	INC	W0
0x2E80	0x784010  	MOV.B	[W0], W0
0x2E82	0x784500  	MOV.B	W0, W10
0x2E84	0x07FA5A  	RCALL	_Eth_PutByte
;protocol_ping.mpas,177 :: 		Eth_PutByte(Lo(i));                                                           // Lo Total length
0x2E86	0x90452E  	MOV.B	[W14+2], W10
0x2E88	0x07FA58  	RCALL	_Eth_PutByte
;protocol_ping.mpas,178 :: 		Eth_PutByte($AC);                                                             // Hi Identification    0xAC80, significance?  don't know yet
0x2E8A	0xB3CACA  	MOV.B	#172, W10
0x2E8C	0x07FA56  	RCALL	_Eth_PutByte
;protocol_ping.mpas,179 :: 		Eth_PutByte($80);                                                             // Lo Identification
0x2E8E	0xB3C80A  	MOV.B	#128, W10
0x2E90	0x07FA54  	RCALL	_Eth_PutByte
;protocol_ping.mpas,180 :: 		Eth_PutByte($00);                                                             // Flags/Fragment Offset
0x2E92	0xEF2014  	CLR	W10
0x2E94	0x07FA52  	RCALL	_Eth_PutByte
;protocol_ping.mpas,181 :: 		Eth_PutByte($00);                                                             // Fragment Offset
0x2E96	0xEF2014  	CLR	W10
0x2E98	0x07FA50  	RCALL	_Eth_PutByte
;protocol_ping.mpas,182 :: 		Eth_PutByte($80);                                                             // Time to live   (only allow 128 hops before the packet dies)
0x2E9A	0xB3C80A  	MOV.B	#128, W10
0x2E9C	0x07FA4E  	RCALL	_Eth_PutByte
;protocol_ping.mpas,183 :: 		Eth_PutByte($01);                                                             // ICMP Protocol
0x2E9E	0xB3C01A  	MOV.B	#1, W10
0x2EA0	0x07FA4C  	RCALL	_Eth_PutByte
;protocol_ping.mpas,184 :: 		Eth_PutByte($00);                                                             // Hi Clear Checksum until all the bytes are there to do the checksum on
0x2EA2	0xEF2014  	CLR	W10
0x2EA4	0x07FA4A  	RCALL	_Eth_PutByte
;protocol_ping.mpas,185 :: 		Eth_PutByte($00);                                                             // Lo Clear Checksum until all the bytes are there to do the checksum on
0x2EA6	0xEF2014  	CLR	W10
0x2EA8	0x07FA48  	RCALL	_Eth_PutByte
;protocol_ping.mpas,186 :: 		CopyRamToEthMem(@eth_ip_addr, TXSTART+26, 4);                                 // Copy our IP address to the transmit buffer
0x2EAA	0x20004C  	MOV	#4, W12
0x2EAC	0x2001AB  	MOV	#26, W11
0x2EAE	0x21088A  	MOV	#lo_addr(_eth_ip_addr), W10
0x2EB0	0x07FAAE  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,187 :: 		CopyRamToEthMem(@ArpSlot^.Ip[0], TXSTART+30, 4);                              // Copy the dest IP address to the transmit buffer
0x2EB2	0x90005E  	MOV	[W14+10], W0
0x2EB4	0x400066  	ADD	W0, #6, W0
0x2EB6	0x20004C  	MOV	#4, W12
0x2EB8	0x2001EB  	MOV	#30, W11
0x2EBA	0x780500  	MOV	W0, W10
0x2EBC	0x07FAA8  	RCALL	_CopyRamToEthMem
;protocol_ping.mpas,188 :: 		cksum := Eth_Cksum(TXSTART+14, 20);                                           // Calculate the checksum
0x2EBE	0x20014B  	MOV	#20, W11
0x2EC0	0x2000EA  	MOV	#14, W10
0x2EC2	0x07F213  	RCALL	_Eth_Cksum
0x2EC4	0x980720  	MOV	W0, [W14+4]
;protocol_ping.mpas,189 :: 		WriteToEthMem(TXSTART+24, Hi(cksum));                                         // Hi Checksum
0x2EC6	0x470064  	ADD	W14, #4, W0
0x2EC8	0xEC2000  	INC	W0
0x2ECA	0x784010  	MOV.B	[W0], W0
0x2ECC	0x784580  	MOV.B	W0, W11
0x2ECE	0x20018A  	MOV	#24, W10
0x2ED0	0x07FA3C  	RCALL	_WriteToEthMem
;protocol_ping.mpas,190 :: 		Eth_PutByte(Lo(cksum));                                                       // Lo Checksum
0x2ED2	0x90454E  	MOV.B	[W14+4], W10
0x2ED4	0x07FA32  	RCALL	_Eth_PutByte
;protocol_ping.mpas,194 :: 		WriteToEthMem(TXSTART+34, $08);                                               // Type of message is Echo Request (8)
0x2ED6	0xB3C08B  	MOV.B	#8, W11
0x2ED8	0x20022A  	MOV	#34, W10
0x2EDA	0x07FA37  	RCALL	_WriteToEthMem
;protocol_ping.mpas,195 :: 		Eth_PutByte($00);                                                             // Code is Echo Request (0)
0x2EDC	0xEF2014  	CLR	W10
0x2EDE	0x07FA2D  	RCALL	_Eth_PutByte
;protocol_ping.mpas,196 :: 		Eth_PutByte($00);                                                             // Hi Zero checksum for later calculation
0x2EE0	0xEF2014  	CLR	W10
0x2EE2	0x07FA2B  	RCALL	_Eth_PutByte
;protocol_ping.mpas,197 :: 		Eth_PutByte($00);                                                             // Lo Zero checksum for later calculation
0x2EE4	0xEF2014  	CLR	W10
0x2EE6	0x07FA29  	RCALL	_Eth_PutByte
;protocol_ping.mpas,198 :: 		Eth_PutByte($03);                                                             // Hi Identifier  (defined my implementer)
0x2EE8	0xB3C03A  	MOV.B	#3, W10
0x2EEA	0x07FA27  	RCALL	_Eth_PutByte
;protocol_ping.mpas,199 :: 		Eth_PutByte($00);                                                             // Lo Identifier
0x2EEC	0xEF2014  	CLR	W10
0x2EEE	0x07FA25  	RCALL	_Eth_PutByte
;protocol_ping.mpas,200 :: 		Eth_PutByte($14);                                                             // Hi Sequence number  (defined my implementer)
0x2EF0	0xB3C14A  	MOV.B	#20, W10
0x2EF2	0x07FA23  	RCALL	_Eth_PutByte
;protocol_ping.mpas,201 :: 		Eth_PutByte($0A);                                                             // Lo Sequence number
0x2EF4	0xB3C0AA  	MOV.B	#10, W10
0x2EF6	0x07FA21  	RCALL	_Eth_PutByte
;protocol_ping.mpas,202 :: 		i := 48;                                                                      // Load up the payload
0x2EF8	0x200300  	MOV	#48, W0
0x2EFA	0x980710  	MOV	W0, [W14+2]
;protocol_ping.mpas,204 :: 		while i < 80 do                                                               //
L__Eth_SendPing55:
0x2EFC	0x200501  	MOV	#80, W1
0x2EFE	0x470062  	ADD	W14, #2, W0
0x2F00	0xE10810  	CP	W1, [W0]
0x2F02	0x360008  	BRA LEU	L__Eth_SendPing56
L__Eth_SendPing94:
;protocol_ping.mpas,206 :: 		Eth_PutByte(i);
0x2F04	0x781F8A  	PUSH	W10
0x2F06	0x90452E  	MOV.B	[W14+2], W10
0x2F08	0x07FA18  	RCALL	_Eth_PutByte
0x2F0A	0x78054F  	POP	W10
;protocol_ping.mpas,207 :: 		inc(i);
0x2F0C	0x200011  	MOV	#1, W1
0x2F0E	0x470062  	ADD	W14, #2, W0
0x2F10	0x408810  	ADD	W1, [W0], [W0]
;protocol_ping.mpas,208 :: 		end;
0x2F12	0x37FFF4  	BRA	L__Eth_SendPing55
L__Eth_SendPing56:
;protocol_ping.mpas,209 :: 		cksum := Eth_Cksum(TXSTART+34, 40);                                           // Calculate the checksum
0x2F14	0x781F8A  	PUSH	W10
0x2F16	0x20028B  	MOV	#40, W11
0x2F18	0x20022A  	MOV	#34, W10
0x2F1A	0x07F1E7  	RCALL	_Eth_Cksum
0x2F1C	0x980720  	MOV	W0, [W14+4]
;protocol_ping.mpas,210 :: 		WriteToEthMem(TXSTART+36, Hi(cksum));                                         // Hi Checksum
0x2F1E	0x470064  	ADD	W14, #4, W0
0x2F20	0xEC2000  	INC	W0
0x2F22	0x784010  	MOV.B	[W0], W0
0x2F24	0x784580  	MOV.B	W0, W11
0x2F26	0x20024A  	MOV	#36, W10
0x2F28	0x07FA10  	RCALL	_WriteToEthMem
;protocol_ping.mpas,211 :: 		Eth_PutByte(Lo(cksum));                                                       // Lo Checksum
0x2F2A	0x90454E  	MOV.B	[W14+4], W10
0x2F2C	0x07FA06  	RCALL	_Eth_PutByte
;protocol_ping.mpas,212 :: 		Eth_SendPacket(74);                                                           // Ship it...
0x2F2E	0x2004AA  	MOV	#74, W10
0x2F30	0x07FA1A  	RCALL	_Eth_SendPacket
;protocol_ping.mpas,214 :: 		PingCache[EmptySlot].Time := 0;                                               // Zero Time
0x2F32	0x200121  	MOV	#18, W1
0x2F34	0x470068  	ADD	W14, #8, W0
0x2F36	0xB80910  	MUL.UU	W1, [W0], W2
0x2F38	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2F3A	0x400002  	ADD	W0, W2, W0
0x2F3C	0x4000EC  	ADD	W0, #12, W1
0x2F3E	0xEF2000  	CLR	W0
0x2F40	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,216 :: 		if PingWaitFor(@PingCache[EmptySlot]) then                                    // Wait for the reply
0x2F42	0x200121  	MOV	#18, W1
0x2F44	0x470068  	ADD	W14, #8, W0
0x2F46	0xB80910  	MUL.UU	W1, [W0], W2
0x2F48	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x2F4A	0x400002  	ADD	W0, W2, W0
0x2F4C	0x780500  	MOV	W0, W10
0x2F4E	0x07F94B  	RCALL	protocol_ping_PingWaitFor
0x2F50	0x78054F  	POP	W10
0x2F52	0xE20000  	CP0	W0
0x2F54	0x320006  	BRA Z	L__Eth_SendPing60
L__Eth_SendPing95:
;protocol_ping.mpas,217 :: 		Result := @PingCache[EmptySlot]
0x2F56	0x200121  	MOV	#18, W1
0x2F58	0x470068  	ADD	W14, #8, W0
0x2F5A	0xB80910  	MUL.UU	W1, [W0], W2
0x2F5C	0x2254C1  	MOV	#lo_addr(_PingCache), W1
0x2F5E	0x470060  	ADD	W14, #0, W0
0x2F60	0x408802  	ADD	W1, W2, [W0]
L__Eth_SendPing60:
;protocol_ping.mpas,218 :: 		End;
L_end__Eth_SendPing:
0x2F62	0x90000E  	MOV	[W14+0], W0
L_end_Eth_SendPing:
0x2F64	0x78064F  	POP	W12
0x2F66	0x7805CF  	POP	W11
0x2F68	0x78054F  	POP	W10
0x2F6A	0xFA8000  	ULNK
0x2F6C	0x060000  	RETURN
; end of _Eth_SendPing
protocol_ping_PingWaitFor:
0x21E6	0xFA0006  	LNK	#6
;protocol_ping.mpas,83 :: 		begin
;protocol_ping.mpas,84 :: 		Result := False;
0x21E8	0xEF2000  	CLR	W0
0x21EA	0x980700  	MOV	W0, [W14+0]
;protocol_ping.mpas,86 :: 		Eth_EnableTimer_1s(False);                                                    // This may not be an atomic increase so stall the timer and grab a copy
0x21EC	0x781F8A  	PUSH	W10
0x21EE	0xEF2014  	CLR	W10
0x21F0	0x07FD05  	RCALL	_Eth_EnableTimer_1s
0x21F2	0x78054F  	POP	W10
;protocol_ping.mpas,87 :: 		LocalTime := Ping^.Time;                                                      // Grab a copy of the timeout time
0x21F4	0x45006C  	ADD	W10, #12, W0
0x21F6	0x780010  	MOV	[W0], W0
0x21F8	0xEB0080  	CLR	W1
0x21FA	0x980710  	MOV	W0, [W14+2]
0x21FC	0x980721  	MOV	W1, [W14+4]
;protocol_ping.mpas,88 :: 		Eth_EnableTimer_1s(True);
0x21FE	0x781F8A  	PUSH	W10
0x2200	0x2FFFFA  	MOV	#65535, W10
0x2202	0x07FCFC  	RCALL	_Eth_EnableTimer_1s
0x2204	0x78054F  	POP	W10
;protocol_ping.mpas,89 :: 		while LocalTime < PING_Wait do                                                // Loop till done....  Timer is reset when the message is sent
L_protocol_ping_PingWaitFor20:
0x2206	0x812921  	MOV	_PING_Wait, W1
0x2208	0xEB0100  	CLR	W2
0x220A	0x470062  	ADD	W14, #2, W0
0x220C	0xE10830  	CP	W1, [W0++]
0x220E	0xE19020  	CPB	W2, [W0--]
0x2210	0x360019  	BRA LEU	L_protocol_ping_PingWaitFor21
L_protocol_ping_PingWaitFor83:
;protocol_ping.mpas,91 :: 		Do_EthernetProc(n);                                                         // Pump messages looking for the ARP Reply, this can get reentrant so be careful
0x2212	0x781F8A  	PUSH	W10
0x2214	0x20003A  	MOV	#3, W10
0x2216	0x07F4C9  	RCALL	_Do_EthernetProc
0x2218	0x78054F  	POP	W10
;protocol_ping.mpas,92 :: 		if Ping^.Valid = True then
0x221A	0x78009A  	MOV	[W10], W1
0x221C	0x2FFFF0  	MOV	#65535, W0
0x221E	0xE10800  	CP	W1, W0
0x2220	0x3A0003  	BRA NZ	L_protocol_ping_PingWaitFor25
L_protocol_ping_PingWaitFor84:
;protocol_ping.mpas,94 :: 		Result := True;
0x2222	0x2FFFF0  	MOV	#65535, W0
0x2224	0x980700  	MOV	W0, [W14+0]
;protocol_ping.mpas,95 :: 		Break;
0x2226	0x37000E  	BRA	L_protocol_ping_PingWaitFor21
;protocol_ping.mpas,96 :: 		end;
L_protocol_ping_PingWaitFor25:
;protocol_ping.mpas,97 :: 		Eth_EnableTimer_1s(False);                                                  // This may not be an atomic increase so stall the timer and grab a copy
0x2228	0x781F8A  	PUSH	W10
0x222A	0xEF2014  	CLR	W10
0x222C	0x07FCE7  	RCALL	_Eth_EnableTimer_1s
0x222E	0x78054F  	POP	W10
;protocol_ping.mpas,98 :: 		LocalTime := Ping^.Time;                                                    // Update the local time with a new value
0x2230	0x45006C  	ADD	W10, #12, W0
0x2232	0x780010  	MOV	[W0], W0
0x2234	0xEB0080  	CLR	W1
0x2236	0x980710  	MOV	W0, [W14+2]
0x2238	0x980721  	MOV	W1, [W14+4]
;protocol_ping.mpas,99 :: 		Eth_EnableTimer_1s(True);
0x223A	0x781F8A  	PUSH	W10
0x223C	0x2FFFFA  	MOV	#65535, W10
0x223E	0x07FCDE  	RCALL	_Eth_EnableTimer_1s
0x2240	0x78054F  	POP	W10
;protocol_ping.mpas,100 :: 		end;
0x2242	0x37FFE1  	BRA	L_protocol_ping_PingWaitFor20
L_protocol_ping_PingWaitFor21:
;protocol_ping.mpas,101 :: 		if Result = False then
0x2244	0x90000E  	MOV	[W14+0], W0
0x2246	0xE10060  	CP	W0, #0
0x2248	0x3A0002  	BRA NZ	L_protocol_ping_PingWaitFor28
L_protocol_ping_PingWaitFor85:
;protocol_ping.mpas,102 :: 		Ping^.Valid := False;                                                       // If we failed then release the slot
0x224A	0xEF2000  	CLR	W0
0x224C	0x780D00  	MOV	W0, [W10]
L_protocol_ping_PingWaitFor28:
;protocol_ping.mpas,103 :: 		end;
0x224E	0x90000E  	MOV	[W14+0], W0
L_end_PingWaitFor:
0x2250	0xFA8000  	ULNK
0x2252	0x060000  	RETURN
; end of protocol_ping_PingWaitFor
_Eth_PrintPingCacheSlot:
0x2ADE	0xFA0048  	LNK	#72
;protocol_ping.mpas,276 :: 		begin
;protocol_ping.mpas,277 :: 		LongWordToStr(Slot^.Valid, s2);
0x2AE0	0x781F8A  	PUSH	W10
0x2AE2	0x781F8B  	PUSH	W11
0x2AE4	0x781F8C  	PUSH	W12
0x2AE6	0x470060  	ADD	W14, #0, W0
0x2AE8	0x982730  	MOV	W0, [W14+70]
0x2AEA	0x781F8A  	PUSH	W10
0x2AEC	0x780600  	MOV	W0, W12
0x2AEE	0x78051A  	MOV	[W10], W10
0x2AF0	0xEB0580  	CLR	W11
0x2AF2	0x07FBCB  	RCALL	_LongWordToStr
0x2AF4	0x78054F  	POP	W10
;protocol_ping.mpas,278 :: 		UART1_Write_Text('State: ' + s2 + CRLF);
0x2AF6	0x47006B  	ADD	W14, #11, W0
0x2AF8	0xB3C532  	MOV.B	#83, W2
0x2AFA	0x785802  	MOV.B	W2, [W0++]
0x2AFC	0xB3C742  	MOV.B	#116, W2
0x2AFE	0x785802  	MOV.B	W2, [W0++]
0x2B00	0xB3C612  	MOV.B	#97, W2
0x2B02	0x785802  	MOV.B	W2, [W0++]
0x2B04	0xB3C742  	MOV.B	#116, W2
0x2B06	0x785802  	MOV.B	W2, [W0++]
0x2B08	0xB3C652  	MOV.B	#101, W2
0x2B0A	0x785802  	MOV.B	W2, [W0++]
0x2B0C	0xB3C3A2  	MOV.B	#58, W2
0x2B0E	0x785802  	MOV.B	W2, [W0++]
0x2B10	0xB3C202  	MOV.B	#32, W2
0x2B12	0x785802  	MOV.B	W2, [W0++]
0x2B14	0x90213E  	MOV	[W14+70], W2
0x2B16	0x780082  	MOV	W2, W1
0x2B18	0x07F040  	RCALL	___CS2S
0x2B1A	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2B1C	0x202012  	MOV	#513, W2
0x2B1E	0x880192  	MOV	W2, DSRPAG
0x2B20	0x000000  	NOP
0x2B22	0x07F03B  	RCALL	___CS2S
0x2B24	0x780080  	MOV	W0, W1
0x2B26	0xEF2000  	CLR	W0
0x2B28	0x785880  	MOV.B	W0, [W1++]
0x2B2A	0x47006B  	ADD	W14, #11, W0
0x2B2C	0x781F8A  	PUSH	W10
0x2B2E	0x780500  	MOV	W0, W10
0x2B30	0x0712A0  	RCALL	_UART1_Write_Text
0x2B32	0x78054F  	POP	W10
;protocol_ping.mpas,280 :: 		UART1_Write_Text('IP: ' + IPAddressToStr(Slot^.ip) + CRLF);
0x2B34	0x450062  	ADD	W10, #2, W0
0x2B36	0x781F8A  	PUSH	W10
0x2B38	0x780500  	MOV	W0, W10
0x2B3A	0x2002C0  	MOV	#44, W0
0x2B3C	0x470000  	ADD	W14, W0, W0
0x2B3E	0x9807B0  	MOV	W0, [W15+6]
0x2B40	0x07F0CB  	RCALL	_IPAddressToStr
0x2B42	0x78054F  	POP	W10
0x2B44	0x47006B  	ADD	W14, #11, W0
0x2B46	0xB3C492  	MOV.B	#73, W2
0x2B48	0x785802  	MOV.B	W2, [W0++]
0x2B4A	0xB3C502  	MOV.B	#80, W2
0x2B4C	0x785802  	MOV.B	W2, [W0++]
0x2B4E	0xB3C3A2  	MOV.B	#58, W2
0x2B50	0x785802  	MOV.B	W2, [W0++]
0x2B52	0xB3C202  	MOV.B	#32, W2
0x2B54	0x785802  	MOV.B	W2, [W0++]
0x2B56	0x2002C1  	MOV	#44, W1
0x2B58	0x470081  	ADD	W14, W1, W1
0x2B5A	0x07F01F  	RCALL	___CS2S
0x2B5C	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2B5E	0x202012  	MOV	#513, W2
0x2B60	0x880192  	MOV	W2, DSRPAG
0x2B62	0x000000  	NOP
0x2B64	0x07F01A  	RCALL	___CS2S
0x2B66	0x780080  	MOV	W0, W1
0x2B68	0xEF2000  	CLR	W0
0x2B6A	0x785880  	MOV.B	W0, [W1++]
0x2B6C	0x47006B  	ADD	W14, #11, W0
0x2B6E	0x781F8A  	PUSH	W10
0x2B70	0x780500  	MOV	W0, W10
0x2B72	0x07127F  	RCALL	_UART1_Write_Text
0x2B74	0x78054F  	POP	W10
;protocol_ping.mpas,282 :: 		UART1_Write_Text('MAC: ' + MACAddressToStr(Slot^.mac) + CRLF);
0x2B76	0x450066  	ADD	W10, #6, W0
0x2B78	0x781F8A  	PUSH	W10
0x2B7A	0x780500  	MOV	W0, W10
0x2B7C	0x2002C0  	MOV	#44, W0
0x2B7E	0x470000  	ADD	W14, W0, W0
0x2B80	0x9807B0  	MOV	W0, [W15+6]
0x2B82	0x07F10E  	RCALL	_MACAddressToStr
0x2B84	0x78054F  	POP	W10
0x2B86	0x47006B  	ADD	W14, #11, W0
0x2B88	0xB3C4D2  	MOV.B	#77, W2
0x2B8A	0x785802  	MOV.B	W2, [W0++]
0x2B8C	0xB3C412  	MOV.B	#65, W2
0x2B8E	0x785802  	MOV.B	W2, [W0++]
0x2B90	0xB3C432  	MOV.B	#67, W2
0x2B92	0x785802  	MOV.B	W2, [W0++]
0x2B94	0xB3C3A2  	MOV.B	#58, W2
0x2B96	0x785802  	MOV.B	W2, [W0++]
0x2B98	0xB3C202  	MOV.B	#32, W2
0x2B9A	0x785802  	MOV.B	W2, [W0++]
0x2B9C	0x2002C1  	MOV	#44, W1
0x2B9E	0x470081  	ADD	W14, W1, W1
0x2BA0	0x07EFFC  	RCALL	___CS2S
0x2BA2	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2BA4	0x202012  	MOV	#513, W2
0x2BA6	0x880192  	MOV	W2, DSRPAG
0x2BA8	0x000000  	NOP
0x2BAA	0x07EFF7  	RCALL	___CS2S
0x2BAC	0x780080  	MOV	W0, W1
0x2BAE	0xEF2000  	CLR	W0
0x2BB0	0x785880  	MOV.B	W0, [W1++]
0x2BB2	0x47006B  	ADD	W14, #11, W0
0x2BB4	0x781F8A  	PUSH	W10
0x2BB6	0x780500  	MOV	W0, W10
0x2BB8	0x07125C  	RCALL	_UART1_Write_Text
;protocol_ping.mpas,284 :: 		Eth_EnableTimer_1s(False);
0x2BBA	0xEF2014  	CLR	W10
0x2BBC	0x07F81F  	RCALL	_Eth_EnableTimer_1s
0x2BBE	0x78054F  	POP	W10
;protocol_ping.mpas,285 :: 		LocalTime := Slot^.Time;
0x2BC0	0x45006C  	ADD	W10, #12, W0
; LocalTime start address is: 2 (W1)
0x2BC2	0x780090  	MOV	[W0], W1
0x2BC4	0xEB0100  	CLR	W2
;protocol_ping.mpas,286 :: 		Eth_EnableTimer_1s(True);
0x2BC6	0x781F81  	PUSH	W1
0x2BC8	0x781F82  	PUSH	W2
0x2BCA	0x781F8A  	PUSH	W10
0x2BCC	0x2FFFFA  	MOV	#65535, W10
0x2BCE	0x07F816  	RCALL	_Eth_EnableTimer_1s
0x2BD0	0x78054F  	POP	W10
0x2BD2	0x78014F  	POP	W2
0x2BD4	0x7800CF  	POP	W1
;protocol_ping.mpas,287 :: 		LongWordToStr(LocalTime, s2);
0x2BD6	0x470060  	ADD	W14, #0, W0
0x2BD8	0x781F8A  	PUSH	W10
0x2BDA	0x780600  	MOV	W0, W12
0x2BDC	0x780501  	MOV	W1, W10
0x2BDE	0x780582  	MOV	W2, W11
; LocalTime end address is: 2 (W1)
0x2BE0	0x07FB54  	RCALL	_LongWordToStr
0x2BE2	0x78054F  	POP	W10
;protocol_ping.mpas,288 :: 		UART1_Write_Text('Time: ' + s2 + CRLF);
0x2BE4	0x47006B  	ADD	W14, #11, W0
0x2BE6	0xB3C542  	MOV.B	#84, W2
0x2BE8	0x785802  	MOV.B	W2, [W0++]
0x2BEA	0xB3C692  	MOV.B	#105, W2
0x2BEC	0x785802  	MOV.B	W2, [W0++]
0x2BEE	0xB3C6D2  	MOV.B	#109, W2
0x2BF0	0x785802  	MOV.B	W2, [W0++]
0x2BF2	0xB3C652  	MOV.B	#101, W2
0x2BF4	0x785802  	MOV.B	W2, [W0++]
0x2BF6	0xB3C3A2  	MOV.B	#58, W2
0x2BF8	0x785802  	MOV.B	W2, [W0++]
0x2BFA	0xB3C202  	MOV.B	#32, W2
0x2BFC	0x785802  	MOV.B	W2, [W0++]
0x2BFE	0x90213E  	MOV	[W14+70], W2
0x2C00	0x780082  	MOV	W2, W1
0x2C02	0x07EFCB  	RCALL	___CS2S
0x2C04	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2C06	0x202012  	MOV	#513, W2
0x2C08	0x880192  	MOV	W2, DSRPAG
0x2C0A	0x000000  	NOP
0x2C0C	0x07EFC6  	RCALL	___CS2S
0x2C0E	0x780080  	MOV	W0, W1
0x2C10	0xEF2000  	CLR	W0
0x2C12	0x785880  	MOV.B	W0, [W1++]
0x2C14	0x47006B  	ADD	W14, #11, W0
0x2C16	0x781F8A  	PUSH	W10
0x2C18	0x780500  	MOV	W0, W10
0x2C1A	0x07122B  	RCALL	_UART1_Write_Text
;protocol_ping.mpas,290 :: 		Eth_EnableTimer_1s(False);
0x2C1C	0xEF2014  	CLR	W10
0x2C1E	0x07F7EE  	RCALL	_Eth_EnableTimer_1s
0x2C20	0x78054F  	POP	W10
;protocol_ping.mpas,291 :: 		LocalTime := Slot^.RoundTripTime;
0x2C22	0x45006E  	ADD	W10, #14, W0
; LocalTime start address is: 2 (W1)
0x2C24	0x780090  	MOV	[W0], W1
0x2C26	0xEB0100  	CLR	W2
;protocol_ping.mpas,292 :: 		Eth_EnableTimer_1s(True);
0x2C28	0x781F81  	PUSH	W1
0x2C2A	0x781F82  	PUSH	W2
0x2C2C	0x781F8A  	PUSH	W10
0x2C2E	0x2FFFFA  	MOV	#65535, W10
0x2C30	0x07F7E5  	RCALL	_Eth_EnableTimer_1s
0x2C32	0x78054F  	POP	W10
0x2C34	0x78014F  	POP	W2
0x2C36	0x7800CF  	POP	W1
;protocol_ping.mpas,293 :: 		LongWordToStr(LocalTime, s2);
0x2C38	0x470060  	ADD	W14, #0, W0
0x2C3A	0x781F8A  	PUSH	W10
0x2C3C	0x780600  	MOV	W0, W12
0x2C3E	0x780501  	MOV	W1, W10
0x2C40	0x780582  	MOV	W2, W11
; LocalTime end address is: 2 (W1)
0x2C42	0x07FB23  	RCALL	_LongWordToStr
0x2C44	0x78054F  	POP	W10
;protocol_ping.mpas,294 :: 		UART1_Write_Text('RoundTripTime: ' + s2 + CRLF);
0x2C46	0x47006B  	ADD	W14, #11, W0
0x2C48	0xB3C522  	MOV.B	#82, W2
0x2C4A	0x785802  	MOV.B	W2, [W0++]
0x2C4C	0xB3C6F2  	MOV.B	#111, W2
0x2C4E	0x785802  	MOV.B	W2, [W0++]
0x2C50	0xB3C752  	MOV.B	#117, W2
0x2C52	0x785802  	MOV.B	W2, [W0++]
0x2C54	0xB3C6E2  	MOV.B	#110, W2
0x2C56	0x785802  	MOV.B	W2, [W0++]
0x2C58	0xB3C642  	MOV.B	#100, W2
0x2C5A	0x785802  	MOV.B	W2, [W0++]
0x2C5C	0xB3C542  	MOV.B	#84, W2
0x2C5E	0x785802  	MOV.B	W2, [W0++]
0x2C60	0xB3C722  	MOV.B	#114, W2
0x2C62	0x785802  	MOV.B	W2, [W0++]
0x2C64	0xB3C692  	MOV.B	#105, W2
0x2C66	0x785802  	MOV.B	W2, [W0++]
0x2C68	0xB3C702  	MOV.B	#112, W2
0x2C6A	0x785802  	MOV.B	W2, [W0++]
0x2C6C	0xB3C542  	MOV.B	#84, W2
0x2C6E	0x785802  	MOV.B	W2, [W0++]
0x2C70	0xB3C692  	MOV.B	#105, W2
0x2C72	0x785802  	MOV.B	W2, [W0++]
0x2C74	0xB3C6D2  	MOV.B	#109, W2
0x2C76	0x785802  	MOV.B	W2, [W0++]
0x2C78	0xB3C652  	MOV.B	#101, W2
0x2C7A	0x785802  	MOV.B	W2, [W0++]
0x2C7C	0xB3C3A2  	MOV.B	#58, W2
0x2C7E	0x785802  	MOV.B	W2, [W0++]
0x2C80	0xB3C202  	MOV.B	#32, W2
0x2C82	0x785802  	MOV.B	W2, [W0++]
0x2C84	0x90213E  	MOV	[W14+70], W2
0x2C86	0x780082  	MOV	W2, W1
0x2C88	0x07EF88  	RCALL	___CS2S
0x2C8A	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2C8C	0x202012  	MOV	#513, W2
0x2C8E	0x880192  	MOV	W2, DSRPAG
0x2C90	0x000000  	NOP
0x2C92	0x07EF83  	RCALL	___CS2S
0x2C94	0x780080  	MOV	W0, W1
0x2C96	0xEF2000  	CLR	W0
0x2C98	0x785880  	MOV.B	W0, [W1++]
0x2C9A	0x47006B  	ADD	W14, #11, W0
0x2C9C	0x781F8A  	PUSH	W10
0x2C9E	0x780500  	MOV	W0, W10
0x2CA0	0x0711E8  	RCALL	_UART1_Write_Text
;protocol_ping.mpas,296 :: 		Eth_EnableTimer_1s(False);
0x2CA2	0xEF2014  	CLR	W10
0x2CA4	0x07F7AB  	RCALL	_Eth_EnableTimer_1s
0x2CA6	0x78054F  	POP	W10
;protocol_ping.mpas,297 :: 		LocalTime := Slot^.RoundTripTTL;
0x2CA8	0x450070  	ADD	W10, #16, W0
; LocalTime start address is: 2 (W1)
0x2CAA	0xFB8090  	ZE	[W0], W1
0x2CAC	0xEB0100  	CLR	W2
;protocol_ping.mpas,298 :: 		Eth_EnableTimer_1s(True);
0x2CAE	0x781F81  	PUSH	W1
0x2CB0	0x781F82  	PUSH	W2
0x2CB2	0x2FFFFA  	MOV	#65535, W10
0x2CB4	0x07F7A3  	RCALL	_Eth_EnableTimer_1s
0x2CB6	0x78014F  	POP	W2
0x2CB8	0x7800CF  	POP	W1
;protocol_ping.mpas,299 :: 		LongWordToStr(LocalTime, s2);
0x2CBA	0x470060  	ADD	W14, #0, W0
0x2CBC	0x780600  	MOV	W0, W12
0x2CBE	0x780501  	MOV	W1, W10
0x2CC0	0x780582  	MOV	W2, W11
; LocalTime end address is: 2 (W1)
0x2CC2	0x07FAE3  	RCALL	_LongWordToStr
;protocol_ping.mpas,300 :: 		UART1_Write_Text('RoundTripTTL: ' + s2 + CRLF);
0x2CC4	0x47006B  	ADD	W14, #11, W0
0x2CC6	0xB3C522  	MOV.B	#82, W2
0x2CC8	0x785802  	MOV.B	W2, [W0++]
0x2CCA	0xB3C6F2  	MOV.B	#111, W2
0x2CCC	0x785802  	MOV.B	W2, [W0++]
0x2CCE	0xB3C752  	MOV.B	#117, W2
0x2CD0	0x785802  	MOV.B	W2, [W0++]
0x2CD2	0xB3C6E2  	MOV.B	#110, W2
0x2CD4	0x785802  	MOV.B	W2, [W0++]
0x2CD6	0xB3C642  	MOV.B	#100, W2
0x2CD8	0x785802  	MOV.B	W2, [W0++]
0x2CDA	0xB3C542  	MOV.B	#84, W2
0x2CDC	0x785802  	MOV.B	W2, [W0++]
0x2CDE	0xB3C722  	MOV.B	#114, W2
0x2CE0	0x785802  	MOV.B	W2, [W0++]
0x2CE2	0xB3C692  	MOV.B	#105, W2
0x2CE4	0x785802  	MOV.B	W2, [W0++]
0x2CE6	0xB3C702  	MOV.B	#112, W2
0x2CE8	0x785802  	MOV.B	W2, [W0++]
0x2CEA	0xB3C542  	MOV.B	#84, W2
0x2CEC	0x785802  	MOV.B	W2, [W0++]
0x2CEE	0xB3C542  	MOV.B	#84, W2
0x2CF0	0x785802  	MOV.B	W2, [W0++]
0x2CF2	0xB3C4C2  	MOV.B	#76, W2
0x2CF4	0x785802  	MOV.B	W2, [W0++]
0x2CF6	0xB3C3A2  	MOV.B	#58, W2
0x2CF8	0x785802  	MOV.B	W2, [W0++]
0x2CFA	0xB3C202  	MOV.B	#32, W2
0x2CFC	0x785802  	MOV.B	W2, [W0++]
0x2CFE	0x90213E  	MOV	[W14+70], W2
0x2D00	0x780082  	MOV	W2, W1
0x2D02	0x07EF4B  	RCALL	___CS2S
0x2D04	0x280301  	MOV	#lo_addr(_CRLF), W1
0x2D06	0x202012  	MOV	#513, W2
0x2D08	0x880192  	MOV	W2, DSRPAG
0x2D0A	0x000000  	NOP
0x2D0C	0x07EF46  	RCALL	___CS2S
0x2D0E	0x780080  	MOV	W0, W1
0x2D10	0xEF2000  	CLR	W0
0x2D12	0x785880  	MOV.B	W0, [W1++]
0x2D14	0x47006B  	ADD	W14, #11, W0
0x2D16	0x780500  	MOV	W0, W10
0x2D18	0x0711AC  	RCALL	_UART1_Write_Text
;protocol_ping.mpas,301 :: 		end;
L_end_Eth_PrintPingCacheSlot:
0x2D1A	0x78064F  	POP	W12
0x2D1C	0x7805CF  	POP	W11
0x2D1E	0x78054F  	POP	W10
0x2D20	0xFA8000  	ULNK
0x2D22	0x060000  	RETURN
; end of _Eth_PrintPingCacheSlot
_Eth_PrintArpCache:
;protocol_arp.mpas,309 :: 		begin
;protocol_arp.mpas,310 :: 		j := 0;
0x50EA	0x781F8A  	PUSH	W10
; j start address is: 4 (W2)
0x50EC	0xEF2004  	CLR	W2
; j end address is: 4 (W2)
;protocol_arp.mpas,311 :: 		while j < ARP_CACHE_LEN do
L__Eth_PrintArpCache88:
; j start address is: 4 (W2)
0x50EE	0xE11462  	CP.B	W2, #2
0x50F0	0x31000C  	BRA GEU	L__Eth_PrintArpCache89
L__Eth_PrintArpCache124:
;protocol_arp.mpas,313 :: 		Eth_PrintArpCacheSlot(@ArpCache[j]);
0x50F2	0xFB8082  	ZE	W2, W1
0x50F4	0x200040  	MOV	#4, W0
0x50F6	0xDD0880  	SL	W1, W0, W1
0x50F8	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x50FA	0x400001  	ADD	W0, W1, W0
0x50FC	0x781F82  	PUSH	W2
0x50FE	0x780500  	MOV	W0, W10
0x5100	0x07EF36  	RCALL	_Eth_PrintArpCacheSlot
0x5102	0x78014F  	POP	W2
;protocol_arp.mpas,314 :: 		inc(j);
; j start address is: 0 (W0)
0x5104	0x414061  	ADD.B	W2, #1, W0
; j end address is: 4 (W2)
;protocol_arp.mpas,315 :: 		end;
0x5106	0x784100  	MOV.B	W0, W2
; j end address is: 0 (W0)
0x5108	0x37FFF2  	BRA	L__Eth_PrintArpCache88
L__Eth_PrintArpCache89:
;protocol_arp.mpas,316 :: 		end;
L_end_Eth_PrintArpCache:
0x510A	0x78054F  	POP	W10
0x510C	0x060000  	RETURN
; end of _Eth_PrintArpCache
_Eth_PrintPingCache:
;protocol_ping.mpas,263 :: 		begin
;protocol_ping.mpas,264 :: 		j := 0;
0x510E	0x781F8A  	PUSH	W10
; j start address is: 8 (W4)
0x5110	0xEF2008  	CLR	W4
; j end address is: 8 (W4)
;protocol_ping.mpas,265 :: 		while j < ARP_CACHE_LEN do
L__Eth_PrintPingCache71:
; j start address is: 8 (W4)
0x5112	0xE12462  	CP.B	W4, #2
0x5114	0x31000C  	BRA GEU	L__Eth_PrintPingCache72
L__Eth_PrintPingCache100:
;protocol_ping.mpas,267 :: 		Eth_PrintPingCacheSlot(@PingCache[j]);
0x5116	0xFB8084  	ZE	W4, W1
0x5118	0x200120  	MOV	#18, W0
0x511A	0xB80101  	MUL.UU	W0, W1, W2
0x511C	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x511E	0x400002  	ADD	W0, W2, W0
0x5120	0x781F84  	PUSH	W4
0x5122	0x780500  	MOV	W0, W10
0x5124	0x07ECDC  	RCALL	_Eth_PrintPingCacheSlot
0x5126	0x78024F  	POP	W4
;protocol_ping.mpas,268 :: 		inc(j);
; j start address is: 0 (W0)
0x5128	0x424061  	ADD.B	W4, #1, W0
; j end address is: 8 (W4)
;protocol_ping.mpas,269 :: 		end;
0x512A	0x784200  	MOV.B	W0, W4
; j end address is: 0 (W0)
0x512C	0x37FFF2  	BRA	L__Eth_PrintPingCache71
L__Eth_PrintPingCache72:
;protocol_ping.mpas,270 :: 		end;
L_end_Eth_PrintPingCache:
0x512E	0x78054F  	POP	W10
0x5130	0x060000  	RETURN
; end of _Eth_PrintPingCache
_Interrupt_PinChange:
0x5810	0xF80034  	PUSH	DSWPAG
0x5812	0xF80032  	PUSH	DSRPAG
0x5814	0xF80036  	PUSH	RCOUNT
0x5816	0x781F80  	PUSH	W0
0x5818	0x200020  	MOV	#2, W0
0x581A	0x09000C  	REPEAT	#12
0x581C	0x781FB0  	PUSH	[W0++]
;ENC624J600_Exampe.mpas,36 :: 		begin
;ENC624J600_Exampe.mpas,37 :: 		CNIF_bit := 0;
0x581E	0xA96802  	BCLR	CNIF_bit, BitPos(CNIF_bit+0)
;ENC624J600_Exampe.mpas,38 :: 		LATB6_bit := not LATB6_bit;
0x5820	0xAACE14  	BTG	LATB6_bit, BitPos(LATB6_bit+0)
;ENC624J600_Exampe.mpas,39 :: 		end;
L_end_Interrupt_PinChange:
0x5822	0x2001A0  	MOV	#26, W0
0x5824	0x09000C  	REPEAT	#12
0x5826	0x78104F  	POP	[W0--]
0x5828	0x78004F  	POP	W0
0x582A	0xF90036  	POP	RCOUNT
0x582C	0xF90032  	POP	DSRPAG
0x582E	0xF90034  	POP	DSWPAG
0x5830	0x064000  	RETFIE
; end of _Interrupt_PinChange
_Interrupt_Timer2:
0x5832	0xF80034  	PUSH	DSWPAG
0x5834	0xF80032  	PUSH	DSRPAG
0x5836	0xF80036  	PUSH	RCOUNT
0x5838	0x781F80  	PUSH	W0
0x583A	0x200020  	MOV	#2, W0
0x583C	0x09000C  	REPEAT	#12
0x583E	0x781FB0  	PUSH	[W0++]
;ENC624J600_Exampe.mpas,22 :: 		begin
;ENC624J600_Exampe.mpas,23 :: 		T2IF_bit := 0;
0x5840	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;ENC624J600_Exampe.mpas,24 :: 		Inc(OneSecondCounter);
0x5842	0x200011  	MOV	#1, W1
0x5844	0x2107E0  	MOV	#lo_addr(_OneSecondCounter), W0
0x5846	0x408810  	ADD	W1, [W0], [W0]
;ENC624J600_Exampe.mpas,25 :: 		if OneSecondCounter > 9 then
0x5848	0x8083F0  	MOV	_OneSecondCounter, W0
0x584A	0xE10069  	CP	W0, #9
0x584C	0x360006  	BRA LEU	L__Interrupt_Timer22
L__Interrupt_Timer269:
;ENC624J600_Exampe.mpas,27 :: 		OneSecondCounter := 0;
0x584E	0xEF2000  	CLR	W0
0x5850	0x8883F0  	MOV	W0, _OneSecondCounter
;ENC624J600_Exampe.mpas,28 :: 		LATB6_bit := not LATB6_bit;
0x5852	0xAACE14  	BTG	LATB6_bit, BitPos(LATB6_bit+0)
;ENC624J600_Exampe.mpas,29 :: 		Eth_Arp_Timer_1s;
0x5854	0x07FC30  	RCALL	_Eth_Arp_Timer_1s
;ENC624J600_Exampe.mpas,30 :: 		Eth_Ping_Timer_1s;
0x5856	0x07FC21  	RCALL	_Eth_Ping_Timer_1s
;ENC624J600_Exampe.mpas,31 :: 		Eth_CounterTask;
0x5858	0x07FB79  	RCALL	_Eth_CounterTask
;ENC624J600_Exampe.mpas,32 :: 		end;
L__Interrupt_Timer22:
;ENC624J600_Exampe.mpas,33 :: 		end;
L_end_Interrupt_Timer2:
0x585A	0x2001A0  	MOV	#26, W0
0x585C	0x09000C  	REPEAT	#12
0x585E	0x78104F  	POP	[W0--]
0x5860	0x78004F  	POP	W0
0x5862	0xF90036  	POP	RCOUNT
0x5864	0xF90032  	POP	DSRPAG
0x5866	0xF90034  	POP	DSWPAG
0x5868	0x064000  	RETFIE
; end of _Interrupt_Timer2
_Eth_Arp_Timer_1s:
;protocol_arp.mpas,46 :: 		begin
;protocol_arp.mpas,47 :: 		i := 0;
; i start address is: 8 (W4)
0x50B6	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;protocol_arp.mpas,48 :: 		while i < ARP_CACHE_LEN do
L__Eth_Arp_Timer_1s2:
; i start address is: 8 (W4)
0x50B8	0xE12062  	CP	W4, #2
0x50BA	0x3D0016  	BRA GE	L__Eth_Arp_Timer_1s3
L__Eth_Arp_Timer_1s94:
;protocol_arp.mpas,50 :: 		if ArpCache[i].Timer <> $FFFFFFFF then
0x50BC	0x200040  	MOV	#4, W0
0x50BE	0xDD2080  	SL	W4, W0, W1
0x50C0	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x50C2	0x400001  	ADD	W0, W1, W0
0x50C4	0xECA000  	INC2	W0
0x50C6	0xBE0110  	MOV.D	[W0], W2
0x50C8	0x2FFFF0  	MOV	#65535, W0
0x50CA	0x2FFFF1  	MOV	#65535, W1
0x50CC	0xE11000  	CP	W2, W0
0x50CE	0xE19801  	CPB	W3, W1
0x50D0	0x320009  	BRA Z	L__Eth_Arp_Timer_1s7
L__Eth_Arp_Timer_1s95:
;protocol_arp.mpas,51 :: 		Inc(ArpCache[i].Timer);                                                    // Stall at the max value
0x50D2	0x200040  	MOV	#4, W0
0x50D4	0xDD2080  	SL	W4, W0, W1
0x50D6	0x225280  	MOV	#lo_addr(_ArpCache), W0
0x50D8	0x400001  	ADD	W0, W1, W0
0x50DA	0x400162  	ADD	W0, #2, W2
0x50DC	0xBE0012  	MOV.D	[W2], W0
0x50DE	0x400061  	ADD	W0, #1, W0
0x50E0	0x4880E0  	ADDC	W1, #0, W1
0x50E2	0xBE8900  	MOV.D	W0, [W2]
L__Eth_Arp_Timer_1s7:
;protocol_arp.mpas,52 :: 		Inc(i)
0x50E4	0xEC2008  	INC	W4
;protocol_arp.mpas,53 :: 		end;
; i end address is: 8 (W4)
0x50E6	0x37FFE8  	BRA	L__Eth_Arp_Timer_1s2
L__Eth_Arp_Timer_1s3:
;protocol_arp.mpas,54 :: 		end;
L_end_Eth_Arp_Timer_1s:
0x50E8	0x060000  	RETURN
; end of _Eth_Arp_Timer_1s
_Eth_Ping_Timer_1s:
;protocol_ping.mpas,45 :: 		begin
;protocol_ping.mpas,46 :: 		i := 0;
; i start address is: 8 (W4)
0x509A	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;protocol_ping.mpas,47 :: 		while i < PING_CACHE_LENGTH do
L__Eth_Ping_Timer_1s2:
; i start address is: 8 (W4)
0x509C	0xE12062  	CP	W4, #2
0x509E	0x3D000A  	BRA GE	L__Eth_Ping_Timer_1s3
L__Eth_Ping_Timer_1s77:
;protocol_ping.mpas,49 :: 		Inc(PingCache[i].Time);
0x50A0	0x200120  	MOV	#18, W0
0x50A2	0xB80104  	MUL.UU	W0, W4, W2
0x50A4	0x2254C0  	MOV	#lo_addr(_PingCache), W0
0x50A6	0x400002  	ADD	W0, W2, W0
0x50A8	0x4000EC  	ADD	W0, #12, W1
0x50AA	0x780011  	MOV	[W1], W0
0x50AC	0xEC2000  	INC	W0
0x50AE	0x780880  	MOV	W0, [W1]
;protocol_ping.mpas,50 :: 		Inc(i);
0x50B0	0xEC2008  	INC	W4
;protocol_ping.mpas,51 :: 		end;
; i end address is: 8 (W4)
0x50B2	0x37FFF4  	BRA	L__Eth_Ping_Timer_1s2
L__Eth_Ping_Timer_1s3:
;protocol_ping.mpas,52 :: 		end;
L_end_Eth_Ping_Timer_1s:
0x50B4	0x060000  	RETURN
; end of _Eth_Ping_Timer_1s
_Eth_CounterTask:
;lib2_enc600_V3_5_b.mpas,63 :: 		begin
;lib2_enc600_V3_5_b.mpas,64 :: 		inc(TickCounter1);
0x4F4C	0x200011  	MOV	#1, W1
0x4F4E	0x2102E0  	MOV	#lo_addr(_TickCounter1), W0
0x4F50	0x408810  	ADD	W1, [W0], [W0]
;lib2_enc600_V3_5_b.mpas,65 :: 		inc(TickCounter10);
0x4F52	0x200011  	MOV	#1, W1
0x4F54	0x2102C0  	MOV	#lo_addr(_TickCounter10), W0
0x4F56	0x408810  	ADD	W1, [W0], [W0]
;lib2_enc600_V3_5_b.mpas,66 :: 		if inc(count_100) > 99 then
0x4F58	0xB3C011  	MOV.B	#1, W1
0x4F5A	0x210270  	MOV	#lo_addr(_count_100), W0
0x4F5C	0x40C810  	ADD.B	W1, [W0], [W0]
0x4F5E	0x210270  	MOV	#lo_addr(_count_100), W0
0x4F60	0x784090  	MOV.B	[W0], W1
0x4F62	0xB3C630  	MOV.B	#99, W0
0x4F64	0xE10C00  	CP.B	W1, W0
0x4F66	0x36000B  	BRA LEU	L__Eth_CounterTask6
L__Eth_CounterTask125:
;lib2_enc600_V3_5_b.mpas,68 :: 		Inc(LongTmr);
0x4F68	0x200011  	MOV	#1, W1
0x4F6A	0x200002  	MOV	#0, W2
0x4F6C	0x210760  	MOV	#lo_addr(_LongTmr), W0
0x4F6E	0x409810  	ADD	W1, [W0], [W0++]
0x4F70	0x491010  	ADDC	W2, [W0], [W0--]
;lib2_enc600_V3_5_b.mpas,69 :: 		inc(DHCP_count_1);
0x4F72	0x200011  	MOV	#1, W1
0x4F74	0x21C960  	MOV	#lo_addr(_DHCP_count_1), W0
0x4F76	0x408810  	ADD	W1, [W0], [W0]
;lib2_enc600_V3_5_b.mpas,70 :: 		count_100 := 0;
0x4F78	0x210271  	MOV	#lo_addr(_count_100), W1
0x4F7A	0xEF2000  	CLR	W0
0x4F7C	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,71 :: 		end;
L__Eth_CounterTask6:
;lib2_enc600_V3_5_b.mpas,72 :: 		if inc(NTP_Sec) > (999 + offset_clock_err) then  // 1 sec
0x4F7E	0x200011  	MOV	#1, W1
0x4F80	0x210600  	MOV	#lo_addr(_NTP_Sec), W0
0x4F82	0x408810  	ADD	W1, [W0], [W0]
0x4F84	0x2105E0  	MOV	#lo_addr(_Offset_clock_err), W0
0x4F86	0xFB0090  	SE	[W0], W1
0x4F88	0x203E70  	MOV	#999, W0
0x4F8A	0x400081  	ADD	W0, W1, W1
0x4F8C	0x210600  	MOV	#lo_addr(_NTP_Sec), W0
0x4F8E	0xE10810  	CP	W1, [W0]
0x4F90	0x3D003C  	BRA GE	L__Eth_CounterTask9
L__Eth_CounterTask126:
;lib2_enc600_V3_5_b.mpas,74 :: 		NTP_Sec := 0;
0x4F92	0xEF2000  	CLR	W0
0x4F94	0x888300  	MOV	W0, _NTP_Sec
;lib2_enc600_V3_5_b.mpas,75 :: 		i := 0;
; i start address is: 8 (W4)
0x4F96	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
;lib2_enc600_V3_5_b.mpas,77 :: 		while i < PORT_CACHE_LEN do
L__Eth_CounterTask12:
; i start address is: 8 (W4)
0x4F98	0xE12462  	CP.B	W4, #2
0x4F9A	0x31000C  	BRA GEU	L__Eth_CounterTask13
L__Eth_CounterTask127:
;lib2_enc600_V3_5_b.mpas,79 :: 		inc(Socket[i].Exp_Time);
0x4F9C	0xFB8084  	ZE	W4, W1
0x4F9E	0x2042C0  	MOV	#1068, W0
0x4FA0	0xB80101  	MUL.UU	W0, W1, W2
0x4FA2	0x21CCA0  	MOV	#lo_addr(_Socket), W0
0x4FA4	0x400002  	ADD	W0, W2, W0
0x4FA6	0x4000FA  	ADD	W0, #26, W1
0x4FA8	0x780011  	MOV	[W1], W0
0x4FAA	0xEC2000  	INC	W0
0x4FAC	0x780880  	MOV	W0, [W1]
;lib2_enc600_V3_5_b.mpas,80 :: 		inc(i);
; i start address is: 0 (W0)
0x4FAE	0x424061  	ADD.B	W4, #1, W0
; i end address is: 8 (W4)
;lib2_enc600_V3_5_b.mpas,81 :: 		end;
0x4FB0	0x784200  	MOV.B	W0, W4
; i end address is: 0 (W0)
0x4FB2	0x37FFF2  	BRA	L__Eth_CounterTask12
L__Eth_CounterTask13:
;lib2_enc600_V3_5_b.mpas,83 :: 		inc(NTP_Time);
0x4FB4	0x200011  	MOV	#1, W1
0x4FB6	0x200002  	MOV	#0, W2
0x4FB8	0x2106C0  	MOV	#lo_addr(_NTP_Time), W0
0x4FBA	0x409810  	ADD	W1, [W0], [W0++]
0x4FBC	0x491010  	ADDC	W2, [W0], [W0--]
;lib2_enc600_V3_5_b.mpas,84 :: 		inc(NTP_ReSync);
0x4FBE	0x200011  	MOV	#1, W1
0x4FC0	0x210300  	MOV	#lo_addr(_NTP_ReSync), W0
0x4FC2	0x408810  	ADD	W1, [W0], [W0]
;lib2_enc600_V3_5_b.mpas,85 :: 		inc(DHCP_count_2);
0x4FC4	0x200011  	MOV	#1, W1
0x4FC6	0x21C940  	MOV	#lo_addr(_DHCP_count_2), W0
0x4FC8	0x408810  	ADD	W1, [W0], [W0]
;lib2_enc600_V3_5_b.mpas,87 :: 		if DHCP_State = 3 then
0x4FCA	0x2105F0  	MOV	#lo_addr(_DHCP_State), W0
0x4FCC	0x784010  	MOV.B	[W0], W0
0x4FCE	0xE10463  	CP.B	W0, #3
0x4FD0	0x3A0014  	BRA NZ	L__Eth_CounterTask17
L__Eth_CounterTask128:
;lib2_enc600_V3_5_b.mpas,89 :: 		if inc(DHCP_count_3) > DHCP_Lease_Time then
0x4FD2	0x200011  	MOV	#1, W1
0x4FD4	0x200002  	MOV	#0, W2
0x4FD6	0x21C900  	MOV	#lo_addr(_DHCP_count_3), W0
0x4FD8	0x409810  	ADD	W1, [W0], [W0++]
0x4FDA	0x491010  	ADDC	W2, [W0], [W0--]
0x4FDC	0x80E481  	MOV	_DHCP_count_3, W1
0x4FDE	0x80E492  	MOV	_DHCP_count_3+2, W2
0x4FE0	0x21C980  	MOV	#lo_addr(_DHCP_Lease_Time), W0
0x4FE2	0xE10830  	CP	W1, [W0++]
0x4FE4	0xE19020  	CPB	W2, [W0--]
0x4FE6	0x360009  	BRA LEU	L__Eth_CounterTask20
L__Eth_CounterTask129:
;lib2_enc600_V3_5_b.mpas,91 :: 		DHCP_count_3 := 0;
0x4FE8	0xEF2000  	CLR	W0
0x4FEA	0xEF2002  	CLR	W1
0x4FEC	0x88E480  	MOV	W0, _DHCP_count_3
0x4FEE	0x88E491  	MOV	W1, _DHCP_count_3+2
;lib2_enc600_V3_5_b.mpas,92 :: 		DHCP_state := 0;
0x4FF0	0x2105F1  	MOV	#lo_addr(_DHCP_State), W1
0x4FF2	0xEF2000  	CLR	W0
0x4FF4	0x784880  	MOV.B	W0, [W1]
;lib2_enc600_V3_5_b.mpas,93 :: 		DHCP_count_2 := 294;
0x4FF6	0x201260  	MOV	#294, W0
0x4FF8	0x88E4A0  	MOV	W0, _DHCP_count_2
;lib2_enc600_V3_5_b.mpas,94 :: 		end;
L__Eth_CounterTask20:
;lib2_enc600_V3_5_b.mpas,95 :: 		end;
L__Eth_CounterTask17:
;lib2_enc600_V3_5_b.mpas,97 :: 		if NTP_ReSync > 1230 then
0x4FFA	0x808181  	MOV	_NTP_ReSync, W1
0x4FFC	0x204CE0  	MOV	#1230, W0
0x4FFE	0xE10800  	CP	W1, W0
0x5000	0x360004  	BRA LEU	L__Eth_CounterTask23
L__Eth_CounterTask130:
;lib2_enc600_V3_5_b.mpas,99 :: 		NTP_Sync := False; // resyncronizations at 20 min
0x5002	0xEF2000  	CLR	W0
0x5004	0x8883A0  	MOV	W0, _NTP_Sync
;lib2_enc600_V3_5_b.mpas,100 :: 		NTP_ReSync := 0;
0x5006	0xEF2000  	CLR	W0
0x5008	0x888180  	MOV	W0, _NTP_ReSync
;lib2_enc600_V3_5_b.mpas,101 :: 		end;
L__Eth_CounterTask23:
;lib2_enc600_V3_5_b.mpas,102 :: 		end;
L__Eth_CounterTask9:
;lib2_enc600_V3_5_b.mpas,103 :: 		end;
L_end_Eth_CounterTask:
0x500A	0x060000  	RETURN
; end of _Eth_CounterTask
;protocol_ntp.mpas,46 :: _NTP_REQUEST_MESSAGE [48]
0x8000	0x00D9 ;_NTP_REQUEST_MESSAGE+0
0x8002	0xFA0A ;_NTP_REQUEST_MESSAGE+2
0x8004	0x0000 ;_NTP_REQUEST_MESSAGE+4
0x8006	0x0000 ;_NTP_REQUEST_MESSAGE+6
0x8008	0x2832 ;_NTP_REQUEST_MESSAGE+8
0x800A	0x0000 ;_NTP_REQUEST_MESSAGE+10
0x800C	0x0000 ;_NTP_REQUEST_MESSAGE+12
0x800E	0x0000 ;_NTP_REQUEST_MESSAGE+14
0x8010	0x0000 ;_NTP_REQUEST_MESSAGE+16
0x8012	0x0000 ;_NTP_REQUEST_MESSAGE+18
0x8014	0x0000 ;_NTP_REQUEST_MESSAGE+20
0x8016	0x0000 ;_NTP_REQUEST_MESSAGE+22
0x8018	0x0000 ;_NTP_REQUEST_MESSAGE+24
0x801A	0x0000 ;_NTP_REQUEST_MESSAGE+26
0x801C	0x0000 ;_NTP_REQUEST_MESSAGE+28
0x801E	0x0000 ;_NTP_REQUEST_MESSAGE+30
0x8020	0x0000 ;_NTP_REQUEST_MESSAGE+32
0x8022	0x0000 ;_NTP_REQUEST_MESSAGE+34
0x8024	0x0000 ;_NTP_REQUEST_MESSAGE+36
0x8026	0x0000 ;_NTP_REQUEST_MESSAGE+38
0x8028	0x0000 ;_NTP_REQUEST_MESSAGE+40
0x802A	0x0000 ;_NTP_REQUEST_MESSAGE+42
0x802C	0x0000 ;_NTP_REQUEST_MESSAGE+44
0x802E	0x0000 ;_NTP_REQUEST_MESSAGE+46
; end of _NTP_REQUEST_MESSAGE
;,0 :: _initBlock_1 [16]
; Containing: CRLF [3]
;             Months_Days [13]
0x8030	0x0A0D ;_initBlock_1+0 : CRLF at 0x8030
0x8032	0x0000 ;_initBlock_1+2 : Months_Days at 0x8033
0x8034	0x1C1F ;_initBlock_1+4
0x8036	0x1E1F ;_initBlock_1+6
0x8038	0x1E1F ;_initBlock_1+8
0x803A	0x1F1F ;_initBlock_1+10
0x803C	0x1F1E ;_initBlock_1+12
0x803E	0x1F1E ;_initBlock_1+14
; end of _initBlock_1
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [48]    _CopyRamToEthMem_CP
0x0230      [16]    _Put_TCPPointer
0x0240     [382]    protocol_tcp_Send_TCP_R1
0x03BE     [116]    _Word2StrWithZeros
0x0432      [24]    _Str_Cut_Chr
0x044A      [18]    _Str_Len
0x045C      [18]    _Mem_Set
0x046E      [18]    _Mem_Cpy
0x0480      [20]    dspic_additional_string_library_Adjust_1
0x0494     [636]    protocol_tcp_Send_TCP_R
0x0710      [20]    _Spi_Read_
0x0724      [40]    _Str_Cut_Left
0x074C      [14]    _Eth_FreeUdpSlot
0x075A      [60]    _TrimValue
0x0796       [4]    _Eth_Select
0x079A     [110]    _Byte2StrWithZeros
0x0808       [2]    _Eth_UserProcess
0x080A      [22]    _memset
0x0820      [62]    _ByteToStr
0x085E      [18]    _Str_Cat
0x0870      [36]    _Word2Str
0x0894     [574]    _Eth_ProcessTcpStack
0x0AD2      [34]    _EthMemSet_CP
0x0AF4      [34]    _Eth_IpSwap
0x0B16      [16]    lib1_enc600_V3_5_b_WCmd2
0x0B26      [20]    lib1_enc600_V3_5_b_RCmd2
0x0B3A      [62]    _WordToStr
0x0B78      [34]    _Eth_MacSwap
0x0B9A      [16]    ___CS2S
0x0BAA      [38]    _Do_EthernetProc
0x0BD0     [172]    protocol_udp_UdpWaitFor
0x0C7C      [56]    _CopyRamToEthMem_Inv
0x0CB4      [36]    _Eth_CloseUdpPort
0x0CD8     [200]    _IPAddressToStr
0x0DA0     [300]    _MACAddressToStr
0x0ECC     [482]    _NTP2String
0x10B2      [58]    _CopyEthMemToRam_Inv
0x10EC      [30]    lib1_enc600_V3_5_b_WCmd4
0x110A     [146]    protocol_udp_Eth_Udp_EraseSlot
0x119C      [42]    lib1_enc600_V3_5_b_RCmd3W
0x11C6     [206]    _Eth_Reject
0x1294      [58]    protocol_udp_Eth_FindUdpPort
0x12CE      [28]    protocol_udp_Eth_Udp_EraseCache
0x12EA     [106]    _Eth_Cksum
0x1354      [50]    _EthMemSet
0x1386      [46]    _memcmp
0x13B4      [96]    _Eth_Udp_PrintPorts
0x1418      [76]    protocol_udp_Eth_Udp_EraseSlotReceive
0x1464       [6]    _Eth_UserTCP
0x146A     [364]    _Eth_SendTCP
0x15D6      [54]    _Search_Port
0x160C      [32]    _Mem_Cmp
0x162C      [12]    _Delay_1ms_
0x1638      [46]    _CopyEthMem_CPToRam
0x1666      [48]    _CopyEthMem_CPToRam_Inv
0x1696     [676]    _Eth_Udp_PrintSlotReceive
0x1956      [22]    _Eth_BSF
0x196C      [20]    _Eth_ReadReg
0x1980     [348]    _Eth_Ntp_ReceiveHandler
0x1AE4      [22]    _Eth_WriteReg
0x1AFA      [56]    _CopyEthMemToRam
0x1B32      [26]    _memcpy
0x1B4C     [118]    protocol_arp_ArpMapIpMask
0x1BC2      [58]    _CopyEthMemToEthMem
0x1BFC      [12]    _Eth_EnableTimer_1s
0x1C08      [14]    _Eth_GetByte
0x1C16    [1472]    _Eth_SendUdpMessage
0x21E6     [110]    protocol_ping_PingWaitFor
0x2254      [54]    _Eth_AllocateUdpSlot
0x228A     [114]    _LongWordToStr
0x22FC      [62]    _Eth_OpenUdpPort
0x233A      [16]    _Eth_PutByte
0x234A      [28]    _WriteToEthMem
0x2366      [62]    _Eth_SendPacket
0x23A4     [106]    protocol_arp_ArpWaitFor
0x240E      [56]    _CopyRamToEthMem
0x2446      [18]    _Unlock_IOLOCK
0x2458      [18]    _Lock_IOLOCK
0x246A    [1532]    _Eth_TcpHandler
0x2A66      [88]    __Modulus_32x32
0x2ABE      [18]    __Multiply_32x32
0x2AD0      [14]    _Delay_10ms
0x2ADE     [582]    _Eth_PrintPingCacheSlot
0x2D3C     [562]    _Eth_SendPing
0x2F6E     [322]    _Eth_PrintArpCacheSlot
0x30C2       [6]    _Get_Fosc_Per_Cyc
0x30C8    [2500]    __Lib_PPS_p33EP512MU810__PPS_Mapping
0x3A8C       [8]    _Get_Fosc_kHz
0x3A94     [562]    _Eth_Arp_MapMacAddress
0x3CC6     [496]    _Eth_SendNtpRequest
0x3EBA      [82]    __Divide_32x32
0x3F0C      [32]    _ReadFromEthMem
0x3F2C      [72]    _EthMemCompareWithRam
0x3F74     [104]    _Eth_ReadPacket
0x3FDC     [126]    _Eth_Arp_RequestHandler
0x405A     [160]    _Eth_PingEchoHandler
0x40FA     [112]    _Eth_Arp_ResponseHandler
0x416A     [114]    _Eth_Arp_EraseCache
0x41DC       [8]    _Firewall
0x41E4     [290]    _EraseSockets
0x4306     [128]    _Eth_Ping_EraseCache
0x4386       [6]    _Eth_Policy
0x438C       [2]    _Eth_UserProcess_Main
0x438E      [22]    _Eth_BCF
0x43A4      [42]    _Check_Link
0x43CE     [160]    _Eth_PingReplyHandler
0x446E       [6]    _Eth_UnSelect
0x4474      [86]    _Eth_SendSystemReset
0x44CA      [40]    _Eth_WritePHYReg
0x44F2      [16]    _delayms
0x4502      [22]    _UART1_Write
0x4518       [4]    _DisableInt
0x451C       [4]    _EnableInt
0x4520      [24]    _Eth_Udp_Init
0x4538    [2018]    _Eth_Udp_ReplyHandler
0x4D1E     [452]    _Eth_Init_
0x4EE2     [104]    _MapAndPrint
0x4F4C     [192]    _Eth_CounterTask
0x500C     [100]    _PingAndPrint
0x5072      [40]    _UART1_Write_Text
0x509A      [28]    _Eth_Ping_Timer_1s
0x50B6      [52]    _Eth_Arp_Timer_1s
0x50EA      [36]    _Eth_PrintArpCache
0x510E      [36]    _Eth_PrintPingCache
0x5132      [18]    _PPS_Mapping
0x5144     [254]    _Eth_DoPacket
0x5242     [240]    _UART1_Init
0x5332      [46]    _SPI1_Init_Advanced
0x5360      [10]    _SPI_Set_Active
0x536A      [32]    _NtpRequest
0x538A      [76]    _Wait_for_LAN
0x53D6      [10]    _UART1_Read
0x53E0      [28]    _Eth_EnableReception
0x53FC      [14]    _UART1_Data_Ready
0x540A    [1030]    _main
0x5810      [34]    _Interrupt_PinChange
0x5832      [56]    _Interrupt_Timer2
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0E00       [0]    TRISA4_bit
0x0E00       [0]    TRISA3_bit
0x0E00       [0]    TRISA2_bit
0x0E00       [0]    TRISA5_bit
0x0E00       [0]    TRISA14_bit
0x0E00       [0]    TRISA7_bit
0x0E00       [0]    TRISA6_bit
0x0E00       [0]    TRISA1_bit
0x06EC       [2]    RPINR38
0x06F6       [2]    RPINR43
0x06F4       [2]    RPINR42
0x06EE       [2]    RPINR39
0x0E00       [0]    TRISA0_bit
0x06F2       [2]    RPINR41
0x06F0       [2]    RPINR40
0x0E00       [0]    TRISA15_bit
0x0E10       [0]    TRISB3_bit
0x0E10       [0]    TRISB4_bit
0x0E10       [0]    TRISB5_bit
0x0E10       [0]    TRISB2_bit
0x0E20       [0]    TRISC1_bit
0x0E10       [0]    TRISB0_bit
0x0E10       [0]    TRISB1_bit
0x0E10       [0]    TRISB8_bit
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB14_bit
0x0E10       [0]    TRISB15_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB9_bit
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB11_bit
0x06EA       [2]    RPINR37
0x06BE       [2]    RPINR15
0x06BC       [2]    RPINR14
0x06BA       [2]    RPINR13
0x06C0       [2]    RPINR16
0x06C6       [2]    RPINR19
0x06C4       [2]    RPINR18
0x06C2       [2]    RPINR17
0x06B8       [2]    RPINR12
0x06AE       [2]    RPINR7
0x06AC       [2]    RPINR6
0x06AA       [2]    RPINR5
0x06B0       [2]    RPINR8
0x06B6       [2]    RPINR11
0x06B4       [2]    RPINR10
0x06B2       [2]    RPINR9
0x06C8       [2]    RPINR20
0x06E0       [2]    RPINR32
0x06DE       [2]    RPINR31
0x06DC       [2]    RPINR30
0x06E2       [2]    RPINR33
0x06E8       [2]    RPINR36
0x06E6       [2]    RPINR35
0x06E4       [2]    RPINR34
0x06DA       [2]    RPINR29
0x06D0       [2]    RPINR24
0x06CE       [2]    RPINR23
0x06CA       [2]    RPINR21
0x06D2       [2]    RPINR25
0x06D8       [2]    RPINR28
0x06D6       [2]    RPINR27
0x06D4       [2]    RPINR26
0x0E60       [0]    TRISG6_bit
0x0E60       [0]    TRISG1_bit
0x0E60       [0]    TRISG0_bit
0x0E60       [0]    TRISG7_bit
0x0E60       [0]    TRISG12_bit
0x0E60       [0]    TRISG9_bit
0x0E60       [0]    TRISG8_bit
0x0E50       [0]    TRISF0_bit
0x0E50       [0]    TRISF5_bit
0x0E50       [0]    TRISF8_bit
0x0E50       [0]    TRISF12_bit
0x0E50       [0]    TRISF4_bit
0x0E50       [0]    TRISF1_bit
0x0E50       [0]    TRISF2_bit
0x0E50       [0]    TRISF3_bit
0x0E60       [0]    TRISG13_bit
0x1000       [2]    _UART_TX_Idle_Ptr
0x1002       [2]    _UART_Rdy_Ptr
0x1004       [2]    _UART_Rd_Ptr
0x0220       [2]    U1MODE
0x0802       [0]    CNIF_bit
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x1006       [2]    _UART_Wr_Ptr
0x0242       [2]    SPI1CON
0x0E60       [0]    TRISG15_bit
0x0E60       [0]    TRISG14_bit
0x1008       [2]    _SPI_Rd_Ptr
0x0222       [2]    U1STA
0x0226       [2]    U1RXREG
0x100A       [2]    _SPI_Wr_Ptr
0x0E50       [0]    TRISF13_bit
0x0E30       [0]    TRISD11_bit
0x0E30       [0]    TRISD12_bit
0x0E30       [0]    TRISD13_bit
0x0E30       [0]    TRISD10_bit
0x0E30       [0]    TRISD7_bit
0x0E30       [0]    TRISD8_bit
0x0E30       [0]    TRISD9_bit
0x0E30       [0]    TRISD14_bit
0x0E20       [0]    TRISC4_bit
0x0E20       [0]    TRISC3_bit
0x0E20       [0]    TRISC2_bit
0x0E20       [0]    TRISC14_bit
0x0E30       [0]    TRISD15_bit
0x0E20       [0]    TRISC12_bit
0x0E20       [0]    TRISC13_bit
0x0E30       [0]    TRISD6_bit
0x0E40       [0]    TRISE4_bit
0x0E40       [0]    TRISE5_bit
0x0E40       [0]    TRISE6_bit
0x0E40       [0]    TRISE3_bit
0x0E40       [0]    TRISE0_bit
0x0E40       [0]    TRISE1_bit
0x0E40       [0]    TRISE2_bit
0x0E40       [0]    TRISE8_bit
0x0E30       [0]    TRISD3_bit
0x0E30       [0]    TRISD4_bit
0x0E30       [0]    TRISD5_bit
0x0E30       [0]    TRISD2_bit
0x0E40       [0]    TRISE9_bit
0x0E30       [0]    TRISD0_bit
0x0E30       [0]    TRISD1_bit
0x06A8       [2]    RPINR4
0x100C       [2]    _FICMP
0x0E34       [0]    ENC_CS
0x0240       [2]    SPI1STAT
0x100E       [2]    _FTCP
0x1010       [2]    _AddrPacket
0x1012       [2]    _broadcast_packet
0x1014       [2]    _FUDP
0x0248       [2]    SPI1BUF
0x1016       [2]    _use_user_MAC
0x1018       [6]    _eth_mac
0x101E       [4]    _eth_ntp_addr
0x1022       [4]    _TestIP
0x0052       [2]    DISICNT
0x1026       [1]    _policy
0x1028       [2]    _LinkEstablished
0x102A       [2]    _udp_broadcast
0x102C       [2]    _TickCounter10
0x102E       [2]    _TickCounter1
0x1030       [2]    _NTP_ReSync
0x1027       [1]    _count_100
0x1032      [42]    _TimeRec
0x105C       [2]    _DNS_resp
0x105E       [1]    _Offset_clock_err
0x1060       [2]    _NTP_Sec
0x0110       [0]    TimerEnableBit
0x1062       [6]    _dest_mac
0x1068       [4]    _dest_ip_addr
0x106C       [4]    _NTP_Time
0x1070       [4]    _Offset_Time
0x1074       [2]    _NTP_Sync
0x1076       [4]    _LongTmr
0x107A       [4]    _eth_gateway
0x0E3E       [2]    ANSELD
0x0E2E       [2]    ANSELC
0x0E1E       [2]    ANSELB
0x0E4E       [2]    ANSELE
0x0110       [0]    TCS_T2CON_bit
0x0E38       [0]    CNIED0_bit
0x0E6E       [2]    ANSELG
0x0E0E       [2]    ANSELA
0x0E30       [2]    TRISD
0x0110       [2]    T2CON
0x0E34       [2]    LATD
0x107E       [2]    _OneSecondCounter
0x0742       [2]    OSCCON
0x0744       [2]    CLKDIV
0x0746       [2]    PLLFBD
0x0842       [0]    T2IP_0_bit
0x0E10       [0]    TRISB6_bit
0x0E14       [0]    LATB7_bit
0x0E14       [0]    LATB6_bit
0x0E10       [0]    TRISB7_bit
0x1080       [4]    _eth_mask
0x1084       [4]    _eth_dns_addr
0x1088       [4]    _eth_ip_addr
0x0110       [0]    TON_T2CON_bit
0x0110       [0]    TCKPS_0_T2CON_bit
0x0842       [0]    T2IP_2_bit
0x0842       [0]    T2IP_1_bit
0x0110       [0]    TCKPS_1_T2CON_bit
0x0820       [0]    T2IE_bit
0x0800       [0]    T2IF_bit
0x010C       [2]    PR2
0x108C       [4]    _resp_ip_addr
0x1090      [12]    _DNSAnswerHeader
0x109C       [2]    _DNS_TR_ID
0x0742       [0]    IOLOCK_bit
0x0684       [2]    RPOR2
0x0682       [2]    RPOR1
0x0680       [2]    RPOR0
0x109E      [12]    _DNSHeader
0x10AA       [4]    _tmp_ip_addr
0x10AE       [2]    protocol_udp_Udp_Counter
0x10B0       [4]    protocol_udp_UdpPorts
0x10B4       [4]    _DHCPServerID
0x10B8       [4]    _tmp_dns_addr
0x10BC       [4]    _tmp_gat_addr
0x10C0       [4]    _tmp_mask_addr
0x0686       [2]    RPOR3
0x069E       [2]    RPOR15
0x069C       [2]    RPOR14
0x069A       [2]    RPOR13
0x06A0       [2]    RPINR0
0x06A6       [2]    RPINR3
0x06A4       [2]    RPINR2
0x06A2       [2]    RPINR1
0x0698       [2]    RPOR12
0x068C       [2]    RPOR6
0x068A       [2]    RPOR5
0x0688       [2]    RPOR4
0x068E       [2]    RPOR7
0x0696       [2]    RPOR11
0x0692       [2]    RPOR9
0x0690       [2]    RPOR8
0x10C4    [3020]    _UdpCache
0x1C90       [4]    _DHCP_count_3
0x1C94       [2]    _DHCP_count_2
0x1C96       [2]    _DHCP_count_1
0x1C98       [4]    _DHCP_Lease_Time
0x1C9C       [2]    _TCP_Wait
0x1C9E       [2]    _dynamic_var_addr
0x105F       [1]    _DHCP_State
0x1CA0       [4]    _UDP_Opened_Ports
0x1CA4       [2]    _NextPacket
0x0E30       [0]    ENC_CS_dir
0x0E30       [0]    ENC_INT_dir
0x1CA6       [2]    _tcp_counter
0x1CA8       [4]    _TCP_Opened_Ports
0x1CAC       [4]    _SEQ_No
0x1CB0       [4]    _ACK_No
0x1CB4       [2]    _UDP_Wait
0x1CB6       [1]    _TCP_FlagR
0x1CB8       [4]    protocol_tcp_xx_
0x1CBC       [2]    protocol_tcp_packet_size_
0x1CBE       [4]    _SEQ_NoR
0x1CB7       [1]    _TCP_Flag
0x1CC2       [4]    _dest_ip_addr2
0x1CC6       [4]    _ACK_NoR
0x1CCA    [2136]    _Socket
0x2522       [2]    _opened_socket
0x2524       [2]    _PING_Wait
0x2526       [2]    _ARP_Wait
0x2528      [32]    _ArpCache
0x2548       [2]    _Window
0x254A       [2]    protocol_tcp_Tcp_Counter
0x254C      [36]    _PingCache
0x0052       [2]    DISICNT
0x010C       [2]    PR2
0x0110       [2]    T2CON
0x0014       [2]    FARG_CopyRamToEthMem_CP_start_ram_address
0x0016       [2]    FARG_CopyRamToEthMem_CP_length_w
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0014       [1]    FARG_Send_TCP_R1_TCP_Flag_T
0x0016       [1]    FARG_Send_TCP_R1_CC_Sock
0x0018       [2]    FARG_Send_TCP_R1_jj
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_Word2StrWithZeros_data_in
0x0016       [2]    FARG_Word2StrWithZeros_data_str
0x0014       [2]    FARG_Str_Cut_Chr_inst
0x0016       [1]    FARG_Str_Cut_Chr_ch
0x0014       [2]    FARG_Str_Len_data_str
0x0014       [2]    FARG_Mem_Set_p1
0x0016       [1]    FARG_Mem_Set_ch
0x0018       [2]    FARG_Mem_Set_n
0x0014       [2]    FARG_Mem_Cpy_p1
0x0016       [2]    FARG_Mem_Cpy_p2
0x0018       [2]    FARG_Mem_Cpy_n
0x0014       [1]    FARG_Send_TCP_R_TCP_Flag_T
0x0016       [1]    FARG_Send_TCP_R_CC_Sock
0x0018       [1]    FARG_Send_TCP_R_fragment
0x0680       [2]    RPOR0
0x0682       [2]    RPOR1
0x0684       [2]    RPOR2
0x0686       [2]    RPOR3
0x0688       [2]    RPOR4
0x068A       [2]    RPOR5
0x068C       [2]    RPOR6
0x068E       [2]    RPOR7
0x0690       [2]    RPOR8
0x0692       [2]    RPOR9
0x0696       [2]    RPOR11
0x0698       [2]    RPOR12
0x069A       [2]    RPOR13
0x069C       [2]    RPOR14
0x069E       [2]    RPOR15
0x06A0       [2]    RPINR0
0x06A2       [2]    RPINR1
0x06A4       [2]    RPINR2
0x06A6       [2]    RPINR3
0x06A8       [2]    RPINR4
0x06AA       [2]    RPINR5
0x06AC       [2]    RPINR6
0x06AE       [2]    RPINR7
0x06B0       [2]    RPINR8
0x06B2       [2]    RPINR9
0x06B4       [2]    RPINR10
0x06B6       [2]    RPINR11
0x06B8       [2]    RPINR12
0x06BA       [2]    RPINR13
0x06BC       [2]    RPINR14
0x06BE       [2]    RPINR15
0x06C0       [2]    RPINR16
0x06C2       [2]    RPINR17
0x06C4       [2]    RPINR18
0x06C6       [2]    RPINR19
0x06C8       [2]    RPINR20
0x06CA       [2]    RPINR21
0x06CE       [2]    RPINR23
0x06D0       [2]    RPINR24
0x06D2       [2]    RPINR25
0x06D4       [2]    RPINR26
0x06D6       [2]    RPINR27
0x06D8       [2]    RPINR28
0x06DA       [2]    RPINR29
0x06DC       [2]    RPINR30
0x06DE       [2]    RPINR31
0x06E0       [2]    RPINR32
0x06E2       [2]    RPINR33
0x06E4       [2]    RPINR34
0x06E6       [2]    RPINR35
0x06E8       [2]    RPINR36
0x06EA       [2]    RPINR37
0x06EC       [2]    RPINR38
0x06EE       [2]    RPINR39
0x06F0       [2]    RPINR40
0x06F2       [2]    RPINR41
0x06F4       [2]    RPINR42
0x06F6       [2]    RPINR43
0x0014       [1]    FARG_Spi_Read__dummy
0x0014       [2]    FARG_Str_Cut_Left_inst1
0x0016       [2]    FARG_Str_Cut_Left_n
0x0742       [2]    OSCCON
0x0744       [2]    CLKDIV
0x0746       [2]    PLLFBD
0x0014       [2]    FARG_Eth_FreeUdpSlot_UdpSlot
0x0014       [2]    FARG_TrimValue_ValueStr
0x0014       [1]    FARG_Byte2StrWithZeros_data_in
0x0016       [2]    FARG_Byte2StrWithZeros_data_str
0x0014       [2]    FARG_memset_p
0x0016       [1]    FARG_memset_character
0x0018       [2]    FARG_memset_n
0x0014       [1]    FARG_ByteToStr_input
0x0016       [2]    FARG_ByteToStr_output
0x0014       [2]    FARG_Str_Cat_inst1
0x0016       [2]    FARG_Str_Cat_inst2
0x0014       [2]    FARG_Word2Str_data_in1
0x0016       [2]    FARG_Word2Str_data_str3
0x0014       [1]    FARG_EthMemSet_CP_chr_
0x0016       [2]    FARG_EthMemSet_CP_length_w
0x0014       [1]    FARG_WCmd2_cmd1
0x0016       [1]    FARG_WCmd2_cmd2
0x0014       [1]    FARG_RCmd2_cmd1
0x0014       [2]    FARG_WordToStr_input
0x0016       [2]    FARG_WordToStr_output
0x0014       [2]    FARG_Do_EthernetProc_n
0x0014       [2]    FARG_UdpWaitFor_Udp
0x0014       [2]    FARG_CopyRamToEthMem_Inv_start_ram_address
0x0016       [2]    FARG_CopyRamToEthMem_Inv_dest_eth_address
0x0018       [2]    FARG_CopyRamToEthMem_Inv_length_w
0x0014       [2]    FARG_Eth_CloseUdpPort_Port
0x0014       [2]    FARG_IPAddressToStr_IP
0x0014       [2]    FARG_MACAddressToStr_MAC
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0E2E       [2]    ANSELC
0x0E30       [2]    TRISD
0x0E34       [2]    LATD
0x0E3E       [2]    ANSELD
0x0E4E       [2]    ANSELE
0x0E6E       [2]    ANSELG
0x0014       [4]    FARG_NTP2String_buf
0x0018       [2]    FARG_NTP2String_TTime_Str
0x0014       [2]    FARG_CopyEthMemToRam_Inv_start_eth_address
0x0016       [2]    FARG_CopyEthMemToRam_Inv_dest_ram_address
0x0018       [2]    FARG_CopyEthMemToRam_Inv_length_w
0x0014       [1]    FARG_WCmd4_cmd1
0x0016       [1]    FARG_WCmd4_cmd2
0x0018       [2]    FARG_WCmd4_cmd3
0x0014       [2]    FARG_Eth_Udp_EraseSlot_UdpSlot
0x0014       [1]    FARG_RCmd3W_cmd1
0x0016       [1]    FARG_RCmd3W_cmd2
0x0014       [2]    FARG_Eth_FindUdpPort_Port
0x0016       [2]    FARG_Eth_FindUdpPort_iLastEmpty
0x0014       [2]    FARG_Eth_Cksum_start_eth_address
0x0016       [2]    FARG_Eth_Cksum_length_w
0x0014       [2]    FARG_EthMemSet_dest_eth_address
0x0016       [1]    FARG_EthMemSet_chr_
0x0018       [2]    FARG_EthMemSet_length_w
0x0014       [2]    FARG_memcmp_p1
0x0016       [2]    FARG_memcmp_p2
0x0018       [2]    FARG_memcmp_n
0x0014       [2]    FARG_Eth_Udp_EraseSlotReceive_UdpSlot
0x0014       [2]    FARG_Eth_UserTCP_dest_ip_addr_T
0x0016       [2]    FARG_Eth_UserTCP_source_port_T
0x0018       [2]    FARG_Eth_UserTCP_dest_port_T
0x001A       [2]    FARG_Eth_UserTCP_len_T
0x0014       [2]    FARG_Eth_SendTCP_source_portT
0x0016       [2]    FARG_Eth_SendTCP_dest_portT
0x0018       [2]    FARG_Eth_SendTCP_PacketLenT
0x001A       [1]    FARG_Eth_SendTCP_TCP_FlagT
0x0014       [1]    FARG_Search_Port_protocol
0x0016       [2]    FARG_Search_Port_port_
0x0014       [2]    FARG_Mem_Cmp_p1
0x0016       [2]    FARG_Mem_Cmp_p2
0x0018       [2]    FARG_Mem_Cmp_n
0x0014       [2]    FARG_CopyEthMem_CPToRam_dest_ram_address
0x0016       [2]    FARG_CopyEthMem_CPToRam_length_w
0x0014       [2]    FARG_CopyEthMem_CPToRam_Inv_dest_ram_address
0x0016       [2]    FARG_CopyEthMem_CPToRam_Inv_length_w
0x0014       [2]    FARG_Eth_Udp_PrintSlotReceive_Slot
0x0014       [1]    FARG_Eth_BSF_register_address
0x0016       [2]    FARG_Eth_BSF_mask
0x0014       [1]    FARG_Eth_ReadReg_register_address
0x0014       [2]    FARG_Eth_Ntp_ReceiveHandler_Slot
0x0014       [1]    FARG_Eth_WriteReg_register_address
0x0016       [2]    FARG_Eth_WriteReg_data_b
0x0014       [2]    FARG_CopyEthMemToRam_start_eth_address
0x0016       [2]    FARG_CopyEthMemToRam_dest_ram_address
0x0018       [2]    FARG_CopyEthMemToRam_length_w
0x0014       [2]    FARG_memcpy_p1
0x0016       [2]    FARG_memcpy_p2
0x0018       [2]    FARG_memcpy_nn
0x0014       [2]    FARG_ArpMapIpMask_Ip
0x0014       [2]    FARG_CopyEthMemToEthMem_start_eth_address
0x0016       [2]    FARG_CopyEthMemToEthMem_dest_eth_address
0x0018       [2]    FARG_CopyEthMemToEthMem_length_w
0x0014       [2]    FARG_Eth_EnableTimer_1s_Enable
0x0014       [2]    FARG_Eth_SendUdpMessage_UdpSlot
0x0014       [2]    FARG_PingWaitFor_Ping
0x0014       [4]    FARG_LongWordToStr_input
0x0018       [2]    FARG_LongWordToStr_output
0x0014       [2]    FARG_Eth_OpenUdpPort_Port
0x0014       [1]    FARG_Eth_PutByte_value
0x0014       [2]    FARG_WriteToEthMem_dest_eth_address
0x0016       [1]    FARG_WriteToEthMem_value
0x0014       [2]    FARG_Eth_SendPacket_length_w
0x0014       [2]    FARG_ArpWaitFor_Arp
0x0014       [2]    FARG_CopyRamToEthMem_start_ram_address
0x0016       [2]    FARG_CopyRamToEthMem_dest_eth_address
0x0018       [2]    FARG_CopyRamToEthMem_length_w
0x0014       [2]    FARG_Eth_PrintPingCacheSlot_Slot
0x0014       [2]    FARG_Eth_SendPing_TargetIP
0x0014       [2]    FARG_Eth_PrintArpCacheSlot_Slot
0x0014       [1]    FARG__PPS_Mapping_rp_num
0x0016       [1]    FARG__PPS_Mapping_input_output
0x0018       [1]    FARG__PPS_Mapping_funct_name
0x001A       [2]    FARG__PPS_Mapping_lock
0x0014       [2]    FARG_Eth_Arp_MapMacAddress_TargetIP
0x0014       [2]    FARG_Eth_SendNtpRequest_NtpServer
0x0014       [2]    FARG_ReadFromEthMem_start_eth_address
0x0014       [2]    FARG_EthMemCompareWithRam_start_eth_address
0x0016       [2]    FARG_EthMemCompareWithRam_start_ram_address
0x0018       [2]    FARG_EthMemCompareWithRam_length_w
0x0014       [2]    FARG_Firewall_F_ICMP
0x0016       [2]    FARG_Firewall_F_TCP
0x0018       [2]    FARG_Firewall_F_UDP
0x0014       [1]    FARG_Eth_Policy_poli
0x0014       [1]    FARG_Eth_BCF_register_address
0x0016       [2]    FARG_Eth_BCF_mask
0x0014       [1]    FARG_Eth_WritePHYReg_register_address
0x0016       [2]    FARG_Eth_WritePHYReg_data_b
0x0014       [2]    FARG_delayms_n
0x0014       [2]    FARG_UART1_Write_data_
0x0014       [2]    FARG_MapAndPrint_TestIP
0x0014       [2]    FARG_PingAndPrint_TestIP
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0014       [1]    FARG_PPS_Mapping_rp_num
0x0016       [1]    FARG_PPS_Mapping_input_output
0x0018       [1]    FARG_PPS_Mapping_funct_name
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [2]    FARG_SPI_Set_Active_read_ptr
0x0016       [2]    FARG_SPI_Set_Active_write_ptr
0x0014       [2]    FARG_Wait_for_LAN_Announce
0x0014       [2]    FARG_Eth_EnableReception_Enable
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [48]    _NTP_REQUEST_MESSAGE
0x8030       [3]    _CRLF
0x8033      [13]    _Months_Days
//** Label List: ** 
//----------------------------------------------
  L_end__DSPIC_aditional_string_library_version
  L_end__Swap_B
  L_end__Swap_F
  L_end__Mem_Cpy
  la25
  L_end__Mem_Cmp
  la24
  la16
  la15
  L_end__Mem_Set
  la29
  L_end__Mem_Chr
  la26
  la18
  la19
  L_end__Str_Len
  la1
  L_end__Str_Cut_Chr
  la5
  la6
  la7
  L_end__Str_Cat
  la2
  la4
  L_end__Str_Chr
  la21
  la20
  L_end__Str_Cpy
  la11
  L_end__Str_Cmp
  la22
  la23
  L_end__Str_Replace_Chr
  la10
  la8
  L_end__Str_Replace_Chr_F
  la1010
  la88
  L_end__Str_Split
  la33
  L__Str_Split29
  L__Str_Split30
  L__Str_Split31
  la30
  L_end__Str_Insert_Chr
  la34
  L__Str_Insert_Chr35
  L__Str_Insert_Chr36
  L__Str_Insert_Chr37
  L_end__Str_AppendPre
  la32
  L_end__Str_AppendSuf
  la31
  L_end__Str_Cut_Left
  la35
  L__Str_Cut_Left44
  L__Str_Cut_Left45
  L__Str_Cut_Left46
  L__Str_Cut_Left47
  L__Str_Cut_Left48
  L__Str_Cut_Left49
  L__Str_Cut_Left50
  L__Str_Cut_Left51
  L__Str_Cut_Left52
  L_end__Str_Cut_Right
  la36
  L__Str_Cut_Right55
  L__Str_Cut_Right56
  L__Str_Cut_Right57
  L__Str_Cut_Right58
  L__Str_Cut_Right59
  L__Str_Cut_Right60
  L__Str_Cut_Right61
  L__Str_Cut_Right62
  L__Str_Cut_Right63
  L_end_dspic_additional_string_library_Adjust_1
  L_end__LongWord2StrWithZeros
  L__LongWord2StrWithZeros66
  L__LongWord2StrWithZeros67
  L__LongWord2StrWithZeros68
  L__LongWord2StrWithZeros69
  L__LongWord2StrWithZeros70
  L__LongWord2StrWithZeros71
  L__LongWord2StrWithZeros72
  L__LongWord2StrWithZeros73
  loop_1
  L_end__Word2StrWithZeros
  L__Word2StrWithZeros76
  L__Word2StrWithZeros77
  L__Word2StrWithZeros78
  L__Word2StrWithZeros79
  L__Word2StrWithZeros80
  L__Word2StrWithZeros81
  L__Word2StrWithZeros82
  L__Word2StrWithZeros83
  loop_2
  L_end__Byte2StrWithZeros
  L__Byte2StrWithZeros86
  L__Byte2StrWithZeros87
  L__Byte2StrWithZeros88
  L__Byte2StrWithZeros89
  L__Byte2StrWithZeros90
  L__Byte2StrWithZeros91
  L__Byte2StrWithZeros92
  L__Byte2StrWithZeros93
  loop_3
  L_end__Short2StrWithZeros
  L__Short2StrWithZeros96
  L__Short2StrWithZeros97
  L__Short2StrWithZeros98
  L__Short2StrWithZeros99
  L_end__Int2StrWithZeros
  L__Int2StrWithZeros101
  L__Int2StrWithZeros102
  L__Int2StrWithZeros103
  L__Int2StrWithZeros104
  L_end__LongInt2StrWithZeros
  L__LongInt2StrWithZeros106
  L__LongInt2StrWithZeros107
  L__LongInt2StrWithZeros108
  L__LongInt2StrWithZeros109
  L_end__Short2Str
  L__Short2Str111
  L__Short2Str112
  L__Short2Str113
  L__Short2Str114
  L__Short2Str115
  L__Short2Str116
  L__Short2Str117
  L_end__Int2Str
  L__Int2Str119
  L__Int2Str120
  L__Int2Str121
  L__Int2Str122
  L__Int2Str123
  L__Int2Str124
  L__Int2Str125
  L_end__LongInt2Str
  L__LongInt2Str127
  L__LongInt2Str128
  L__LongInt2Str129
  L__LongInt2Str130
  L__LongInt2Str131
  L__LongInt2Str132
  L__LongInt2Str133
  L_end__Byte2Str
  L__Byte2Str135
  L__Byte2Str136
  L__Byte2Str137
  L_end__Word2Str
  L__Word2Str139
  L__Word2Str140
  L__Word2Str141
  L_end__LongWord2Str
  L__LongWord2Str143
  L__LongWord2Str144
  L__LongWord2Str145
  L__Float2Str_end_Float
  L_end__Float2Str
  L__Float2Str148
  L__Float2Str149
  L__Float2Str150
  L__Float2Str151
  L__Float2Str152
  L__Float2Str153
  L__Float2Str154
  L__Float2Str155
  L__Float2Str156
  L__Float2Str157
  L__Float2Str158
  L__Float2Str159
  L__Float2Str_5_end_Float1
  L_end__Float2Str_5
  L__Float2Str_5162
  L__Float2Str_5163
  L__Float2Str_5164
  L__Float2Str_5165
  L__Float2Str_5166
  L__Float2Str_5167
  L__Float2Str_5168
  L__Float2Str_5169
  L__Float2Str_5170
  L__Float2Str_5171
  L__Float2Str_5172
  L__Float2Str_5173
  L_end_dspic_additional_string_library_adjust_char_
  L_dspic_additional_string_library_adjust_char_175
  L_dspic_additional_string_library_adjust_char_176
  L_dspic_additional_string_library_adjust_char_177
  L_end__Str2Byte
  L__Str2Byte179
  L__Str2Byte180
  L__Str2Byte181
  L__Str2Byte182
  L__Str2Byte183
  L__Str2Byte184
  L__Str2Byte185
  L__Str2Byte186
  L_end__Str2Short
  L__Str2Short188
  L__Str2Short189
  L__Str2Short190
  L__Str2Short191
  L__Str2Short192
  L__Str2Short193
  L__Str2Short194
  L__Str2Short195
  L__Str2Short196
  L__Str2Short197
  L__Str2Short198
  L_end__Str2Word
  L__Str2Word200
  L__Str2Word201
  L__Str2Word202
  L__Str2Word203
  L__Str2Word204
  L__Str2Word205
  L__Str2Word206
  L__Str2Word207
  L_end__Str2Int
  L__Str2Int209
  L__Str2Int210
  L__Str2Int211
  L__Str2Int212
  L__Str2Int213
  L__Str2Int214
  L__Str2Int215
  L__Str2Int216
  L__Str2Int217
  L__Str2Int218
  L__Str2Int219
  L_end__Str2LongWord
  L__Str2LongWord221
  L__Str2LongWord222
  L__Str2LongWord223
  L__Str2LongWord224
  L__Str2LongWord225
  L__Str2LongWord226
  L__Str2LongWord227
  L__Str2LongWord228
  L_end__Str2LongInt
  L__Str2LongInt230
  L__Str2LongInt231
  L__Str2LongInt232
  L__Str2LongInt233
  L__Str2LongInt234
  L__Str2LongInt235
  L__Str2LongInt236
  L__Str2LongInt237
  L__Str2LongInt238
  L__Str2LongInt239
  L__Str2LongInt240
  L__Str2LongInt241
  L__Str2LongInt242
  L__Str2LongInt243
  L_end__Str2Float
  L__Str2Float245
  L__Str2Float246
  L__Str2Float247
  L__Str2Float248
  L__Str2Float249
  L__Str2Float250
  L__Str2Float251
  L__Str2Float252
  L__Str2Float253
  L__Str2Float254
  L__Str2Float255
  L__Str2Float256
  L__Str2Float257
  L__Str2Float258
  L__Str2Float259
  L__Str2Float260
  L__Str2Float261
  L_end__Byte2Hex
  L__Byte2Hex263
  L__Byte2Hex264
  L__Byte2Hex265
  L__Byte2Hex266
  L__Byte2Hex267
  L__Byte2Hex268
  L_end__Word2Hex
  L_end_dspic_additional_string_library_adjust_hex_
  L_dspic_additional_string_library_adjust_hex_271
  L_dspic_additional_string_library_adjust_hex_272
  L_dspic_additional_string_library_adjust_hex_273
  L_dspic_additional_string_library_adjust_hex_274
  L_dspic_additional_string_library_adjust_hex_275
  L_dspic_additional_string_library_adjust_hex_276
  L_dspic_additional_string_library_adjust_hex_277
  L_dspic_additional_string_library_adjust_hex_278
  L_dspic_additional_string_library_adjust_hex_279
  L_end__Hex2Byte
  L_end__Hex2Word
  L_end__Ip2Str
  L__Ip2Str283
  L__Ip2Str284
  L__Ip2Str285
  L__Ip2Str286
  L__Ip2Str287
  L__Ip2Str288
  L__Ip2Str289
  L__Ip2Str290
  L_end__Mac2Str
  L__Mac2Str292
  L__Mac2Str293
  L__Mac2Str294
  L__Mac2Str295
  L__Mac2Str296
  L_end__Str2Ip
  L__Str2Ip298
  L__Str2Ip299
  L__Str2Ip300
  L__Str2Ip301
  L__Str2Ip302
  L__Str2Ip303
  L__Str2Ip304
  L__Str2Ip305
  L__Str2Ip306
  L__Str2Ip307
  L__Str2Ip308
  L__Str2Ip309
  L__Str2Ip310
  L__Str2Ip311
  L__Str2Ip312
  L__Str2Ip313
  L__Str2Ip314
  L__Str2Ip315
  L__Str2Ip316
  L__Str2Ip317
  L__Str2Ip318
  L__Str2Ip319
  L__Str2Ip320
  L__Str2Ip321
  L__Str2Ip322
  L__Str2Ip323
  L__Str2Ip324
  L__Str2Ip325
  L__Str2Ip326
  L__Str2Ip327
  L__Str2Ip328
  L__Str2Ip329
  L__Str2Ip330
  L__Str2Ip331
  L__Str2Ip332
  L__Str2Ip333
  L__Str2Ip334
  L__Str2Ip335
  L__Str2Ip336
  L_end__Str2Mac
  L__Str2Mac338
  L__Str2Mac339
  L__Str2Mac340
  L__Str2Mac341
  L__Str2Mac342
  L__Str2Mac343
  L__Str2Mac344
  L__Str2Mac345
  L_end__Str2Ip_
  L__Str2Ip_347
  L__Str2Ip_348
  L__Str2Ip_349
  L__Str2Ip_350
  L__Str2Ip_351
  L__Str2Ip_352
  L__Str2Ip_353
  L__Str2Ip_354
  L__Str2Ip_355
  L__Str2Ip_356
  L__Str2Ip_357
  L__Str2Ip_358
  L__Str2Ip_359
  L__Str2Ip_360
  L__Str2Ip_361
  L__Str2Ip_362
  L__Str2Ip_363
  L__Str2Ip_364
  L__Str2Ip_365
  L__Str2Ip_366
  L__Str2Ip_367
  L__Str2Ip_368
  L__Str2Ip_369
  L__Str2Ip_370
  L__Str2Ip_371
  L__Str2Ip_372
  L__Str2Ip_373
  L__Str2Ip_374
  L__Str2Ip_375
  L__Str2Ip_376
  L__Str2Ip_377
  L__Str2Ip_378
  L__Str2Ip_379
  L__Str2Ip_380
  L__Str2Ip_381
  L__Str2Ip_382
  L__Str2Ip_383
  L__Str2Ip_384
  L__Str2Ip_385
  L_end__Str2Mac_
  L__Str2Mac_387
  L__Str2Mac_388
  L__Str2Mac_389
  L__Str2Mac_390
  L__Str2Mac_391
  L__Str2Mac_392
  L__Str2Mac_393
  L__Str2Mac_394
  L_end__BcdToDec
  L_end__BcdToDec16
  L_end__DecToBcd
  L_end__DecToBcd16
  L__Short2StrWithZeros399
  L__Int2StrWithZeros400
  L__LongInt2StrWithZeros401
  L__Short2Str402
  L__Int2Str403
  L__LongInt2Str404
  L__Str2Ip405
  L__Str2Ip_406
  L_end_DSPIC_aditional_string_library_version
  _DSPIC_aditional_string_library_version
  L_end_Swap_B
  _Swap_B
  L_end_Swap_F
  _Swap_F
  L_end_Mem_Cpy
  _Mem_Cpy
  L_end_Mem_Cmp
  _Mem_Cmp
  L_end_Mem_Set
  _Mem_Set
  L_end_Mem_Chr
  _Mem_Chr
  L_end_Str_Len
  _Str_Len
  L_end_Str_Cut_Chr
  _Str_Cut_Chr
  L_end_Str_Cat
  _Str_Cat
  L_end_Str_Chr
  _Str_Chr
  L_end_Str_Cpy
  _Str_Cpy
  L_end_Str_Cmp
  _Str_Cmp
  L_end_Str_Replace_Chr
  _Str_Replace_Chr
  L_end_Str_Replace_Chr_F
  _Str_Replace_Chr_F
  L_end_Str_Split
  _Str_Split
  L__Str_Split423
  L_end_Str_Insert_Chr
  _Str_Insert_Chr
  L__Str_Insert_Chr425
  L_end_Str_AppendPre
  _Str_AppendPre
  L_end_Str_AppendSuf
  _Str_AppendSuf
  L_end_Str_Cut_Left
  _Str_Cut_Left
  L__Str_Cut_Left429
  L__Str_Cut_Left430
  L__Str_Cut_Left431
  L_end_Str_Cut_Right
  _Str_Cut_Right
  L__Str_Cut_Right433
  L__Str_Cut_Right434
  L__Str_Cut_Right435
  L_end_Adjust_1
  dspic_additional_string_library_Adjust_1
  L_end_LongWord2StrWithZeros
  _LongWord2StrWithZeros
  L__LongWord2StrWithZeros438
  L__LongWord2StrWithZeros439
  L_end_Word2StrWithZeros
  _Word2StrWithZeros
  L__Word2StrWithZeros441
  L__Word2StrWithZeros442
  L_end_Byte2StrWithZeros
  _Byte2StrWithZeros
  L__Byte2StrWithZeros444
  L__Byte2StrWithZeros445
  L_end_Short2StrWithZeros
  _Short2StrWithZeros
  L__Short2StrWithZeros447
  L_end_Int2StrWithZeros
  _Int2StrWithZeros
  L__Int2StrWithZeros449
  L_end_LongInt2StrWithZeros
  _LongInt2StrWithZeros
  L__LongInt2StrWithZeros451
  L_end_Short2Str
  _Short2Str
  L__Short2Str453
  L__Short2Str454
  L_end_Int2Str
  _Int2Str
  L__Int2Str456
  L__Int2Str457
  L_end_LongInt2Str
  _LongInt2Str
  L__LongInt2Str459
  L__LongInt2Str460
  L_end_Byte2Str
  _Byte2Str
  L__Byte2Str462
  L_end_Word2Str
  _Word2Str
  L__Word2Str464
  L_end_LongWord2Str
  _LongWord2Str
  L__LongWord2Str466
  L_end_Float2Str
  _Float2Str
  L__Float2Str468
  L__Float2Str469
  L__Float2Str470
  L__Float2Str471
  L__Float2Str472
  L_end_Float2Str_5
  _Float2Str_5
  L__Float2Str_5474
  L__Float2Str_5475
  L__Float2Str_5476
  L__Float2Str_5477
  L__Float2Str_5478
  L_end_adjust_char_
  dspic_additional_string_library_adjust_char_
  L_dspic_additional_string_library_adjust_char_480
  L_dspic_additional_string_library_adjust_char_481
  L_dspic_additional_string_library_adjust_char_482
  L_end_Str2Byte
  _Str2Byte
  L__Str2Byte484
  L__Str2Byte485
  L_end_Str2Short
  _Str2Short
  L__Str2Short487
  L__Str2Short488
  L__Str2Short489
  L_end_Str2Word
  _Str2Word
  L__Str2Word491
  L__Str2Word492
  L_end_Str2Int
  _Str2Int
  L__Str2Int494
  L__Str2Int495
  L__Str2Int496
  L_end_Str2LongWord
  _Str2LongWord
  L__Str2LongWord498
  L__Str2LongWord499
  L_end_Str2LongInt
  _Str2LongInt
  L__Str2LongInt501
  L__Str2LongInt502
  L__Str2LongInt503
  L__Str2LongInt504
  L_end_Str2Float
  _Str2Float
  L__Str2Float506
  L__Str2Float507
  L__Str2Float508
  L__Str2Float509
  L__Str2Float510
  L__Str2Float511
  L__Str2Float512
  L_end_Byte2Hex
  _Byte2Hex
  L__Byte2Hex514
  L__Byte2Hex515
  L_end_Word2Hex
  _Word2Hex
  L_end_adjust_hex_
  dspic_additional_string_library_adjust_hex_
  L_dspic_additional_string_library_adjust_hex_518
  L_dspic_additional_string_library_adjust_hex_519
  L_dspic_additional_string_library_adjust_hex_520
  L_dspic_additional_string_library_adjust_hex_521
  L_dspic_additional_string_library_adjust_hex_522
  L_dspic_additional_string_library_adjust_hex_523
  L_dspic_additional_string_library_adjust_hex_524
  L_dspic_additional_string_library_adjust_hex_525
  L_dspic_additional_string_library_adjust_hex_526
  L_end_Hex2Byte
  _Hex2Byte
  L_end_Hex2Word
  _Hex2Word
  L_end_Ip2Str
  _Ip2Str
  L__Ip2Str530
  L__Ip2Str531
  L_end_Mac2Str
  _Mac2Str
  L__Mac2Str533
  L_end_Str2Ip
  _Str2Ip
  L__Str2Ip535
  L__Str2Ip536
  L__Str2Ip537
  L__Str2Ip538
  L__Str2Ip539
  L__Str2Ip540
  L__Str2Ip541
  L__Str2Ip542
  L__Str2Ip543
  L_end_Str2Mac
  _Str2Mac
  L__Str2Mac545
  L__Str2Mac546
  L_end_Str2Ip_
  _Str2Ip_
  L__Str2Ip_548
  L__Str2Ip_549
  L__Str2Ip_550
  L__Str2Ip_551
  L__Str2Ip_552
  L__Str2Ip_553
  L__Str2Ip_554
  L__Str2Ip_555
  L__Str2Ip_556
  L_end_Str2Mac_
  _Str2Mac_
  L__Str2Mac_558
  L__Str2Mac_559
  L_end_BcdToDec
  _BcdToDec
  L_end_BcdToDec16
  _BcdToDec16
  L_end_DecToBcd
  _DecToBcd
  L_end_DecToBcd16
  _DecToBcd16
  L_end__Interrupt_Timer2
  L__Interrupt_Timer21
  L__Interrupt_Timer22
  L__Interrupt_Timer23
  L_end__Interrupt_PinChange
  L_end__MapAndPrint
  L__MapAndPrint6
  L__MapAndPrint7
  L__MapAndPrint8
  L_end__PingAndPrint
  L__PingAndPrint10
  L__PingAndPrint11
  L__PingAndPrint12
  L_end__NtpRequest
  L_end__main
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main22
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L_end_Interrupt_Timer2
  _Interrupt_Timer2
  L__Interrupt_Timer269
  L_end_Interrupt_PinChange
  _Interrupt_PinChange
  L_end_MapAndPrint
  _MapAndPrint
  L__MapAndPrint72
  L_end_PingAndPrint
  _PingAndPrint
  L__PingAndPrint74
  L_end_NtpRequest
  _NtpRequest
  L_end_main
  _main
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main_end_loop
  L_end__Save_Configuration
  L_end__Save_Configuration1
  L_end__Read_Stored_Rom_Code
  L_end__Eth_SetParameters
  L_end__Init_SNMP_var
  L_end__Eth_UserProcess_Main
  L_end__Eth_UserProcess
  L_end__Eth_UserTCP
  L_end__Eth_UserUDP
  L_end_Save_Configuration
  _Save_Configuration
  L_end_Save_Configuration1
  _Save_Configuration1
  L_end_Read_Stored_Rom_Code
  _Read_Stored_Rom_Code
  L_end_Eth_SetParameters
  _Eth_SetParameters
  L_end_Init_SNMP_var
  _Init_SNMP_var
  L_end_Eth_UserProcess_Main
  _Eth_UserProcess_Main
  L_end_Eth_UserProcess
  _Eth_UserProcess
  L_end_Eth_UserTCP
  _Eth_UserTCP
  L_end_Eth_UserUDP
  _Eth_UserUDP
  L_end_helperfunctions_FindPeriod
  L_helperfunctions_FindPeriod1
  L_helperfunctions_FindPeriod2
  L_helperfunctions_FindPeriod3
  L_helperfunctions_FindPeriod4
  L_helperfunctions_FindPeriod5
  L_helperfunctions_FindPeriod6
  L_helperfunctions_FindPeriod7
  L_helperfunctions_FindPeriod8
  L_end__TruncFloat
  L__TruncFloat10
  L__TruncFloat11
  L__TruncFloat12
  L__TruncFloat13
  L__TruncFloat14
  L__TruncFloat15
  L__TruncFloat16
  L__TruncFloat17
  L__TruncFloat18
  L__TruncFloat19
  L__TruncFloat20
  L_end__SwapBytes
  L_end__IsValidHexChar
  L_end__IsValidIPChar
  L_end__IsNumeric
  L_end__HexToLongWord
  L__HexToLongWord26
  L__HexToLongWord27
  L__HexToLongWord28
  L__HexToLongWord29
  L__HexToLongWord30
  L__HexToLongWord31
  L__HexToLongWord32
  L__HexToLongWord33
  L__HexToLongWord34
  L__HexToLongWord35
  L__HexToLongWord36
  L__HexToLongWord37
  L__HexToLongWord38
  L__HexToLongWord39
  L_end__HexToWord
  L__HexToWord41
  L__HexToWord42
  L__HexToWord43
  L__HexToWord44
  L__HexToWord45
  L__HexToWord46
  L__HexToWord47
  L__HexToWord48
  L__HexToWord49
  L__HexToWord50
  L__HexToWord51
  L__HexToWord52
  L__HexToWord53
  L__HexToWord54
  L_end__TrimValue
  L__TrimValue56
  L__TrimValue57
  L__TrimValue58
  L__TrimValue59
  L__TrimValue60
  L__TrimValue61
  L__TrimValue62
  L__TrimValue63
  L__TrimValue64
  L__TrimValue65
  L_end__IPAddressToStr
  L_end__MACAddressToStr
  L_end__StrToIPAddress
  L__StrToIPAddress69
  L__StrToIPAddress70
  L__StrToIPAddress71
  L__StrToIPAddress72
  L__StrToIPAddress73
  L__StrToIPAddress74
  L__StrToIPAddress75
  L__StrToIPAddress76
  L__StrToIPAddress77
  L__StrToIPAddress78
  L__StrToIPAddress79
  L__StrToIPAddress80
  L__StrToIPAddress81
  L__StrToIPAddress82
  L__StrToIPAddress83
  L__StrToIPAddress84
  L__StrToIPAddress85
  L__StrToIPAddress86
  L__StrToIPAddress87
  L__StrToIPAddress88
  L__StrToIPAddress89
  L__StrToIPAddress90
  L__StrToIPAddress91
  L__StrToIPAddress92
  L__StrToIPAddress93
  L__StrToIPAddress94
  L__StrToIPAddress95
  L__StrToIPAddress96
  L__StrToIPAddress97
  L__StrToIPAddress98
  L__StrToIPAddress99
  L__StrToIPAddress100
  L__StrToIPAddress101
  L__StrToIPAddress102
  L__StrToIPAddress103
  L__StrToIPAddress104
  L__StrToIPAddress105
  L__StrToIPAddress106
  L__StrToIPAddress107
  L__StrToIPAddress108
  L__StrToIPAddress109
  L__StrToIPAddress110
  L__StrToIPAddress111
  L__StrToIPAddress112
  L__StrToIPAddress113
  L__StrToIPAddress114
  L__StrToIPAddress115
  L__StrToIPAddress116
  L__StrToIPAddress117
  L__StrToIPAddress118
  L__StrToIPAddress119
  L__StrToIPAddress120
  L__StrToIPAddress121
  L__StrToIPAddress122
  L__StrToIPAddress123
  L__StrToIPAddress124
  L__StrToIPAddress125
  L__StrToIPAddress126
  L__StrToIPAddress127
  L__StrToIPAddress128
  L_end__Map_KSEG_To_Physical
  L_end__Map_Physical_To_KSEG1
  L_end__Map_Physical_To_KSEG0
  L_end__Map_KSEG0_To_KSEG1
  L_end_FindPeriod
  helperfunctions_FindPeriod
  L_helperfunctions_FindPeriod134
  L_helperfunctions_FindPeriod135
  L_helperfunctions_FindPeriod136
  L_helperfunctions_FindPeriod137
  L_end_TruncFloat
  _TruncFloat
  L__TruncFloat139
  L__TruncFloat140
  L__TruncFloat141
  L__TruncFloat142
  L__TruncFloat143
  L_end_SwapBytes
  _SwapBytes
  L_end_IsValidHexChar
  _IsValidHexChar
  L__IsValidHexChar146
  L__IsValidHexChar147
  L__IsValidHexChar148
  L__IsValidHexChar149
  L__IsValidHexChar150
  L__IsValidHexChar151
  L_end_IsValidIPChar
  _IsValidIPChar
  L__IsValidIPChar153
  L__IsValidIPChar154
  L__IsValidIPChar155
  L__IsValidIPChar156
  L_end_IsNumeric
  _IsNumeric
  L__IsNumeric158
  L__IsNumeric159
  L_end_HexToLongWord
  _HexToLongWord
  L__HexToLongWord161
  L__HexToLongWord162
  L__HexToLongWord163
  L__HexToLongWord164
  L__HexToLongWord165
  L__HexToLongWord166
  L__HexToLongWord167
  L__HexToLongWord168
  L_end_HexToWord
  _HexToWord
  L__HexToWord170
  L__HexToWord171
  L__HexToWord172
  L__HexToWord173
  L_end_TrimValue
  _TrimValue
  L__TrimValue175
  L__TrimValue176
  L__TrimValue177
  L__TrimValue178
  L_end_IPAddressToStr
  _IPAddressToStr
  L_end_MACAddressToStr
  _MACAddressToStr
  L_end_StrToIPAddress
  _StrToIPAddress
  L__StrToIPAddress182
  L__StrToIPAddress183
  L__StrToIPAddress184
  L__StrToIPAddress185
  L__StrToIPAddress186
  L__StrToIPAddress187
  L__StrToIPAddress188
  L__StrToIPAddress189
  L__StrToIPAddress190
  L__StrToIPAddress191
  L__StrToIPAddress192
  L__StrToIPAddress193
  L__StrToIPAddress194
  L__StrToIPAddress195
  L__StrToIPAddress196
  L__StrToIPAddress197
  L__StrToIPAddress198
  L__StrToIPAddress199
  L__StrToIPAddress200
  L__StrToIPAddress201
  L__StrToIPAddress202
  L__StrToIPAddress203
  L__StrToIPAddress204
  L__StrToIPAddress205
  L__StrToIPAddress206
  L_end_Map_KSEG_To_Physical
  _Map_KSEG_To_Physical
  L_end_Map_Physical_To_KSEG1
  _Map_Physical_To_KSEG1
  L_end_Map_Physical_To_KSEG0
  _Map_Physical_To_KSEG0
  L_end_Map_KSEG0_To_KSEG1
  _Map_KSEG0_To_KSEG1
  L_end__DisableInt
  L_end__EnableInt
  L_end__delayms
  L__delayms3
  L__delayms4
  L__delayms5
  L__delayms6
  L__delayms7
  L_end__Eth_Select
  L_end__Eth_UnSelect
  L_end__Spi_Read_
  L__Spi_Read_11
  L__Spi_Read_12
  L__Spi_Read_13
  L__Spi_Read_14
  L__Spi_Read_15
  L__Spi_Read_16
  L__Spi_Read_17
  L__Spi_Read_18
  L__Spi_Read_19
  L__Spi_Read_20
  L_end_lib1_enc600_V3_5_b_WCmd1
  L_end_lib1_enc600_V3_5_b_WCmd2
  L_end_lib1_enc600_V3_5_b_RCmd2
  L_end_lib1_enc600_V3_5_b_RCmd2W
  L_end_lib1_enc600_V3_5_b_WCmd3
  L_end_lib1_enc600_V3_5_b_RCmd3
  L_end_lib1_enc600_V3_5_b_RCmd3W
  L_end_lib1_enc600_V3_5_b_WCmd4
  L_end__Eth_BSF
  L_end__Eth_BCF
  L_end__Eth_ReadReg
  L_end__Eth_WriteReg
  L_end__Eth_SendSystemReset
  L__Eth_SendSystemReset34
  L__Eth_SendSystemReset35
  L__Eth_SendSystemReset36
  L__Eth_SendSystemReset37
  L__Eth_SendSystemReset38
  L__Eth_SendSystemReset39
  L__Eth_SendSystemReset40
  L__Eth_SendSystemReset41
  L__Eth_SendSystemReset42
  L__Eth_SendSystemReset43
  L__Eth_SendSystemReset44
  L__Eth_SendSystemReset45
  L__Eth_SendSystemReset46
  L__Eth_SendSystemReset47
  L__Eth_SendSystemReset48
  L__Eth_SendSystemReset49
  L__Eth_SendSystemReset50
  L__Eth_SendSystemReset51
  L__Eth_SendSystemReset52
  L__Eth_SendSystemReset53
  L__Eth_SendSystemReset54
  L__Eth_SendSystemReset55
  L__Eth_SendSystemReset57
  L__Eth_SendSystemReset58
  L__Eth_SendSystemReset59
  L__Eth_SendSystemReset60
  L_end__Eth_PutByte
  L_end__Eth_GetByte
  L_end__Eth_WritePHYReg
  L__Eth_WritePHYReg65
  L__Eth_WritePHYReg66
  L__Eth_WritePHYReg67
  L__Eth_WritePHYReg68
  L__Eth_WritePHYReg69
  L_end__Eth_ReadPHYReg
  L__Eth_ReadPHYReg71
  L__Eth_ReadPHYReg72
  L__Eth_ReadPHYReg73
  L__Eth_ReadPHYReg74
  L__Eth_ReadPHYReg75
  L_end__Check_Link
  L__Check_Link77
  L__Check_Link78
  L__Check_Link79
  L__Check_Link80
  L__Check_Link81
  L__Check_Link82
  L_end__CopyEthMemToRam
  L__CopyEthMemToRam84
  L__CopyEthMemToRam85
  L__CopyEthMemToRam86
  L__CopyEthMemToRam87
  L__CopyEthMemToRam88
  L__CopyEthMemToRam89
  L__CopyEthMemToRam90
  L__CopyEthMemToRam91
  L_end__CopyEthMem_CPToRam
  L__CopyEthMem_CPToRam93
  L__CopyEthMem_CPToRam94
  L__CopyEthMem_CPToRam95
  L__CopyEthMem_CPToRam96
  L__CopyEthMem_CPToRam97
  L__CopyEthMem_CPToRam98
  L__CopyEthMem_CPToRam99
  L__CopyEthMem_CPToRam100
  L_end__CopyEthMemToRam_Inv
  L__CopyEthMemToRam_Inv102
  L__CopyEthMemToRam_Inv103
  L__CopyEthMemToRam_Inv104
  L__CopyEthMemToRam_Inv105
  L__CopyEthMemToRam_Inv106
  L__CopyEthMemToRam_Inv107
  L__CopyEthMemToRam_Inv108
  L__CopyEthMemToRam_Inv109
  L_end__CopyEthMem_CPToRam_Inv
  L__CopyEthMem_CPToRam_Inv111
  L__CopyEthMem_CPToRam_Inv112
  L__CopyEthMem_CPToRam_Inv113
  L__CopyEthMem_CPToRam_Inv114
  L__CopyEthMem_CPToRam_Inv115
  L__CopyEthMem_CPToRam_Inv116
  L__CopyEthMem_CPToRam_Inv117
  L__CopyEthMem_CPToRam_Inv118
  L_end__CopyEthMemToEthMem
  L__CopyEthMemToEthMem120
  L__CopyEthMemToEthMem121
  L__CopyEthMemToEthMem122
  L__CopyEthMemToEthMem123
  L__CopyEthMemToEthMem124
  L__CopyEthMemToEthMem125
  L__CopyEthMemToEthMem126
  L__CopyEthMemToEthMem127
  L_end__CopyRamToEthMem
  L__CopyRamToEthMem129
  L__CopyRamToEthMem130
  L__CopyRamToEthMem131
  L__CopyRamToEthMem132
  L__CopyRamToEthMem133
  L__CopyRamToEthMem134
  L__CopyRamToEthMem135
  L__CopyRamToEthMem136
  L_end__CopyRamToEthMem_Inv
  L__CopyRamToEthMem_Inv138
  L__CopyRamToEthMem_Inv139
  L__CopyRamToEthMem_Inv140
  L__CopyRamToEthMem_Inv141
  L__CopyRamToEthMem_Inv142
  L__CopyRamToEthMem_Inv143
  L__CopyRamToEthMem_Inv144
  L__CopyRamToEthMem_Inv145
  L_end__CopyRamToEthMem_CP
  L__CopyRamToEthMem_CP147
  L__CopyRamToEthMem_CP148
  L__CopyRamToEthMem_CP149
  L__CopyRamToEthMem_CP150
  L__CopyRamToEthMem_CP151
  L__CopyRamToEthMem_CP152
  L__CopyRamToEthMem_CP153
  L__CopyRamToEthMem_CP154
  L_end__CopyRamToEthMem_Inv_CP
  L__CopyRamToEthMem_Inv_CP156
  L__CopyRamToEthMem_Inv_CP157
  L__CopyRamToEthMem_Inv_CP158
  L__CopyRamToEthMem_Inv_CP159
  L__CopyRamToEthMem_Inv_CP160
  L__CopyRamToEthMem_Inv_CP161
  L__CopyRamToEthMem_Inv_CP162
  L__CopyRamToEthMem_Inv_CP163
  L_end__EthMemSet
  L__EthMemSet165
  L__EthMemSet166
  L__EthMemSet167
  L__EthMemSet168
  L__EthMemSet169
  L__EthMemSet170
  L__EthMemSet171
  L__EthMemSet172
  L_end__EthMemSet_CP
  L__EthMemSet_CP174
  L__EthMemSet_CP175
  L__EthMemSet_CP176
  L__EthMemSet_CP177
  L__EthMemSet_CP178
  L__EthMemSet_CP179
  L__EthMemSet_CP180
  L__EthMemSet_CP181
  L_end__CopyRamStringToEthMem_CP
  L__CopyRamStringToEthMem_CP183
  L__CopyRamStringToEthMem_CP184
  L__CopyRamStringToEthMem_CP185
  L__CopyRamStringToEthMem_CP186
  L__CopyRamStringToEthMem_CP187
  L__CopyRamStringToEthMem_CP188
  L__CopyRamStringToEthMem_CP189
  L__CopyRamStringToEthMem_CP190
  L_end__CopyRamStringToEthMem_CP_a
  L__CopyRamStringToEthMem_CP_a192
  L__CopyRamStringToEthMem_CP_a193
  L__CopyRamStringToEthMem_CP_a194
  L__CopyRamStringToEthMem_CP_a195
  L__CopyRamStringToEthMem_CP_a196
  L__CopyRamStringToEthMem_CP_a197
  L__CopyRamStringToEthMem_CP_a198
  L__CopyRamStringToEthMem_CP_a199
  L_end__CopyFlashToEthMem
  L__CopyFlashToEthMem201
  L__CopyFlashToEthMem202
  L__CopyFlashToEthMem203
  L__CopyFlashToEthMem204
  L__CopyFlashToEthMem205
  L__CopyFlashToEthMem206
  L__CopyFlashToEthMem207
  L__CopyFlashToEthMem208
  L_end__CopyFlashToEthMem_CP
  L__CopyFlashToEthMem_CP210
  L__CopyFlashToEthMem_CP211
  L__CopyFlashToEthMem_CP212
  L__CopyFlashToEthMem_CP213
  L__CopyFlashToEthMem_CP214
  L__CopyFlashToEthMem_CP215
  L__CopyFlashToEthMem_CP216
  L__CopyFlashToEthMem_CP217
  L_end__CopyFlashStringToEthMem
  L__CopyFlashStringToEthMem219
  L__CopyFlashStringToEthMem220
  L__CopyFlashStringToEthMem221
  L__CopyFlashStringToEthMem222
  L__CopyFlashStringToEthMem223
  L__CopyFlashStringToEthMem224
  L__CopyFlashStringToEthMem225
  L__CopyFlashStringToEthMem226
  L_end__CopyFlashStringToEthMem_CP
  L__CopyFlashStringToEthMem_CP228
  L__CopyFlashStringToEthMem_CP229
  L__CopyFlashStringToEthMem_CP230
  L__CopyFlashStringToEthMem_CP231
  L__CopyFlashStringToEthMem_CP232
  L__CopyFlashStringToEthMem_CP233
  L__CopyFlashStringToEthMem_CP234
  L__CopyFlashStringToEthMem_CP235
  L_end__WriteToEthMem
  L_end__ReadFromEthMem
  L_end__EthMemCompareWithRam
  L__EthMemCompareWithRam239
  L__EthMemCompareWithRam240
  L__EthMemCompareWithRam241
  L__EthMemCompareWithRam242
  L__EthMemCompareWithRam243
  L__EthMemCompareWithRam244
  L__EthMemCompareWithRam245
  L__EthMemCompareWithRam246
  L__EthMemCompareWithRam247
  L__EthMemCompareWithRam248
  L__EthMemCompareWithRam249
  L_end__EthMemCompareWithFlash
  L__EthMemCompareWithFlash251
  L__EthMemCompareWithFlash252
  L__EthMemCompareWithFlash253
  L__EthMemCompareWithFlash254
  L__EthMemCompareWithFlash255
  L__EthMemCompareWithFlash256
  L__EthMemCompareWithFlash257
  L__EthMemCompareWithFlash258
  L__EthMemCompareWithFlash259
  L__EthMemCompareWithFlash260
  L__EthMemCompareWithFlash261
  L_end__Eth_Cksum
  L__Eth_Cksum263
  L__Eth_Cksum264
  L__Eth_Cksum265
  L__Eth_Cksum266
  L__Eth_Cksum267
  L__Eth_Cksum268
  L__Eth_Cksum269
  L__Eth_Cksum270
  L__Eth_Cksum271
  L__Eth_Cksum272
  L__Eth_Cksum273
  L__Eth_Cksum274
  L__Eth_Cksum275
  L_end__Firewall
  L_end__Eth_Policy
  L_end_DisableInt
  _DisableInt
  L_end_EnableInt
  _EnableInt
  L_end_delayms
  _delayms
  L__delayms281
  L_end_Eth_Select
  _Eth_Select
  L_end_Eth_UnSelect
  _Eth_UnSelect
  L_end_Spi_Read_
  _Spi_Read_
  L_end_WCmd1
  lib1_enc600_V3_5_b_WCmd1
  L_end_WCmd2
  lib1_enc600_V3_5_b_WCmd2
  L_end_RCmd2
  lib1_enc600_V3_5_b_RCmd2
  L_end_RCmd2W
  lib1_enc600_V3_5_b_RCmd2W
  L_end_WCmd3
  lib1_enc600_V3_5_b_WCmd3
  L_end_RCmd3
  lib1_enc600_V3_5_b_RCmd3
  L_end_RCmd3W
  lib1_enc600_V3_5_b_RCmd3W
  L_end_WCmd4
  lib1_enc600_V3_5_b_WCmd4
  L_end_Eth_BSF
  _Eth_BSF
  L_end_Eth_BCF
  _Eth_BCF
  L_end_Eth_ReadReg
  _Eth_ReadReg
  L_end_Eth_WriteReg
  _Eth_WriteReg
  L_end_Eth_SendSystemReset
  _Eth_SendSystemReset
  L__Eth_SendSystemReset298
  L__Eth_SendSystemReset299
  L__Eth_SendSystemReset300
  L_end_Eth_PutByte
  _Eth_PutByte
  L_end_Eth_GetByte
  _Eth_GetByte
  L_end_Eth_WritePHYReg
  _Eth_WritePHYReg
  L__Eth_WritePHYReg304
  L_end_Eth_ReadPHYReg
  _Eth_ReadPHYReg
  L__Eth_ReadPHYReg306
  L_end_Check_Link
  _Check_Link
  L__Check_Link308
  L__Check_Link309
  L_end_CopyEthMemToRam
  _CopyEthMemToRam
  L__CopyEthMemToRam311
  L__CopyEthMemToRam312
  L_end_CopyEthMem_CPToRam
  _CopyEthMem_CPToRam
  L__CopyEthMem_CPToRam314
  L__CopyEthMem_CPToRam315
  L_end_CopyEthMemToRam_Inv
  _CopyEthMemToRam_Inv
  L__CopyEthMemToRam_Inv317
  L__CopyEthMemToRam_Inv318
  L_end_CopyEthMem_CPToRam_Inv
  _CopyEthMem_CPToRam_Inv
  L__CopyEthMem_CPToRam_Inv320
  L__CopyEthMem_CPToRam_Inv321
  L_end_CopyEthMemToEthMem
  _CopyEthMemToEthMem
  L__CopyEthMemToEthMem323
  L__CopyEthMemToEthMem324
  L_end_CopyRamToEthMem
  _CopyRamToEthMem
  L__CopyRamToEthMem326
  L__CopyRamToEthMem327
  L_end_CopyRamToEthMem_Inv
  _CopyRamToEthMem_Inv
  L__CopyRamToEthMem_Inv329
  L__CopyRamToEthMem_Inv330
  L_end_CopyRamToEthMem_CP
  _CopyRamToEthMem_CP
  L__CopyRamToEthMem_CP332
  L__CopyRamToEthMem_CP333
  L_end_CopyRamToEthMem_Inv_CP
  _CopyRamToEthMem_Inv_CP
  L__CopyRamToEthMem_Inv_CP335
  L__CopyRamToEthMem_Inv_CP336
  L_end_EthMemSet
  _EthMemSet
  L__EthMemSet338
  L__EthMemSet339
  L_end_EthMemSet_CP
  _EthMemSet_CP
  L__EthMemSet_CP341
  L__EthMemSet_CP342
  L_end_CopyRamStringToEthMem_CP
  _CopyRamStringToEthMem_CP
  L__CopyRamStringToEthMem_CP344
  L_end_CopyRamStringToEthMem_CP_a
  _CopyRamStringToEthMem_CP_a
  L__CopyRamStringToEthMem_CP_a346
  L_end_CopyFlashToEthMem
  _CopyFlashToEthMem
  L__CopyFlashToEthMem348
  L__CopyFlashToEthMem349
  L_end_CopyFlashToEthMem_CP
  _CopyFlashToEthMem_CP
  L__CopyFlashToEthMem_CP351
  L__CopyFlashToEthMem_CP352
  L_end_CopyFlashStringToEthMem
  _CopyFlashStringToEthMem
  L__CopyFlashStringToEthMem354
  L_end_CopyFlashStringToEthMem_CP
  _CopyFlashStringToEthMem_CP
  L__CopyFlashStringToEthMem_CP356
  L_end_WriteToEthMem
  _WriteToEthMem
  L_end_ReadFromEthMem
  _ReadFromEthMem
  L_end_EthMemCompareWithRam
  _EthMemCompareWithRam
  L__EthMemCompareWithRam360
  L__EthMemCompareWithRam361
  L__EthMemCompareWithRam362
  L_end_EthMemCompareWithFlash
  _EthMemCompareWithFlash
  L__EthMemCompareWithFlash364
  L__EthMemCompareWithFlash365
  L__EthMemCompareWithFlash366
  L_end_Eth_Cksum
  _Eth_Cksum
  L__Eth_Cksum368
  L__Eth_Cksum369
  L__Eth_Cksum370
  L_end_Firewall
  _Firewall
  L_end_Eth_Policy
  _Eth_Policy
  L_end__Eth_EnableTimer_1s
  L__Eth_EnableTimer_1s1
  L__Eth_EnableTimer_1s2
  L__Eth_EnableTimer_1s3
  L_end__Eth_CounterTask
  L__Eth_CounterTask5
  L__Eth_CounterTask6
  L__Eth_CounterTask7
  L__Eth_CounterTask8
  L__Eth_CounterTask9
  L__Eth_CounterTask10
  L__Eth_CounterTask11
  L__Eth_CounterTask12
  L__Eth_CounterTask13
  L__Eth_CounterTask14
  L__Eth_CounterTask15
  L__Eth_CounterTask16
  L__Eth_CounterTask17
  L__Eth_CounterTask18
  L__Eth_CounterTask19
  L__Eth_CounterTask20
  L__Eth_CounterTask21
  L__Eth_CounterTask22
  L__Eth_CounterTask23
  L__Eth_CounterTask24
  L_end__Eth_EnableReception
  L__Eth_EnableReception26
  L__Eth_EnableReception27
  L__Eth_EnableReception28
  L_end__Eth_Init_
  L__Eth_Init_30
  L__Eth_Init_31
  L__Eth_Init_32
  L_end__Eth_DoPacket
  L__Eth_DoPacket34
  L__Eth_DoPacket35
  L__Eth_DoPacket36
  L__Eth_DoPacket37
  L__Eth_DoPacket38
  L__Eth_DoPacket39
  L__Eth_DoPacket40
  L__Eth_DoPacket41
  L__Eth_DoPacket42
  L__Eth_DoPacket43
  L__Eth_DoPacket44
  L__Eth_DoPacket45
  L__Eth_DoPacket46
  L__Eth_DoPacket47
  L__Eth_DoPacket48
  L__Eth_DoPacket49
  L__Eth_DoPacket50
  L__Eth_DoPacket51
  L__Eth_DoPacket52
  L__Eth_DoPacket53
  L__Eth_DoPacket54
  L__Eth_DoPacket55
  L__Eth_DoPacket56
  L__Eth_DoPacket57
  L__Eth_DoPacket58
  L__Eth_DoPacket59
  L__Eth_DoPacket60
  L__Eth_DoPacket61
  L__Eth_DoPacket62
  L__Eth_DoPacket63
  L__Eth_DoPacket64
  L__Eth_DoPacket65
  L__Eth_DoPacket66
  L__Eth_DoPacket67
  L__Eth_DoPacket68
  L__Eth_DoPacket69
  L__Eth_DoPacket70
  L__Eth_DoPacket71
  L__Eth_DoPacket72
  L__Eth_DoPacket73
  L__Eth_DoPacket74
  L__Eth_DoPacket75
  L__Eth_DoPacket76
  L__Eth_DoPacket77
  L__Eth_DoPacket78
  L__Eth_DoPacket79
  L__Eth_DoPacket80
  L__Eth_DoPacket81
  L__Eth_DoPacket82
  L__Eth_DoPacket83
  L__Eth_DoPacket84
  L__Eth_DoPacket85
  L__Eth_DoPacket86
  L__Eth_DoPacket87
  L__Eth_DoPacket88
  L__Eth_DoPacket89
  L__Eth_DoPacket90
  L__Eth_DoPacket91
  L__Eth_DoPacket92
  L__Eth_DoPacket93
  L__Eth_DoPacket94
  L_end__Do_EthernetProc
  L__Do_EthernetProc96
  L__Do_EthernetProc97
  L__Do_EthernetProc98
  L__Do_EthernetProc99
  L__Do_EthernetProc100
  L_end__Wait_for_LAN
  L__Wait_for_LAN102
  L__Wait_for_LAN103
  L__Wait_for_LAN104
  L__Wait_for_LAN105
  L__Wait_for_LAN106
  L__Wait_for_LAN107
  L__Wait_for_LAN109
  L__Wait_for_LAN110
  L__Wait_for_LAN111
  L__Wait_for_LAN112
  L__Wait_for_LAN113
  L__Wait_for_LAN114
  L_end__Wait_With_Eth
  L__Wait_With_Eth116
  L__Wait_With_Eth117
  L__Wait_With_Eth118
  L__Wait_With_Eth119
  L__Wait_With_Eth120
  L__Wait_for_LAN121
  L_end_Eth_EnableTimer_1s
  _Eth_EnableTimer_1s
  L__Eth_EnableTimer_1s123
  L_end_Eth_CounterTask
  _Eth_CounterTask
  L__Eth_CounterTask125
  L__Eth_CounterTask126
  L__Eth_CounterTask127
  L__Eth_CounterTask128
  L__Eth_CounterTask129
  L__Eth_CounterTask130
  L_end_Eth_EnableReception
  _Eth_EnableReception
  L__Eth_EnableReception132
  L_end_Eth_Init_
  _Eth_Init_
  L__Eth_Init_134
  L_end_Eth_DoPacket
  _Eth_DoPacket
  L__Eth_DoPacket136
  L__Eth_DoPacket137
  L__Eth_DoPacket138
  L__Eth_DoPacket139
  L__Eth_DoPacket140
  L__Eth_DoPacket141
  L__Eth_DoPacket142
  L__Eth_DoPacket143
  L__Eth_DoPacket144
  L__Eth_DoPacket145
  L__Eth_DoPacket146
  L__Eth_DoPacket147
  L__Eth_DoPacket148
  L__Eth_DoPacket149
  L__Eth_DoPacket150
  L__Eth_DoPacket151
  L__Eth_DoPacket152
  L__Eth_DoPacket153
  L__Eth_DoPacket154
  L_end_Do_EthernetProc
  _Do_EthernetProc
  L__Do_EthernetProc156
  L_end_Wait_for_LAN
  _Wait_for_LAN
  L__Wait_for_LAN158
  L__Wait_for_LAN159
  L__Wait_for_LAN160
  L_end_Wait_With_Eth
  _Wait_With_Eth
  L__Wait_With_Eth162
  L_end__Delay_1us_
  L__Delay_1us_1
  L_end__Delay_2us_
  L__Delay_2us_4
  L_end__Delay_3us_
  L__Delay_3us_7
  L_end__Delay_5us_
  L__Delay_5us_10
  L_end__Delay_10us_
  L__Delay_10us_13
  L_end__Delay_12us_
  L__Delay_12us_16
  L_end__Delay_14us_
  L__Delay_14us_19
  L_end__Delay_60us_
  L__Delay_60us_22
  L_end__Delay_70us_
  L__Delay_70us_25
  L_end__Delay_90us_
  L__Delay_90us_28
  L_end__Delay_100us_
  L__Delay_100us_31
  L_end__Delay_120us_
  L__Delay_120us_34
  L_end__Delay_430us_
  L__Delay_430us_37
  L_end__Delay_500us_
  L__Delay_500us_40
  L_end__Delay_1ms_
  L__Delay_1ms_43
  L_end_Delay_1us_
  _Delay_1us_
  L_end_Delay_2us_
  _Delay_2us_
  L_end_Delay_3us_
  _Delay_3us_
  L_end_Delay_5us_
  _Delay_5us_
  L_end_Delay_10us_
  _Delay_10us_
  L_end_Delay_12us_
  _Delay_12us_
  L_end_Delay_14us_
  _Delay_14us_
  L_end_Delay_60us_
  _Delay_60us_
  L_end_Delay_70us_
  _Delay_70us_
  L_end_Delay_90us_
  _Delay_90us_
  L_end_Delay_100us_
  _Delay_100us_
  L_end_Delay_120us_
  _Delay_120us_
  L_end_Delay_430us_
  _Delay_430us_
  L_end_Delay_500us_
  _Delay_500us_
  L_end_Delay_1ms_
  _Delay_1ms_
  L_end__Eth_ReadPacket
  L__Eth_ReadPacket1
  L__Eth_ReadPacket2
  L__Eth_ReadPacket3
  L_end__Eth_SendPacket
  L__Eth_SendPacket5
  L__Eth_SendPacket6
  L__Eth_SendPacket7
  L__Eth_SendPacket8
  L__Eth_SendPacket9
  L__Eth_SendPacket10
  L__Eth_SendPacket11
  L__Eth_SendPacket12
  L_end__Eth_MacSwap
  L_end__Eth_IpSwap
  L_end__Eth_MacSwap_User
  L_end__Eth_IpSwap_User
  L_end__Eth_Reject
  L_end_Eth_ReadPacket
  _Eth_ReadPacket
  L__Eth_ReadPacket19
  L_end_Eth_SendPacket
  _Eth_SendPacket
  L__Eth_SendPacket21
  L__Eth_SendPacket22
  L_end_Eth_MacSwap
  _Eth_MacSwap
  L_end_Eth_IpSwap
  _Eth_IpSwap
  L_end_Eth_MacSwap_User
  _Eth_MacSwap_User
  L_end_Eth_IpSwap_User
  _Eth_IpSwap_User
  L_end_Eth_Reject
  _Eth_Reject
  L_end__Search_Port
  L__Search_Port1
  L__Search_Port2
  L__Search_Port3
  L__Search_Port4
  L__Search_Port5
  L__Search_Port6
  L__Search_Port7
  L__Search_Port8
  L__Search_Port9
  L__Search_Port10
  L__Search_Port11
  L__Search_Port12
  L__Search_Port13
  L__Search_Port14
  L_end__Close_Port
  L__Close_Port16
  L__Close_Port17
  L__Close_Port18
  L__Close_Port19
  L__Close_Port20
  L__Close_Port21
  L__Close_Port22
  L__Close_Port23
  L__Close_Port24
  L__Close_Port25
  L__Close_Port26
  L__Close_Port27
  L__Close_Port28
  L__Close_Port29
  L_end__Open_Port
  L__Open_Port31
  L__Open_Port32
  L__Open_Port33
  L__Open_Port34
  L__Open_Port35
  L__Open_Port36
  L__Open_Port37
  L__Open_Port38
  L__Open_Port39
  L__Open_Port40
  L__Open_Port41
  L__Open_Port42
  L__Open_Port43
  L__Open_Port44
  L__Open_Port45
  L__Open_Port46
  L__Open_Port47
  L_end__UDP_Open_Port
  L_end__TCP_Open_Port
  L_end__UDP_Close_Port
  L_end__TCP_Close_Port
  L_end__Put_UDPPointer
  L_end__Put_TCPPointer
  L_end_Search_Port
  _Search_Port
  L__Search_Port55
  L__Search_Port56
  L__Search_Port57
  L__Search_Port58
  L_end_Close_Port
  _Close_Port
  L__Close_Port60
  L__Close_Port61
  L__Close_Port62
  L__Close_Port63
  L_end_Open_Port
  _Open_Port
  L__Open_Port65
  L__Open_Port66
  L__Open_Port67
  L__Open_Port68
  L__Open_Port69
  L_end_UDP_Open_Port
  _UDP_Open_Port
  L_end_TCP_Open_Port
  _TCP_Open_Port
  L_end_UDP_Close_Port
  _UDP_Close_Port
  L_end_TCP_Close_Port
  _TCP_Close_Port
  L_end_Put_UDPPointer
  _Put_UDPPointer
  L_end_Put_TCPPointer
  _Put_TCPPointer
  L_end__Eth_Arp_Timer_1s
  L__Eth_Arp_Timer_1s1
  L__Eth_Arp_Timer_1s2
  L__Eth_Arp_Timer_1s3
  L__Eth_Arp_Timer_1s4
  L__Eth_Arp_Timer_1s5
  L__Eth_Arp_Timer_1s6
  L__Eth_Arp_Timer_1s7
  L__Eth_Arp_Timer_1s8
  L_end_protocol_arp_ArpMapIpMask
  L_protocol_arp_ArpMapIpMask10
  L_protocol_arp_ArpMapIpMask11
  L_protocol_arp_ArpMapIpMask12
  L_end_protocol_arp_ArpWaitFor
  L_protocol_arp_ArpWaitFor14
  L_protocol_arp_ArpWaitFor15
  L_protocol_arp_ArpWaitFor16
  L_protocol_arp_ArpWaitFor17
  L_protocol_arp_ArpWaitFor18
  L_protocol_arp_ArpWaitFor19
  L_protocol_arp_ArpWaitFor20
  L_protocol_arp_ArpWaitFor21
  L_protocol_arp_ArpWaitFor22
  L_protocol_arp_ArpWaitFor23
  L_protocol_arp_ArpWaitFor24
  L_end__Eth_Arp_MapMacAddress
  L__Eth_Arp_MapMacAddress26
  L__Eth_Arp_MapMacAddress27
  L__Eth_Arp_MapMacAddress28
  L__Eth_Arp_MapMacAddress29
  L__Eth_Arp_MapMacAddress30
  L__Eth_Arp_MapMacAddress31
  L__Eth_Arp_MapMacAddress32
  L__Eth_Arp_MapMacAddress33
  L__Eth_Arp_MapMacAddress34
  L__Eth_Arp_MapMacAddress35
  L__Eth_Arp_MapMacAddress36
  L__Eth_Arp_MapMacAddress37
  L__Eth_Arp_MapMacAddress38
  L__Eth_Arp_MapMacAddress39
  L__Eth_Arp_MapMacAddress40
  L__Eth_Arp_MapMacAddress41
  L__Eth_Arp_MapMacAddress42
  L__Eth_Arp_MapMacAddress43
  L__Eth_Arp_MapMacAddress44
  L__Eth_Arp_MapMacAddress45
  L__Eth_Arp_MapMacAddress46
  L__Eth_Arp_MapMacAddress47
  L__Eth_Arp_MapMacAddress48
  L__Eth_Arp_MapMacAddress49
  L__Eth_Arp_MapMacAddress50
  L__Eth_Arp_MapMacAddress51
  L__Eth_Arp_MapMacAddress52
  L__Eth_Arp_MapMacAddress53
  L__Eth_Arp_MapMacAddress54
  L__Eth_Arp_MapMacAddress55
  L__Eth_Arp_MapMacAddress56
  L__Eth_Arp_MapMacAddress57
  L__Eth_Arp_MapMacAddress58
  L__Eth_Arp_MapMacAddress59
  L__Eth_Arp_MapMacAddress60
  L__Eth_Arp_MapMacAddress61
  L__Eth_Arp_MapMacAddress62
  L__Eth_Arp_MapMacAddress63
  L__Eth_Arp_MapMacAddress64
  L__Eth_Arp_MapMacAddress65
  L__Eth_Arp_MapMacAddress66
  L_end__Eth_Arp_RequestHandler
  L_end__Eth_Arp_ResponseHandler
  L__Eth_Arp_ResponseHandler69
  L__Eth_Arp_ResponseHandler70
  L__Eth_Arp_ResponseHandler71
  L__Eth_Arp_ResponseHandler72
  L__Eth_Arp_ResponseHandler73
  L__Eth_Arp_ResponseHandler74
  L__Eth_Arp_ResponseHandler75
  L__Eth_Arp_ResponseHandler76
  L__Eth_Arp_ResponseHandler77
  L__Eth_Arp_ResponseHandler78
  L__Eth_Arp_ResponseHandler79
  L_end__Eth_Arp_EraseCache
  L__Eth_Arp_EraseCache81
  L__Eth_Arp_EraseCache82
  L__Eth_Arp_EraseCache83
  L__Eth_Arp_EraseCache84
  L__Eth_Arp_EraseCache85
  L_end__Eth_PrintArpCache
  L__Eth_PrintArpCache87
  L__Eth_PrintArpCache88
  L__Eth_PrintArpCache89
  L__Eth_PrintArpCache90
  L__Eth_PrintArpCache91
  L_end__Eth_PrintArpCacheSlot
  L_end_Eth_Arp_Timer_1s
  _Eth_Arp_Timer_1s
  L__Eth_Arp_Timer_1s94
  L__Eth_Arp_Timer_1s95
  L_end_ArpMapIpMask
  protocol_arp_ArpMapIpMask
  L_protocol_arp_ArpMapIpMask97
  L_end_ArpWaitFor
  protocol_arp_ArpWaitFor
  L_protocol_arp_ArpWaitFor99
  L_protocol_arp_ArpWaitFor100
  L_protocol_arp_ArpWaitFor101
  L_end_Eth_Arp_MapMacAddress
  _Eth_Arp_MapMacAddress
  L__Eth_Arp_MapMacAddress103
  L__Eth_Arp_MapMacAddress104
  L__Eth_Arp_MapMacAddress105
  L__Eth_Arp_MapMacAddress106
  L__Eth_Arp_MapMacAddress107
  L__Eth_Arp_MapMacAddress108
  L__Eth_Arp_MapMacAddress109
  L__Eth_Arp_MapMacAddress110
  L__Eth_Arp_MapMacAddress111
  L__Eth_Arp_MapMacAddress112
  L__Eth_Arp_MapMacAddress113
  L__Eth_Arp_MapMacAddress114
  L__Eth_Arp_MapMacAddress115
  L_end_Eth_Arp_RequestHandler
  _Eth_Arp_RequestHandler
  L_end_Eth_Arp_ResponseHandler
  _Eth_Arp_ResponseHandler
  L__Eth_Arp_ResponseHandler118
  L__Eth_Arp_ResponseHandler119
  L__Eth_Arp_ResponseHandler120
  L_end_Eth_Arp_EraseCache
  _Eth_Arp_EraseCache
  L__Eth_Arp_EraseCache122
  L_end_Eth_PrintArpCache
  _Eth_PrintArpCache
  L__Eth_PrintArpCache124
  L_end_Eth_PrintArpCacheSlot
  _Eth_PrintArpCacheSlot
  L_end__Eth_SendNtpRequest
  L__Eth_SendNtpRequest1
  L__Eth_SendNtpRequest2
  L__Eth_SendNtpRequest3
  L__Eth_SendNtpRequest4
  L__Eth_SendNtpRequest5
  L__Eth_SendNtpRequest6
  L__Eth_SendNtpRequest7
  L__Eth_SendNtpRequest8
  L__Eth_SendNtpRequest9
  L__Eth_SendNtpRequest10
  L__Eth_SendNtpRequest11
  L_end__Eth_Ntp_ReceiveHandler
  L__Eth_Ntp_ReceiveHandler13
  L__Eth_Ntp_ReceiveHandler14
  L__Eth_Ntp_ReceiveHandler15
  L_end__Get_Time
  L__Get_Time17
  L__Get_Time18
  L__Get_Time19
  L__Get_Time20
  L__Get_Time21
  L__Get_Time22
  L__Get_Time23
  L__Get_Time24
  L__Get_Time25
  L__Get_Time26
  L__Get_Time27
  L__Get_Time28
  L__Get_Time29
  L__Get_Time30
  L__Get_Time31
  L__Get_Time32
  L__Get_Time33
  L__Get_Time34
  L__Get_Time35
  L__Get_Time36
  L__Get_Time37
  L__Get_Time38
  L_end__Process_NTP
  L__Process_NTP40
  L__Process_NTP41
  L__Process_NTP42
  L_end__String2NTP
  L__String2NTP44
  L__String2NTP45
  L__String2NTP46
  L__String2NTP47
  L__String2NTP48
  L__String2NTP49
  L__String2NTP50
  L__String2NTP51
  L__String2NTP52
  L__String2NTP53
  L__String2NTP54
  L__String2NTP55
  L__String2NTP56
  L__String2NTP57
  L__String2NTP58
  L__String2NTP59
  L__String2NTP60
  L__String2NTP61
  L__String2NTP62
  L__String2NTP63
  L__String2NTP64
  L__String2NTP65
  L__String2NTP66
  L__String2NTP67
  L__String2NTP68
  L__String2NTP69
  L__String2NTP70
  L__String2NTP71
  L__String2NTP72
  L__String2NTP73
  L__String2NTP74
  L__String2NTP75
  L__String2NTP76
  L__String2NTP77
  L__String2NTP78
  L__String2NTP79
  L__String2NTP80
  L__String2NTP81
  L__String2NTP82
  L__String2NTP83
  L_end__NTP2String
  L__NTP2String85
  L__NTP2String86
  L__NTP2String87
  L__NTP2String88
  L__NTP2String89
  L__NTP2String90
  L__NTP2String91
  L__NTP2String92
  L__NTP2String93
  L__NTP2String94
  L__NTP2String95
  L__NTP2String96
  L__NTP2String97
  L__NTP2String98
  L__NTP2String99
  L__NTP2String100
  L__NTP2String101
  L__NTP2String102
  L__NTP2String103
  L__NTP2String104
  L__NTP2String105
  L__NTP2String106
  L__NTP2String107
  L__Get_Time108
  L_end_Eth_SendNtpRequest
  _Eth_SendNtpRequest
  L__Eth_SendNtpRequest110
  L__Eth_SendNtpRequest111
  L__Eth_SendNtpRequest112
  L_end_Eth_Ntp_ReceiveHandler
  _Eth_Ntp_ReceiveHandler
  L__Eth_Ntp_ReceiveHandler114
  L_end_Get_Time
  _Get_Time
  L__Get_Time116
  L__Get_Time117
  L__Get_Time118
  L__Get_Time119
  L__Get_Time120
  L__Get_Time121
  L__Get_Time122
  L_end_Process_NTP
  _Process_NTP
  L__Process_NTP124
  L__Process_NTP125
  L__Process_NTP126
  L_end_String2NTP
  _String2NTP
  L__String2NTP128
  L__String2NTP129
  L__String2NTP130
  L__String2NTP131
  L__String2NTP132
  L__String2NTP133
  L__String2NTP134
  L__String2NTP135
  L__String2NTP136
  L__String2NTP137
  L__String2NTP138
  L__String2NTP139
  L__String2NTP140
  L_end_NTP2String
  _NTP2String
  L__NTP2String142
  L__NTP2String143
  L__NTP2String144
  L__NTP2String145
  L__NTP2String146
  L__NTP2String147
  L__NTP2String148
  L_end__Eth_Ping_Timer_1s
  L__Eth_Ping_Timer_1s1
  L__Eth_Ping_Timer_1s2
  L__Eth_Ping_Timer_1s3
  L__Eth_Ping_Timer_1s4
  L__Eth_Ping_Timer_1s5
  L_end__Eth_PingReplyHandler
  L__Eth_PingReplyHandler7
  L__Eth_PingReplyHandler8
  L__Eth_PingReplyHandler9
  L__Eth_PingReplyHandler10
  L__Eth_PingReplyHandler11
  L__Eth_PingReplyHandler12
  L__Eth_PingReplyHandler13
  L__Eth_PingReplyHandler14
  L__Eth_PingReplyHandler15
  L__Eth_PingReplyHandler16
  L__Eth_PingReplyHandler17
  L_end_protocol_ping_PingWaitFor
  L_protocol_ping_PingWaitFor19
  L_protocol_ping_PingWaitFor20
  L_protocol_ping_PingWaitFor21
  L_protocol_ping_PingWaitFor22
  L_protocol_ping_PingWaitFor23
  L_protocol_ping_PingWaitFor24
  L_protocol_ping_PingWaitFor25
  L_protocol_ping_PingWaitFor26
  L_protocol_ping_PingWaitFor27
  L_protocol_ping_PingWaitFor28
  L_protocol_ping_PingWaitFor29
  L_end__Eth_SendPing
  L__Eth_SendPing31
  L__Eth_SendPing32
  L__Eth_SendPing33
  L__Eth_SendPing34
  L__Eth_SendPing35
  L__Eth_SendPing36
  L__Eth_SendPing37
  L__Eth_SendPing38
  L__Eth_SendPing39
  L__Eth_SendPing40
  L__Eth_SendPing41
  L__Eth_SendPing42
  L__Eth_SendPing43
  L__Eth_SendPing44
  L__Eth_SendPing45
  L__Eth_SendPing46
  L__Eth_SendPing47
  L__Eth_SendPing48
  L__Eth_SendPing49
  L__Eth_SendPing50
  L__Eth_SendPing51
  L__Eth_SendPing52
  L__Eth_SendPing53
  L__Eth_SendPing54
  L__Eth_SendPing55
  L__Eth_SendPing56
  L__Eth_SendPing57
  L__Eth_SendPing58
  L__Eth_SendPing59
  L__Eth_SendPing60
  L__Eth_SendPing61
  L_end__Eth_PingEchoHandler
  L_end__Eth_Ping_EraseCache
  L__Eth_Ping_EraseCache64
  L__Eth_Ping_EraseCache65
  L__Eth_Ping_EraseCache66
  L__Eth_Ping_EraseCache67
  L__Eth_Ping_EraseCache68
  L_end__Eth_PrintPingCache
  L__Eth_PrintPingCache70
  L__Eth_PrintPingCache71
  L__Eth_PrintPingCache72
  L__Eth_PrintPingCache73
  L__Eth_PrintPingCache74
  L_end__Eth_PrintPingCacheSlot
  L_end_Eth_Ping_Timer_1s
  _Eth_Ping_Timer_1s
  L__Eth_Ping_Timer_1s77
  L_end_Eth_PingReplyHandler
  _Eth_PingReplyHandler
  L__Eth_PingReplyHandler79
  L__Eth_PingReplyHandler80
  L__Eth_PingReplyHandler81
  L_end_PingWaitFor
  protocol_ping_PingWaitFor
  L_protocol_ping_PingWaitFor83
  L_protocol_ping_PingWaitFor84
  L_protocol_ping_PingWaitFor85
  L_end_Eth_SendPing
  _Eth_SendPing
  L__Eth_SendPing87
  L__Eth_SendPing88
  L__Eth_SendPing89
  L__Eth_SendPing90
  L__Eth_SendPing91
  L__Eth_SendPing92
  L__Eth_SendPing93
  L__Eth_SendPing94
  L__Eth_SendPing95
  L_end_Eth_PingEchoHandler
  _Eth_PingEchoHandler
  L_end_Eth_Ping_EraseCache
  _Eth_Ping_EraseCache
  L__Eth_Ping_EraseCache98
  L_end_Eth_PrintPingCache
  _Eth_PrintPingCache
  L__Eth_PrintPingCache100
  L_end_Eth_PrintPingCacheSlot
  _Eth_PrintPingCacheSlot
  L_end_protocol_tcp_ProcessTCP_StateMachine
  L_protocol_tcp_ProcessTCP_StateMachine1
  L_protocol_tcp_ProcessTCP_StateMachine2
  L_protocol_tcp_ProcessTCP_StateMachine3
  L_protocol_tcp_ProcessTCP_StateMachine4
  L_protocol_tcp_ProcessTCP_StateMachine5
  L_protocol_tcp_ProcessTCP_StateMachine6
  L_protocol_tcp_ProcessTCP_StateMachine7
  L_protocol_tcp_ProcessTCP_StateMachine8
  L_protocol_tcp_ProcessTCP_StateMachine9
  L_protocol_tcp_ProcessTCP_StateMachine10
  L_protocol_tcp_ProcessTCP_StateMachine11
  L_protocol_tcp_ProcessTCP_StateMachine12
  L_protocol_tcp_ProcessTCP_StateMachine13
  L_protocol_tcp_ProcessTCP_StateMachine14
  L_protocol_tcp_ProcessTCP_StateMachine15
  L_protocol_tcp_ProcessTCP_StateMachine16
  L_protocol_tcp_ProcessTCP_StateMachine17
  L_protocol_tcp_ProcessTCP_StateMachine18
  L_protocol_tcp_ProcessTCP_StateMachine19
  L_protocol_tcp_ProcessTCP_StateMachine20
  L_protocol_tcp_ProcessTCP_StateMachine21
  L_protocol_tcp_ProcessTCP_StateMachine22
  L_protocol_tcp_ProcessTCP_StateMachine23
  L_protocol_tcp_ProcessTCP_StateMachine24
  L_protocol_tcp_ProcessTCP_StateMachine25
  L_protocol_tcp_ProcessTCP_StateMachine26
  L_protocol_tcp_ProcessTCP_StateMachine27
  L_protocol_tcp_ProcessTCP_StateMachine28
  L_protocol_tcp_ProcessTCP_StateMachine29
  L_protocol_tcp_ProcessTCP_StateMachine30
  L_protocol_tcp_ProcessTCP_StateMachine31
  L_protocol_tcp_ProcessTCP_StateMachine32
  L_protocol_tcp_ProcessTCP_StateMachine33
  L_protocol_tcp_ProcessTCP_StateMachine34
  L_end_protocol_tcp_Eth_FindTcpPort
  L_protocol_tcp_Eth_FindTcpPort36
  L_protocol_tcp_Eth_FindTcpPort37
  L_protocol_tcp_Eth_FindTcpPort38
  L_protocol_tcp_Eth_FindTcpPort39
  L_protocol_tcp_Eth_FindTcpPort40
  L_protocol_tcp_Eth_FindTcpPort41
  L_protocol_tcp_Eth_FindTcpPort42
  L_protocol_tcp_Eth_FindTcpPort43
  L_protocol_tcp_Eth_FindTcpPort44
  L_protocol_tcp_Eth_FindTcpPort45
  L_protocol_tcp_Eth_FindTcpPort46
  L_end__Eth_Tcp_ReceiveHandler
  L__Eth_Tcp_ReceiveHandler48
  L__Eth_Tcp_ReceiveHandler49
  L__Eth_Tcp_ReceiveHandler50
  L__Eth_Tcp_ReceiveHandler51
  L__Eth_Tcp_ReceiveHandler52
  L__Eth_Tcp_ReceiveHandler53
  L__Eth_Tcp_ReceiveHandler54
  L__Eth_Tcp_ReceiveHandler55
  L__Eth_Tcp_ReceiveHandler56
  L__Eth_Tcp_ReceiveHandler57
  L__Eth_Tcp_ReceiveHandler58
  L__Eth_Tcp_ReceiveHandler59
  L__Eth_Tcp_ReceiveHandler60
  L__Eth_Tcp_ReceiveHandler61
  L__Eth_Tcp_ReceiveHandler62
  L_end__Eth_Tcp_EraseSlotReceive
  L_end__Eth_Tcp_PrintSlotReceive
  L__Eth_Tcp_PrintSlotReceive65
  L__Eth_Tcp_PrintSlotReceive66
  L__Eth_Tcp_PrintSlotReceive67
  L__Eth_Tcp_PrintSlotReceive68
  L__Eth_Tcp_PrintSlotReceive69
  L__Eth_Tcp_PrintSlotReceive70
  L__Eth_Tcp_PrintSlotReceive71
  L__Eth_Tcp_PrintSlotReceive72
  L__Eth_Tcp_PrintSlotReceive73
  L__Eth_Tcp_PrintSlotReceive74
  L__Eth_Tcp_PrintSlotReceive75
  L__Eth_Tcp_PrintSlotReceive76
  L__Eth_Tcp_PrintSlotReceive77
  L__Eth_Tcp_PrintSlotReceive78
  L__Eth_Tcp_PrintSlotReceive79
  L__Eth_Tcp_PrintSlotReceive80
  L__Eth_Tcp_PrintSlotReceive81
  L__Eth_Tcp_PrintSlotReceive82
  L_end__Eth_Tcp_PrintPorts
  L__Eth_Tcp_PrintPorts84
  L__Eth_Tcp_PrintPorts85
  L__Eth_Tcp_PrintPorts86
  L__Eth_Tcp_PrintPorts87
  L__Eth_Tcp_PrintPorts88
  L_end_protocol_tcp_Send_TCP_R1
  L_protocol_tcp_Send_TCP_R190
  L_protocol_tcp_Send_TCP_R191
  L_protocol_tcp_Send_TCP_R192
  L_protocol_tcp_Send_TCP_R193
  L_protocol_tcp_Send_TCP_R194
  L_protocol_tcp_Send_TCP_R195
  L_protocol_tcp_Send_TCP_R196
  L_protocol_tcp_Send_TCP_R197
  L_protocol_tcp_Send_TCP_R198
  L_protocol_tcp_Send_TCP_R199
  L_protocol_tcp_Send_TCP_R1100
  L_protocol_tcp_Send_TCP_R1101
  L_protocol_tcp_Send_TCP_R1102
  L_protocol_tcp_Send_TCP_R1103
  L_protocol_tcp_Send_TCP_R1104
  L_protocol_tcp_Send_TCP_R1105
  L_protocol_tcp_Send_TCP_R1106
  L_protocol_tcp_Send_TCP_R1107
  L_protocol_tcp_Send_TCP_R1108
  L_protocol_tcp_Send_TCP_R1109
  L_protocol_tcp_Send_TCP_R1110
  L_protocol_tcp_Send_TCP_R1111
  L_protocol_tcp_Send_TCP_R1112
  L_protocol_tcp_Send_TCP_R1113
  L_protocol_tcp_Send_TCP_R1114
  L_protocol_tcp_Send_TCP_R1115
  L_end_protocol_tcp_Send_TCP_R
  L_protocol_tcp_Send_TCP_R117
  L_protocol_tcp_Send_TCP_R118
  L_protocol_tcp_Send_TCP_R119
  L_protocol_tcp_Send_TCP_R120
  L_protocol_tcp_Send_TCP_R121
  L_protocol_tcp_Send_TCP_R122
  L_protocol_tcp_Send_TCP_R123
  L_protocol_tcp_Send_TCP_R124
  L_protocol_tcp_Send_TCP_R125
  L_protocol_tcp_Send_TCP_R126
  L_protocol_tcp_Send_TCP_R127
  L_protocol_tcp_Send_TCP_R128
  L_protocol_tcp_Send_TCP_R129
  L_protocol_tcp_Send_TCP_R130
  L_protocol_tcp_Send_TCP_R131
  L_protocol_tcp_Send_TCP_R132
  L_protocol_tcp_Send_TCP_R133
  L_protocol_tcp_Send_TCP_R134
  L_protocol_tcp_Send_TCP_R135
  L_protocol_tcp_Send_TCP_R136
  L_protocol_tcp_Send_TCP_R137
  L_protocol_tcp_Send_TCP_R138
  L_protocol_tcp_Send_TCP_R139
  L_protocol_tcp_Send_TCP_R140
  L_protocol_tcp_Send_TCP_R141
  L_protocol_tcp_Send_TCP_R142
  L_protocol_tcp_Send_TCP_R143
  L_protocol_tcp_Send_TCP_R144
  L_protocol_tcp_Send_TCP_R145
  L_protocol_tcp_Send_TCP_R146
  L_protocol_tcp_Send_TCP_R147
  L_protocol_tcp_Send_TCP_R148
  L_protocol_tcp_Send_TCP_R149
  L_protocol_tcp_Send_TCP_R150
  L_protocol_tcp_Send_TCP_R151
  L_protocol_tcp_Send_TCP_R152
  L_protocol_tcp_Send_TCP_R153
  L_protocol_tcp_Send_TCP_R154
  L_protocol_tcp_Send_TCP_R155
  L_protocol_tcp_Send_TCP_R156
  L_protocol_tcp_Send_TCP_R157
  L_protocol_tcp_Send_TCP_R158
  L_protocol_tcp_Send_TCP_R159
  L_protocol_tcp_Send_TCP_R160
  L_protocol_tcp_Send_TCP_R161
  L_protocol_tcp_Send_TCP_R162
  L_protocol_tcp_Send_TCP_R163
  L_protocol_tcp_Send_TCP_R164
  L_protocol_tcp_Send_TCP_R165
  L_protocol_tcp_Send_TCP_R166
  L_protocol_tcp_Send_TCP_R167
  L_protocol_tcp_Send_TCP_R168
  L_protocol_tcp_Send_TCP_R169
  L_protocol_tcp_Send_TCP_R170
  L_protocol_tcp_Send_TCP_R171
  L_protocol_tcp_Send_TCP_R172
  L_protocol_tcp_Send_TCP_R173
  L_protocol_tcp_Send_TCP_R174
  L_protocol_tcp_Send_TCP_R175
  L_protocol_tcp_Send_TCP_R176
  L_protocol_tcp_Send_TCP_R177
  L_protocol_tcp_Send_TCP_R178
  L_protocol_tcp_Send_TCP_R179
  L_protocol_tcp_Send_TCP_R180
  L_protocol_tcp_Send_TCP_R181
  L_protocol_tcp_Send_TCP_R182
  L_end__Send_TCP
  L__Send_TCP184
  L__Send_TCP185
  L__Send_TCP186
  L__Send_TCP187
  L__Send_TCP188
  L__Send_TCP189
  L__Send_TCP190
  L__Send_TCP191
  L__Send_TCP192
  L__Send_TCP193
  L__Send_TCP194
  L__Send_TCP195
  L__Send_TCP196
  L__Send_TCP197
  L_end__Open_TCP_Connection
  L__Open_TCP_Connection199
  L__Open_TCP_Connection200
  L__Open_TCP_Connection201
  L__Open_TCP_Connection202
  L__Open_TCP_Connection203
  L__Open_TCP_Connection204
  L__Open_TCP_Connection205
  L__Open_TCP_Connection206
  L__Open_TCP_Connection207
  L__Open_TCP_Connection208
  L__Open_TCP_Connection209
  L__Open_TCP_Connection210
  L__Open_TCP_Connection211
  L__Open_TCP_Connection212
  L__Open_TCP_Connection213
  L__Open_TCP_Connection214
  L__Open_TCP_Connection215
  L__Open_TCP_Connection216
  L__Open_TCP_Connection217
  L__Open_TCP_Connection218
  L__Open_TCP_Connection219
  L__Open_TCP_Connection220
  L__Open_TCP_Connection221
  L__Open_TCP_Connection222
  L__Open_TCP_Connection223
  L__Open_TCP_Connection224
  L__Open_TCP_Connection225
  L__Open_TCP_Connection226
  L_end__Close_TCP_Connection
  L__Close_TCP_Connection228
  L__Close_TCP_Connection229
  L__Close_TCP_Connection230
  L__Close_TCP_Connection231
  L__Close_TCP_Connection232
  L__Close_TCP_Connection233
  L__Close_TCP_Connection234
  L__Close_TCP_Connection235
  L__Close_TCP_Connection236
  L__Close_TCP_Connection237
  L__Close_TCP_Connection238
  L__Close_TCP_Connection239
  L__Close_TCP_Connection240
  L__Close_TCP_Connection241
  L__Close_TCP_Connection242
  L__Close_TCP_Connection243
  L__Close_TCP_Connection244
  L__Close_TCP_Connection245
  L__Close_TCP_Connection246
  L__Close_TCP_Connection247
  L__Close_TCP_Connection248
  L__Close_TCP_Connection249
  L_end__Eth_SendTCP
  L__Eth_SendTCP251
  L__Eth_SendTCP252
  L__Eth_SendTCP253
  L__Eth_TcpHandler_next_phs
  L_end__Eth_TcpHandler
  L__Eth_TcpHandler256
  L__Eth_TcpHandler257
  L__Eth_TcpHandler258
  L__Eth_TcpHandler259
  L__Eth_TcpHandler260
  L__Eth_TcpHandler261
  L__Eth_TcpHandler262
  L__Eth_TcpHandler263
  L__Eth_TcpHandler264
  L__Eth_TcpHandler265
  L__Eth_TcpHandler266
  L__Eth_TcpHandler267
  L__Eth_TcpHandler268
  L__Eth_TcpHandler269
  L__Eth_TcpHandler270
  L__Eth_TcpHandler271
  L__Eth_TcpHandler272
  L__Eth_TcpHandler273
  L__Eth_TcpHandler274
  L__Eth_TcpHandler275
  L__Eth_TcpHandler276
  L__Eth_TcpHandler277
  L__Eth_TcpHandler278
  L__Eth_TcpHandler279
  L__Eth_TcpHandler280
  L__Eth_TcpHandler281
  L__Eth_TcpHandler282
  L__Eth_TcpHandler283
  L__Eth_TcpHandler284
  L__Eth_TcpHandler285
  L__Eth_TcpHandler286
  L__Eth_TcpHandler287
  L__Eth_TcpHandler288
  L__Eth_TcpHandler289
  L__Eth_TcpHandler290
  L__Eth_TcpHandler291
  L__Eth_TcpHandler292
  L__Eth_TcpHandler293
  L__Eth_TcpHandler294
  L__Eth_TcpHandler295
  L__Eth_TcpHandler296
  L__Eth_TcpHandler297
  L__Eth_TcpHandler298
  L__Eth_TcpHandler299
  L__Eth_TcpHandler300
  L__Eth_TcpHandler301
  L__Eth_TcpHandler302
  L__Eth_TcpHandler303
  L__Eth_TcpHandler304
  L__Eth_TcpHandler305
  L__Eth_TcpHandler306
  L__Eth_TcpHandler307
  L__Eth_TcpHandler308
  L__Eth_TcpHandler309
  L__Eth_TcpHandler310
  L__Eth_TcpHandler311
  L__Eth_TcpHandler312
  L__Eth_TcpHandler313
  L__Eth_TcpHandler314
  L__Eth_TcpHandler315
  L__Eth_TcpHandler316
  L__Eth_TcpHandler317
  L__Eth_TcpHandler318
  L__Eth_TcpHandler319
  L__Eth_TcpHandler320
  L__Eth_TcpHandler321
  L__Eth_TcpHandler322
  L__Eth_TcpHandler323
  L__Eth_TcpHandler324
  L__Eth_TcpHandler325
  L__Eth_TcpHandler326
  L__Eth_TcpHandler327
  L__Eth_TcpHandler328
  L__Eth_TcpHandler329
  L__Eth_TcpHandler330
  L__Eth_TcpHandler331
  L__Eth_TcpHandler332
  L__Eth_TcpHandler333
  L__Eth_TcpHandler334
  L__Eth_TcpHandler335
  L__Eth_TcpHandler336
  L__Eth_TcpHandler337
  L__Eth_TcpHandler338
  L__Eth_TcpHandler339
  L__Eth_TcpHandler340
  L__Eth_TcpHandler341
  L__Eth_TcpHandler342
  L__Eth_TcpHandler343
  L__Eth_TcpHandler344
  L__Eth_TcpHandler345
  L__Eth_TcpHandler346
  L__Eth_TcpHandler347
  L__Eth_TcpHandler348
  L__Eth_TcpHandler349
  L_end__Eth_ProcessTcpStack
  L__Eth_ProcessTcpStack351
  L__Eth_ProcessTcpStack352
  L__Eth_ProcessTcpStack353
  L__Eth_ProcessTcpStack354
  L__Eth_ProcessTcpStack355
  L__Eth_ProcessTcpStack356
  L__Eth_ProcessTcpStack357
  L__Eth_ProcessTcpStack358
  L__Eth_ProcessTcpStack359
  L__Eth_ProcessTcpStack360
  L__Eth_ProcessTcpStack361
  L__Eth_ProcessTcpStack362
  L__Eth_ProcessTcpStack363
  L__Eth_ProcessTcpStack364
  L__Eth_ProcessTcpStack365
  L__Eth_ProcessTcpStack366
  L__Eth_ProcessTcpStack367
  L__Eth_ProcessTcpStack368
  L__Eth_ProcessTcpStack369
  L__Eth_ProcessTcpStack370
  L__Eth_ProcessTcpStack371
  L__Eth_ProcessTcpStack372
  L__Eth_ProcessTcpStack373
  L_end__EraseSockets
  L__EraseSockets375
  L__EraseSockets376
  L__EraseSockets377
  L__EraseSockets378
  L__EraseSockets379
  L_end__debugg_stack
  L__debugg_stack381
  L__debugg_stack382
  L__debugg_stack383
  L__debugg_stack384
  L__debugg_stack385
  L__debugg_stack386
  L__debugg_stack387
  L__debugg_stack388
  L_end__Set_TCP_TimeOut_Interval
  L__Set_TCP_TimeOut_Interval390
  L__Set_TCP_TimeOut_Interval391
  L__Set_TCP_TimeOut_Interval392
  L__Set_TCP_TimeOut_Interval393
  L__Set_TCP_TimeOut_Interval394
  L__Open_TCP_Connection395
  L__Eth_TcpHandler396
  L_end_ProcessTCP_StateMachine
  protocol_tcp_ProcessTCP_StateMachine
  L_protocol_tcp_ProcessTCP_StateMachine398
  L_protocol_tcp_ProcessTCP_StateMachine399
  L_protocol_tcp_ProcessTCP_StateMachine400
  L_protocol_tcp_ProcessTCP_StateMachine401
  L_protocol_tcp_ProcessTCP_StateMachine402
  L_protocol_tcp_ProcessTCP_StateMachine403
  L_protocol_tcp_ProcessTCP_StateMachine404
  L_protocol_tcp_ProcessTCP_StateMachine405
  L_protocol_tcp_ProcessTCP_StateMachine406
  L_protocol_tcp_ProcessTCP_StateMachine407
  L_protocol_tcp_ProcessTCP_StateMachine408
  L_end_Eth_FindTcpPort
  protocol_tcp_Eth_FindTcpPort
  L_protocol_tcp_Eth_FindTcpPort410
  L_protocol_tcp_Eth_FindTcpPort411
  L_protocol_tcp_Eth_FindTcpPort412
  L_end_Eth_Tcp_ReceiveHandler
  _Eth_Tcp_ReceiveHandler
  L__Eth_Tcp_ReceiveHandler414
  L__Eth_Tcp_ReceiveHandler415
  L__Eth_Tcp_ReceiveHandler416
  L__Eth_Tcp_ReceiveHandler417
  L__Eth_Tcp_ReceiveHandler418
  L_end_Eth_Tcp_EraseSlotReceive
  _Eth_Tcp_EraseSlotReceive
  L_end_Eth_Tcp_PrintSlotReceive
  _Eth_Tcp_PrintSlotReceive
  L_end_Eth_Tcp_PrintPorts
  _Eth_Tcp_PrintPorts
  L__Eth_Tcp_PrintPorts422
  L_end_Send_TCP_R1
  protocol_tcp_Send_TCP_R1
  L_protocol_tcp_Send_TCP_R1424
  L_protocol_tcp_Send_TCP_R1425
  L_protocol_tcp_Send_TCP_R1426
  L_protocol_tcp_Send_TCP_R1427
  L_protocol_tcp_Send_TCP_R1428
  L_protocol_tcp_Send_TCP_R1429
  L_protocol_tcp_Send_TCP_R1430
  L_protocol_tcp_Send_TCP_R1431
  L_end_Send_TCP_R
  protocol_tcp_Send_TCP_R
  L_protocol_tcp_Send_TCP_R433
  L_protocol_tcp_Send_TCP_R434
  L_protocol_tcp_Send_TCP_R435
  L_protocol_tcp_Send_TCP_R436
  L_protocol_tcp_Send_TCP_R437
  L_protocol_tcp_Send_TCP_R438
  L_protocol_tcp_Send_TCP_R439
  L_protocol_tcp_Send_TCP_R440
  L_protocol_tcp_Send_TCP_R441
  L_protocol_tcp_Send_TCP_R442
  L_protocol_tcp_Send_TCP_R443
  L_protocol_tcp_Send_TCP_R444
  L_protocol_tcp_Send_TCP_R445
  L_protocol_tcp_Send_TCP_R446
  L_protocol_tcp_Send_TCP_R447
  L_protocol_tcp_Send_TCP_R448
  L_protocol_tcp_Send_TCP_R449
  L_protocol_tcp_Send_TCP_R450
  L_end_Send_TCP
  _Send_TCP
  L__Send_TCP452
  L__Send_TCP453
  L__Send_TCP454
  L__Send_TCP455
  L__Send_TCP456
  L__Send_TCP457
  L__Send_TCP458
  L_end_Open_TCP_Connection
  _Open_TCP_Connection
  L__Open_TCP_Connection460
  L__Open_TCP_Connection461
  L__Open_TCP_Connection462
  L__Open_TCP_Connection463
  L__Open_TCP_Connection464
  L__Open_TCP_Connection465
  L__Open_TCP_Connection466
  L__Open_TCP_Connection467
  L__Open_TCP_Connection468
  L__Open_TCP_Connection469
  L__Open_TCP_Connection470
  L_end_Close_TCP_Connection
  _Close_TCP_Connection
  L__Close_TCP_Connection472
  L__Close_TCP_Connection473
  L__Close_TCP_Connection474
  L__Close_TCP_Connection475
  L__Close_TCP_Connection476
  L__Close_TCP_Connection477
  L__Close_TCP_Connection478
  L__Close_TCP_Connection479
  L_end_Eth_SendTCP
  _Eth_SendTCP
  L__Eth_SendTCP481
  L_end_Eth_TcpHandler
  _Eth_TcpHandler
  L__Eth_TcpHandler483
  L__Eth_TcpHandler484
  L__Eth_TcpHandler485
  L__Eth_TcpHandler486
  L__Eth_TcpHandler487
  L__Eth_TcpHandler488
  L__Eth_TcpHandler489
  L__Eth_TcpHandler490
  L__Eth_TcpHandler491
  L__Eth_TcpHandler492
  L__Eth_TcpHandler493
  L__Eth_TcpHandler494
  L__Eth_TcpHandler495
  L__Eth_TcpHandler496
  L__Eth_TcpHandler497
  L__Eth_TcpHandler498
  L__Eth_TcpHandler499
  L__Eth_TcpHandler500
  L__Eth_TcpHandler501
  L__Eth_TcpHandler502
  L__Eth_TcpHandler503
  L__Eth_TcpHandler504
  L__Eth_TcpHandler505
  L__Eth_TcpHandler506
  L__Eth_TcpHandler507
  L__Eth_TcpHandler508
  L__Eth_TcpHandler509
  L__Eth_TcpHandler510
  L__Eth_TcpHandler511
  L__Eth_TcpHandler512
  L__Eth_TcpHandler513
  L__Eth_TcpHandler514
  L__Eth_TcpHandler515
  L__Eth_TcpHandler516
  L_end_Eth_ProcessTcpStack
  _Eth_ProcessTcpStack
  L__Eth_ProcessTcpStack518
  L__Eth_ProcessTcpStack519
  L__Eth_ProcessTcpStack520
  L__Eth_ProcessTcpStack521
  L__Eth_ProcessTcpStack522
  L__Eth_ProcessTcpStack523
  L__Eth_ProcessTcpStack524
  L__Eth_ProcessTcpStack525
  L__Eth_ProcessTcpStack526
  L_end_EraseSockets
  _EraseSockets
  L__EraseSockets528
  L_end_debugg_stack
  _debugg_stack
  L__debugg_stack530
  L__debugg_stack531
  L_end_Set_TCP_TimeOut_Interval
  _Set_TCP_TimeOut_Interval
  L__Set_TCP_TimeOut_Interval533
  L_end_protocol_udp_Eth_FindUdpPort
  L_protocol_udp_Eth_FindUdpPort1
  L_protocol_udp_Eth_FindUdpPort2
  L_protocol_udp_Eth_FindUdpPort3
  L_protocol_udp_Eth_FindUdpPort4
  L_protocol_udp_Eth_FindUdpPort5
  L_protocol_udp_Eth_FindUdpPort6
  L_protocol_udp_Eth_FindUdpPort7
  L_protocol_udp_Eth_FindUdpPort8
  L_protocol_udp_Eth_FindUdpPort9
  L_protocol_udp_Eth_FindUdpPort10
  L_protocol_udp_Eth_FindUdpPort11
  L_end__Eth_OpenUdpPort
  L__Eth_OpenUdpPort13
  L__Eth_OpenUdpPort14
  L__Eth_OpenUdpPort15
  L__Eth_OpenUdpPort16
  L__Eth_OpenUdpPort17
  L__Eth_OpenUdpPort18
  L_end__Eth_CloseUdpPort
  L__Eth_CloseUdpPort20
  L__Eth_CloseUdpPort21
  L__Eth_CloseUdpPort22
  L_end_protocol_udp_Eth_Udp_EraseSlot
  L_protocol_udp_Eth_Udp_EraseSlot24
  L_protocol_udp_Eth_Udp_EraseSlot25
  L_protocol_udp_Eth_Udp_EraseSlot26
  L_protocol_udp_Eth_Udp_EraseSlot27
  L_protocol_udp_Eth_Udp_EraseSlot28
  L_end_protocol_udp_Eth_Udp_EraseSlotReceive
  L_end_protocol_udp_Eth_Udp_EraseCache
  L_protocol_udp_Eth_Udp_EraseCache31
  L_protocol_udp_Eth_Udp_EraseCache32
  L_protocol_udp_Eth_Udp_EraseCache33
  L_protocol_udp_Eth_Udp_EraseCache34
  L_protocol_udp_Eth_Udp_EraseCache35
  L_end__Eth_Udp_Init
  L_end_protocol_udp_UdpWaitFor
  L_protocol_udp_UdpWaitFor38
  L_protocol_udp_UdpWaitFor39
  L_protocol_udp_UdpWaitFor40
  L_protocol_udp_UdpWaitFor41
  L_protocol_udp_UdpWaitFor42
  L_protocol_udp_UdpWaitFor43
  L_protocol_udp_UdpWaitFor44
  L_protocol_udp_UdpWaitFor45
  L_protocol_udp_UdpWaitFor46
  L_protocol_udp_UdpWaitFor47
  L_protocol_udp_UdpWaitFor48
  L_end__Eth_FreeUdpSlot
  L__Eth_FreeUdpSlot50
  L__Eth_FreeUdpSlot51
  L__Eth_FreeUdpSlot52
  L_end__Eth_SendUdpMessage
  L__Eth_SendUdpMessage54
  L__Eth_SendUdpMessage55
  L__Eth_SendUdpMessage56
  L__Eth_SendUdpMessage57
  L__Eth_SendUdpMessage58
  L__Eth_SendUdpMessage59
  L__Eth_SendUdpMessage60
  L__Eth_SendUdpMessage61
  L__Eth_SendUdpMessage62
  L__Eth_SendUdpMessage63
  L__Eth_SendUdpMessage64
  L__Eth_SendUdpMessage65
  L__Eth_SendUdpMessage66
  L__Eth_SendUdpMessage67
  L__Eth_SendUdpMessage68
  L__Eth_SendUdpMessage69
  L__Eth_SendUdpMessage70
  L__Eth_SendUdpMessage71
  L_end__Eth_AllocateUdpSlot
  L__Eth_AllocateUdpSlot73
  L__Eth_AllocateUdpSlot74
  L__Eth_AllocateUdpSlot75
  L__Eth_AllocateUdpSlot76
  L__Eth_AllocateUdpSlot77
  L__Eth_AllocateUdpSlot78
  L__Eth_AllocateUdpSlot79
  L__Eth_AllocateUdpSlot80
  L_end__Eth_Udp_Timer_1s
  L__Eth_Udp_Timer_1s82
  L__Eth_Udp_Timer_1s83
  L__Eth_Udp_Timer_1s84
  L__Eth_Udp_Timer_1s85
  L__Eth_Udp_Timer_1s86
  L__Eth_Udp_Timer_1s87
  L__Eth_Udp_Timer_1s88
  L__Eth_Udp_Timer_1s89
  L_end__Eth_Udp_PrintPorts
  L__Eth_Udp_PrintPorts91
  L__Eth_Udp_PrintPorts92
  L__Eth_Udp_PrintPorts93
  L__Eth_Udp_PrintPorts94
  L__Eth_Udp_PrintPorts95
  L_end__Eth_Udp_ReplyHandler
  L__Eth_Udp_ReplyHandler97
  L__Eth_Udp_ReplyHandler98
  L__Eth_Udp_ReplyHandler99
  L__Eth_Udp_ReplyHandler100
  L__Eth_Udp_ReplyHandler101
  L__Eth_Udp_ReplyHandler102
  L__Eth_Udp_ReplyHandler103
  L__Eth_Udp_ReplyHandler104
  L__Eth_Udp_ReplyHandler105
  L__Eth_Udp_ReplyHandler106
  L__Eth_Udp_ReplyHandler107
  L__Eth_Udp_ReplyHandler108
  L__Eth_Udp_ReplyHandler109
  L__Eth_Udp_ReplyHandler110
  L__Eth_Udp_ReplyHandler111
  L__Eth_Udp_ReplyHandler112
  L__Eth_Udp_ReplyHandler113
  L__Eth_Udp_ReplyHandler114
  L__Eth_Udp_ReplyHandler115
  L__Eth_Udp_ReplyHandler116
  L__Eth_Udp_ReplyHandler117
  L__Eth_Udp_ReplyHandler118
  L__Eth_Udp_ReplyHandler119
  L__Eth_Udp_ReplyHandler120
  L__Eth_Udp_ReplyHandler121
  L__Eth_Udp_ReplyHandler122
  L__Eth_Udp_ReplyHandler123
  L__Eth_Udp_ReplyHandler124
  L__Eth_Udp_ReplyHandler125
  L__Eth_Udp_ReplyHandler126
  L__Eth_Udp_ReplyHandler127
  L__Eth_Udp_ReplyHandler128
  L__Eth_Udp_ReplyHandler129
  L__Eth_Udp_ReplyHandler130
  L__Eth_Udp_ReplyHandler131
  L__Eth_Udp_ReplyHandler132
  L__Eth_Udp_ReplyHandler133
  L__Eth_Udp_ReplyHandler134
  L__Eth_Udp_ReplyHandler135
  L__Eth_Udp_ReplyHandler136
  L__Eth_Udp_ReplyHandler137
  L__Eth_Udp_ReplyHandler138
  L__Eth_Udp_ReplyHandler139
  L__Eth_Udp_ReplyHandler140
  L__Eth_Udp_ReplyHandler141
  L__Eth_Udp_ReplyHandler142
  L__Eth_Udp_ReplyHandler143
  L__Eth_Udp_ReplyHandler144
  L__Eth_Udp_ReplyHandler145
  L__Eth_Udp_ReplyHandler146
  L__Eth_Udp_ReplyHandler147
  L__Eth_Udp_ReplyHandler148
  L__Eth_Udp_ReplyHandler149
  L__Eth_Udp_ReplyHandler150
  L__Eth_Udp_ReplyHandler151
  L__Eth_Udp_ReplyHandler152
  L__Eth_Udp_ReplyHandler153
  L__Eth_Udp_ReplyHandler154
  L__Eth_Udp_ReplyHandler155
  L__Eth_Udp_ReplyHandler156
  L__Eth_Udp_ReplyHandler157
  L__Eth_Udp_ReplyHandler158
  L__Eth_Udp_ReplyHandler159
  L__Eth_Udp_ReplyHandler160
  L__Eth_Udp_ReplyHandler161
  L__Eth_Udp_ReplyHandler162
  L__Eth_Udp_ReplyHandler163
  L__Eth_Udp_ReplyHandler164
  L__Eth_Udp_ReplyHandler165
  L__Eth_Udp_ReplyHandler166
  L__Eth_Udp_ReplyHandler167
  L__Eth_Udp_ReplyHandler168
  L__Eth_Udp_ReplyHandler169
  L__Eth_Udp_ReplyHandler170
  L__Eth_Udp_ReplyHandler171
  L__Eth_Udp_ReplyHandler172
  L__Eth_Udp_ReplyHandler173
  L__Eth_Udp_ReplyHandler174
  L__Eth_Udp_ReplyHandler175
  L__Eth_Udp_ReplyHandler176
  L__Eth_Udp_ReplyHandler177
  L__Eth_Udp_ReplyHandler178
  L__Eth_Udp_ReplyHandler179
  L__Eth_Udp_ReplyHandler180
  L__Eth_Udp_ReplyHandler181
  L__Eth_Udp_ReplyHandler182
  L__Eth_Udp_ReplyHandler183
  L__Eth_Udp_ReplyHandler184
  L__Eth_Udp_ReplyHandler185
  L__Eth_Udp_ReplyHandler186
  L__Eth_Udp_ReplyHandler187
  L__Eth_Udp_ReplyHandler188
  L__Eth_Udp_ReplyHandler189
  L__Eth_Udp_ReplyHandler190
  L__Eth_Udp_ReplyHandler191
  L__Eth_Udp_ReplyHandler192
  L__Eth_Udp_ReplyHandler193
  L__Eth_Udp_ReplyHandler194
  L__Eth_Udp_ReplyHandler195
  L__Eth_Udp_ReplyHandler196
  L__Eth_Udp_ReplyHandler197
  L__Eth_Udp_ReplyHandler198
  L__Eth_Udp_ReplyHandler199
  L__Eth_Udp_ReplyHandler200
  L__Eth_Udp_ReplyHandler201
  L__Eth_Udp_ReplyHandler202
  L__Eth_Udp_ReplyHandler203
  L__Eth_Udp_ReplyHandler204
  L__Eth_Udp_ReplyHandler205
  L__Eth_Udp_ReplyHandler206
  L__Eth_Udp_ReplyHandler207
  L__Eth_Udp_ReplyHandler208
  L__Eth_Udp_ReplyHandler209
  L__Eth_Udp_ReplyHandler210
  L__Eth_Udp_ReplyHandler211
  L__Eth_Udp_ReplyHandler212
  L__Eth_Udp_ReplyHandler213
  L__Eth_Udp_ReplyHandler214
  L__Eth_Udp_ReplyHandler215
  L__Eth_Udp_ReplyHandler216
  L__Eth_Udp_ReplyHandler217
  L__Eth_Udp_ReplyHandler218
  L__Eth_Udp_ReplyHandler219
  L__Eth_Udp_ReplyHandler220
  L__Eth_Udp_ReplyHandler221
  L__Eth_Udp_ReplyHandler222
  L__Eth_Udp_ReplyHandler223
  L__Eth_Udp_ReplyHandler224
  L__Eth_Udp_ReplyHandler225
  L__Eth_Udp_ReplyHandler226
  L__Eth_Udp_ReplyHandler227
  L__Eth_Udp_ReplyHandler228
  L__Eth_Udp_ReplyHandler229
  L__Eth_Udp_ReplyHandler230
  L__Eth_Udp_ReplyHandler231
  L__Eth_Udp_ReplyHandler232
  L__Eth_Udp_ReplyHandler233
  L__Eth_Udp_ReplyHandler234
  L__Eth_Udp_ReplyHandler235
  L__Eth_Udp_ReplyHandler236
  L__Eth_Udp_ReplyHandler237
  L__Eth_Udp_ReplyHandler238
  L__Eth_Udp_ReplyHandler239
  L__Eth_Udp_ReplyHandler240
  L__Eth_Udp_ReplyHandler241
  L__Eth_Udp_ReplyHandler242
  L__Eth_Udp_ReplyHandler243
  L__Eth_Udp_ReplyHandler244
  L__Eth_Udp_ReplyHandler245
  L__Eth_Udp_ReplyHandler246
  L__Eth_Udp_ReplyHandler247
  L__Eth_Udp_ReplyHandler248
  L__Eth_Udp_ReplyHandler249
  L__Eth_Udp_ReplyHandler250
  L__Eth_Udp_ReplyHandler251
  L__Eth_Udp_ReplyHandler252
  L__Eth_Udp_ReplyHandler253
  L__Eth_Udp_ReplyHandler254
  L__Eth_Udp_ReplyHandler255
  L__Eth_Udp_ReplyHandler256
  L__Eth_Udp_ReplyHandler257
  L__Eth_Udp_ReplyHandler258
  L__Eth_Udp_ReplyHandler259
  L__Eth_Udp_ReplyHandler260
  L__Eth_Udp_ReplyHandler261
  L__Eth_Udp_ReplyHandler262
  L__Eth_Udp_ReplyHandler263
  L__Eth_Udp_ReplyHandler264
  L__Eth_Udp_ReplyHandler265
  L__Eth_Udp_ReplyHandler266
  L__Eth_Udp_ReplyHandler267
  L_end__Eth_Udp_PrintSlotReceive
  L__Eth_OpenUdpPort269
  L__Eth_SendUdpMessage270
  L_end_Eth_FindUdpPort
  protocol_udp_Eth_FindUdpPort
  L_protocol_udp_Eth_FindUdpPort272
  L_protocol_udp_Eth_FindUdpPort273
  L_protocol_udp_Eth_FindUdpPort274
  L_end_Eth_OpenUdpPort
  _Eth_OpenUdpPort
  L__Eth_OpenUdpPort276
  L__Eth_OpenUdpPort277
  L_end_Eth_CloseUdpPort
  _Eth_CloseUdpPort
  L__Eth_CloseUdpPort279
  L_end_Eth_Udp_EraseSlot
  protocol_udp_Eth_Udp_EraseSlot
  L_protocol_udp_Eth_Udp_EraseSlot281
  L_end_Eth_Udp_EraseSlotReceive
  protocol_udp_Eth_Udp_EraseSlotReceive
  L_end_Eth_Udp_EraseCache
  protocol_udp_Eth_Udp_EraseCache
  L_protocol_udp_Eth_Udp_EraseCache284
  L_end_Eth_Udp_Init
  _Eth_Udp_Init
  L_end_UdpWaitFor
  protocol_udp_UdpWaitFor
  L_protocol_udp_UdpWaitFor287
  L_protocol_udp_UdpWaitFor288
  L_protocol_udp_UdpWaitFor289
  L_end_Eth_FreeUdpSlot
  _Eth_FreeUdpSlot
  L__Eth_FreeUdpSlot291
  L_end_Eth_SendUdpMessage
  _Eth_SendUdpMessage
  L__Eth_SendUdpMessage293
  L__Eth_SendUdpMessage294
  L__Eth_SendUdpMessage295
  L__Eth_SendUdpMessage296
  L__Eth_SendUdpMessage297
  L__Eth_SendUdpMessage298
  L__Eth_SendUdpMessage299
  L__Eth_SendUdpMessage300
  L_end_Eth_AllocateUdpSlot
  _Eth_AllocateUdpSlot
  L__Eth_AllocateUdpSlot302
  L__Eth_AllocateUdpSlot303
  L_end_Eth_Udp_Timer_1s
  _Eth_Udp_Timer_1s
  L__Eth_Udp_Timer_1s305
  L__Eth_Udp_Timer_1s306
  L_end_Eth_Udp_PrintPorts
  _Eth_Udp_PrintPorts
  L__Eth_Udp_PrintPorts308
  L_end_Eth_Udp_ReplyHandler
  _Eth_Udp_ReplyHandler
  L__Eth_Udp_ReplyHandler310
  L__Eth_Udp_ReplyHandler311
  L__Eth_Udp_ReplyHandler312
  L__Eth_Udp_ReplyHandler313
  L__Eth_Udp_ReplyHandler314
  L__Eth_Udp_ReplyHandler315
  L__Eth_Udp_ReplyHandler316
  L__Eth_Udp_ReplyHandler317
  L__Eth_Udp_ReplyHandler318
  L__Eth_Udp_ReplyHandler319
  L__Eth_Udp_ReplyHandler320
  L__Eth_Udp_ReplyHandler321
  L__Eth_Udp_ReplyHandler322
  L__Eth_Udp_ReplyHandler323
  L__Eth_Udp_ReplyHandler324
  L__Eth_Udp_ReplyHandler325
  L__Eth_Udp_ReplyHandler326
  L__Eth_Udp_ReplyHandler327
  L__Eth_Udp_ReplyHandler328
  L__Eth_Udp_ReplyHandler329
  L__Eth_Udp_ReplyHandler330
  L__Eth_Udp_ReplyHandler331
  L__Eth_Udp_ReplyHandler332
  L__Eth_Udp_ReplyHandler333
  L__Eth_Udp_ReplyHandler334
  L__Eth_Udp_ReplyHandler335
  L__Eth_Udp_ReplyHandler336
  L__Eth_Udp_ReplyHandler337
  L__Eth_Udp_ReplyHandler338
  L__Eth_Udp_ReplyHandler339
  L__Eth_Udp_ReplyHandler340
  L__Eth_Udp_ReplyHandler341
  L__Eth_Udp_ReplyHandler342
  L__Eth_Udp_ReplyHandler343
  L__Eth_Udp_ReplyHandler344
  L__Eth_Udp_ReplyHandler345
  L__Eth_Udp_ReplyHandler346
  L__Eth_Udp_ReplyHandler347
  L__Eth_Udp_ReplyHandler348
  L__Eth_Udp_ReplyHandler349
  L__Eth_Udp_ReplyHandler350
  L__Eth_Udp_ReplyHandler351
  L__Eth_Udp_ReplyHandler352
  L__Eth_Udp_ReplyHandler353
  L__Eth_Udp_ReplyHandler354
  L__Eth_Udp_ReplyHandler355
  L__Eth_Udp_ReplyHandler356
  L__Eth_Udp_ReplyHandler357
  L__Eth_Udp_ReplyHandler358
  L__Eth_Udp_ReplyHandler359
  L__Eth_Udp_ReplyHandler360
  L__Eth_Udp_ReplyHandler361
  L__Eth_Udp_ReplyHandler362
  L__Eth_Udp_ReplyHandler363
  L__Eth_Udp_ReplyHandler364
  L__Eth_Udp_ReplyHandler365
  L__Eth_Udp_ReplyHandler366
  L__Eth_Udp_ReplyHandler367
  L__Eth_Udp_ReplyHandler368
  L__Eth_Udp_ReplyHandler369
  L__Eth_Udp_ReplyHandler370
  L__Eth_Udp_ReplyHandler371
  L__Eth_Udp_ReplyHandler372
  L__Eth_Udp_ReplyHandler373
  L__Eth_Udp_ReplyHandler374
  L__Eth_Udp_ReplyHandler375
  L_end_Eth_Udp_PrintSlotReceive
  _Eth_Udp_PrintSlotReceive
  L_end__ByteToHex
  L_end__ShortToHex
  L_end__WordToHex
  L_end__IntToHex
  L_end__LongWordToHex
  L_end__LongIntToHex
  L_end__ByteToStr
  L__ByteToStr7
  L__ByteToStr8
  L__ByteToStr9
  L__ByteToStr10
  L__ByteToStr11
  L_end__WordToStr
  L__WordToStr13
  L__WordToStr14
  L__WordToStr15
  L__WordToStr16
  L__WordToStr17
  L_end__WordToStrWithZeros
  L__WordToStrWithZeros19
  L__WordToStrWithZeros20
  L__WordToStrWithZeros21
  L__WordToStrWithZeros22
  L__WordToStrWithZeros23
  L_end__ShortToStr
  L__ShortToStr25
  L__ShortToStr26
  L__ShortToStr27
  L__ShortToStr28
  L__ShortToStr29
  L__ShortToStr30
  L__ShortToStr31
  L__ShortToStr32
  L__ShortToStr33
  L__ShortToStr34
  L__ShortToStr35
  L__ShortToStr36
  L__ShortToStr37
  L__ShortToStr38
  L_end__IntToStr
  L__IntToStr40
  L__IntToStr41
  L__IntToStr42
  L__IntToStr43
  L__IntToStr44
  L__IntToStr45
  L__IntToStr46
  L__IntToStr47
  L__IntToStr48
  L__IntToStr49
  L__IntToStr50
  L__IntToStr51
  L__IntToStr52
  L__IntToStr53
  L_end__IntToStrWithZeros
  L__IntToStrWithZeros55
  L__IntToStrWithZeros56
  L__IntToStrWithZeros57
  L__IntToStrWithZeros58
  L__IntToStrWithZeros59
  L__IntToStrWithZeros60
  L__IntToStrWithZeros61
  L__IntToStrWithZeros62
  L__IntToStrWithZeros63
  L__IntToStrWithZeros64
  L__IntToStrWithZeros65
  L__IntToStrWithZeros66
  L__IntToStrWithZeros67
  L__IntToStrWithZeros68
  L_end__LongWordToStr
  L__LongWordToStr70
  L__LongWordToStr71
  L__LongWordToStr72
  L__LongWordToStr73
  L__LongWordToStr74
  L_end__LongWordToStrWithZeros
  L__LongWordToStrWithZeros76
  L__LongWordToStrWithZeros77
  L__LongWordToStrWithZeros78
  L__LongWordToStrWithZeros79
  L__LongWordToStrWithZeros80
  L_end__LongIntToStr
  L__LongIntToStr82
  L__LongIntToStr83
  L__LongIntToStr84
  L__LongIntToStr85
  L__LongIntToStr86
  L__LongIntToStr87
  L__LongIntToStr88
  L__LongIntToStr89
  L__LongIntToStr90
  L__LongIntToStr91
  L__LongIntToStr92
  L__LongIntToStr93
  L__LongIntToStr94
  L__LongIntToStr95
  L_end__LongIntToStrWithZeros
  L__LongIntToStrWithZeros97
  L__LongIntToStrWithZeros98
  L__LongIntToStrWithZeros99
  L__LongIntToStrWithZeros100
  L__LongIntToStrWithZeros101
  L__LongIntToStrWithZeros102
  L__LongIntToStrWithZeros103
  L__LongIntToStrWithZeros104
  L__LongIntToStrWithZeros105
  L__LongIntToStrWithZeros106
  L__LongIntToStrWithZeros107
  L__LongIntToStrWithZeros108
  L__LongIntToStrWithZeros109
  L__LongIntToStrWithZeros110
  L_end__Bcd2Dec
  L_end__StrToWord
  L__StrToWord113
  L__StrToWord114
  L__StrToWord115
  L__StrToWord116
  L__StrToWord117
  L__StrToWord118
  L__StrToWord119
  L__StrToWord120
  L__StrToWord121
  L__StrToWord122
  L__StrToWord123
  L__StrToWord124
  L__StrToWord125
  L_end__StrToInt
  L__StrToInt127
  L__StrToInt128
  L__StrToInt129
  L__StrToInt130
  L__StrToInt131
  L__StrToInt132
  L__StrToInt133
  L__StrToInt134
  L__StrToInt135
  L__StrToInt136
  L__StrToInt137
  L__StrToInt138
  L__StrToInt139
  L__StrToInt140
  L__StrToInt141
  L__StrToInt142
  L__StrToInt143
  L__StrToInt144
  L__StrToInt145
  L__StrToInt146
  L__StrToInt147
  L__StrToInt148
  L_end__Dec2Bcd
  L__Dec2Bcd150
  L__Dec2Bcd151
  L__Dec2Bcd152
  L_end__Bcd2Dec16
  L_end__Dec2Bcd16
  L_end__FloatToStr
  L__FloatToStr156
  L__FloatToStr157
  L__FloatToStr158
  L__FloatToStr159
  L__FloatToStr160
  L__FloatToStr161
  L__FloatToStr162
  L__FloatToStr163
  L__FloatToStr164
  L__FloatToStr165
  L__FloatToStr166
  L__FloatToStr167
  L__FloatToStr168
  L__FloatToStr169
  L__FloatToStr170
  L__FloatToStr171
  L__FloatToStr172
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__ShortToStr189
  L__IntToStr190
  L__IntToStrWithZeros191
  L__LongIntToStr192
  L__StrToWord193
  L__StrToInt194
  L__StrToInt195
  L__FloatToStr196
  L__FloatToStr197
  L__FloatToStr198
  L__FloatToStr199
  L__FloatToStr200
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr208
  L_end_WordToStr
  _WordToStr
  L__WordToStr210
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros212
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr214
  L__ShortToStr215
  L__ShortToStr216
  L__ShortToStr217
  L_end_IntToStr
  _IntToStr
  L__IntToStr219
  L__IntToStr220
  L__IntToStr221
  L__IntToStr222
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros224
  L__IntToStrWithZeros225
  L__IntToStrWithZeros226
  L__IntToStrWithZeros227
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr229
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros231
  L_end_LongIntToStr
  _LongIntToStr
  L__LongIntToStr233
  L__LongIntToStr234
  L__LongIntToStr235
  L__LongIntToStr236
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros238
  L__LongIntToStrWithZeros239
  L__LongIntToStrWithZeros240
  L__LongIntToStrWithZeros241
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_StrToWord
  _StrToWord
  L__StrToWord244
  L__StrToWord245
  L__StrToWord246
  L_end_StrToInt
  _StrToInt
  L__StrToInt248
  L__StrToInt249
  L__StrToInt250
  L__StrToInt251
  L__StrToInt252
  L__StrToInt253
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd255
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr259
  L__FloatToStr260
  L__FloatToStr261
  L__FloatToStr262
  L__FloatToStr263
  L__FloatToStr264
  L__FloatToStr265
  L__FloatToStr266
  L__FloatToStr267
  L__FloatToStr268
  L__FloatToStr269
  L__FloatToStr270
  L__FloatToStr271
  L__FloatToStr272
  L__FloatToStr273
  L_end__Get_Fosc_kHz
  L_end__Get_Fosc_Per_Cyc
  L_end__Delay_Cyc
  Delay_Cyc_loop
  Delay_Cyc_rez
  L_end__Delay_Cyc_Long
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__VDelay_ms
  L__VDelay_ms8
  L__VDelay_ms9
  L__VDelay_ms10
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__VDelay_Advanced_ms
  L__VDelay_Advanced_ms14
  L__VDelay_Advanced_ms15
  L__VDelay_Advanced_ms16
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__Delay_W0
  L_end__Delay_1uS
  L__Delay_1uS21
  L_end__Delay_10uS
  L__Delay_10uS24
  L_end__Delay_22uS
  L__Delay_22uS27
  L_end__Delay_50uS
  L__Delay_50uS30
  L_end__Delay_80uS
  L__Delay_80uS33
  L_end__Delay_500us
  L__Delay_500us36
  L_end__Delay_5500us
  L__Delay_5500us39
  L_end__Delay_1ms
  L__Delay_1ms42
  L_end__Delay_5ms
  L__Delay_5ms45
  L_end__Delay_8ms
  L__Delay_8ms48
  L_end__Delay_10ms
  L__Delay_10ms51
  L_end__Delay_100ms
  L__Delay_100ms54
  L_end__Delay_1sec
  L__Delay_1sec57
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1uS
  _Delay_1uS
  L_end_Delay_10uS
  _Delay_10uS
  L_end_Delay_22uS
  _Delay_22uS
  L_end_Delay_50uS
  _Delay_50uS
  L_end_Delay_80uS
  _Delay_80uS
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end___Multiply_32x32
  L_end___Divide_32x32
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  L_end___Modulus_32x32
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_end__Unlock_IOLOCK
  L_end__Lock_IOLOCK
  L_end___Lib_PPS_p33EP512MU810__PPS_Mapping
  L___Lib_PPS_p33EP512MU810__PPS_Mapping3
  L___Lib_PPS_p33EP512MU810__PPS_Mapping4
  L___Lib_PPS_p33EP512MU810__PPS_Mapping5
  L___Lib_PPS_p33EP512MU810__PPS_Mapping6
  L___Lib_PPS_p33EP512MU810__PPS_Mapping7
  L___Lib_PPS_p33EP512MU810__PPS_Mapping8
  L___Lib_PPS_p33EP512MU810__PPS_Mapping9
  L___Lib_PPS_p33EP512MU810__PPS_Mapping10
  L___Lib_PPS_p33EP512MU810__PPS_Mapping11
  L___Lib_PPS_p33EP512MU810__PPS_Mapping12
  L___Lib_PPS_p33EP512MU810__PPS_Mapping13
  L___Lib_PPS_p33EP512MU810__PPS_Mapping14
  L___Lib_PPS_p33EP512MU810__PPS_Mapping15
  L___Lib_PPS_p33EP512MU810__PPS_Mapping16
  L___Lib_PPS_p33EP512MU810__PPS_Mapping17
  L___Lib_PPS_p33EP512MU810__PPS_Mapping18
  L___Lib_PPS_p33EP512MU810__PPS_Mapping19
  L___Lib_PPS_p33EP512MU810__PPS_Mapping20
  L___Lib_PPS_p33EP512MU810__PPS_Mapping21
  L___Lib_PPS_p33EP512MU810__PPS_Mapping22
  L___Lib_PPS_p33EP512MU810__PPS_Mapping23
  L___Lib_PPS_p33EP512MU810__PPS_Mapping24
  L___Lib_PPS_p33EP512MU810__PPS_Mapping25
  L___Lib_PPS_p33EP512MU810__PPS_Mapping26
  L___Lib_PPS_p33EP512MU810__PPS_Mapping27
  L___Lib_PPS_p33EP512MU810__PPS_Mapping28
  L___Lib_PPS_p33EP512MU810__PPS_Mapping29
  L___Lib_PPS_p33EP512MU810__PPS_Mapping30
  L___Lib_PPS_p33EP512MU810__PPS_Mapping31
  L___Lib_PPS_p33EP512MU810__PPS_Mapping32
  L___Lib_PPS_p33EP512MU810__PPS_Mapping33
  L___Lib_PPS_p33EP512MU810__PPS_Mapping34
  L___Lib_PPS_p33EP512MU810__PPS_Mapping35
  L___Lib_PPS_p33EP512MU810__PPS_Mapping36
  L___Lib_PPS_p33EP512MU810__PPS_Mapping37
  L___Lib_PPS_p33EP512MU810__PPS_Mapping38
  L___Lib_PPS_p33EP512MU810__PPS_Mapping39
  L___Lib_PPS_p33EP512MU810__PPS_Mapping40
  L___Lib_PPS_p33EP512MU810__PPS_Mapping41
  L___Lib_PPS_p33EP512MU810__PPS_Mapping42
  L___Lib_PPS_p33EP512MU810__PPS_Mapping43
  L___Lib_PPS_p33EP512MU810__PPS_Mapping44
  L___Lib_PPS_p33EP512MU810__PPS_Mapping45
  L___Lib_PPS_p33EP512MU810__PPS_Mapping46
  L___Lib_PPS_p33EP512MU810__PPS_Mapping47
  L___Lib_PPS_p33EP512MU810__PPS_Mapping48
  L___Lib_PPS_p33EP512MU810__PPS_Mapping49
  L___Lib_PPS_p33EP512MU810__PPS_Mapping50
  L___Lib_PPS_p33EP512MU810__PPS_Mapping51
  L___Lib_PPS_p33EP512MU810__PPS_Mapping52
  L___Lib_PPS_p33EP512MU810__PPS_Mapping53
  L___Lib_PPS_p33EP512MU810__PPS_Mapping54
  L___Lib_PPS_p33EP512MU810__PPS_Mapping55
  L___Lib_PPS_p33EP512MU810__PPS_Mapping56
  L___Lib_PPS_p33EP512MU810__PPS_Mapping57
  L___Lib_PPS_p33EP512MU810__PPS_Mapping58
  L___Lib_PPS_p33EP512MU810__PPS_Mapping59
  L___Lib_PPS_p33EP512MU810__PPS_Mapping60
  L___Lib_PPS_p33EP512MU810__PPS_Mapping61
  L___Lib_PPS_p33EP512MU810__PPS_Mapping62
  L___Lib_PPS_p33EP512MU810__PPS_Mapping63
  L___Lib_PPS_p33EP512MU810__PPS_Mapping64
  L___Lib_PPS_p33EP512MU810__PPS_Mapping65
  L___Lib_PPS_p33EP512MU810__PPS_Mapping66
  L___Lib_PPS_p33EP512MU810__PPS_Mapping67
  L___Lib_PPS_p33EP512MU810__PPS_Mapping68
  L___Lib_PPS_p33EP512MU810__PPS_Mapping69
  L___Lib_PPS_p33EP512MU810__PPS_Mapping70
  L___Lib_PPS_p33EP512MU810__PPS_Mapping71
  L___Lib_PPS_p33EP512MU810__PPS_Mapping72
  L___Lib_PPS_p33EP512MU810__PPS_Mapping73
  L___Lib_PPS_p33EP512MU810__PPS_Mapping74
  L___Lib_PPS_p33EP512MU810__PPS_Mapping75
  L___Lib_PPS_p33EP512MU810__PPS_Mapping76
  L___Lib_PPS_p33EP512MU810__PPS_Mapping77
  L___Lib_PPS_p33EP512MU810__PPS_Mapping78
  L___Lib_PPS_p33EP512MU810__PPS_Mapping79
  L___Lib_PPS_p33EP512MU810__PPS_Mapping80
  L___Lib_PPS_p33EP512MU810__PPS_Mapping81
  L___Lib_PPS_p33EP512MU810__PPS_Mapping82
  L___Lib_PPS_p33EP512MU810__PPS_Mapping83
  L___Lib_PPS_p33EP512MU810__PPS_Mapping84
  L___Lib_PPS_p33EP512MU810__PPS_Mapping85
  L___Lib_PPS_p33EP512MU810__PPS_Mapping86
  L___Lib_PPS_p33EP512MU810__PPS_Mapping87
  L___Lib_PPS_p33EP512MU810__PPS_Mapping88
  L___Lib_PPS_p33EP512MU810__PPS_Mapping89
  L___Lib_PPS_p33EP512MU810__PPS_Mapping90
  L___Lib_PPS_p33EP512MU810__PPS_Mapping91
  L___Lib_PPS_p33EP512MU810__PPS_Mapping92
  L___Lib_PPS_p33EP512MU810__PPS_Mapping93
  L___Lib_PPS_p33EP512MU810__PPS_Mapping94
  L___Lib_PPS_p33EP512MU810__PPS_Mapping95
  L___Lib_PPS_p33EP512MU810__PPS_Mapping96
  L___Lib_PPS_p33EP512MU810__PPS_Mapping97
  L___Lib_PPS_p33EP512MU810__PPS_Mapping98
  L___Lib_PPS_p33EP512MU810__PPS_Mapping99
  L___Lib_PPS_p33EP512MU810__PPS_Mapping100
  L___Lib_PPS_p33EP512MU810__PPS_Mapping101
  L___Lib_PPS_p33EP512MU810__PPS_Mapping102
  L___Lib_PPS_p33EP512MU810__PPS_Mapping103
  L___Lib_PPS_p33EP512MU810__PPS_Mapping104
  L___Lib_PPS_p33EP512MU810__PPS_Mapping105
  L___Lib_PPS_p33EP512MU810__PPS_Mapping106
  L___Lib_PPS_p33EP512MU810__PPS_Mapping107
  L___Lib_PPS_p33EP512MU810__PPS_Mapping108
  L___Lib_PPS_p33EP512MU810__PPS_Mapping109
  L___Lib_PPS_p33EP512MU810__PPS_Mapping110
  L___Lib_PPS_p33EP512MU810__PPS_Mapping111
  L___Lib_PPS_p33EP512MU810__PPS_Mapping112
  L___Lib_PPS_p33EP512MU810__PPS_Mapping113
  L___Lib_PPS_p33EP512MU810__PPS_Mapping114
  L___Lib_PPS_p33EP512MU810__PPS_Mapping115
  L___Lib_PPS_p33EP512MU810__PPS_Mapping116
  L___Lib_PPS_p33EP512MU810__PPS_Mapping117
  L___Lib_PPS_p33EP512MU810__PPS_Mapping118
  L___Lib_PPS_p33EP512MU810__PPS_Mapping119
  L___Lib_PPS_p33EP512MU810__PPS_Mapping120
  L___Lib_PPS_p33EP512MU810__PPS_Mapping121
  L___Lib_PPS_p33EP512MU810__PPS_Mapping122
  L___Lib_PPS_p33EP512MU810__PPS_Mapping123
  L___Lib_PPS_p33EP512MU810__PPS_Mapping124
  L___Lib_PPS_p33EP512MU810__PPS_Mapping125
  L___Lib_PPS_p33EP512MU810__PPS_Mapping126
  L___Lib_PPS_p33EP512MU810__PPS_Mapping127
  L___Lib_PPS_p33EP512MU810__PPS_Mapping128
  L___Lib_PPS_p33EP512MU810__PPS_Mapping129
  L___Lib_PPS_p33EP512MU810__PPS_Mapping130
  L___Lib_PPS_p33EP512MU810__PPS_Mapping131
  L___Lib_PPS_p33EP512MU810__PPS_Mapping132
  L___Lib_PPS_p33EP512MU810__PPS_Mapping133
  L___Lib_PPS_p33EP512MU810__PPS_Mapping134
  L___Lib_PPS_p33EP512MU810__PPS_Mapping135
  L___Lib_PPS_p33EP512MU810__PPS_Mapping136
  L___Lib_PPS_p33EP512MU810__PPS_Mapping137
  L___Lib_PPS_p33EP512MU810__PPS_Mapping138
  L___Lib_PPS_p33EP512MU810__PPS_Mapping139
  L___Lib_PPS_p33EP512MU810__PPS_Mapping140
  L___Lib_PPS_p33EP512MU810__PPS_Mapping141
  L___Lib_PPS_p33EP512MU810__PPS_Mapping142
  L___Lib_PPS_p33EP512MU810__PPS_Mapping143
  L___Lib_PPS_p33EP512MU810__PPS_Mapping144
  L___Lib_PPS_p33EP512MU810__PPS_Mapping145
  L___Lib_PPS_p33EP512MU810__PPS_Mapping146
  L___Lib_PPS_p33EP512MU810__PPS_Mapping147
  L___Lib_PPS_p33EP512MU810__PPS_Mapping148
  L___Lib_PPS_p33EP512MU810__PPS_Mapping149
  L___Lib_PPS_p33EP512MU810__PPS_Mapping150
  L___Lib_PPS_p33EP512MU810__PPS_Mapping151
  L___Lib_PPS_p33EP512MU810__PPS_Mapping152
  L___Lib_PPS_p33EP512MU810__PPS_Mapping153
  L___Lib_PPS_p33EP512MU810__PPS_Mapping154
  L___Lib_PPS_p33EP512MU810__PPS_Mapping155
  L___Lib_PPS_p33EP512MU810__PPS_Mapping156
  L___Lib_PPS_p33EP512MU810__PPS_Mapping157
  L___Lib_PPS_p33EP512MU810__PPS_Mapping158
  L___Lib_PPS_p33EP512MU810__PPS_Mapping159
  L___Lib_PPS_p33EP512MU810__PPS_Mapping160
  L___Lib_PPS_p33EP512MU810__PPS_Mapping161
  L___Lib_PPS_p33EP512MU810__PPS_Mapping162
  L___Lib_PPS_p33EP512MU810__PPS_Mapping163
  L___Lib_PPS_p33EP512MU810__PPS_Mapping164
  L___Lib_PPS_p33EP512MU810__PPS_Mapping165
  L___Lib_PPS_p33EP512MU810__PPS_Mapping166
  L___Lib_PPS_p33EP512MU810__PPS_Mapping167
  L___Lib_PPS_p33EP512MU810__PPS_Mapping168
  L___Lib_PPS_p33EP512MU810__PPS_Mapping169
  L___Lib_PPS_p33EP512MU810__PPS_Mapping170
  L___Lib_PPS_p33EP512MU810__PPS_Mapping171
  L___Lib_PPS_p33EP512MU810__PPS_Mapping172
  L___Lib_PPS_p33EP512MU810__PPS_Mapping173
  L___Lib_PPS_p33EP512MU810__PPS_Mapping174
  L___Lib_PPS_p33EP512MU810__PPS_Mapping175
  L___Lib_PPS_p33EP512MU810__PPS_Mapping176
  L___Lib_PPS_p33EP512MU810__PPS_Mapping177
  L___Lib_PPS_p33EP512MU810__PPS_Mapping178
  L___Lib_PPS_p33EP512MU810__PPS_Mapping179
  L___Lib_PPS_p33EP512MU810__PPS_Mapping180
  L___Lib_PPS_p33EP512MU810__PPS_Mapping181
  L___Lib_PPS_p33EP512MU810__PPS_Mapping182
  L___Lib_PPS_p33EP512MU810__PPS_Mapping183
  L___Lib_PPS_p33EP512MU810__PPS_Mapping184
  L___Lib_PPS_p33EP512MU810__PPS_Mapping185
  L___Lib_PPS_p33EP512MU810__PPS_Mapping186
  L___Lib_PPS_p33EP512MU810__PPS_Mapping187
  L___Lib_PPS_p33EP512MU810__PPS_Mapping188
  L___Lib_PPS_p33EP512MU810__PPS_Mapping189
  L___Lib_PPS_p33EP512MU810__PPS_Mapping190
  L___Lib_PPS_p33EP512MU810__PPS_Mapping191
  L___Lib_PPS_p33EP512MU810__PPS_Mapping192
  L___Lib_PPS_p33EP512MU810__PPS_Mapping193
  L___Lib_PPS_p33EP512MU810__PPS_Mapping194
  L___Lib_PPS_p33EP512MU810__PPS_Mapping195
  L___Lib_PPS_p33EP512MU810__PPS_Mapping196
  L___Lib_PPS_p33EP512MU810__PPS_Mapping197
  L___Lib_PPS_p33EP512MU810__PPS_Mapping198
  L___Lib_PPS_p33EP512MU810__PPS_Mapping199
  L___Lib_PPS_p33EP512MU810__PPS_Mapping200
  L___Lib_PPS_p33EP512MU810__PPS_Mapping201
  L___Lib_PPS_p33EP512MU810__PPS_Mapping202
  L___Lib_PPS_p33EP512MU810__PPS_Mapping203
  L___Lib_PPS_p33EP512MU810__PPS_Mapping204
  L___Lib_PPS_p33EP512MU810__PPS_Mapping205
  L___Lib_PPS_p33EP512MU810__PPS_Mapping206
  L___Lib_PPS_p33EP512MU810__PPS_Mapping207
  L___Lib_PPS_p33EP512MU810__PPS_Mapping208
  L___Lib_PPS_p33EP512MU810__PPS_Mapping209
  L___Lib_PPS_p33EP512MU810__PPS_Mapping210
  L___Lib_PPS_p33EP512MU810__PPS_Mapping211
  L___Lib_PPS_p33EP512MU810__PPS_Mapping212
  L___Lib_PPS_p33EP512MU810__PPS_Mapping213
  L___Lib_PPS_p33EP512MU810__PPS_Mapping214
  L___Lib_PPS_p33EP512MU810__PPS_Mapping215
  L___Lib_PPS_p33EP512MU810__PPS_Mapping216
  L___Lib_PPS_p33EP512MU810__PPS_Mapping217
  L___Lib_PPS_p33EP512MU810__PPS_Mapping218
  L___Lib_PPS_p33EP512MU810__PPS_Mapping219
  L___Lib_PPS_p33EP512MU810__PPS_Mapping220
  L___Lib_PPS_p33EP512MU810__PPS_Mapping221
  L___Lib_PPS_p33EP512MU810__PPS_Mapping222
  L___Lib_PPS_p33EP512MU810__PPS_Mapping223
  L___Lib_PPS_p33EP512MU810__PPS_Mapping224
  L___Lib_PPS_p33EP512MU810__PPS_Mapping225
  L___Lib_PPS_p33EP512MU810__PPS_Mapping226
  L___Lib_PPS_p33EP512MU810__PPS_Mapping227
  L___Lib_PPS_p33EP512MU810__PPS_Mapping228
  L___Lib_PPS_p33EP512MU810__PPS_Mapping229
  L___Lib_PPS_p33EP512MU810__PPS_Mapping230
  L___Lib_PPS_p33EP512MU810__PPS_Mapping231
  L___Lib_PPS_p33EP512MU810__PPS_Mapping232
  L___Lib_PPS_p33EP512MU810__PPS_Mapping233
  L___Lib_PPS_p33EP512MU810__PPS_Mapping234
  L___Lib_PPS_p33EP512MU810__PPS_Mapping235
  L___Lib_PPS_p33EP512MU810__PPS_Mapping236
  L___Lib_PPS_p33EP512MU810__PPS_Mapping237
  L___Lib_PPS_p33EP512MU810__PPS_Mapping238
  L___Lib_PPS_p33EP512MU810__PPS_Mapping239
  L___Lib_PPS_p33EP512MU810__PPS_Mapping240
  L___Lib_PPS_p33EP512MU810__PPS_Mapping241
  L___Lib_PPS_p33EP512MU810__PPS_Mapping242
  L___Lib_PPS_p33EP512MU810__PPS_Mapping243
  L___Lib_PPS_p33EP512MU810__PPS_Mapping244
  L___Lib_PPS_p33EP512MU810__PPS_Mapping245
  L___Lib_PPS_p33EP512MU810__PPS_Mapping246
  L___Lib_PPS_p33EP512MU810__PPS_Mapping247
  L___Lib_PPS_p33EP512MU810__PPS_Mapping248
  L___Lib_PPS_p33EP512MU810__PPS_Mapping249
  L___Lib_PPS_p33EP512MU810__PPS_Mapping250
  L___Lib_PPS_p33EP512MU810__PPS_Mapping251
  L___Lib_PPS_p33EP512MU810__PPS_Mapping252
  L___Lib_PPS_p33EP512MU810__PPS_Mapping253
  L___Lib_PPS_p33EP512MU810__PPS_Mapping254
  L___Lib_PPS_p33EP512MU810__PPS_Mapping255
  L___Lib_PPS_p33EP512MU810__PPS_Mapping256
  L___Lib_PPS_p33EP512MU810__PPS_Mapping257
  L___Lib_PPS_p33EP512MU810__PPS_Mapping258
  L___Lib_PPS_p33EP512MU810__PPS_Mapping259
  L___Lib_PPS_p33EP512MU810__PPS_Mapping260
  L___Lib_PPS_p33EP512MU810__PPS_Mapping261
  L___Lib_PPS_p33EP512MU810__PPS_Mapping262
  L___Lib_PPS_p33EP512MU810__PPS_Mapping263
  L___Lib_PPS_p33EP512MU810__PPS_Mapping264
  L___Lib_PPS_p33EP512MU810__PPS_Mapping265
  L___Lib_PPS_p33EP512MU810__PPS_Mapping266
  L___Lib_PPS_p33EP512MU810__PPS_Mapping267
  L___Lib_PPS_p33EP512MU810__PPS_Mapping268
  L___Lib_PPS_p33EP512MU810__PPS_Mapping269
  L___Lib_PPS_p33EP512MU810__PPS_Mapping270
  L___Lib_PPS_p33EP512MU810__PPS_Mapping271
  L___Lib_PPS_p33EP512MU810__PPS_Mapping272
  L___Lib_PPS_p33EP512MU810__PPS_Mapping273
  L___Lib_PPS_p33EP512MU810__PPS_Mapping274
  L___Lib_PPS_p33EP512MU810__PPS_Mapping275
  L___Lib_PPS_p33EP512MU810__PPS_Mapping276
  L___Lib_PPS_p33EP512MU810__PPS_Mapping277
  L___Lib_PPS_p33EP512MU810__PPS_Mapping278
  L___Lib_PPS_p33EP512MU810__PPS_Mapping279
  L___Lib_PPS_p33EP512MU810__PPS_Mapping280
  L___Lib_PPS_p33EP512MU810__PPS_Mapping281
  L___Lib_PPS_p33EP512MU810__PPS_Mapping282
  L___Lib_PPS_p33EP512MU810__PPS_Mapping283
  L___Lib_PPS_p33EP512MU810__PPS_Mapping284
  L___Lib_PPS_p33EP512MU810__PPS_Mapping285
  L___Lib_PPS_p33EP512MU810__PPS_Mapping286
  L___Lib_PPS_p33EP512MU810__PPS_Mapping287
  L___Lib_PPS_p33EP512MU810__PPS_Mapping288
  L___Lib_PPS_p33EP512MU810__PPS_Mapping289
  L___Lib_PPS_p33EP512MU810__PPS_Mapping290
  L___Lib_PPS_p33EP512MU810__PPS_Mapping291
  L___Lib_PPS_p33EP512MU810__PPS_Mapping292
  L___Lib_PPS_p33EP512MU810__PPS_Mapping293
  L___Lib_PPS_p33EP512MU810__PPS_Mapping294
  L___Lib_PPS_p33EP512MU810__PPS_Mapping295
  L___Lib_PPS_p33EP512MU810__PPS_Mapping296
  L___Lib_PPS_p33EP512MU810__PPS_Mapping297
  L___Lib_PPS_p33EP512MU810__PPS_Mapping298
  L___Lib_PPS_p33EP512MU810__PPS_Mapping299
  L___Lib_PPS_p33EP512MU810__PPS_Mapping300
  L___Lib_PPS_p33EP512MU810__PPS_Mapping301
  L___Lib_PPS_p33EP512MU810__PPS_Mapping302
  L___Lib_PPS_p33EP512MU810__PPS_Mapping303
  L___Lib_PPS_p33EP512MU810__PPS_Mapping304
  L___Lib_PPS_p33EP512MU810__PPS_Mapping305
  L___Lib_PPS_p33EP512MU810__PPS_Mapping306
  L___Lib_PPS_p33EP512MU810__PPS_Mapping307
  L___Lib_PPS_p33EP512MU810__PPS_Mapping308
  L___Lib_PPS_p33EP512MU810__PPS_Mapping309
  L___Lib_PPS_p33EP512MU810__PPS_Mapping310
  L___Lib_PPS_p33EP512MU810__PPS_Mapping311
  L___Lib_PPS_p33EP512MU810__PPS_Mapping312
  L___Lib_PPS_p33EP512MU810__PPS_Mapping313
  L___Lib_PPS_p33EP512MU810__PPS_Mapping314
  L___Lib_PPS_p33EP512MU810__PPS_Mapping315
  L___Lib_PPS_p33EP512MU810__PPS_Mapping316
  L___Lib_PPS_p33EP512MU810__PPS_Mapping317
  L___Lib_PPS_p33EP512MU810__PPS_Mapping318
  L___Lib_PPS_p33EP512MU810__PPS_Mapping319
  L___Lib_PPS_p33EP512MU810__PPS_Mapping320
  L___Lib_PPS_p33EP512MU810__PPS_Mapping321
  L___Lib_PPS_p33EP512MU810__PPS_Mapping322
  L___Lib_PPS_p33EP512MU810__PPS_Mapping323
  L___Lib_PPS_p33EP512MU810__PPS_Mapping324
  L___Lib_PPS_p33EP512MU810__PPS_Mapping325
  L___Lib_PPS_p33EP512MU810__PPS_Mapping326
  L___Lib_PPS_p33EP512MU810__PPS_Mapping327
  L___Lib_PPS_p33EP512MU810__PPS_Mapping328
  L___Lib_PPS_p33EP512MU810__PPS_Mapping329
  L___Lib_PPS_p33EP512MU810__PPS_Mapping330
  L___Lib_PPS_p33EP512MU810__PPS_Mapping331
  L___Lib_PPS_p33EP512MU810__PPS_Mapping332
  L___Lib_PPS_p33EP512MU810__PPS_Mapping333
  L___Lib_PPS_p33EP512MU810__PPS_Mapping334
  L___Lib_PPS_p33EP512MU810__PPS_Mapping335
  L___Lib_PPS_p33EP512MU810__PPS_Mapping336
  L___Lib_PPS_p33EP512MU810__PPS_Mapping337
  L___Lib_PPS_p33EP512MU810__PPS_Mapping338
  L___Lib_PPS_p33EP512MU810__PPS_Mapping339
  L___Lib_PPS_p33EP512MU810__PPS_Mapping340
  L___Lib_PPS_p33EP512MU810__PPS_Mapping341
  L___Lib_PPS_p33EP512MU810__PPS_Mapping342
  L___Lib_PPS_p33EP512MU810__PPS_Mapping343
  L___Lib_PPS_p33EP512MU810__PPS_Mapping344
  L___Lib_PPS_p33EP512MU810__PPS_Mapping345
  L___Lib_PPS_p33EP512MU810__PPS_Mapping346
  L___Lib_PPS_p33EP512MU810__PPS_Mapping347
  L___Lib_PPS_p33EP512MU810__PPS_Mapping348
  L___Lib_PPS_p33EP512MU810__PPS_Mapping349
  L___Lib_PPS_p33EP512MU810__PPS_Mapping350
  L___Lib_PPS_p33EP512MU810__PPS_Mapping351
  L___Lib_PPS_p33EP512MU810__PPS_Mapping352
  L___Lib_PPS_p33EP512MU810__PPS_Mapping353
  L___Lib_PPS_p33EP512MU810__PPS_Mapping354
  L___Lib_PPS_p33EP512MU810__PPS_Mapping355
  L___Lib_PPS_p33EP512MU810__PPS_Mapping356
  L___Lib_PPS_p33EP512MU810__PPS_Mapping357
  L___Lib_PPS_p33EP512MU810__PPS_Mapping358
  L___Lib_PPS_p33EP512MU810__PPS_Mapping359
  L___Lib_PPS_p33EP512MU810__PPS_Mapping360
  L___Lib_PPS_p33EP512MU810__PPS_Mapping361
  L___Lib_PPS_p33EP512MU810__PPS_Mapping362
  L___Lib_PPS_p33EP512MU810__PPS_Mapping363
  L___Lib_PPS_p33EP512MU810__PPS_Mapping364
  L___Lib_PPS_p33EP512MU810__PPS_Mapping365
  L___Lib_PPS_p33EP512MU810__PPS_Mapping366
  L___Lib_PPS_p33EP512MU810__PPS_Mapping367
  L___Lib_PPS_p33EP512MU810__PPS_Mapping368
  L___Lib_PPS_p33EP512MU810__PPS_Mapping369
  L___Lib_PPS_p33EP512MU810__PPS_Mapping370
  L___Lib_PPS_p33EP512MU810__PPS_Mapping371
  L___Lib_PPS_p33EP512MU810__PPS_Mapping372
  L___Lib_PPS_p33EP512MU810__PPS_Mapping373
  L___Lib_PPS_p33EP512MU810__PPS_Mapping374
  L___Lib_PPS_p33EP512MU810__PPS_Mapping375
  L___Lib_PPS_p33EP512MU810__PPS_Mapping376
  L___Lib_PPS_p33EP512MU810__PPS_Mapping377
  L___Lib_PPS_p33EP512MU810__PPS_Mapping378
  L___Lib_PPS_p33EP512MU810__PPS_Mapping379
  L___Lib_PPS_p33EP512MU810__PPS_Mapping380
  L___Lib_PPS_p33EP512MU810__PPS_Mapping381
  L___Lib_PPS_p33EP512MU810__PPS_Mapping382
  L___Lib_PPS_p33EP512MU810__PPS_Mapping383
  L___Lib_PPS_p33EP512MU810__PPS_Mapping384
  L___Lib_PPS_p33EP512MU810__PPS_Mapping385
  L___Lib_PPS_p33EP512MU810__PPS_Mapping386
  L___Lib_PPS_p33EP512MU810__PPS_Mapping387
  L___Lib_PPS_p33EP512MU810__PPS_Mapping388
  L___Lib_PPS_p33EP512MU810__PPS_Mapping389
  L___Lib_PPS_p33EP512MU810__PPS_Mapping390
  L___Lib_PPS_p33EP512MU810__PPS_Mapping391
  L___Lib_PPS_p33EP512MU810__PPS_Mapping392
  L___Lib_PPS_p33EP512MU810__PPS_Mapping393
  L___Lib_PPS_p33EP512MU810__PPS_Mapping394
  L___Lib_PPS_p33EP512MU810__PPS_Mapping395
  L___Lib_PPS_p33EP512MU810__PPS_Mapping396
  L___Lib_PPS_p33EP512MU810__PPS_Mapping397
  L___Lib_PPS_p33EP512MU810__PPS_Mapping398
  L___Lib_PPS_p33EP512MU810__PPS_Mapping399
  L___Lib_PPS_p33EP512MU810__PPS_Mapping400
  L___Lib_PPS_p33EP512MU810__PPS_Mapping401
  L___Lib_PPS_p33EP512MU810__PPS_Mapping402
  L___Lib_PPS_p33EP512MU810__PPS_Mapping403
  L___Lib_PPS_p33EP512MU810__PPS_Mapping404
  L___Lib_PPS_p33EP512MU810__PPS_Mapping405
  L___Lib_PPS_p33EP512MU810__PPS_Mapping406
  L___Lib_PPS_p33EP512MU810__PPS_Mapping407
  L___Lib_PPS_p33EP512MU810__PPS_Mapping408
  L___Lib_PPS_p33EP512MU810__PPS_Mapping409
  L___Lib_PPS_p33EP512MU810__PPS_Mapping410
  L___Lib_PPS_p33EP512MU810__PPS_Mapping411
  L___Lib_PPS_p33EP512MU810__PPS_Mapping412
  L___Lib_PPS_p33EP512MU810__PPS_Mapping413
  L___Lib_PPS_p33EP512MU810__PPS_Mapping414
  L___Lib_PPS_p33EP512MU810__PPS_Mapping415
  L___Lib_PPS_p33EP512MU810__PPS_Mapping416
  L___Lib_PPS_p33EP512MU810__PPS_Mapping417
  L___Lib_PPS_p33EP512MU810__PPS_Mapping418
  L___Lib_PPS_p33EP512MU810__PPS_Mapping419
  L___Lib_PPS_p33EP512MU810__PPS_Mapping420
  L___Lib_PPS_p33EP512MU810__PPS_Mapping421
  L___Lib_PPS_p33EP512MU810__PPS_Mapping422
  L___Lib_PPS_p33EP512MU810__PPS_Mapping423
  L___Lib_PPS_p33EP512MU810__PPS_Mapping424
  L___Lib_PPS_p33EP512MU810__PPS_Mapping425
  L___Lib_PPS_p33EP512MU810__PPS_Mapping426
  L___Lib_PPS_p33EP512MU810__PPS_Mapping427
  L___Lib_PPS_p33EP512MU810__PPS_Mapping428
  L___Lib_PPS_p33EP512MU810__PPS_Mapping429
  L___Lib_PPS_p33EP512MU810__PPS_Mapping430
  L___Lib_PPS_p33EP512MU810__PPS_Mapping431
  L___Lib_PPS_p33EP512MU810__PPS_Mapping432
  L___Lib_PPS_p33EP512MU810__PPS_Mapping433
  L___Lib_PPS_p33EP512MU810__PPS_Mapping434
  L___Lib_PPS_p33EP512MU810__PPS_Mapping435
  L___Lib_PPS_p33EP512MU810__PPS_Mapping436
  L___Lib_PPS_p33EP512MU810__PPS_Mapping437
  L___Lib_PPS_p33EP512MU810__PPS_Mapping438
  L___Lib_PPS_p33EP512MU810__PPS_Mapping439
  L___Lib_PPS_p33EP512MU810__PPS_Mapping440
  L___Lib_PPS_p33EP512MU810__PPS_Mapping441
  L___Lib_PPS_p33EP512MU810__PPS_Mapping442
  L___Lib_PPS_p33EP512MU810__PPS_Mapping443
  L___Lib_PPS_p33EP512MU810__PPS_Mapping444
  L___Lib_PPS_p33EP512MU810__PPS_Mapping445
  L___Lib_PPS_p33EP512MU810__PPS_Mapping446
  L___Lib_PPS_p33EP512MU810__PPS_Mapping447
  L___Lib_PPS_p33EP512MU810__PPS_Mapping448
  L___Lib_PPS_p33EP512MU810__PPS_Mapping449
  L___Lib_PPS_p33EP512MU810__PPS_Mapping450
  L___Lib_PPS_p33EP512MU810__PPS_Mapping451
  L___Lib_PPS_p33EP512MU810__PPS_Mapping452
  L___Lib_PPS_p33EP512MU810__PPS_Mapping453
  L___Lib_PPS_p33EP512MU810__PPS_Mapping454
  L___Lib_PPS_p33EP512MU810__PPS_Mapping455
  L___Lib_PPS_p33EP512MU810__PPS_Mapping456
  L___Lib_PPS_p33EP512MU810__PPS_Mapping457
  L___Lib_PPS_p33EP512MU810__PPS_Mapping458
  L___Lib_PPS_p33EP512MU810__PPS_Mapping459
  L___Lib_PPS_p33EP512MU810__PPS_Mapping460
  L___Lib_PPS_p33EP512MU810__PPS_Mapping461
  L___Lib_PPS_p33EP512MU810__PPS_Mapping462
  L___Lib_PPS_p33EP512MU810__PPS_Mapping463
  L___Lib_PPS_p33EP512MU810__PPS_Mapping464
  L___Lib_PPS_p33EP512MU810__PPS_Mapping465
  L___Lib_PPS_p33EP512MU810__PPS_Mapping466
  L___Lib_PPS_p33EP512MU810__PPS_Mapping467
  L___Lib_PPS_p33EP512MU810__PPS_Mapping468
  L___Lib_PPS_p33EP512MU810__PPS_Mapping469
  L___Lib_PPS_p33EP512MU810__PPS_Mapping470
  L___Lib_PPS_p33EP512MU810__PPS_Mapping471
  L___Lib_PPS_p33EP512MU810__PPS_Mapping472
  L___Lib_PPS_p33EP512MU810__PPS_Mapping473
  L___Lib_PPS_p33EP512MU810__PPS_Mapping474
  L___Lib_PPS_p33EP512MU810__PPS_Mapping475
  L___Lib_PPS_p33EP512MU810__PPS_Mapping476
  L___Lib_PPS_p33EP512MU810__PPS_Mapping477
  L___Lib_PPS_p33EP512MU810__PPS_Mapping478
  L___Lib_PPS_p33EP512MU810__PPS_Mapping479
  L___Lib_PPS_p33EP512MU810__PPS_Mapping480
  L___Lib_PPS_p33EP512MU810__PPS_Mapping481
  L___Lib_PPS_p33EP512MU810__PPS_Mapping482
  L___Lib_PPS_p33EP512MU810__PPS_Mapping483
  L___Lib_PPS_p33EP512MU810__PPS_Mapping484
  L___Lib_PPS_p33EP512MU810__PPS_Mapping485
  L___Lib_PPS_p33EP512MU810__PPS_Mapping486
  L___Lib_PPS_p33EP512MU810__PPS_Mapping487
  L___Lib_PPS_p33EP512MU810__PPS_Mapping488
  L___Lib_PPS_p33EP512MU810__PPS_Mapping489
  L___Lib_PPS_p33EP512MU810__PPS_Mapping490
  L___Lib_PPS_p33EP512MU810__PPS_Mapping491
  L___Lib_PPS_p33EP512MU810__PPS_Mapping492
  L___Lib_PPS_p33EP512MU810__PPS_Mapping493
  L___Lib_PPS_p33EP512MU810__PPS_Mapping494
  L___Lib_PPS_p33EP512MU810__PPS_Mapping495
  L___Lib_PPS_p33EP512MU810__PPS_Mapping496
  L___Lib_PPS_p33EP512MU810__PPS_Mapping497
  L___Lib_PPS_p33EP512MU810__PPS_Mapping498
  L___Lib_PPS_p33EP512MU810__PPS_Mapping499
  L___Lib_PPS_p33EP512MU810__PPS_Mapping500
  L___Lib_PPS_p33EP512MU810__PPS_Mapping501
  L___Lib_PPS_p33EP512MU810__PPS_Mapping502
  L___Lib_PPS_p33EP512MU810__PPS_Mapping503
  L___Lib_PPS_p33EP512MU810__PPS_Mapping504
  L___Lib_PPS_p33EP512MU810__PPS_Mapping505
  L___Lib_PPS_p33EP512MU810__PPS_Mapping506
  L___Lib_PPS_p33EP512MU810__PPS_Mapping507
  L___Lib_PPS_p33EP512MU810__PPS_Mapping508
  L___Lib_PPS_p33EP512MU810__PPS_Mapping509
  L___Lib_PPS_p33EP512MU810__PPS_Mapping510
  L___Lib_PPS_p33EP512MU810__PPS_Mapping511
  L___Lib_PPS_p33EP512MU810__PPS_Mapping512
  L___Lib_PPS_p33EP512MU810__PPS_Mapping513
  L___Lib_PPS_p33EP512MU810__PPS_Mapping514
  L___Lib_PPS_p33EP512MU810__PPS_Mapping515
  L___Lib_PPS_p33EP512MU810__PPS_Mapping516
  L___Lib_PPS_p33EP512MU810__PPS_Mapping517
  L___Lib_PPS_p33EP512MU810__PPS_Mapping518
  L___Lib_PPS_p33EP512MU810__PPS_Mapping519
  L___Lib_PPS_p33EP512MU810__PPS_Mapping520
  L___Lib_PPS_p33EP512MU810__PPS_Mapping521
  L___Lib_PPS_p33EP512MU810__PPS_Mapping522
  L___Lib_PPS_p33EP512MU810__PPS_Mapping523
  L___Lib_PPS_p33EP512MU810__PPS_Mapping524
  L___Lib_PPS_p33EP512MU810__PPS_Mapping525
  L___Lib_PPS_p33EP512MU810__PPS_Mapping526
  L___Lib_PPS_p33EP512MU810__PPS_Mapping527
  L___Lib_PPS_p33EP512MU810__PPS_Mapping528
  L___Lib_PPS_p33EP512MU810__PPS_Mapping529
  L___Lib_PPS_p33EP512MU810__PPS_Mapping530
  L___Lib_PPS_p33EP512MU810__PPS_Mapping531
  L___Lib_PPS_p33EP512MU810__PPS_Mapping532
  L___Lib_PPS_p33EP512MU810__PPS_Mapping533
  L___Lib_PPS_p33EP512MU810__PPS_Mapping534
  L___Lib_PPS_p33EP512MU810__PPS_Mapping535
  L___Lib_PPS_p33EP512MU810__PPS_Mapping536
  L___Lib_PPS_p33EP512MU810__PPS_Mapping537
  L___Lib_PPS_p33EP512MU810__PPS_Mapping538
  L___Lib_PPS_p33EP512MU810__PPS_Mapping539
  L___Lib_PPS_p33EP512MU810__PPS_Mapping540
  L___Lib_PPS_p33EP512MU810__PPS_Mapping541
  L___Lib_PPS_p33EP512MU810__PPS_Mapping542
  L___Lib_PPS_p33EP512MU810__PPS_Mapping543
  L___Lib_PPS_p33EP512MU810__PPS_Mapping544
  L___Lib_PPS_p33EP512MU810__PPS_Mapping545
  L___Lib_PPS_p33EP512MU810__PPS_Mapping546
  L___Lib_PPS_p33EP512MU810__PPS_Mapping547
  L___Lib_PPS_p33EP512MU810__PPS_Mapping548
  L___Lib_PPS_p33EP512MU810__PPS_Mapping549
  L___Lib_PPS_p33EP512MU810__PPS_Mapping550
  L___Lib_PPS_p33EP512MU810__PPS_Mapping551
  L___Lib_PPS_p33EP512MU810__PPS_Mapping552
  L___Lib_PPS_p33EP512MU810__PPS_Mapping553
  L___Lib_PPS_p33EP512MU810__PPS_Mapping554
  L___Lib_PPS_p33EP512MU810__PPS_Mapping555
  L___Lib_PPS_p33EP512MU810__PPS_Mapping556
  L___Lib_PPS_p33EP512MU810__PPS_Mapping557
  L___Lib_PPS_p33EP512MU810__PPS_Mapping558
  L___Lib_PPS_p33EP512MU810__PPS_Mapping559
  L___Lib_PPS_p33EP512MU810__PPS_Mapping560
  L___Lib_PPS_p33EP512MU810__PPS_Mapping561
  L___Lib_PPS_p33EP512MU810__PPS_Mapping562
  L___Lib_PPS_p33EP512MU810__PPS_Mapping563
  L___Lib_PPS_p33EP512MU810__PPS_Mapping564
  L___Lib_PPS_p33EP512MU810__PPS_Mapping565
  L___Lib_PPS_p33EP512MU810__PPS_Mapping566
  L___Lib_PPS_p33EP512MU810__PPS_Mapping567
  L___Lib_PPS_p33EP512MU810__PPS_Mapping568
  L___Lib_PPS_p33EP512MU810__PPS_Mapping569
  L___Lib_PPS_p33EP512MU810__PPS_Mapping570
  L___Lib_PPS_p33EP512MU810__PPS_Mapping571
  L___Lib_PPS_p33EP512MU810__PPS_Mapping572
  L___Lib_PPS_p33EP512MU810__PPS_Mapping573
  L___Lib_PPS_p33EP512MU810__PPS_Mapping574
  L___Lib_PPS_p33EP512MU810__PPS_Mapping575
  L___Lib_PPS_p33EP512MU810__PPS_Mapping576
  L___Lib_PPS_p33EP512MU810__PPS_Mapping577
  L___Lib_PPS_p33EP512MU810__PPS_Mapping578
  L_end__PPS_Mapping
  L_end__PPS_Mapping_NoLock
  L_end_Unlock_IOLOCK
  _Unlock_IOLOCK
  L_end_Lock_IOLOCK
  _Lock_IOLOCK
  L_end__PPS_Mapping
  __Lib_PPS_p33EP512MU810__PPS_Mapping
  L___Lib_PPS_p33EP512MU810__PPS_Mapping584
  L___Lib_PPS_p33EP512MU810__PPS_Mapping585
  L___Lib_PPS_p33EP512MU810__PPS_Mapping586
  L___Lib_PPS_p33EP512MU810__PPS_Mapping587
  L___Lib_PPS_p33EP512MU810__PPS_Mapping588
  L___Lib_PPS_p33EP512MU810__PPS_Mapping589
  L___Lib_PPS_p33EP512MU810__PPS_Mapping590
  L___Lib_PPS_p33EP512MU810__PPS_Mapping591
  L___Lib_PPS_p33EP512MU810__PPS_Mapping592
  L___Lib_PPS_p33EP512MU810__PPS_Mapping593
  L___Lib_PPS_p33EP512MU810__PPS_Mapping594
  L___Lib_PPS_p33EP512MU810__PPS_Mapping595
  L___Lib_PPS_p33EP512MU810__PPS_Mapping596
  L___Lib_PPS_p33EP512MU810__PPS_Mapping597
  L___Lib_PPS_p33EP512MU810__PPS_Mapping598
  L___Lib_PPS_p33EP512MU810__PPS_Mapping599
  L___Lib_PPS_p33EP512MU810__PPS_Mapping600
  L___Lib_PPS_p33EP512MU810__PPS_Mapping601
  L___Lib_PPS_p33EP512MU810__PPS_Mapping602
  L___Lib_PPS_p33EP512MU810__PPS_Mapping603
  L___Lib_PPS_p33EP512MU810__PPS_Mapping604
  L___Lib_PPS_p33EP512MU810__PPS_Mapping605
  L___Lib_PPS_p33EP512MU810__PPS_Mapping606
  L___Lib_PPS_p33EP512MU810__PPS_Mapping607
  L___Lib_PPS_p33EP512MU810__PPS_Mapping608
  L___Lib_PPS_p33EP512MU810__PPS_Mapping609
  L___Lib_PPS_p33EP512MU810__PPS_Mapping610
  L___Lib_PPS_p33EP512MU810__PPS_Mapping611
  L___Lib_PPS_p33EP512MU810__PPS_Mapping612
  L___Lib_PPS_p33EP512MU810__PPS_Mapping613
  L___Lib_PPS_p33EP512MU810__PPS_Mapping614
  L___Lib_PPS_p33EP512MU810__PPS_Mapping615
  L___Lib_PPS_p33EP512MU810__PPS_Mapping616
  L___Lib_PPS_p33EP512MU810__PPS_Mapping617
  L___Lib_PPS_p33EP512MU810__PPS_Mapping618
  L___Lib_PPS_p33EP512MU810__PPS_Mapping619
  L___Lib_PPS_p33EP512MU810__PPS_Mapping620
  L___Lib_PPS_p33EP512MU810__PPS_Mapping621
  L___Lib_PPS_p33EP512MU810__PPS_Mapping622
  L___Lib_PPS_p33EP512MU810__PPS_Mapping623
  L___Lib_PPS_p33EP512MU810__PPS_Mapping624
  L___Lib_PPS_p33EP512MU810__PPS_Mapping625
  L___Lib_PPS_p33EP512MU810__PPS_Mapping626
  L___Lib_PPS_p33EP512MU810__PPS_Mapping627
  L___Lib_PPS_p33EP512MU810__PPS_Mapping628
  L___Lib_PPS_p33EP512MU810__PPS_Mapping629
  L___Lib_PPS_p33EP512MU810__PPS_Mapping630
  L___Lib_PPS_p33EP512MU810__PPS_Mapping631
  L___Lib_PPS_p33EP512MU810__PPS_Mapping632
  L___Lib_PPS_p33EP512MU810__PPS_Mapping633
  L___Lib_PPS_p33EP512MU810__PPS_Mapping634
  L___Lib_PPS_p33EP512MU810__PPS_Mapping635
  L___Lib_PPS_p33EP512MU810__PPS_Mapping636
  L___Lib_PPS_p33EP512MU810__PPS_Mapping637
  L___Lib_PPS_p33EP512MU810__PPS_Mapping638
  L___Lib_PPS_p33EP512MU810__PPS_Mapping639
  L___Lib_PPS_p33EP512MU810__PPS_Mapping640
  L___Lib_PPS_p33EP512MU810__PPS_Mapping641
  L___Lib_PPS_p33EP512MU810__PPS_Mapping642
  L___Lib_PPS_p33EP512MU810__PPS_Mapping643
  L___Lib_PPS_p33EP512MU810__PPS_Mapping644
  L___Lib_PPS_p33EP512MU810__PPS_Mapping645
  L___Lib_PPS_p33EP512MU810__PPS_Mapping646
  L___Lib_PPS_p33EP512MU810__PPS_Mapping647
  L___Lib_PPS_p33EP512MU810__PPS_Mapping648
  L___Lib_PPS_p33EP512MU810__PPS_Mapping649
  L___Lib_PPS_p33EP512MU810__PPS_Mapping650
  L___Lib_PPS_p33EP512MU810__PPS_Mapping651
  L___Lib_PPS_p33EP512MU810__PPS_Mapping652
  L___Lib_PPS_p33EP512MU810__PPS_Mapping653
  L___Lib_PPS_p33EP512MU810__PPS_Mapping654
  L___Lib_PPS_p33EP512MU810__PPS_Mapping655
  L___Lib_PPS_p33EP512MU810__PPS_Mapping656
  L___Lib_PPS_p33EP512MU810__PPS_Mapping657
  L___Lib_PPS_p33EP512MU810__PPS_Mapping658
  L___Lib_PPS_p33EP512MU810__PPS_Mapping659
  L___Lib_PPS_p33EP512MU810__PPS_Mapping660
  L___Lib_PPS_p33EP512MU810__PPS_Mapping661
  L___Lib_PPS_p33EP512MU810__PPS_Mapping662
  L___Lib_PPS_p33EP512MU810__PPS_Mapping663
  L___Lib_PPS_p33EP512MU810__PPS_Mapping664
  L___Lib_PPS_p33EP512MU810__PPS_Mapping665
  L___Lib_PPS_p33EP512MU810__PPS_Mapping666
  L___Lib_PPS_p33EP512MU810__PPS_Mapping667
  L___Lib_PPS_p33EP512MU810__PPS_Mapping668
  L___Lib_PPS_p33EP512MU810__PPS_Mapping669
  L___Lib_PPS_p33EP512MU810__PPS_Mapping670
  L___Lib_PPS_p33EP512MU810__PPS_Mapping671
  L___Lib_PPS_p33EP512MU810__PPS_Mapping672
  L___Lib_PPS_p33EP512MU810__PPS_Mapping673
  L___Lib_PPS_p33EP512MU810__PPS_Mapping674
  L___Lib_PPS_p33EP512MU810__PPS_Mapping675
  L___Lib_PPS_p33EP512MU810__PPS_Mapping676
  L___Lib_PPS_p33EP512MU810__PPS_Mapping677
  L___Lib_PPS_p33EP512MU810__PPS_Mapping678
  L___Lib_PPS_p33EP512MU810__PPS_Mapping679
  L___Lib_PPS_p33EP512MU810__PPS_Mapping680
  L___Lib_PPS_p33EP512MU810__PPS_Mapping681
  L___Lib_PPS_p33EP512MU810__PPS_Mapping682
  L___Lib_PPS_p33EP512MU810__PPS_Mapping683
  L___Lib_PPS_p33EP512MU810__PPS_Mapping684
  L___Lib_PPS_p33EP512MU810__PPS_Mapping685
  L___Lib_PPS_p33EP512MU810__PPS_Mapping686
  L___Lib_PPS_p33EP512MU810__PPS_Mapping687
  L___Lib_PPS_p33EP512MU810__PPS_Mapping688
  L___Lib_PPS_p33EP512MU810__PPS_Mapping689
  L___Lib_PPS_p33EP512MU810__PPS_Mapping690
  L___Lib_PPS_p33EP512MU810__PPS_Mapping691
  L___Lib_PPS_p33EP512MU810__PPS_Mapping692
  L___Lib_PPS_p33EP512MU810__PPS_Mapping693
  L___Lib_PPS_p33EP512MU810__PPS_Mapping694
  L___Lib_PPS_p33EP512MU810__PPS_Mapping695
  L___Lib_PPS_p33EP512MU810__PPS_Mapping696
  L___Lib_PPS_p33EP512MU810__PPS_Mapping697
  L___Lib_PPS_p33EP512MU810__PPS_Mapping698
  L___Lib_PPS_p33EP512MU810__PPS_Mapping699
  L___Lib_PPS_p33EP512MU810__PPS_Mapping700
  L___Lib_PPS_p33EP512MU810__PPS_Mapping701
  L___Lib_PPS_p33EP512MU810__PPS_Mapping702
  L___Lib_PPS_p33EP512MU810__PPS_Mapping703
  L___Lib_PPS_p33EP512MU810__PPS_Mapping704
  L___Lib_PPS_p33EP512MU810__PPS_Mapping705
  L___Lib_PPS_p33EP512MU810__PPS_Mapping706
  L___Lib_PPS_p33EP512MU810__PPS_Mapping707
  L___Lib_PPS_p33EP512MU810__PPS_Mapping708
  L___Lib_PPS_p33EP512MU810__PPS_Mapping709
  L___Lib_PPS_p33EP512MU810__PPS_Mapping710
  L___Lib_PPS_p33EP512MU810__PPS_Mapping711
  L___Lib_PPS_p33EP512MU810__PPS_Mapping712
  L___Lib_PPS_p33EP512MU810__PPS_Mapping713
  L___Lib_PPS_p33EP512MU810__PPS_Mapping714
  L___Lib_PPS_p33EP512MU810__PPS_Mapping715
  L___Lib_PPS_p33EP512MU810__PPS_Mapping716
  L___Lib_PPS_p33EP512MU810__PPS_Mapping717
  L___Lib_PPS_p33EP512MU810__PPS_Mapping718
  L___Lib_PPS_p33EP512MU810__PPS_Mapping719
  L___Lib_PPS_p33EP512MU810__PPS_Mapping720
  L___Lib_PPS_p33EP512MU810__PPS_Mapping721
  L___Lib_PPS_p33EP512MU810__PPS_Mapping722
  L___Lib_PPS_p33EP512MU810__PPS_Mapping723
  L___Lib_PPS_p33EP512MU810__PPS_Mapping724
  L___Lib_PPS_p33EP512MU810__PPS_Mapping725
  L___Lib_PPS_p33EP512MU810__PPS_Mapping726
  L___Lib_PPS_p33EP512MU810__PPS_Mapping727
  L___Lib_PPS_p33EP512MU810__PPS_Mapping728
  L___Lib_PPS_p33EP512MU810__PPS_Mapping729
  L___Lib_PPS_p33EP512MU810__PPS_Mapping730
  L___Lib_PPS_p33EP512MU810__PPS_Mapping731
  L___Lib_PPS_p33EP512MU810__PPS_Mapping732
  L___Lib_PPS_p33EP512MU810__PPS_Mapping733
  L___Lib_PPS_p33EP512MU810__PPS_Mapping734
  L___Lib_PPS_p33EP512MU810__PPS_Mapping735
  L___Lib_PPS_p33EP512MU810__PPS_Mapping736
  L___Lib_PPS_p33EP512MU810__PPS_Mapping737
  L___Lib_PPS_p33EP512MU810__PPS_Mapping738
  L___Lib_PPS_p33EP512MU810__PPS_Mapping739
  L___Lib_PPS_p33EP512MU810__PPS_Mapping740
  L___Lib_PPS_p33EP512MU810__PPS_Mapping741
  L___Lib_PPS_p33EP512MU810__PPS_Mapping742
  L___Lib_PPS_p33EP512MU810__PPS_Mapping743
  L___Lib_PPS_p33EP512MU810__PPS_Mapping744
  L___Lib_PPS_p33EP512MU810__PPS_Mapping745
  L___Lib_PPS_p33EP512MU810__PPS_Mapping746
  L___Lib_PPS_p33EP512MU810__PPS_Mapping747
  L___Lib_PPS_p33EP512MU810__PPS_Mapping748
  L___Lib_PPS_p33EP512MU810__PPS_Mapping749
  L___Lib_PPS_p33EP512MU810__PPS_Mapping750
  L___Lib_PPS_p33EP512MU810__PPS_Mapping751
  L___Lib_PPS_p33EP512MU810__PPS_Mapping752
  L___Lib_PPS_p33EP512MU810__PPS_Mapping753
  L___Lib_PPS_p33EP512MU810__PPS_Mapping754
  L___Lib_PPS_p33EP512MU810__PPS_Mapping755
  L___Lib_PPS_p33EP512MU810__PPS_Mapping756
  L___Lib_PPS_p33EP512MU810__PPS_Mapping757
  L___Lib_PPS_p33EP512MU810__PPS_Mapping758
  L___Lib_PPS_p33EP512MU810__PPS_Mapping759
  L___Lib_PPS_p33EP512MU810__PPS_Mapping760
  L___Lib_PPS_p33EP512MU810__PPS_Mapping761
  L___Lib_PPS_p33EP512MU810__PPS_Mapping762
  L___Lib_PPS_p33EP512MU810__PPS_Mapping763
  L___Lib_PPS_p33EP512MU810__PPS_Mapping764
  L___Lib_PPS_p33EP512MU810__PPS_Mapping765
  L___Lib_PPS_p33EP512MU810__PPS_Mapping766
  L___Lib_PPS_p33EP512MU810__PPS_Mapping767
  L___Lib_PPS_p33EP512MU810__PPS_Mapping768
  L___Lib_PPS_p33EP512MU810__PPS_Mapping769
  L___Lib_PPS_p33EP512MU810__PPS_Mapping770
  L___Lib_PPS_p33EP512MU810__PPS_Mapping771
  L___Lib_PPS_p33EP512MU810__PPS_Mapping772
  L___Lib_PPS_p33EP512MU810__PPS_Mapping773
  L___Lib_PPS_p33EP512MU810__PPS_Mapping774
  L_end_PPS_Mapping
  _PPS_Mapping
  L_end_PPS_Mapping_NoLock
  _PPS_Mapping_NoLock
  L_end__SPI1_Init_Advanced
  L_end__SPI1_Init
  L_end__SPI1_Read
  L__SPI1_Read3
  L__SPI1_Read4
  L__SPI1_Read5
  L__SPI1_Read6
  L__SPI1_Read7
  L__SPI1_Read8
  L__SPI1_Read9
  L__SPI1_Read10
  L__SPI1_Read11
  L__SPI1_Read12
  L_end__SPI1_Write
  L_end__SPI2_Init_Advanced
  L_end__SPI2_Init
  L_end__SPI2_Read
  L__SPI2_Read17
  L__SPI2_Read18
  L__SPI2_Read19
  L__SPI2_Read20
  L__SPI2_Read21
  L__SPI2_Read22
  L__SPI2_Read23
  L__SPI2_Read24
  L__SPI2_Read25
  L__SPI2_Read26
  L_end__SPI2_Write
  L_end__SPI3_Init
  L_end__SPI3_Init_Advanced
  L_end__SPI3_Read
  L__SPI3_Read31
  L__SPI3_Read32
  L__SPI3_Read33
  L__SPI3_Read34
  L__SPI3_Read35
  L__SPI3_Read36
  L__SPI3_Read37
  L__SPI3_Read38
  L__SPI3_Read39
  L__SPI3_Read40
  L_end__SPI3_Write
  L_end__SPI_Set_Active
  L_end__SPI_Read
  L_end__SPI_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Read
  _SPI1_Read
  L__SPI1_Read48
  L__SPI1_Read49
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI2_Read
  _SPI2_Read
  L__SPI2_Read54
  L__SPI2_Read55
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI3_Init
  _SPI3_Init
  L_end_SPI3_Init_Advanced
  _SPI3_Init_Advanced
  L_end_SPI3_Read
  _SPI3_Read
  L__SPI3_Read60
  L__SPI3_Read61
  L_end_SPI3_Write
  _SPI3_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_end__memchr
  L__memchr1
  L__memchr2
  L__memchr3
  L__memchr4
  L__memchr5
  L__memchr6
  L__memchr7
  L__memchr8
  L_end__memcmp
  L__memcmp10
  L__memcmp11
  L__memcmp12
  L__memcmp13
  L__memcmp14
  L__memcmp15
  L__memcmp16
  L__memcmp17
  L_end__memcpy
  L__memcpy19
  L__memcpy20
  L__memcpy21
  L__memcpy22
  L__memcpy23
  L_end__memmove
  L__memmove25
  L__memmove26
  L__memmove27
  L__memmove28
  L__memmove29
  L__memmove30
  L__memmove31
  L__memmove32
  L__memmove33
  L__memmove34
  L__memmove35
  L__memmove36
  L__memmove37
  L_end__memset
  L__memset39
  L__memset40
  L__memset41
  L__memset42
  L__memset43
  L_end__strcat
  L__strcat45
  L__strcat46
  L__strcat47
  L__strcat48
  L__strcat49
  L__strcat50
  L__strcat51
  L__strcat52
  L__strcat53
  L__strcat54
  L_end__strcat2
  L__strcat256
  L__strcat257
  L__strcat258
  L__strcat259
  L__strcat260
  L__strcat261
  L__strcat262
  L__strcat263
  L__strcat264
  L__strcat265
  L_end__strchr
  L__strchr67
  L__strchr68
  L__strchr69
  L__strchr70
  L__strchr71
  L__strchr72
  L__strchr73
  L__strchr74
  L_end__strcmp
  L__strcmp76
  L__strcmp77
  L__strcmp78
  L__strcmp79
  L__strcmp80
  L_end__strcpy
  L__strcpy82
  L__strcpy83
  L__strcpy84
  L__strcpy85
  L__strcpy86
  L_end__strlen
  L__strlen88
  L__strlen89
  L__strlen90
  L__strlen91
  L__strlen92
  L_end__strncat
  L__strncat94
  L__strncat95
  L__strncat96
  L__strncat97
  L__strncat98
  L__strncat99
  L__strncat100
  L__strncat101
  L__strncat102
  L__strncat103
  L_end__strncat2
  L__strncat2105
  L__strncat2106
  L__strncat2107
  L__strncat2108
  L__strncat2109
  L__strncat2110
  L__strncat2111
  L__strncat2112
  L__strncat2113
  L__strncat2114
  L_end__strncpy
  L__strncpy116
  L__strncpy117
  L__strncpy118
  L__strncpy119
  L__strncpy120
  L__strncpy121
  L__strncpy122
  L__strncpy123
  L__strncpy124
  L__strncpy125
  L__strncpy126
  L__strncpy127
  L__strncpy128
  L_end__strspn
  L__strspn130
  L__strspn131
  L__strspn132
  L__strspn133
  L__strspn134
  L__strspn135
  L__strspn136
  L__strspn137
  L_end__ltrim
  L__ltrim139
  L__ltrim140
  L__ltrim141
  L__ltrim142
  L__ltrim143
  L__ltrim144
  L__ltrim145
  L__ltrim146
  L__ltrim147
  L__ltrim148
  L_end__rtrim
  L__rtrim150
  L__rtrim151
  L__rtrim152
  L__rtrim153
  L__rtrim154
  L_end__strcspn
  L__strcspn156
  L__strcspn157
  L__strcspn158
  L__strcspn159
  L__strcspn160
  L__strcspn161
  L__strcspn162
  L__strcspn163
  L_end__strncmp
  L__strncmp165
  L__strncmp166
  L__strncmp167
  L__strncmp168
  L__strncmp169
  L__strncmp170
  L__strncmp171
  L__strncmp172
  L_end__strpbrk
  L__strpbrk174
  L__strpbrk175
  L__strpbrk176
  L__strpbrk177
  L__strpbrk178
  L__strpbrk179
  L__strpbrk180
  L__strpbrk181
  L_end__strrchr
  L__strrchr183
  L__strrchr184
  L__strrchr185
  L__strrchr186
  L__strrchr187
  L__strrchr188
  L__strrchr189
  L__strrchr190
  L_end__strstr
  L__strstr192
  L__strstr193
  L__strstr194
  L__strstr195
  L__strstr196
  L__strstr197
  L__strstr198
  L__strstr199
  L__strstr200
  L__strstr201
  L__strstr202
  L__strstr203
  L__strstr204
  L__strstr205
  L__strstr206
  L__strstr207
  L_end__strAppendPre
  L__strAppendPre209
  L__strAppendPre210
  L__strAppendPre211
  L__strAppendPre212
  L__strAppendPre213
  L_end__strAppendSuf
  L_end__Length
  L__Length216
  L__Length217
  L__Length218
  L__Length219
  L__Length220
  L_end_memchr
  _memchr
  L__memchr222
  L__memchr223
  L_end_memcmp
  _memcmp
  L__memcmp225
  L__memcmp226
  L_end_memcpy
  _memcpy
  L__memcpy228
  L_end_memmove
  _memmove
  L__memmove230
  L__memmove231
  L__memmove232
  L__memmove233
  L__memmove234
  L_end_memset
  _memset
  L__memset236
  L_end_strcat
  _strcat
  L__strcat238
  L__strcat239
  L_end_strcat2
  _strcat2
  L__strcat2241
  L__strcat2242
  L_end_strchr
  _strchr
  L__strchr244
  L__strchr245
  L_end_strcmp
  _strcmp
  L__strcmp247
  L__strcmp248
  L__strcmp249
  L_end_strcpy
  _strcpy
  L__strcpy251
  L_end_strlen
  _strlen
  L__strlen253
  L_end_strncat
  _strncat
  L__strncat255
  L__strncat256
  L__strncat257
  L__strncat258
  L_end_strncat2
  _strncat2
  L__strncat2260
  L__strncat2261
  L_end_strncpy
  _strncpy
  L__strncpy263
  L__strncpy264
  L__strncpy265
  L_end_strspn
  _strspn
  L__strspn267
  L__strspn268
  L_end_ltrim
  _ltrim
  L__ltrim270
  L__ltrim271
  L_end_rtrim
  _rtrim
  L__rtrim273
  L__rtrim274
  L__rtrim275
  L_end_strcspn
  _strcspn
  L__strcspn277
  L__strcspn278
  L_end_strncmp
  _strncmp
  L__strncmp280
  L__strncmp281
  L__strncmp282
  L__strncmp283
  L_end_strpbrk
  _strpbrk
  L__strpbrk285
  L__strpbrk286
  L_end_strrchr
  _strrchr
  L__strrchr288
  L__strrchr289
  L_end_strstr
  _strstr
  L__strstr291
  L__strstr292
  L__strstr293
  L__strstr294
  L_end_strAppendPre
  _strAppendPre
  L__strAppendPre296
  L_end_strAppendSuf
  _strAppendSuf
  L_end_Length
  _Length
  L__Length299
  L_end____CS2S
  L_loopCS2Ss
  L_CS2Send
  L_end____FZinS
  L_loopCS2Ss
  L_end____AddToFarPointer
  L____AddToFarPointer5
  L____AddToFarPointer6
  L____AddToFarPointer7
  L____AddToFarPointer8
  L____AddToFarPointer9
  L____AddToFarPointer10
  L____AddToFarPointer11
  L____AddToFarPointer12
  L____AddToFarPointer13
  L____AddToFarPointer14
  L____AddToFarPointer15
  L____AddToFarPointer16
  L_end____SubFromFarPointer
  L____SubFromFarPointer18
  L____SubFromFarPointer19
  L____SubFromFarPointer20
  L____SubFromFarPointer21
  L____SubFromFarPointer22
  L____SubFromFarPointer23
  L____SubFromFarPointer24
  L____SubFromFarPointer25
  L____SubFromFarPointer26
  L____SubFromFarPointer27
  L____SubFromFarPointer28
  L____SubFromFarPointer29
  L_end____FlashAddressToFarPointer
  L_end____DataAddressToFarPointer
  L_end____FarPointerToFlashAddress
  L_end____FarPointerToDataAddress
  L_end____CFar2Far
  L____CFar2Far35
  L____CFar2Far36
  L____CFar2Far37
  L____CFar2Far38
  L____CFar2Far39
  L____CFar2Far40
  L____CFar2Far41
  L____CFar2Far42
  L____CFar2Far43
  L____CFar2Far44
  L____CFar2Far45
  L____CFar2Far46
  L____CFar2Far47
  L____CFar2Far48
  L____CFar2Far49
  L____CFar2Far50
  L____CFar2Far51
  L____CFar2Far52
  L____CFar2Far53
  L____CFar2Far54
  L_end____CFar2FarSwZ
  L____CFar2FarSwZ56
  L____CFar2FarSwZ57
  L____CFar2FarSwZ58
  L____CFar2FarSwZ59
  L____CFar2FarSwZ60
  L____CFar2FarSwZ61
  L____CFar2FarSwZ62
  L____CFar2FarSwZ63
  L____CFar2FarSwZ64
  L____CFar2FarSwZ65
  L____CFar2FarSwZ66
  L____CFar2FarSwZ67
  L____CFar2FarSwZ68
  L____CFar2FarSwZ69
  L_end____FZinFarS
  L____FZinFarS71
  L____FZinFarS72
  L____FZinFarS73
  L____FZinFarS74
  L____FZinFarS75
  L____FZinFarS76
  L____FZinFarS77
  L____FZinFarS78
  L____FZinFarS79
  L____FZinFarS80
  L____FZinFarS81
  L_end____CFar2FarS
  L____CFar2FarS83
  L____CFar2FarS84
  L____CFar2FarS85
  L____CFar2FarS86
  L____CFar2FarS87
  L____CFar2FarS88
  L____CFar2FarS89
  L____CFar2FarS90
  L____CFar2FarS91
  L____CFar2FarS92
  L____CFar2FarS93
  L____CFar2FarS94
  L____CFar2FarS95
  L____CFar2FarS96
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___AddToFarPointer
  ___AddToFarPointer
  L____AddToFarPointer100
  L____AddToFarPointer101
  L____AddToFarPointer102
  L_end___SubFromFarPointer
  ___SubFromFarPointer
  L____SubFromFarPointer104
  L____SubFromFarPointer105
  L____SubFromFarPointer106
  L_end___FlashAddressToFarPointer
  ___FlashAddressToFarPointer
  L_end___DataAddressToFarPointer
  ___DataAddressToFarPointer
  L_end___FarPointerToFlashAddress
  ___FarPointerToFlashAddress
  L_end___FarPointerToDataAddress
  ___FarPointerToDataAddress
  L_end___CFar2Far
  ___CFar2Far
  L____CFar2Far112
  L____CFar2Far113
  L____CFar2Far114
  L____CFar2Far115
  L_end___CFar2FarSwZ
  ___CFar2FarSwZ
  L____CFar2FarSwZ117
  L____CFar2FarSwZ118
  L____CFar2FarSwZ119
  L_end___FZinFarS
  ___FZinFarS
  L____FZinFarS121
  L____FZinFarS122
  L_end___CFar2FarS
  ___CFar2FarS
  L____CFar2FarS124
  L____CFar2FarS125
  L____CFar2FarS126
  L_end__UART1_Init
  L__UART1_Init1
  L__UART1_Init2
  L__UART1_Init3
  L__UART1_Init4
  L__UART1_Init5
  L__UART1_Init6
  L__UART1_Init7
  L__UART1_Init8
  L__UART1_Init9
  L_end__UART1_Init_Advanced
  L__UART1_Init_Advanced11
  L__UART1_Init_Advanced12
  L__UART1_Init_Advanced13
  L__UART1_Init_Advanced14
  L__UART1_Init_Advanced15
  L__UART1_Init_Advanced16
  L__UART1_Init_Advanced17
  L__UART1_Init_Advanced18
  L__UART1_Init_Advanced19
  L__UART1_Init_Advanced20
  L__UART1_Init_Advanced21
  L__UART1_Init_Advanced22
  L__UART1_Init_Advanced23
  L__UART1_Init_Advanced24
  L__UART1_Init_Advanced25
  L__UART1_Init_Advanced26
  L__UART1_Init_Advanced27
  L__UART1_Init_Advanced28
  L__UART1_Init_Advanced29
  L__UART1_Init_Advanced30
  L__UART1_Init_Advanced31
  L_end__UART1_Write
  L__UART1_Write33
  L__UART1_Write34
  L__UART1_Write35
  L__UART1_Write36
  L__UART1_Write37
  L_end__UART1_Data_Ready
  L_end__UART1_Read
  L_end__UART1_TX_Idle
  L_end__UART1_Write_Text
  L__UART1_Write_Text42
  L__UART1_Write_Text43
  L__UART1_Write_Text44
  L__UART1_Write_Text45
  L__UART1_Write_Text46
  L_end__UART1_Read_Text
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L__UART1_Read_Text52
  L__UART1_Read_Text53
  L__UART1_Read_Text54
  L__UART1_Read_Text55
  L__UART1_Read_Text56
  L__UART1_Read_Text57
  L__UART1_Read_Text58
  L__UART1_Read_Text59
  L__UART1_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Read_Text62
  L__UART1_Read_Text63
  L__UART1_Read_Text64
  L__UART1_Read_Text65
  L__UART1_Read_Text66
  L__UART1_Read_Text67
  L__UART1_Read_Text68
  L__UART1_Read_Text69
  L_end__UART2_Init
  L__UART2_Init71
  L__UART2_Init72
  L__UART2_Init73
  L__UART2_Init74
  L__UART2_Init75
  L__UART2_Init76
  L__UART2_Init77
  L__UART2_Init78
  L__UART2_Init79
  L_end__UART2_Init_Advanced
  L__UART2_Init_Advanced81
  L__UART2_Init_Advanced82
  L__UART2_Init_Advanced83
  L__UART2_Init_Advanced84
  L__UART2_Init_Advanced85
  L__UART2_Init_Advanced86
  L__UART2_Init_Advanced87
  L__UART2_Init_Advanced88
  L__UART2_Init_Advanced89
  L__UART2_Init_Advanced90
  L__UART2_Init_Advanced91
  L__UART2_Init_Advanced92
  L__UART2_Init_Advanced93
  L__UART2_Init_Advanced94
  L__UART2_Init_Advanced95
  L__UART2_Init_Advanced96
  L__UART2_Init_Advanced97
  L__UART2_Init_Advanced98
  L__UART2_Init_Advanced99
  L__UART2_Init_Advanced100
  L__UART2_Init_Advanced101
  L_end__UART2_Write
  L__UART2_Write103
  L__UART2_Write104
  L__UART2_Write105
  L__UART2_Write106
  L__UART2_Write107
  L_end__UART2_Data_Ready
  L_end__UART2_Read
  L_end__UART2_TX_Idle
  L_end__UART2_Write_Text
  L__UART2_Write_Text112
  L__UART2_Write_Text113
  L__UART2_Write_Text114
  L__UART2_Write_Text115
  L__UART2_Write_Text116
  L_end__UART2_Read_Text
  L__UART2_Read_Text118
  L__UART2_Read_Text119
  L__UART2_Read_Text120
  L__UART2_Read_Text121
  L__UART2_Read_Text122
  L__UART2_Read_Text123
  L__UART2_Read_Text124
  L__UART2_Read_Text125
  L__UART2_Read_Text126
  L__UART2_Read_Text127
  L__UART2_Read_Text128
  L__UART2_Read_Text129
  L__UART2_Read_Text130
  L__UART2_Read_Text131
  L__UART2_Read_Text132
  L__UART2_Read_Text133
  L__UART2_Read_Text134
  L__UART2_Read_Text135
  L__UART2_Read_Text136
  L__UART2_Read_Text137
  L__UART2_Read_Text138
  L__UART2_Read_Text139
  L_end__UART3_Init
  L__UART3_Init141
  L__UART3_Init142
  L__UART3_Init143
  L__UART3_Init144
  L__UART3_Init145
  L__UART3_Init146
  L__UART3_Init147
  L__UART3_Init148
  L__UART3_Init149
  L_end__UART3_Init_Advanced
  L__UART3_Init_Advanced151
  L__UART3_Init_Advanced152
  L__UART3_Init_Advanced153
  L__UART3_Init_Advanced154
  L__UART3_Init_Advanced155
  L__UART3_Init_Advanced156
  L__UART3_Init_Advanced157
  L__UART3_Init_Advanced158
  L__UART3_Init_Advanced159
  L__UART3_Init_Advanced160
  L__UART3_Init_Advanced161
  L__UART3_Init_Advanced162
  L__UART3_Init_Advanced163
  L__UART3_Init_Advanced164
  L__UART3_Init_Advanced165
  L__UART3_Init_Advanced166
  L__UART3_Init_Advanced167
  L__UART3_Init_Advanced168
  L__UART3_Init_Advanced169
  L__UART3_Init_Advanced170
  L__UART3_Init_Advanced171
  L_end__UART3_Write
  L__UART3_Write173
  L__UART3_Write174
  L__UART3_Write175
  L__UART3_Write176
  L__UART3_Write177
  L_end__UART3_Data_Ready
  L_end__UART3_Read
  L_end__UART3_TX_Idle
  L_end__UART3_Write_Text
  L__UART3_Write_Text182
  L__UART3_Write_Text183
  L__UART3_Write_Text184
  L__UART3_Write_Text185
  L__UART3_Write_Text186
  L_end__UART3_Read_Text
  L__UART3_Read_Text188
  L__UART3_Read_Text189
  L__UART3_Read_Text190
  L__UART3_Read_Text191
  L__UART3_Read_Text192
  L__UART3_Read_Text193
  L__UART3_Read_Text194
  L__UART3_Read_Text195
  L__UART3_Read_Text196
  L__UART3_Read_Text197
  L__UART3_Read_Text198
  L__UART3_Read_Text199
  L__UART3_Read_Text200
  L__UART3_Read_Text201
  L__UART3_Read_Text202
  L__UART3_Read_Text203
  L__UART3_Read_Text204
  L__UART3_Read_Text205
  L__UART3_Read_Text206
  L__UART3_Read_Text207
  L__UART3_Read_Text208
  L__UART3_Read_Text209
  L_end__UART4_Init
  L__UART4_Init211
  L__UART4_Init212
  L__UART4_Init213
  L__UART4_Init214
  L__UART4_Init215
  L__UART4_Init216
  L__UART4_Init217
  L__UART4_Init218
  L__UART4_Init219
  L_end__UART4_Init_Advanced
  L__UART4_Init_Advanced221
  L__UART4_Init_Advanced222
  L__UART4_Init_Advanced223
  L__UART4_Init_Advanced224
  L__UART4_Init_Advanced225
  L__UART4_Init_Advanced226
  L__UART4_Init_Advanced227
  L__UART4_Init_Advanced228
  L__UART4_Init_Advanced229
  L__UART4_Init_Advanced230
  L__UART4_Init_Advanced231
  L__UART4_Init_Advanced232
  L__UART4_Init_Advanced233
  L__UART4_Init_Advanced234
  L__UART4_Init_Advanced235
  L__UART4_Init_Advanced236
  L__UART4_Init_Advanced237
  L__UART4_Init_Advanced238
  L__UART4_Init_Advanced239
  L__UART4_Init_Advanced240
  L__UART4_Init_Advanced241
  L_end__UART4_Write
  L__UART4_Write243
  L__UART4_Write244
  L__UART4_Write245
  L__UART4_Write246
  L__UART4_Write247
  L_end__UART4_Data_Ready
  L_end__UART4_Read
  L_end__UART4_TX_Idle
  L_end__UART4_Write_Text
  L__UART4_Write_Text252
  L__UART4_Write_Text253
  L__UART4_Write_Text254
  L__UART4_Write_Text255
  L__UART4_Write_Text256
  L_end__UART4_Read_Text
  L__UART4_Read_Text258
  L__UART4_Read_Text259
  L__UART4_Read_Text260
  L__UART4_Read_Text261
  L__UART4_Read_Text262
  L__UART4_Read_Text263
  L__UART4_Read_Text264
  L__UART4_Read_Text265
  L__UART4_Read_Text266
  L__UART4_Read_Text267
  L__UART4_Read_Text268
  L__UART4_Read_Text269
  L__UART4_Read_Text270
  L__UART4_Read_Text271
  L__UART4_Read_Text272
  L__UART4_Read_Text273
  L__UART4_Read_Text274
  L__UART4_Read_Text275
  L__UART4_Read_Text276
  L__UART4_Read_Text277
  L__UART4_Read_Text278
  L__UART4_Read_Text279
  L_end__UART_Set_Active
  L_end__UART_Write
  L_end__UART_Data_Ready
  L_end__UART_Read
  L_end__UART_TX_Idle
  L_end__UART_Write_Text
  L__UART_Write_Text286
  L__UART_Write_Text287
  L__UART_Write_Text288
  L__UART_Write_Text289
  L__UART_Write_Text290
  L_end__UART_Read_Text
  L__UART_Read_Text292
  L__UART_Read_Text293
  L__UART_Read_Text294
  L__UART_Read_Text295
  L__UART_Read_Text296
  L__UART_Read_Text297
  L__UART_Read_Text298
  L__UART_Read_Text299
  L__UART_Read_Text300
  L__UART_Read_Text301
  L__UART_Read_Text302
  L__UART_Read_Text303
  L__UART_Read_Text304
  L__UART_Read_Text305
  L__UART_Read_Text306
  L__UART_Read_Text307
  L__UART_Read_Text308
  L__UART_Read_Text309
  L__UART_Read_Text310
  L__UART_Read_Text311
  L__UART_Read_Text312
  L__UART_Read_Text313
  L__UART1_Init314
  L__UART1_Init315
  L__UART1_Init316
  L__UART1_Read_Text317
  L__UART2_Init318
  L__UART2_Init319
  L__UART2_Init320
  L__UART2_Read_Text321
  L__UART3_Init322
  L__UART3_Init323
  L__UART3_Init324
  L__UART3_Read_Text325
  L__UART4_Init326
  L__UART4_Init327
  L__UART4_Init328
  L__UART4_Read_Text329
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init331
  L__UART1_Init332
  L__UART1_Init333
  L__UART1_Init334
  L__UART1_Init335
  L__UART1_Init336
  L__UART1_Init337
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced339
  L__UART1_Init_Advanced340
  L__UART1_Init_Advanced341
  L__UART1_Init_Advanced342
  L__UART1_Init_Advanced343
  L__UART1_Init_Advanced344
  L__UART1_Init_Advanced345
  L__UART1_Init_Advanced346
  L__UART1_Init_Advanced347
  L__UART1_Init_Advanced348
  L__UART1_Init_Advanced349
  L__UART1_Init_Advanced350
  L__UART1_Init_Advanced351
  L__UART1_Init_Advanced352
  L__UART1_Init_Advanced353
  L_end_UART1_Write
  _UART1_Write
  L__UART1_Write355
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_TX_Idle
  _UART1_TX_Idle
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text360
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text362
  L__UART1_Read_Text363
  L__UART1_Read_Text364
  L__UART1_Read_Text365
  L__UART1_Read_Text366
  L__UART1_Read_Text367
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init369
  L__UART2_Init370
  L__UART2_Init371
  L__UART2_Init372
  L__UART2_Init373
  L__UART2_Init374
  L__UART2_Init375
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced377
  L__UART2_Init_Advanced378
  L__UART2_Init_Advanced379
  L__UART2_Init_Advanced380
  L__UART2_Init_Advanced381
  L__UART2_Init_Advanced382
  L__UART2_Init_Advanced383
  L__UART2_Init_Advanced384
  L__UART2_Init_Advanced385
  L__UART2_Init_Advanced386
  L__UART2_Init_Advanced387
  L__UART2_Init_Advanced388
  L__UART2_Init_Advanced389
  L__UART2_Init_Advanced390
  L__UART2_Init_Advanced391
  L_end_UART2_Write
  _UART2_Write
  L__UART2_Write393
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_TX_Idle
  _UART2_TX_Idle
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text398
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text400
  L__UART2_Read_Text401
  L__UART2_Read_Text402
  L__UART2_Read_Text403
  L__UART2_Read_Text404
  L__UART2_Read_Text405
  L_end_UART3_Init
  _UART3_Init
  L__UART3_Init407
  L__UART3_Init408
  L__UART3_Init409
  L__UART3_Init410
  L__UART3_Init411
  L__UART3_Init412
  L__UART3_Init413
  L_end_UART3_Init_Advanced
  _UART3_Init_Advanced
  L__UART3_Init_Advanced415
  L__UART3_Init_Advanced416
  L__UART3_Init_Advanced417
  L__UART3_Init_Advanced418
  L__UART3_Init_Advanced419
  L__UART3_Init_Advanced420
  L__UART3_Init_Advanced421
  L__UART3_Init_Advanced422
  L__UART3_Init_Advanced423
  L__UART3_Init_Advanced424
  L__UART3_Init_Advanced425
  L__UART3_Init_Advanced426
  L__UART3_Init_Advanced427
  L__UART3_Init_Advanced428
  L__UART3_Init_Advanced429
  L_end_UART3_Write
  _UART3_Write
  L__UART3_Write431
  L_end_UART3_Data_Ready
  _UART3_Data_Ready
  L_end_UART3_Read
  _UART3_Read
  L_end_UART3_TX_Idle
  _UART3_TX_Idle
  L_end_UART3_Write_Text
  _UART3_Write_Text
  L__UART3_Write_Text436
  L_end_UART3_Read_Text
  _UART3_Read_Text
  L__UART3_Read_Text438
  L__UART3_Read_Text439
  L__UART3_Read_Text440
  L__UART3_Read_Text441
  L__UART3_Read_Text442
  L__UART3_Read_Text443
  L_end_UART4_Init
  _UART4_Init
  L__UART4_Init445
  L__UART4_Init446
  L__UART4_Init447
  L__UART4_Init448
  L__UART4_Init449
  L__UART4_Init450
  L__UART4_Init451
  L_end_UART4_Init_Advanced
  _UART4_Init_Advanced
  L__UART4_Init_Advanced453
  L__UART4_Init_Advanced454
  L__UART4_Init_Advanced455
  L__UART4_Init_Advanced456
  L__UART4_Init_Advanced457
  L__UART4_Init_Advanced458
  L__UART4_Init_Advanced459
  L__UART4_Init_Advanced460
  L__UART4_Init_Advanced461
  L__UART4_Init_Advanced462
  L__UART4_Init_Advanced463
  L__UART4_Init_Advanced464
  L__UART4_Init_Advanced465
  L__UART4_Init_Advanced466
  L__UART4_Init_Advanced467
  L_end_UART4_Write
  _UART4_Write
  L__UART4_Write469
  L_end_UART4_Data_Ready
  _UART4_Data_Ready
  L_end_UART4_Read
  _UART4_Read
  L_end_UART4_TX_Idle
  _UART4_TX_Idle
  L_end_UART4_Write_Text
  _UART4_Write_Text
  L__UART4_Write_Text474
  L_end_UART4_Read_Text
  _UART4_Read_Text
  L__UART4_Read_Text476
  L__UART4_Read_Text477
  L__UART4_Read_Text478
  L__UART4_Read_Text479
  L__UART4_Read_Text480
  L__UART4_Read_Text481
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read
  _UART_Read
  L_end_UART_TX_Idle
  _UART_TX_Idle
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text488
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text490
  L__UART_Read_Text491
  L__UART_Read_Text492
  L__UART_Read_Text493
  L__UART_Read_Text494
  L__UART_Read_Text495
  L_end__Interrupt_Timer2
  L__Interrupt_Timer21
  L__Interrupt_Timer22
  L__Interrupt_Timer23
  L_end__Interrupt_PinChange
  L_end__MapAndPrint
  L__MapAndPrint6
  L__MapAndPrint7
  L__MapAndPrint8
  L_end__PingAndPrint
  L__PingAndPrint10
  L__PingAndPrint11
  L__PingAndPrint12
  L_end__NtpRequest
  L_end__main
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main22
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L_end_Interrupt_Timer2
  _Interrupt_Timer2
  L__Interrupt_Timer269
  L_end_Interrupt_PinChange
  _Interrupt_PinChange
  L_end_MapAndPrint
  _MapAndPrint
  L__MapAndPrint72
  L_end_PingAndPrint
  _PingAndPrint
  L__PingAndPrint74
  L_end_NtpRequest
  _NtpRequest
  L_end_main
  _main
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main_end_loop
  L_end__Interrupt_Timer2
  L__Interrupt_Timer21
  L__Interrupt_Timer22
  L__Interrupt_Timer23
  L_end__Interrupt_PinChange
  L_end__MapAndPrint
  L__MapAndPrint6
  L__MapAndPrint7
  L__MapAndPrint8
  L_end__PingAndPrint
  L__PingAndPrint10
  L__PingAndPrint11
  L__PingAndPrint12
  L_end__NtpRequest
  L_end__main
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main22
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L_end_Interrupt_Timer2
  _Interrupt_Timer2
  L__Interrupt_Timer269
  L_end_Interrupt_PinChange
  _Interrupt_PinChange
  L_end_MapAndPrint
  _MapAndPrint
  L__MapAndPrint72
  L_end_PingAndPrint
  _PingAndPrint
  L__PingAndPrint74
  L_end_NtpRequest
  _NtpRequest
  L_end_main
  _main
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main_end_loop
  L_end__Eth_EnableTimer_1s
  L__Eth_EnableTimer_1s1
  L__Eth_EnableTimer_1s2
  L__Eth_EnableTimer_1s3
  L_end__Eth_CounterTask
  L__Eth_CounterTask5
  L__Eth_CounterTask6
  L__Eth_CounterTask7
  L__Eth_CounterTask8
  L__Eth_CounterTask9
  L__Eth_CounterTask10
  L__Eth_CounterTask11
  L__Eth_CounterTask12
  L__Eth_CounterTask13
  L__Eth_CounterTask14
  L__Eth_CounterTask15
  L__Eth_CounterTask16
  L__Eth_CounterTask17
  L__Eth_CounterTask18
  L__Eth_CounterTask19
  L__Eth_CounterTask20
  L__Eth_CounterTask21
  L__Eth_CounterTask22
  L__Eth_CounterTask23
  L__Eth_CounterTask24
  L_end__Eth_EnableReception
  L__Eth_EnableReception26
  L__Eth_EnableReception27
  L__Eth_EnableReception28
  L_end__Eth_Init_
  L__Eth_Init_30
  L__Eth_Init_31
  L__Eth_Init_32
  L_end__Eth_DoPacket
  L__Eth_DoPacket34
  L__Eth_DoPacket35
  L__Eth_DoPacket36
  L__Eth_DoPacket37
  L__Eth_DoPacket38
  L__Eth_DoPacket39
  L__Eth_DoPacket40
  L__Eth_DoPacket41
  L__Eth_DoPacket42
  L__Eth_DoPacket43
  L__Eth_DoPacket44
  L__Eth_DoPacket45
  L__Eth_DoPacket46
  L__Eth_DoPacket47
  L__Eth_DoPacket48
  L__Eth_DoPacket49
  L__Eth_DoPacket50
  L__Eth_DoPacket51
  L__Eth_DoPacket52
  L__Eth_DoPacket53
  L__Eth_DoPacket54
  L__Eth_DoPacket55
  L__Eth_DoPacket56
  L__Eth_DoPacket57
  L__Eth_DoPacket58
  L__Eth_DoPacket59
  L__Eth_DoPacket60
  L__Eth_DoPacket61
  L__Eth_DoPacket62
  L__Eth_DoPacket63
  L__Eth_DoPacket64
  L__Eth_DoPacket65
  L__Eth_DoPacket66
  L__Eth_DoPacket67
  L__Eth_DoPacket68
  L__Eth_DoPacket69
  L__Eth_DoPacket70
  L__Eth_DoPacket71
  L__Eth_DoPacket72
  L__Eth_DoPacket73
  L__Eth_DoPacket74
  L__Eth_DoPacket75
  L__Eth_DoPacket76
  L__Eth_DoPacket77
  L__Eth_DoPacket78
  L__Eth_DoPacket79
  L__Eth_DoPacket80
  L__Eth_DoPacket81
  L__Eth_DoPacket82
  L__Eth_DoPacket83
  L__Eth_DoPacket84
  L__Eth_DoPacket85
  L__Eth_DoPacket86
  L__Eth_DoPacket87
  L__Eth_DoPacket88
  L__Eth_DoPacket89
  L__Eth_DoPacket90
  L__Eth_DoPacket91
  L__Eth_DoPacket92
  L__Eth_DoPacket93
  L__Eth_DoPacket94
  L_end__Do_EthernetProc
  L__Do_EthernetProc96
  L__Do_EthernetProc97
  L__Do_EthernetProc98
  L__Do_EthernetProc99
  L__Do_EthernetProc100
  L_end__Wait_for_LAN
  L__Wait_for_LAN102
  L__Wait_for_LAN103
  L__Wait_for_LAN104
  L__Wait_for_LAN105
  L__Wait_for_LAN106
  L__Wait_for_LAN107
  L__Wait_for_LAN109
  L__Wait_for_LAN110
  L__Wait_for_LAN111
  L__Wait_for_LAN112
  L__Wait_for_LAN113
  L__Wait_for_LAN114
  L_end__Wait_With_Eth
  L__Wait_With_Eth116
  L__Wait_With_Eth117
  L__Wait_With_Eth118
  L__Wait_With_Eth119
  L__Wait_With_Eth120
  L__Wait_for_LAN121
  L_end_Eth_EnableTimer_1s
  _Eth_EnableTimer_1s
  L__Eth_EnableTimer_1s123
  L_end_Eth_CounterTask
  _Eth_CounterTask
  L__Eth_CounterTask125
  L__Eth_CounterTask126
  L__Eth_CounterTask127
  L__Eth_CounterTask128
  L__Eth_CounterTask129
  L__Eth_CounterTask130
  L_end_Eth_EnableReception
  _Eth_EnableReception
  L__Eth_EnableReception132
  L_end_Eth_Init_
  _Eth_Init_
  L__Eth_Init_134
  L_end_Eth_DoPacket
  _Eth_DoPacket
  L__Eth_DoPacket136
  L__Eth_DoPacket137
  L__Eth_DoPacket138
  L__Eth_DoPacket139
  L__Eth_DoPacket140
  L__Eth_DoPacket141
  L__Eth_DoPacket142
  L__Eth_DoPacket143
  L__Eth_DoPacket144
  L__Eth_DoPacket145
  L__Eth_DoPacket146
  L__Eth_DoPacket147
  L__Eth_DoPacket148
  L__Eth_DoPacket149
  L__Eth_DoPacket150
  L__Eth_DoPacket151
  L__Eth_DoPacket152
  L__Eth_DoPacket153
  L__Eth_DoPacket154
  L_end_Do_EthernetProc
  _Do_EthernetProc
  L__Do_EthernetProc156
  L_end_Wait_for_LAN
  _Wait_for_LAN
  L__Wait_for_LAN158
  L__Wait_for_LAN159
  L__Wait_for_LAN160
  L_end_Wait_With_Eth
  _Wait_With_Eth
  L__Wait_With_Eth162
  L_end__Eth_Arp_Timer_1s
  L__Eth_Arp_Timer_1s1
  L__Eth_Arp_Timer_1s2
  L__Eth_Arp_Timer_1s3
  L__Eth_Arp_Timer_1s4
  L__Eth_Arp_Timer_1s5
  L__Eth_Arp_Timer_1s6
  L__Eth_Arp_Timer_1s7
  L__Eth_Arp_Timer_1s8
  L_end_protocol_arp_ArpMapIpMask
  L_protocol_arp_ArpMapIpMask10
  L_protocol_arp_ArpMapIpMask11
  L_protocol_arp_ArpMapIpMask12
  L_end_protocol_arp_ArpWaitFor
  L_protocol_arp_ArpWaitFor14
  L_protocol_arp_ArpWaitFor15
  L_protocol_arp_ArpWaitFor16
  L_protocol_arp_ArpWaitFor17
  L_protocol_arp_ArpWaitFor18
  L_protocol_arp_ArpWaitFor19
  L_protocol_arp_ArpWaitFor20
  L_protocol_arp_ArpWaitFor21
  L_protocol_arp_ArpWaitFor22
  L_protocol_arp_ArpWaitFor23
  L_protocol_arp_ArpWaitFor24
  L_end__Eth_Arp_MapMacAddress
  L__Eth_Arp_MapMacAddress26
  L__Eth_Arp_MapMacAddress27
  L__Eth_Arp_MapMacAddress28
  L__Eth_Arp_MapMacAddress29
  L__Eth_Arp_MapMacAddress30
  L__Eth_Arp_MapMacAddress31
  L__Eth_Arp_MapMacAddress32
  L__Eth_Arp_MapMacAddress33
  L__Eth_Arp_MapMacAddress34
  L__Eth_Arp_MapMacAddress35
  L__Eth_Arp_MapMacAddress36
  L__Eth_Arp_MapMacAddress37
  L__Eth_Arp_MapMacAddress38
  L__Eth_Arp_MapMacAddress39
  L__Eth_Arp_MapMacAddress40
  L__Eth_Arp_MapMacAddress41
  L__Eth_Arp_MapMacAddress42
  L__Eth_Arp_MapMacAddress43
  L__Eth_Arp_MapMacAddress44
  L__Eth_Arp_MapMacAddress45
  L__Eth_Arp_MapMacAddress46
  L__Eth_Arp_MapMacAddress47
  L__Eth_Arp_MapMacAddress48
  L__Eth_Arp_MapMacAddress49
  L__Eth_Arp_MapMacAddress50
  L__Eth_Arp_MapMacAddress51
  L__Eth_Arp_MapMacAddress52
  L__Eth_Arp_MapMacAddress53
  L__Eth_Arp_MapMacAddress54
  L__Eth_Arp_MapMacAddress55
  L__Eth_Arp_MapMacAddress56
  L__Eth_Arp_MapMacAddress57
  L__Eth_Arp_MapMacAddress58
  L__Eth_Arp_MapMacAddress59
  L__Eth_Arp_MapMacAddress60
  L__Eth_Arp_MapMacAddress61
  L__Eth_Arp_MapMacAddress62
  L__Eth_Arp_MapMacAddress63
  L__Eth_Arp_MapMacAddress64
  L__Eth_Arp_MapMacAddress65
  L__Eth_Arp_MapMacAddress66
  L_end__Eth_Arp_RequestHandler
  L_end__Eth_Arp_ResponseHandler
  L__Eth_Arp_ResponseHandler69
  L__Eth_Arp_ResponseHandler70
  L__Eth_Arp_ResponseHandler71
  L__Eth_Arp_ResponseHandler72
  L__Eth_Arp_ResponseHandler73
  L__Eth_Arp_ResponseHandler74
  L__Eth_Arp_ResponseHandler75
  L__Eth_Arp_ResponseHandler76
  L__Eth_Arp_ResponseHandler77
  L__Eth_Arp_ResponseHandler78
  L__Eth_Arp_ResponseHandler79
  L_end__Eth_Arp_EraseCache
  L__Eth_Arp_EraseCache81
  L__Eth_Arp_EraseCache82
  L__Eth_Arp_EraseCache83
  L__Eth_Arp_EraseCache84
  L__Eth_Arp_EraseCache85
  L_end__Eth_PrintArpCache
  L__Eth_PrintArpCache87
  L__Eth_PrintArpCache88
  L__Eth_PrintArpCache89
  L__Eth_PrintArpCache90
  L__Eth_PrintArpCache91
  L_end__Eth_PrintArpCacheSlot
  L_end_Eth_Arp_Timer_1s
  _Eth_Arp_Timer_1s
  L__Eth_Arp_Timer_1s94
  L__Eth_Arp_Timer_1s95
  L_end_ArpMapIpMask
  protocol_arp_ArpMapIpMask
  L_protocol_arp_ArpMapIpMask97
  L_end_ArpWaitFor
  protocol_arp_ArpWaitFor
  L_protocol_arp_ArpWaitFor99
  L_protocol_arp_ArpWaitFor100
  L_protocol_arp_ArpWaitFor101
  L_end_Eth_Arp_MapMacAddress
  _Eth_Arp_MapMacAddress
  L__Eth_Arp_MapMacAddress103
  L__Eth_Arp_MapMacAddress104
  L__Eth_Arp_MapMacAddress105
  L__Eth_Arp_MapMacAddress106
  L__Eth_Arp_MapMacAddress107
  L__Eth_Arp_MapMacAddress108
  L__Eth_Arp_MapMacAddress109
  L__Eth_Arp_MapMacAddress110
  L__Eth_Arp_MapMacAddress111
  L__Eth_Arp_MapMacAddress112
  L__Eth_Arp_MapMacAddress113
  L__Eth_Arp_MapMacAddress114
  L__Eth_Arp_MapMacAddress115
  L_end_Eth_Arp_RequestHandler
  _Eth_Arp_RequestHandler
  L_end_Eth_Arp_ResponseHandler
  _Eth_Arp_ResponseHandler
  L__Eth_Arp_ResponseHandler118
  L__Eth_Arp_ResponseHandler119
  L__Eth_Arp_ResponseHandler120
  L_end_Eth_Arp_EraseCache
  _Eth_Arp_EraseCache
  L__Eth_Arp_EraseCache122
  L_end_Eth_PrintArpCache
  _Eth_PrintArpCache
  L__Eth_PrintArpCache124
  L_end_Eth_PrintArpCacheSlot
  _Eth_PrintArpCacheSlot
  L_end__Eth_Ping_Timer_1s
  L__Eth_Ping_Timer_1s1
  L__Eth_Ping_Timer_1s2
  L__Eth_Ping_Timer_1s3
  L__Eth_Ping_Timer_1s4
  L__Eth_Ping_Timer_1s5
  L_end__Eth_PingReplyHandler
  L__Eth_PingReplyHandler7
  L__Eth_PingReplyHandler8
  L__Eth_PingReplyHandler9
  L__Eth_PingReplyHandler10
  L__Eth_PingReplyHandler11
  L__Eth_PingReplyHandler12
  L__Eth_PingReplyHandler13
  L__Eth_PingReplyHandler14
  L__Eth_PingReplyHandler15
  L__Eth_PingReplyHandler16
  L__Eth_PingReplyHandler17
  L_end_protocol_ping_PingWaitFor
  L_protocol_ping_PingWaitFor19
  L_protocol_ping_PingWaitFor20
  L_protocol_ping_PingWaitFor21
  L_protocol_ping_PingWaitFor22
  L_protocol_ping_PingWaitFor23
  L_protocol_ping_PingWaitFor24
  L_protocol_ping_PingWaitFor25
  L_protocol_ping_PingWaitFor26
  L_protocol_ping_PingWaitFor27
  L_protocol_ping_PingWaitFor28
  L_protocol_ping_PingWaitFor29
  L_end__Eth_SendPing
  L__Eth_SendPing31
  L__Eth_SendPing32
  L__Eth_SendPing33
  L__Eth_SendPing34
  L__Eth_SendPing35
  L__Eth_SendPing36
  L__Eth_SendPing37
  L__Eth_SendPing38
  L__Eth_SendPing39
  L__Eth_SendPing40
  L__Eth_SendPing41
  L__Eth_SendPing42
  L__Eth_SendPing43
  L__Eth_SendPing44
  L__Eth_SendPing45
  L__Eth_SendPing46
  L__Eth_SendPing47
  L__Eth_SendPing48
  L__Eth_SendPing49
  L__Eth_SendPing50
  L__Eth_SendPing51
  L__Eth_SendPing52
  L__Eth_SendPing53
  L__Eth_SendPing54
  L__Eth_SendPing55
  L__Eth_SendPing56
  L__Eth_SendPing57
  L__Eth_SendPing58
  L__Eth_SendPing59
  L__Eth_SendPing60
  L__Eth_SendPing61
  L_end__Eth_PingEchoHandler
  L_end__Eth_Ping_EraseCache
  L__Eth_Ping_EraseCache64
  L__Eth_Ping_EraseCache65
  L__Eth_Ping_EraseCache66
  L__Eth_Ping_EraseCache67
  L__Eth_Ping_EraseCache68
  L_end__Eth_PrintPingCache
  L__Eth_PrintPingCache70
  L__Eth_PrintPingCache71
  L__Eth_PrintPingCache72
  L__Eth_PrintPingCache73
  L__Eth_PrintPingCache74
  L_end__Eth_PrintPingCacheSlot
  L_end_Eth_Ping_Timer_1s
  _Eth_Ping_Timer_1s
  L__Eth_Ping_Timer_1s77
  L_end_Eth_PingReplyHandler
  _Eth_PingReplyHandler
  L__Eth_PingReplyHandler79
  L__Eth_PingReplyHandler80
  L__Eth_PingReplyHandler81
  L_end_PingWaitFor
  protocol_ping_PingWaitFor
  L_protocol_ping_PingWaitFor83
  L_protocol_ping_PingWaitFor84
  L_protocol_ping_PingWaitFor85
  L_end_Eth_SendPing
  _Eth_SendPing
  L__Eth_SendPing87
  L__Eth_SendPing88
  L__Eth_SendPing89
  L__Eth_SendPing90
  L__Eth_SendPing91
  L__Eth_SendPing92
  L__Eth_SendPing93
  L__Eth_SendPing94
  L__Eth_SendPing95
  L_end_Eth_PingEchoHandler
  _Eth_PingEchoHandler
  L_end_Eth_Ping_EraseCache
  _Eth_Ping_EraseCache
  L__Eth_Ping_EraseCache98
  L_end_Eth_PrintPingCache
  _Eth_PrintPingCache
  L__Eth_PrintPingCache100
  L_end_Eth_PrintPingCacheSlot
  _Eth_PrintPingCacheSlot
