unit dspic_additional_string_library;
{
*     Swap_B
*     Swap_F
*     mem_cpy
*     mem_cmp
*     mem_set
*     mem_chr
*     Str_Len
*     Str_Cut_Chr
*     Str_Cat
*     Str_Cpy
*     Str_Chr
*     Str_Replace_Chr
*     Str_Split
*     Str_Insert_Chr
*     Str_AppendPre
*     Str_AppendSuf
*     Str_Cut_Left
*     Str_Cut_Right
*     Byte2StrWithZeros
*     Byte2Str
*     Short2StrWithZeros
*     Short2Str
*     Word2StrWithZeros
*     Word2Str
*     Int2StrWithZeros
*     Int2Str
*     LongWord2StrWithZeros
*     LongWord2Str
*     LongInt2StrWithZeros
*     LongInt2Str
*     Float2Str
*     Str2Byte
*     Str2Word
*     Str2LongWord
*     Str2Short
*     Str2Int
*     Str2LongInt
*     Str2Float
*     Byte2Hex
*     Hex2Byte
*     Word2Hex
*     Hex2Word
*     Ip2Str
*     Mac2Str
*     Str2Ip
*     Str2Mac
*     Str2Ip_
*     Str2Mac_
*     Bcd2Dec
*     Bcd2Dec16
*     Dec2Bcd
*     Dec2Bcd16
*     DSPIC_aditional_string_library_version
}

procedure DSPIC_aditional_string_library_version(var version : string[$FF]);
function Swap_B(var data_ : Byte) : Byte;
function Swap_F(var data_ : Word) : Word;
procedure Mem_Cpy(p1, p2 : word; n : word);
function Mem_Cmp(p1, p2 : word; n : word) : integer;
procedure Mem_Set(p1 : word; ch : char; n : word);
function Mem_Chr(p1 : word; ch : char; n : word) : word;
function Str_Len(var data_str : string[$FFFF]) : word;
procedure Str_Cut_Chr(var inst : string[$FFFF]; ch : char);
procedure Str_Cat(var inst1, inst2 : string[$FFFF]);
function Str_Chr(var inst : string[$FFFF]; ch : char) : word;
function Str_Cpy(var inst1, inst2 : string[$FFFF]) : word;
function Str_Cmp(var inst1, inst2 : string[$FFFF]) : integer;
procedure Str_Replace_Chr(var inst : string[$FFFF]; ch1, ch2 : char);
procedure Str_Replace_Chr_F(var inst : string[$FFFF]; ch1, ch2 : char);
procedure Str_Split(var inst1, inst2 : string[$FFFF]; n : word);
procedure Str_Insert_Chr(var inst1 : string[$FFFF]; chr_ : byte; n : word);
procedure Str_AppendPre(var inst1 : string[$FFFF]; chr_ : byte);
procedure Str_AppendSuf(var inst1 : string[$FFFF]; chr_ : byte);
procedure Str_Cut_Left(var inst1 : string[$FFFF]; n : word);
procedure Str_Cut_Right(var inst1 : string[$FFFF]; n : word);
procedure LongWord2StrWithZeros(data_in : dWord; var data_str : string[10]);
procedure Word2StrWithZeros(data_in : Word; var data_str : string[5]);
procedure Byte2StrWithZeros(data_in : Byte; var data_str : string[3]);
procedure Short2StrWithZeros(data_in1 : short; var data_str3 : string[4]);
procedure Int2StrWithZeros(data_in1 : integer; var data_str3 : string[6]);
procedure LongInt2StrWithZeros(data_in1 : longint; var data_str3 : string[11]);
procedure Short2Str(data_in1 : short; var data_str3 : string[4]);
procedure Int2Str(data_in1 : integer; var data_str3 : string[6]);
procedure LongInt2Str(data_in1 : longint; var data_str3 : string[11]);
procedure Byte2Str(data_in1 : byte; var data_str3 : string[3]);
procedure Word2Str(data_in1 : integer; var data_str3 : string[5]);
procedure LongWord2Str(data_in1 : longint; var data_str3 : string[10]);
procedure Float2Str(data_in4 : real; var data_str4 : string[17]; digit : byte); // olnly 4 digits after '.'
procedure Float2Str_5(data_in4 : real; var data_str4 : string[17]; digit : byte); // olnly 5 digits after '.'
function Str2Byte(var byte_in : string[3]) : byte;
function Str2Short(var byte_in : string[4]) : short;
function Str2Word(var word_in : string[5]) : word;
function Str2Int(var word_in : string[6]) : integer;
function Str2LongWord(var dWord_in : string[10]) : dword;
function Str2LongInt(var Long_in : string[11]) : Longint;
function Str2Float(var data_str4 : string[17]) : real;
procedure Byte2Hex(data_hex : byte; var hex : string[2]);
procedure Word2Hex(data_hex : word; var hex : string[4]);
function Hex2Byte(var hex_in : string[2]) : byte;
function Hex2Word(var hex_in : string[4]) : word;
procedure Ip2Str(var ip_in : array[4] of byte; var str_out : string[15]);
procedure Mac2Str(var mac_in : array[6] of byte; var str1_out : string[12]);
procedure Str2Ip(var str_in : string[15]; var ip_out : array[4] of byte);
procedure Str2Mac(var str1_in : string[12]; var mac_out : array[6] of byte);
procedure Str2Ip_(var str_in : string[15]; ip_out_pt : ^byte);
procedure Str2Mac_(var str1_in : string[12]; mac_out_pt : ^byte);
Function BcdToDec(number : byte) : byte;
Function BcdToDec16(number : Word) : word;
Function DecToBcd(number : byte) : byte;
Function DecToBcd16(number : word) : word;

implementation

var ptx1, ptx2 : ^ byte;
    
procedure DSPIC_aditional_string_library_version(var version : string[$FF]);
begin
  version := 'DSPIC_A_S_L V4.4 PRO 05-Jan-2012';
end;

function Swap_B(var data_ : Byte) : Byte;
//Swaps higher nibble (bits <7..4>) and lower nibble (bits <3..0>) of byte-size parameter data
begin
  W4 := @data_;
  asm
    MOV.B [W4],W5
    SWAP.B W5
    MOV.B W5,[W4]
  end;
  result := W5;
end;

function Swap_F(var data_ : Word) : Word;
//Swaps higher byte and lower byte of word-size parameter data
begin
  W4 := @data_;
  asm
    MOV [W4],W5
    SWAP W5
    MOV W5,[W4]
  end;
  result := W5;
end;

procedure Mem_Cpy(p1, p2 : word; n : word);
begin
  W6 := n;
  W4 := p1;
  W5 := p2;
  asm
    CP0 W6
    BRA Z,la25
    DEC W6,W6
    REPEAT W6
    MOV.B [W5++],[W4++]
la25:
  end;
end;

function Mem_Cmp(p1, p2 : word; n : word) : integer;
begin
  W4 := p1;
  W5 := p2;
  W8 := n;
  asm
    SETM W9
    CP0 W8
    BRA Z,la24
    CLR W9
la16:
    MOV.B [W5++],W9
    CP.B W9,[W4++]
    BRA NZ,la15
    DEC W8,W8
    BRA NZ,la16
la15:
    SUB.B W9,[--W4],W9
la24:
  end;
  result := W9;
end;

procedure Mem_Set(p1 : word; ch : char; n : word);
begin
  W6 := n;
  W4 := p1;
  W5 := ch;
  asm
    CP0 W6
    BRA Z,la29
    DEC W6,W6
    REPEAT W6
    MOV.B W5,[W4++]
la29:
  end;
end;

function Mem_Chr(p1 : word; ch : char; n : word) : word;
begin
  W9 := n;
  W6 := ch;
  W4 := p1;
  asm
    SETM W8
    CP0 W9
    BRA Z,la26
    MOV W4,W5
la18:
    CP.B W6,[W4++]
    BRA Z,la19
    DEC W9,W9
    BRA NZ,la18
    BRA la26
la19:
    DEC W4,W4
    SUB W4,W5,W8
la26:
  end;
  result := W8;
end;

function Str_Len(var data_str : string[$FFFF]) : word;
begin
  W4 := @data_str;
  asm
    MOV W4,W6
la1:
    CP0.B [W4++]
    BRA NZ ,la1
    DEC W4,W4
    SUB W4,W6,W6
  end;
  result := W6;
end;

procedure Str_Cut_Chr(var inst : string[$FFFF]; ch : char);
begin
  W6 := ch;
  W4 := @inst;
  asm
    MOV W4,W5
    CP0.B W6
    BRA Z ,la5
la6:
    CP.B W6,[W4++]
    BRA Z ,la6
    DEC W4,W4
la7:
    MOV.B [W4],[W5++]
    CP0.B [W4++]
    BRA NZ ,la7
la5:
  end;
end;

procedure Str_Cat(var inst1, inst2 : string[$FFFF]);
begin
  W4 := @inst1;
  W5 := @inst2;
  asm
la2:
    CP0.B [W4++]
    BRA NZ ,la2
    DEC W4,W4
la4:
    MOV.B [W5],[W4++]
    CP0.B [W5++]
    BRA NZ ,la4
  end;
end;

function Str_Chr(var inst : string[$FFFF]; ch : char) : word;
begin
  W6 := ch;
  W4 := @inst;
  asm
    SETM W9
    CP0.B W6
    BRA Z,la21
    MOV W4,W5
la20:
    CP0.B [W4]
    BRA Z,la21
    CP.B W6,[W4++]
    BRA NZ,la20
    DEC W4,W4
    SUB W4,W5,W9
la21:
  end;
  result := W9;
end;

function Str_Cpy(var inst1, inst2 : string[$FFFF]) : word;
begin
  W4 := @inst1;
  W5 := @inst2;
  result := $FFFF;
  asm
la11:
  end;
    inc(result);
  asm
    MOV.B [W5],[W4++]
    CP0.B [W5++]
    BRA NZ ,la11
  end;
end;

function Str_Cmp(var inst1, inst2 : string[$FFFF]) : integer;
begin
  W4 := @inst1;
  W5 := @inst2;
  asm
    CLR W9
    CLR W6
la22:
    MOV.B [W4++],W6
    MOV.B [W5++],W9
    CP0.B W6
    BRA Z,la23
    CP0.B W9
    BRA Z,la23
    CP.B W9,W6
    BRA NZ,la22
la23:
    SUB.B W6,W9,W9
  end;
  result := W9;
end;

procedure Str_Replace_Chr(var inst : string[$FFFF]; ch1, ch2 : char);
begin
  W8 := ch1;
  W9 := ch2;
  W5 := @inst;
  asm
    CP0.B W8
    BRA Z,la10
    CP0.B W9
    BRA Z,la10
    CLR W6
    DEC W5,W5
la8:
    MOV.B [++W5],W6
    CP0.B W6
    BRA Z,la10
    CP.B W6,W8
    BRA NZ,la8
    MOV.B W9,[W5]
    BRA la8
la10:
  end;
end;

procedure Str_Replace_Chr_F(var inst : string[$FFFF]; ch1, ch2 : char);
begin
  W8 := ch1;
  W9 := ch2;
  W5 := @inst;
  asm
    CP0.B W8
    BRA Z,la1010
    CP0.B W9
    BRA Z,la1010
    CLR W6
    DEC W5,W5
la88:
    MOV.B [++W5],W6
    CP0.B W6
    BRA Z,la1010
    CP.B W6,W8
    BRA NZ,la1010
    MOV.B W9,[W5]
    BRA la88
la1010:
  end;
end;

procedure Str_Split(var inst1, inst2 : string[$FFFF]; n : word);
begin
  W4 := @inst1;
  asm
    MOV W4,W6
la33:
    CP0.B [W4++]
    BRA NZ ,la33
    DEC W4,W4
    SUB W4,W6,W4
  end;
  if n >= W4 then exit;
  W4 := W6 + n;
  W5 := @inst2;
  asm
    MOV.B [W4],[W5++]
    CLR.B [W4++]
la30:
    MOV.B [W4],[W5++]
    CP0.B [W4++]
    BRA NZ,la30
  end;
end;

procedure Str_Insert_Chr(var inst1 : string[$FFFF]; chr_ : byte; n : word);
begin
  W4 := @inst1;
  asm
    MOV W4,W6
la34:
    CP0.B [W4++]
    BRA NZ ,la34
    DEC W4,W4
    SUB W4,W6,W8
  end;
  if n > W8 then exit;
  W9 := chr_;
  W6 := W8 - n;
  asm
    MOV W4,W5
    INC W4,W4
    REPEAT W6
    MOV.B [W5--],[W4--]
    MOV.B W9,[++W5]
  end;
end;

procedure Str_AppendPre(var inst1 : string[$FFFF]; chr_ : byte);
begin
  W9 := chr_;
  W4 := @inst1;
  asm
    MOV W4,W6
la32:
    CP0.B [W4++]
    BRA NZ ,la32
    DEC W4,W4
    SUB W4,W6,W6
    MOV W4,W5
    INC W4,W4
    REPEAT W6
    MOV.B [W5--],[W4--]
    MOV.B W9,[++W5]
  end;
end;

procedure Str_AppendSuf(var inst1 : string[$FFFF]; chr_ : byte);
begin
  W9 := chr_;
  W4 := @inst1;
  asm
la31:
    CP0.B [W4++]
    BRA NZ ,la31
    DEC W4,W4
    MOV.B W9,[W4++]
    CLR.B [W4]
  end;
end;

procedure Str_Cut_Left(var inst1 : string[$FFFF]; n : word);
begin
  W4 := @inst1;
  asm
    MOV W4,W6
la35:
    CP0.B [W4++]
    BRA NZ ,la35
    DEC W4,W4
    SUB W4,W6,W8
  end;
  if W8 = 0 then exit;
  if n = 0 then exit;
  if n > W8 then exit;
  W9 := W8 - n;
  W4 := W6 + n;
  asm
    REPEAT W9
    MOV.B [W4++],[W6++]
  end;
end;

procedure Str_Cut_Right(var inst1 : string[$FFFF]; n : word);
begin
  W4 := @inst1;
  asm
    MOV W4,W6
la36:
    CP0.B [W4++]
    BRA NZ ,la36
    DEC W4,W4
    SUB W4,W6,W8
  end;
  if W8 = 0 then exit;
  if n = 0 then exit;
  if n > W8 then exit;
  W6 := W4 - n;
  asm
    CLR.B [W6]
  end;
end;


procedure Adjust_1;
begin
  asm
    MOV.B [W4],W6
    AND #15,W6
    ADD #48,W6
    MOV.B W6,[W5--]
    MOV.B [W4++],W6
    LSR W6,#4,W6
    AND #15,W6
    ADD #48,W6
    MOV.B W6,[W5--]
  end;
end;

procedure LongWord2StrWithZeros(data_in : dWord; var data_str : string[10]);
var buf : array[11] of byte;
begin
  W7 := @buf;
  Mem_Cpy(W7, @data_in, 4);
  Mem_Set(W7+4, 0, 6);
  W8 := 0;
  while W8 < 32 do
    begin
      asm
        MOV W7,W4
        RLC [W4],[W4++]
        RLC [W4],[W4++]
        RLC [W4],[W4++]
        RLC [W4],[W4++]
        RLC [W4],[W4]
      end;
      if W8 = 31 then
        begin
          W5 := @data_str + 10;
          asm
            MOV W7,W4
            ADD #4,W4
            CLR W6
            MOV.B W6,[W5--]
          end;
          Adjust_1;
          Adjust_1;
          Adjust_1;
          Adjust_1;
          Adjust_1;
          exit;
        end;
      asm
        MOV #5,W9
        MOV W7,W4
        ADD #3,W4
loop_1:
        MOV.B [++W4],W6
        ADD #3,W6
        BTSC W6,#3
        MOV.B W6,[W4]
        MOV.B [W4],W6
        ADD #48,W6
        BTSC W6,#7
        MOV.B W6,[W4]
        DEC W9,W9
        BRA NZ,loop_1
        INC W8,W8
      end;
    end;
end;

procedure Word2StrWithZeros(data_in : Word; var data_str : string[5]);
var buf : array[11] of byte;
begin
  W7 := @buf;
  Mem_Cpy(W7, @data_in, 2);
  Mem_Set(W7+2, 0, 4);
  W8 := 0;
  while W8 < 16 do
    begin
      asm
        MOV W7,W4
        RLC [W4],[W4++]
        RLC [W4],[W4++]
        RLC [W4],[W4]
      end;
      if W8 = 15 then
        begin
          W5 := @data_str + 5;
          asm
            MOV W7,W4
            ADD #2,W4
            CLR W6
            MOV.B W6,[W5--]
          end;
          Adjust_1;
          Adjust_1;
          asm
            MOV.B [W4],W6
            AND #15,W6
            ADD #48,W6
            MOV.B W6,[W5--]
          end;
          exit;
        end;
      asm
        MOV #3,W9
        MOV W7,W4
        ADD #1,W4
loop_2:
        MOV.B [++W4],W6
        ADD #3,W6
        BTSC W6,#3
        MOV.B W6,[W4]
        MOV.B [W4],W6
        ADD #48,W6
        BTSC W6,#7
        MOV.B W6,[W4]
        DEC W9,W9
        BRA NZ,loop_2
        INC W8,W8
      end;
    end;
end;

procedure Byte2StrWithZeros(data_in : Byte; var data_str : string[3]);
var buf : array[11] of byte;
begin
  W7 := @buf;
  Mem_Cpy(W7, @data_in, 1);
  Mem_Set(W7+1, 0, 3);
  W8 := 0;
  while W8 < 8 do
    begin
      asm
        MOV W7,W4
        RLC [W4],[W4++]
        RLC [W4],[W4]
      end;
      if W8 = 7 then
        begin
          W5 := @data_str + 3;
          asm
            MOV W7,W4
            ADD #1,W4
            CLR W6
            MOV.B W6,[W5--]
          end;
          Adjust_1;
          asm
            MOV.B [W4],W6
            AND #15,W6
            ADD #48,W6
            MOV.B W6,[W5--]
          end;
          exit;
        end;
      asm
        MOV #2,W9
        MOV W7,W4
loop_3:
        MOV.B [++W4],W6
        ADD #3,W6
        BTSC W6,#3
        MOV.B W6,[W4]
        MOV.B [W4],W6
        ADD #48,W6
        BTSC W6,#7
        MOV.B W6,[W4]
        DEC W9,W9
        BRA NZ,loop_3
        INC W8,W8
      end;
    end;
end;

procedure Short2StrWithZeros(data_in1 : short; var data_str3 : string[4]);
var data_str4 : string[3];
    buf : byte;
begin
  data_str3[0] := '0';
  data_str3[1] := 0;
  buf := data_in1;
  if TestBit(buf,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  Byte2StrWithZeros(buf, data_str4);
  Str_Cat(data_str3, data_str4);
end;

procedure Int2StrWithZeros(data_in1 : integer; var data_str3 : string[6]);
var data_str4 : string[5];
    buf : word;
begin
  data_str3[0] := '0';
  data_str3[1] := 0;
  buf := data_in1;
  W4 := Hi(data_in1);
  if TestBit(W4,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  Word2StrWithZeros(buf, data_str4);
  Str_Cat(data_str3, data_str4);
end;

procedure LongInt2StrWithZeros(data_in1 : longint; var data_str3 : string[11]);
var data_str4 : string[10];
    buf : dWord;
begin
  data_str3[0] := '0';
  data_str3[1] := 0;
  buf := data_in1;
  W4 := Highest(data_in1);
  if TestBit(W4,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  LongWord2StrWithZeros(buf, data_str4);
  Str_Cat(data_str3, data_str4);
end;

procedure Short2Str(data_in1 : short; var data_str3 : string[4]);
var data_str4 : string[3];
    buf : byte;
begin
  data_str3[0] := 0;
  data_str3[1] := 0;
  buf := data_in1;
  if TestBit(buf,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  Byte2StrWithZeros(buf, data_str4);
  Str_Cut_Chr(data_str4, '0');
  if Str_Len(data_str4) = 0 then
    begin
      data_str4[0] := '0';
      data_str4[1] := 0;
    end;
  Str_Cat(data_str3, data_str4);
end;

procedure Int2Str(data_in1 : integer; var data_str3 : string[6]);
var data_str4 : string[5];
    buf : word;
begin
  data_str3[0] := 0;
  data_str3[1] := 0;
  buf := data_in1;
  W4 := Hi(data_in1);
  if TestBit(W4,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  Word2StrWithZeros(buf, data_str4);
  Str_Cut_Chr(data_str4, '0');
  if Str_Len(data_str4) = 0 then
    begin
      data_str4[0] := '0';
      data_str4[1] := 0;
    end;
  Str_Cat(data_str3, data_str4);
end;

procedure LongInt2Str(data_in1 : longint; var data_str3 : string[11]);
var data_str6 : string[10];
    buf : dWord;
begin
  data_str3[0] := 0;
  data_str3[1] := 0;
  buf := data_in1;
  W4 := Highest(data_in1);
  if TestBit(W4,7) = 1 then
    begin
      buf := not(buf) + 1;
      data_str3[0] := '-';
    end;
  LongWord2StrWithZeros(buf, data_str6);
  Str_Cut_Chr(data_str6, '0');
  if Str_Len(data_str6) = 0 then
    begin
      data_str6[0] := '0';
      data_str6[1] := 0;
    end;
  Str_Cat(data_str3, data_str6);
end;

procedure Byte2Str(data_in1 : byte; var data_str3 : string[3]);
begin
  Byte2StrWithZeros(data_in1, data_str3);
  Str_Cut_Chr(data_str3, '0');
  if Str_Len(data_str3) = 0 then
    begin
      data_str3[0] := '0';
      data_str3[1] := 0;
    end;
end;

procedure Word2Str(data_in1 : integer; var data_str3 : string[5]);
begin
  Word2StrWithZeros(data_in1, data_str3);
  Str_Cut_Chr(data_str3, '0');
  if Str_Len(data_str3) = 0 then
    begin
      data_str3[0] := '0';
      data_str3[1] := 0;
    end;
end;

procedure LongWord2Str(data_in1 : longint; var data_str3 : string[10]);
begin
  LongWord2StrWithZeros(data_in1, data_str3);
  Str_Cut_Chr(data_str3, '0');
  if Str_Len(data_str3) = 0 then
    begin
      data_str3[0] := '0';
      data_str3[1] := 0;
    end;
end;

procedure Float2Str(data_in4 : real; var data_str4 : string[17]; digit : byte); // olnly 4 digits after '.'
var buf_f : Longint;
    txt10 : string[10];
label end_Float;
begin
  data_str4[0] := 0;
  buf_f := Longint(data_in4);
  LongInt2Str(buf_f, txt10);
  if digit = 0 then goto end_float;
  data_in4 := data_in4 - real(buf_f);
  if data_in4 < 0.0 then
    begin
      data_in4 := data_in4 * -100000.0;
      if txt10[0] <> '-' then data_str4 := '-';
    end
  else data_in4 := data_in4 * 100000.0;
  Str_Cat(data_str4, txt10);
  Word2StrWithZeros(dWord(LongInt(data_in4) div 10), txt10);
  if digit > 4 then digit := 4;
  Mem_Cpy(word(@txt10), word(@txt10)+1, digit);
  txt10[digit] := 0;
  Str_Cat(data_str4, '.');
end_Float:
  Str_Cat(data_str4, txt10);
end;

procedure Float2Str_5(data_in4 : real; var data_str4 : string[17]; digit : byte); // olnly 5 digits after '.'
var buf_f : Longint;
    txt10 : string[10];
label end_Float1;
begin
  data_str4[0] := 0;
  buf_f := Longint(data_in4);
  LongInt2Str(buf_f, txt10);
  if digit = 0 then goto end_Float1;
  data_in4 := data_in4 - real(buf_f);
  if data_in4 < 0.0 then
    begin
      data_in4 := data_in4 * -100000.0;
      if txt10[0] <> '-' then data_str4 := '-';
    end
  else data_in4 := data_in4 * 100000.0;
  Str_Cat(data_str4, txt10);
  LongWord2StrWithZeros(LongInt(data_in4), txt10);
  if digit > 5 then digit := 5;
  Mem_Cpy(word(@txt10), word(@txt10)+5, digit);
  txt10[digit] := 0;
  Str_Cat(data_str4, '.');
end_Float1:
  Str_Cat(data_str4, txt10);
end;

procedure adjust_char_;
begin
  if ((ptx1^ >= '0') and (ptx1^ <= '9')) then ptx2^ := ptx1^;
  ptx2 := ptx2 - 1;
  ptx1 := ptx1 - 1;
end;

function Str2Byte(var byte_in : string[3]) : byte;
var i : byte;
    buf_str2 : string[3];
begin
  result := 0;
  buf_str2 := '000';
  i := Str_Len(byte_in);
  if i > 3 then exit;
  ptx1 := @byte_in[i-1];
  ptx2 := @buf_str2[2];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  result := (buf_str2[0] - '0') * 100;
  result := result + (buf_str2[1] - '0') * 10;
  result := result + (buf_str2[2] - '0');
end;

function Str2Short(var byte_in : string[4]) : short;
var i : byte;
    buf_str2 : string[4];
begin
  result := 0;
  buf_str2 := '0000';
  i := Str_Len(byte_in);
  if i > 4 then exit;
  ptx1 := @byte_in[i-1];
  ptx2 := @buf_str2[3];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  result := (buf_str2[1] - '0') * 100;
  result := result + (buf_str2[2] - '0') * 10;
  if byte_in[0] = '-' then result := 0 - result - (buf_str2[3] - '0')
  else result := result + (buf_str2[3] - '0');
end;

function Str2Word(var word_in : string[5]) : word;
var i : byte;
    buf_str2 : string[5];
begin
  result := 0;
  buf_str2 := '00000';
  i := Str_Len(word_in);
  if i > 5 then exit;
  ptx1 := @word_in[i-1];
  ptx2 := @buf_str2[4];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  result := (buf_str2[0] - '0') * 10000;
  result := result + (buf_str2[1] - '0') * 1000;
  result := result + (buf_str2[2] - '0') * 100;
  result := result + (buf_str2[3] - '0') * 10;
  result := result + buf_str2[4] - '0';
end;

function Str2Int(var word_in : string[6]) : integer;
var i : byte;
    buf_str : string[6];
begin
  result := 0;
  buf_str := '000000';
  i := Str_Len(word_in);
  if i > 6 then exit;
  ptx1 := @word_in[i-1];
  ptx2 := @buf_str[5];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  result := (buf_str[1] - '0') * 10000;
  result := result + (buf_str[2] - '0') * 1000;
  result := result + (buf_str[3] - '0') * 100;
  result := result + (buf_str[4] - '0') * 10;
  if word_in[0] = '-' then result := 0 - result - (buf_str[5] - '0')
  else result :=  result + (buf_str[5] - '0')
end;

function Str2LongWord(var dWord_in : string[10]) : dword;
var i : byte;
    buf_str : string[10];
    buf_str1 : string[5];
begin
  result := 0;
  buf_str := '0000000000';
  i := Str_Len(dWord_in);
  if i > 10 then exit;
  ptx1 := @dWord_in[i-1];
  ptx2 := @buf_str[9];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  Mem_Cpy(@buf_str1, @buf_str, 2);
  buf_str1[2] := 0;
  result := Str2Byte(buf_str1) * 100000000;
  Mem_Cpy(@buf_str1, @buf_str[2], 4);
  buf_str1[4] := 0;
  result := result + Str2Word(buf_str1) * 10000;
  Mem_Cpy(@buf_str1, @buf_str[6], 4);
  buf_str1[4] := 0;
  result := result + Str2Word(buf_str1);
end;

function Str2LongInt(var Long_in : string[11]) : Longint;
var i : byte;
    res1 : short;
    res2 : word;
    buf_str : string[11];
    buf_str1 : string[5];
begin
  result := 0;
  buf_str := '00000000000';
  if Long_in[0] = '-' then
    begin
      buf_str[0] := '-';
    end;
  i := Str_Len(Long_in);
  if i > 11 then exit;
  ptx1 := @Long_in[i-1];
  ptx2 := @buf_str[10];
  while i > 0 do
    begin
      adjust_char_;
      dec(i);
    end;
  Mem_Cpy(@buf_str1, @buf_str, 3);
  buf_str1[3] := 0;
  res1 := Str2short(buf_str1);
  Mem_Cpy(@buf_str1, @buf_str[3], 4);
  buf_str1[4] := 0;
  res2 := Str2Word(buf_str1);
  Mem_Cpy(@buf_str1, @buf_str[7], 4);
  buf_str1[4] := 0;

  if Long_in[0] = '-' then result := res1*100000000 - res2*10000 - Str2Word(buf_str1)
  else result := res1*100000000 + res2*10000 + Str2Word(buf_str1);
end;

function Str2Float(var data_str4 : string[17]) : real;
var txt10 : string[10];
    lungime, lungime1,i : byte;
    pt1, pt2 : ^byte;
begin
  result := 0.;
  lungime := Str_Len(data_str4);
  if (lungime = 0) or (lungime > 17) then exit;
  lungime1 := Str_Chr(data_str4,'.');
  if lungime1 = 0 then exit;
  txt10 := '00000';
  pt1 := @data_str4[lungime1];
  pt1^ := 0;
  pt1 := pt1 + 1;
  pt2 := @txt10;
  inc(lungime1);
  i := 0;
  while lungime1 < lungime do
    begin
      pt2^ := pt1^;
      pt2 := pt2 + 1;
      pt1 := pt1 + 1;
      inc(lungime1);
      if inc(i) >= 5 then break;
    end;
    if data_str4[0] = '-' then result := real(Str2LongInt(data_str4)) - real(Str2LongWord(txt10))/100000.0
    else result := real(Str2LongInt(data_str4)) + real(Str2LongWord(txt10))/100000.0;
end;

procedure Byte2Hex(data_hex : byte; var hex : string[2]);
begin
  W5 := @hex;
  W4 := @data_hex;
  asm
    MOV.B [W4],W6
    LSR W6,#4,W6
    AND #15,W6
    ADD #48,W6
  end;
  if W6 > $39 then W6 := W6 + $07;
  asm
    MOV.B W6,[W5++]
    MOV.B [W4],W6
    AND #15,W6
    ADD #48,W6
  end;
  if W6 > $39 then W6 := W6 + $07;
  asm
    MOV.B W6,[W5++]
    CLR W6
    MOV.B W6,[W5]
  end;
end;

procedure Word2Hex(data_hex : word; var hex : string[4]);
var buf_h : string[2];
begin
  Byte2Hex(Hi(data_hex),buf_h);
  hex[0] := buf_h[0];
  hex[1] := buf_h[1];
  Byte2Hex(Lo(data_hex),buf_h);
  hex[2] := buf_h[0];
  hex[3] := buf_h[1];
  hex[4] := 0;
end;

function adjust_hex_ : byte;
begin
  if ((W6 >= '0') and (W6 <= '9')) then result := (W6 - 48)
  else if ((W6 >= 'A') and (W6 <= 'F')) then result := (W6 - 55)
  else if ((W6 >= 'a') and (W6 <= 'f')) then result := (W6 - 87)
  else result := 0;
end;

function Hex2Byte(var hex_in : string[2]) : byte;
begin
  W4 := @hex_in;
  asm
    CLR W6
    MOV.B [W4++],W6
  end;
  W5 := adjust_hex_;
  asm
    SL W5,#4,W5
    MOV.B [W4],W6
  end;
  result := W5 + adjust_hex_;
end;

function Hex2Word(var hex_in : string[4]) : word;
var buf_h : string[2];
begin
  buf_h[0] := hex_in[0];
  buf_h[1] := hex_in[1];
  buf_h[2] := 0;
  result := Hex2Byte(buf_h)*256;
  buf_h[0] := hex_in[2];
  buf_h[1] := hex_in[3];
  buf_h[2] := 0;
  result := result + Hex2Byte(buf_h);
end;

procedure Ip2Str(var ip_in : array[4] of byte; var str_out : string[15]);
var txt3 : string[3];
    j : byte;
begin
  str_out[0] := 0;
  j := 0;
  while j < 4 do
    begin
      Byte2Str(ip_in[j],txt3);
      Str_Cat(str_out,txt3);
      if j < 3 then Str_Cat(str_out,'.');
      inc(j);
    end;
end;

procedure Mac2Str(var mac_in : array[6] of byte; var str1_out : string[12]);
var txt2 : string[2];
    j : byte;
begin
  str1_out[0] := 0;
  j := 0;
  while j < 6 do
    begin
      Byte2Hex(mac_in[j],txt2);
      Str_Cat(str1_out,txt2);
      inc(j);
    end;
end;

procedure Str2Ip(var str_in : string[15]; var ip_out : array[4] of byte);
var i,j,k,g : byte;
    txt3 : string[3];
begin
  Mem_Set(@ip_out, 0, 4);
  i := 0;
  j := 0;
  while true do
    begin
      g := str_in[i];
      if g = 0 then break;
      if  g = '.' then inc(j);
      inc(i);
    end;
  if (j <> 3) then exit;
  if (i < 7) then exit;
  if (i > 15) then exit;
  i := 0;
  k := 0;
  while k < 4 do
    begin
      j := 0;
      while true do
        begin
          g := str_in[i];
          if g = '.' then break;
          if g = 0 then break;
          if j > 2 then exit;
          txt3[j] := g;
          inc(j);
          inc(i);
        end;
      txt3[j] := 0;
      inc(i);
      ip_out[k] := Str2Byte(txt3);
      inc(k);
    end;
end;

procedure Str2Mac(var str1_in : string[12]; var mac_out : array[6] of byte);
var i : byte;
    txt2 : string[2];
begin
  Mem_Set(@mac_out, 0, 6);
  if Str_Len(str1_in) <> 12 then exit;
  i := 0;
  while i < 6 do
    begin
      txt2[0] := str1_in[i*2];
      txt2[1] := str1_in[1 + i*2];
      txt2[2] := 0;
      mac_out[i] := Hex2Byte(txt2);
      inc(i);
    end;
end;

procedure Str2Ip_(var str_in : string[15]; ip_out_pt : ^byte);
var i,j,k,g : byte;
    txt3 : string[3];
begin
  Mem_Set(ip_out_pt, 0, 4);
  i := 0;
  j := 0;
  while true do
    begin
      g := str_in[i];
      if g = 0 then break;
      if  g = '.' then inc(j);
      inc(i);
    end;
  if (j <> 3) then exit;
  if (i < 7) then exit;
  if (i > 15) then exit;
  i := 0;
  k := 0;
  while k < 4 do
    begin
      j := 0;
      while true do
        begin
          g := str_in[i];
          if g = '.' then break;
          if g = 0 then break;
          if j > 2 then exit;
          txt3[j] := g;
          inc(j);
          inc(i);
        end;
      txt3[j] := 0;
      inc(i);
      ip_out_pt^ := Str2Byte(txt3);
      ip_out_pt := ip_out_pt + 1;
      inc(k);
    end;
end;

procedure Str2Mac_(var str1_in : string[12]; mac_out_pt : ^byte);
var i : byte;
    txt2 : string[2];
begin
  Mem_Set(mac_out_pt, 0, 6);
  if Str_Len(str1_in) <> 12 then exit;
  i := 0;
  while i < 6 do
    begin
      txt2[0] := str1_in[i*2];
      txt2[1] := str1_in[1 + i*2];
      txt2[2] := 0;
      mac_out_pt^ := Hex2Byte(txt2);
      mac_out_pt := mac_out_pt + 1;
      inc(i);
    end;
end;

Function BcdToDec(number : byte) : byte;
begin
  W4 := number;
  asm
    LSR W4,#4,W4
  end;
  result := (W4 and $0F)*10 + (number and $0F);
end;

Function BcdToDec16(number : Word) : word;
begin
  result := BcdToDec(Hi(number))*100 + BcdToDec(Lo(number));
end;

Function DecToBcd(number : byte) : byte;
begin
  W4 := number div 10;
  W7 := number - W4*10;
  asm
    SL W4,#4,W4
    IOR W7,W4,W4
  end;
  result := W4;
end;

Function DecToBcd16(number : word) : word;
var n1,n2 : byte;
begin
  n1 := number div 100;
  n2 := number - n1*100;
  result := DecToBcd(n1)*256 + DecToBcd(n2);
end;

end.