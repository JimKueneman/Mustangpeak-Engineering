unit opstack_api;

{$I Options.inc}

uses
  opstack_events,
  Float16,
  opstack_buffers,
  template_hardware,
  opstack_types,
  opstack_defines,
  template_node,
  opstack_utilities;
  
procedure Api_Initialize;

function GetPhysicalNode: POpenLCBNode;
function GetVirtualNode(Index: Integer): POpenLCBNode;

// Basic Messages
function TrySendVerifyNodeIDAddressed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
function TrySendVerifyNodeIDGlobal(var Source: TNodeInfo): Boolean;
// Protocol Support
function TrySendSupportInquiry(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
// Events
function TrySendIdentifyConsumer(var Source: TNodeInfo; EventID: PEventID): Boolean;
function TrySendIdentifyProducer(var Source: TNodeInfo; EventID: PEventID): Boolean;
function TrySendIdentifyEventsAddressed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
function TrySendIdentifyEventsGlobal(var Source: TNodeInfo): Boolean;
function TrySendLearnEvent(var Source: TNodeInfo; EventID: PEventID): Boolean;
function TrySendPCEventReport(var Source: TNodeInfo; EventID: PEventID): Boolean;
// Button
function TrySendRemoteButtonRequest(var Source: TNodeInfo; var Dest: TNodeInfo; DataBuffer: PSimpleBuffer): Boolean;
// Snip/Snii
function TrySendSnipRequest(var Source: TNodeInfo; var Dest: TNodeInfo; MultiFrameStringBuffer: PMultiFrameStringBuffer): Boolean;
// Traction
{$IFDEF SUPPORT_TRACTION}
function TrySendStnipRequest(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
function TrySendTractionFunctionSet(var Source: TNodeInfo; var Dest: TNodeInfo; FunctionAddress: DWord; Value: Word): Boolean;
function TrySendTractionSpeedSet(var Source: TNodeInfo; var Dest: TNodeInfo; Speed: THalfFloat): Boolean;
function TrySendTractionDirectionToggle(var Source: TNodeInfo; var Dest: TNodeInfo; var Speed: THalfFloat): Boolean;
function TrySendTractionDirectionSet(var Source: TNodeInfo; var Dest: TNodeInfo; var Speed: THalfFloat; IsForward: Boolean): Boolean;
function TrySendTractionControllerConfig(var Source: TNodeInfo; var Dest: TNodeInfo; var NodeID: TNodeInfo; Assign: Boolean): Boolean;
function TrySendTractionControllerQuery(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
function TrySendTractionManage(var Source: TNodeInfo; var Dest: TNodeInfo; Reserve: Boolean): Boolean;
function TrySendTractionManageReply(var Source: TNodeInfo; var Dest: TNodeInfo; ResultFlag: Word): Boolean;
function TrySendTractionQuerySpeed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
function TrySendTractionQueryFunction(var Source: TNodeInfo; var Dest: TNodeInfo; FunctionAddress: DWord): Boolean;
function TrySendTractionEmergencyStop(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
{$ENDIF}
// Traction Proxy
{$IFDEF SUPPORT_TRACTION_PROXY}
function TrySendTractionProxyManage(var Source: TNodeInfo; var Dest: TNodeInfo; Reserve: Boolean): Boolean;
function TrySendTractionProxyAllocate(var Source: TNodeInfo; var Dest: TNodeInfo; TechnologyID: Byte; TrainID: Word; Param0, Param1: Byte): Boolean;
function TrySendTractionProxyAllocateReply(var Source: TNodeInfo; var Dest: TNodeInfo; TechnologyID: Byte; var AllocatedNodeID: TNodeInfo; TrainID: Word): Boolean;
function TrySendTractionProxyAttach(var Source: TNodeInfo; var Dest: TNodeInfo; TrainID: Word; Param0, Param1: Byte; DoAttach: Boolean): Boolean;
function TrySendTractionProxyAttachReply(var Source: TNodeInfo; var Dest: TNodeInfo; ReplyCode: Byte): Boolean;
function TrySendTractionProxyManageReply(var Source: TNodeInfo; var Dest: TNodeInfo; ResultFlag: Word): Boolean;
{$ENDIF}
// Configuration Memeory
function TrySendConfigMemoryRead(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; ReadCount: Byte): Boolean;
function TrySendConfigMemoryWrite(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; WriteCount: Byte; WriteData: PDatagramDataArray): Boolean;

function TrySendConfigMemoryReadReply(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; ReadCount: Byte; ReadData: PByte; Success: Boolean): Boolean;
function TrySendConfigMemoryWriteReply(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; Success: Boolean): Boolean;


procedure OPStackNode_OutgoingMessageLink(Node: POpenLCBNode; AMessage: POPStackMessage); external;

var
  NodePool: TNodePool; external;
  
implementation

procedure Api_Initialize;
begin
  Events_Initialize;
end;

function GetPhysicalNode: POpenLCBNode;
begin
  Result := @NodePool.Pool[0];
end;

function GetVirtualNode(Index: Integer): POpenLCBNode;
begin
  Result := nil;
  if Index < 0 then
    Result := @NodePool.Pool[Index+1];
end;

function TrySendVerifyNodeIDAddressed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_VERIFY_NODE_ID_NUMBER_DEST, Source, Dest, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendVerifyNodeIDGlobal(var Source: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_VERIFY_NODE_ID_NUMBER, Source, NULL_NODE_INFO, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendSupportInquiry(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_PROTOCOL_SUPPORT_INQUIRY, Source, Dest, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendIdentifyConsumer(var Source: TNodeInfo; EventID: PEventID): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_CONSUMER_IDENTIFY, Source, NULL_NODE_INFO, False) then
    begin
      NewMessage^.Buffer^.DataArray := EventID^;
      NewMessage^.Buffer^.DataBufferSize := 8;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendIdentifyProducer(var Source: TNodeInfo; EventID: PEventID): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_PRODUCER_IDENTIFY, Source, NULL_NODE_INFO, False) then
    begin
      NewMessage^.Buffer^.DataArray := EventID^;
      NewMessage^.Buffer^.DataBufferSize := 8;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendIdentifyEventsAddressed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_EVENTS_IDENTIFY_DEST, Source, Dest, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendIdentifyEventsGlobal(var Source: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_EVENTS_IDENTIFY, Source, NULL_NODE_INFO, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendLearnEvent(var Source: TNodeInfo; EventID: PEventID): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_EVENT_LEARN, Source, NULL_NODE_INFO, False) then
    begin
      NewMessage^.Buffer^.DataArray := EventID^;
      NewMessage^.Buffer^.DataBufferSize := 8;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendPCEventReport(var Source: TNodeInfo; EventID: PEventID): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_PC_EVENT_REPORT, Source, NULL_NODE_INFO, False) then
    begin
      NewMessage^.Buffer^.DataArray := EventID^;
      NewMessage^.Buffer^.DataBufferSize := 8;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendRemoteButtonRequest(var Source: TNodeInfo; var Dest: TNodeInfo; DataBuffer: PSimpleBuffer): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_REMOTE_BUTTON_REQUEST, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataArray := DataBuffer^.DataArray;
      NewMessage^.Buffer^.DataBufferSize := DataBuffer^.DataBufferSize;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendSnipRequest(var Source: TNodeInfo; var Dest: TNodeInfo;MultiFrameStringBuffer: PMultiFrameStringBuffer): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_SIMPLE_NODE_INFO_REQUEST, Source, Dest, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

{$IFDEF SUPPORT_TRACTION}

function TrySendStnipRequest(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  // Does not matter we loaded Source into the destination, the loader will see the MTI does not have a dest and ignore it
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_SIMPLE_TRAIN_NODE_INFO_REQUEST, Source, Dest, False) then
    begin
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionFunctionSet(var Source: TNodeInfo; var Dest: TNodeInfo; FunctionAddress: DWord; Value: Word): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 6;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_FUNCTION;
      NewMessage^.Buffer^.DataArray[1] := FunctionAddress shr 16;
      NewMessage^.Buffer^.DataArray[2] := FunctionAddress shr 8;
      NewMessage^.Buffer^.DataArray[3] := FunctionAddress;
      NewMessage^.Buffer^.DataArray[4] := Hi( Value);
      NewMessage^.Buffer^.DataArray[5] := Lo( Value);
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionSpeedSet(var Source: TNodeInfo; var Dest: TNodeInfo; Speed: THalfFloat): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 3;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_SPEED_DIR;
      NewMessage^.Buffer^.DataArray[1] := Hi( Speed);
      NewMessage^.Buffer^.DataArray[2] := Lo( Speed);
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionDirectionToggle(var Source: TNodeInfo; var Dest: TNodeInfo; var Speed: THalfFloat): Boolean;
var
  TempSpeed: THalfFloat;
begin
  Result := False;
  if Speed and $8000 <> 0 then
    TempSpeed := Speed and not $8000
  else
    TempSpeed := Speed or $8000;
  if TrySendTractionSpeedSet(Source, Dest, TempSpeed) then
  begin
    Speed := TempSpeed;
    Result := True
  end;
end;

function TrySendTractionDirectionSet(var Source: TNodeInfo; var Dest: TNodeInfo; var Speed: THalfFloat; IsForward: Boolean): Boolean;
var
  TempSpeed: THalfFloat;
begin
  Result := False;
  if IsForward then
    TempSpeed := Speed and not $8000
  else
    TempSpeed := Speed or $8000;
  if TrySendTractionSpeedSet(Source, Dest, TempSpeed) then
  begin
    Speed := TempSpeed;
    Result := True
  end;
end;

function TrySendTractionControllerConfig(var Source: TNodeInfo; var Dest: TNodeInfo; var NodeID: TNodeInfo; Assign: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
  MultiFrameBuffer: PMultiFrameBuffer;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateMultiFrameMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest) then
    begin
      MultiFrameBuffer := PMultiFrameBuffer( PByte( NewMessage^.Buffer));
      MultiFrameBuffer^.DataArray[0] := TRACTION_CONTROLLER_CONFIG; // Manage Proxy
      if Assign then
        MultiFrameBuffer^.DataArray[1] := TRACTION_CONTROLLER_CONFIG_ASSIGN
      else
        MultiFrameBuffer^.DataArray[1] := TRACTION_CONTROLLER_CONFIG_RELEASE;
      MultiFrameBuffer^.DataArray[2] := TRACTION_FLAGS_ALIAS_INCLUDED;
      OpenLCBUtilities_LoadSimpleDataWith48BitNodeID(@NodeID.ID, PSimpleDataArray( PByte( @NewMessage^.Buffer^.DataArray[3])));
      MultiFrameBuffer^.DataArray[9] := Hi( NodeID.AliasID);
      MultiFrameBuffer^.DataArray[10] := Lo( NodeID.AliasID);
      MultiFrameBuffer^.DataBufferSize := 11;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionControllerQuery(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateMultiFrameMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest) then
    begin
      NewMessage^.Buffer^.DataArray[0] := TRACTION_CONTROLLER_CONFIG; // Manage Proxy
      NewMessage^.Buffer^.DataArray[1] := TRACTION_CONTROLLER_CONFIG_QUERY;
      NewMessage^.Buffer^.DataBufferSize := 2;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionManage(var Source: TNodeInfo; var Dest: TNodeInfo; Reserve: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataArray[0] := TRACTION_MANAGE; // Manage Proxy
      if Reserve then
        NewMessage^.Buffer^.DataArray[1] := TRACTION_MANAGE_RESERVE
      else
        NewMessage^.Buffer^.DataArray[1] := TRACTION_MANAGE_RELEASE;
      NewMessage^.Buffer^.DataBufferSize := 2;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionManageReply(var Source: TNodeInfo; var Dest: TNodeInfo; ResultFlag: Word): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_REPLY, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 3;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_MANAGE;
      NewMessage^.Buffer^.DataArray[1] := TRACTION_MANAGE_RESERVE;
      NewMessage^.Buffer^.DataArray[2] := ResultFlag;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

function TrySendTractionQuerySpeed(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 1;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_QUERY_SPEED;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

function TrySendTractionQueryFunction(var Source: TNodeInfo; var Dest: TNodeInfo; FunctionAddress: DWord): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 4;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_QUERY_FUNCTION;
      NewMessage^.Buffer^.DataArray[1] := FunctionAddress shr 16;
      NewMessage^.Buffer^.DataArray[2] := FunctionAddress shr 8;
      NewMessage^.Buffer^.DataArray[3] := FunctionAddress;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

function TrySendTractionEmergencyStop(var Source: TNodeInfo; var Dest: TNodeInfo): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 1;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_E_STOP;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;
{$ENDIF}

{$IFDEF SUPPORT_TRACTION_PROXY}
function TrySendTractionProxyManage(var Source: TNodeInfo; var Dest: TNodeInfo; Reserve: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROXY_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_MANAGE; // Manage Proxy
      if Reserve then
        NewMessage^.Buffer^.DataArray[1] := TRACTION_PROXY_MANAGE_RESERVE
      else
        NewMessage^.Buffer^.DataArray[1] := TRACTION_PROXY_MANAGE_RELEASE;
      NewMessage^.Buffer^.DataBufferSize := 2;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionProxyAllocate(var Source: TNodeInfo; var Dest: TNodeInfo; TechnologyID: Byte; TrainID: Word; Param0, Param1: Byte): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROXY_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_ALLOCATE;             // Allocate Proxy
      NewMessage^.Buffer^.DataArray[1] := TechnologyID;   // Technology type (DCC, DC, Marklin, etc)
      NewMessage^.Buffer^.DataArray[2] := Hi( TrainID);   // Train ID
      NewMessage^.Buffer^.DataArray[3] := Lo( TrainID);   //
      NewMessage^.Buffer^.DataArray[4] := Param0;        // DCC Speed Step
      NewMessage^.Buffer^.DataArray[5] := Param1;        //
      NewMessage^.Buffer^.DataBufferSize := 6;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
end;

function TrySendTractionProxyAllocateReply(var Source: TNodeInfo; var Dest: TNodeInfo; TechnologyID: Byte; var AllocatedNodeID: TNodeInfo; TrainID: Word): Boolean;
var
  NewMessage: POPStackMessage;
  MultiFrameBuffer: PMultiFrameBuffer;
begin
  Result := False;
  NewMessage := nil;
  if IsOutgoingBufferAvailable then
  begin   
    if OPStackBuffers_AllocateMultiFrameMessage(NewMessage, MTI_TRACTION_PROXY_REPLY, Source, Dest) then
    begin
      MultiFrameBuffer := PMultiFrameBuffer( PByte( NewMessage^.Buffer));
      MultiFrameBuffer^.DataBufferSize := 13;
      MultiFrameBuffer^.DataArray[0] := $01;
      MultiFrameBuffer^.DataArray[1] := TRACTION_FLAGS_ALIAS_INCLUDED;
      MultiFrameBuffer^.DataArray[2] := TRACTION_PROXY_TECH_ID_DCC;
      MultiFrameBuffer^.DataArray[3] := Hi(TrainID);
      MultiFrameBuffer^.DataArray[4] := Lo(TrainID);
      OpenLCBUtilities_LoadSimpleDataWith48BitNodeID(@AllocatedNodeID.ID, PSimpleDataArray( PByte( @MultiFrameBuffer^.DataArray[5])));
      MultiFrameBuffer^.DataArray[11] := Hi(AllocatedNodeID.AliasID);
      MultiFrameBuffer^.DataArray[12] := Lo(AllocatedNodeID.AliasID);
      OutgoingMessage(NewMessage, True);
      Result := True;
    end
  end
end;

function TrySendTractionProxyAttach(var Source: TNodeInfo; var Dest: TNodeInfo; TrainID: Word; Param0, Param1: Byte; DoAttach: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROXY_PROTOCOL, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 5;
      if DoAttach then
        NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_ATTACH
      else
        NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_DETACH;
      NewMessage^.Buffer^.DataArray[1] := Hi(TrainID);
      NewMessage^.Buffer^.DataArray[2] := Lo(TrainID);
      NewMessage^.Buffer^.DataArray[3] := Param0;
      NewMessage^.Buffer^.DataArray[4] := Param1;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

function TrySendTractionProxyAttachReply(var Source: TNodeInfo; var Dest: TNodeInfo; ReplyCode: Byte): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROXY_REPLY, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 2;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_ATTACH_REPLY;
      NewMessage^.Buffer^.DataArray[1] := ReplyCode;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

function TrySendTractionProxyManageReply(var Source: TNodeInfo; var Dest: TNodeInfo; ResultFlag: Word): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  if IsOutgoingBufferAvailable then
  begin
    if OPStackBuffers_AllocateOPStackMessage(NewMessage, MTI_TRACTION_PROXY_REPLY, Source, Dest, False) then
    begin
      NewMessage^.Buffer^.DataBufferSize := 3;
      NewMessage^.Buffer^.DataArray[0] := TRACTION_PROXY_MANAGE;
      NewMessage^.Buffer^.DataArray[1] := TRACTION_PROXY_MANAGE_RESERVE;
      NewMessage^.Buffer^.DataArray[2] := ResultFlag;
      OutgoingMessage(NewMessage, True);
      Result := True;
    end;
  end;
end;

{$ENDIF}

function TrySendConfigMemoryRead(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; ReadCount: Byte): Boolean;
var
  NewMessage: POPStackMessage;
begin
  Result := False;
  NewMessage := nil;
  if OPStackBuffers_AllocateDatagramMessage(NewMessage, Node^.Info, Dest, 0) then
  begin
    NewMessage^.Buffer^.DataBufferSize := 8;
    NewMessage^.Buffer^.DataArray[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
    NewMessage^.Buffer^.DataArray[1] := MCP_COMMAND_READ or MCP_NONE;         // Address is in byte 6
    NewMessage^.Buffer^.DataArray[2] := Byte( StartAddress shr 24);
    NewMessage^.Buffer^.DataArray[3] := Byte( StartAddress shr 16);
    NewMessage^.Buffer^.DataArray[4] := Byte( StartAddress shr 8);
    NewMessage^.Buffer^.DataArray[5] := Byte( StartAddress);
    NewMessage^.Buffer^.DataArray[6] := AddressSpace;
    NewMessage^.Buffer^.DataArray[7] := ReadCount;
    PDatagramBuffer( PByte( NewMessage^.Buffer))^.iStateMachine := STATE_DATAGRAM_SEND;     // This is a send so start the statemachine in the correct place for a send
    OPStackNode_OutgoingMessageLink(Node, NewMessage);
    Result := True;
  end;
end;

function TrySendConfigMemoryReadReply(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; ReadCount: Byte; ReadData: PByte; Success: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
  DatagramBufferPtr: PDatagramBuffer;
  i: Integer;
begin
  Result := False;
  NewMessage := nil;
  if OPStackBuffers_AllocateDatagramMessage(NewMessage, Node^.Info, Dest, 0) then
  begin
    DatagramBufferPtr :=  PDatagramBuffer( PByte( NewMessage^.Buffer));
    DatagramBufferPtr^.DataArray[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
    if Success then
      DatagramBufferPtr^.DataArray[1] := MCP_COMMAND_READ_REPLY_OK or MCP_NONE        // Address is in byte 6
    else
      DatagramBufferPtr^.DataArray[1] := MCP_COMMAND_READ_REPLY_FAIL or MCP_NONE;
    DatagramBufferPtr^.DataArray[2] := Byte( StartAddress shr 24);
    DatagramBufferPtr^.DataArray[3] := Byte( StartAddress shr 16);
    DatagramBufferPtr^.DataArray[4] := Byte( StartAddress shr 8);
    DatagramBufferPtr^.DataArray[5] := Byte( StartAddress);
    DatagramBufferPtr^.DataArray[6] := AddressSpace;
    if Success then
    begin
      DatagramBufferPtr^.DataBufferSize := 7;
      for i := 0 to ReadCount - 1 do
      begin
        DatagramBufferPtr^.DataArray[NewMessage^.Buffer^.DataBufferSize] := ReadData^;
        Inc(DatagramBufferPtr^.DataBufferSize);
        Inc(ReadData);
      end;
    end else
    begin    
      DatagramBufferPtr^.DataBufferSize := 9;
      DatagramBufferPtr^.DataArray[7] := 0;             // Error code TODO:
      DatagramBufferPtr^.DataArray[8] := 0;
    end;

    DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_SEND;     // This is a send so start the statemachine in the correct place for a send
    OPStackNode_OutgoingMessageLink(Node, NewMessage);
    Result := True;
  end;
end;

function TrySendConfigMemoryWriteReply(Node: POpenLCBNode; var Dest: TNodeInfo; AddressSpace: Byte; StartAddress: DWord; Success: Boolean): Boolean;
var
  NewMessage: POPStackMessage;
  DatagramBufferPtr: PDatagramBuffer;
  i: Integer;
begin
  Result := False;
  NewMessage := nil;
  if OPStackBuffers_AllocateDatagramMessage(NewMessage, Node^.Info, Dest, 0) then
  begin
    DatagramBufferPtr :=  PDatagramBuffer( PByte( NewMessage^.Buffer));
    DatagramBufferPtr^.DataArray[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
    if Success then
      DatagramBufferPtr^.DataArray[1] := MCP_COMMAND_WRITE_REPLY_OK or MCP_NONE        // Address is in byte 6
    else
      DatagramBufferPtr^.DataArray[1] := MCP_COMMAND_WRITE_REPLY_FAIL or MCP_NONE;
    DatagramBufferPtr^.DataArray[2] := Byte( StartAddress shr 24);
    DatagramBufferPtr^.DataArray[3] := Byte( StartAddress shr 16);
    DatagramBufferPtr^.DataArray[4] := Byte( StartAddress shr 8);
    DatagramBufferPtr^.DataArray[5] := Byte( StartAddress);
    DatagramBufferPtr^.DataArray[6] := AddressSpace;
    if Success then
      DatagramBufferPtr^.DataBufferSize := 7
    else begin
      DatagramBufferPtr^.DataBufferSize := 9;
      DatagramBufferPtr^.DataArray[7] := 0;             // Error code TODO:
      DatagramBufferPtr^.DataArray[8] := 0;
    end;

    DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_SEND;     // This is a send so start the statemachine in the correct place for a send
    OPStackNode_OutgoingMessageLink(Node, NewMessage);
    Result := True;
  end;
end;

function TrySendConfigMemoryWrite(Node: POpenLCBNode; var Dest: TNodeInfo;
  AddressSpace: Byte; StartAddress: DWord; WriteCount: Byte;
  WriteData: PDatagramDataArray): Boolean;
var
  NewMessage: POPStackMessage;
  DatagramBuffer: PDatagramBuffer;
  i: Integer;
begin
  Result := False;
  NewMessage := nil;
  if OPStackBuffers_AllocateDatagramMessage(NewMessage, Node^.Info, Dest, 0) then
  begin
    DatagramBuffer := PDatagramBuffer( PByte(NewMessage^.Buffer));
    DatagramBuffer^.DataBufferSize := 8;
    DatagramBuffer^.DataArray[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
    DatagramBuffer^.DataArray[1] := MCP_COMMAND_WRITE or MCP_NONE;         // Address is in byte 6
    DatagramBuffer^.DataArray[2] := Byte( StartAddress shr 24);
    DatagramBuffer^.DataArray[3] := Byte( StartAddress shr 16);
    DatagramBuffer^.DataArray[4] := Byte( StartAddress shr 8);
    DatagramBuffer^.DataArray[5] := Byte( StartAddress);
    DatagramBuffer^.DataArray[6] := AddressSpace;
    if WriteCount > 64 then
      WriteCount := 64;
    for i := 0 to WriteCount - 1 do
      DatagramBuffer^.DataArray[i + 7] := WriteData^[i];
    DatagramBuffer^.DataBufferSize := WriteCount + 7;

    PDatagramBuffer( PByte( NewMessage^.Buffer))^.iStateMachine := STATE_DATAGRAM_SEND;  // This is a send so start the statemachine in the correct place for a send
    OPStackNode_OutgoingMessageLink(Node, NewMessage);
    Result := True;
  end;

end;

end.