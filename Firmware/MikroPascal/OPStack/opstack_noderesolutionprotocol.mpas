unit opstack_noderesolutionprotocol;

uses
  opstackdefines;
  
const
  MAX_NODE_INFO_CACHE = 256;
  
type
  TNodeInfoSortedArray = array[MAX_NODE_INFO_CACHE] of TNodeInfo;
  
  TNodeInfoCache = record
    AliasSortedArray: TNodeInfoSortedArray;
    Count: Word;
  end;
  
var
  NodeInfoCache: TNodeInfoCache;

procedure NRP_Initialize;
function NRP_Add(var NodeInfo: TNodeInfo): Boolean;
procedure NRP_RemoveByAliasID(AliasID: Word);
procedure NRP_RemoveByNodeID(var NodeID: TNodeID);
function NRP_FindByNodeAlias(AliasID: Word): PNodeInfo;
function NRP_FindByNodeID(var NodeID: TNodeID): PNodeInfo;
procedure NRP_Flush;

implementation

  {
function SearchForInsertionPointInOrderedList(AliasID: Word): Integer;
var
  i: Integer;
begin
  Result := -1;
  for i := 0 to NodeInfoCache.Count - 1 do
  begin
    if AliasID < NodeInfoCache.AliasSortedArray[i].AliasID then
    begin
      Result := i;
      Break
    end
  end;
end;

function BinarySearchByTargetAlias(TargetAlias: Word): Integer;
var
  First, Last, Middle: Integer;
  Found: Boolean;
begin
  Result := -1;
  First := 0;
  Last := NodeInfoCache.Count - 1;
  Found := False;
  while (Last >= First) and not Found do
  begin
    Middle := (First + Last) div 2;
    if TargetAlias < NodeInfoCache.AliasSortedArray[Middle].AliasID then
      Last := Middle - 1
    else begin
      if TargetAlias > NodeInfoCache.AliasSortedArray[Middle].AliasID then
        First := Middle + 1
      else
        Found := True;
    end
  end;
  if Found then
    Result := Middle
end;
      }
      
procedure NRP_Initialize;
begin
  NRP_Flush;
end;

procedure NRP_Flush;
var
  i: Integer;
begin
  NodeInfoCache.Count := 0;
  for i := 0 to MAX_NODE_INFO_CACHE - 1 do
  begin
    NodeInfoCache.AliasSortedArray[i].ID[0] := 0;
    NodeInfoCache.AliasSortedArray[i].ID[1] := 0;
    NodeInfoCache.AliasSortedArray[i].AliasID := 0;
  end;
end;

function NRP_Add(var NodeInfo: TNodeInfo): Boolean;
var
  i: Integer;
  ExistingNode: PNodeInfo;
begin
  Result := False;
  ExistingNode := NRP_FindByNodeID(NodeInfo.ID);
  if ExistingNode = nil then
  begin
    if NodeInfoCache.Count < MAX_NODE_INFO_CACHE then
    begin
      i := 0;
      while i < MAX_NODE_INFO_CACHE do
      begin
        if NodeInfoCache.AliasSortedArray[i].AliasID = 0 then                     // Raw Linear Search
        begin
          NodeInfoCache.AliasSortedArray[i] := NodeInfo;
          Inc(NodeInfoCache.Count);
          Result := True;
          Break;
        end;
        Inc(i);
      end;
    end else
    begin
      ExistingNode^ := NodeInfo;
      Result := True;
    end;
  end;
end;

procedure NRP_RemoveByAliasID(AliasID: Word);
var
  NodeInfo: PNodeInfo;
begin
  NodeInfo := NRP_FindByNodeAlias(AliasID);
  if NodeInfo <> nil then
  begin
    NodeInfo^ := NULL_NODE_INFO;
    Dec(NodeInfoCache.Count)
  end;
end;

procedure NRP_RemoveByNodeID(var NodeID: TNodeID);
var
  NodeInfo: PNodeInfo;
begin
  NodeInfo := NRP_FindByNodeID(NodeID);
  if NodeInfo <> nil then
  begin
    NodeInfo^ := NULL_NODE_INFO;
    Dec(NodeInfoCache.Count)
  end;
end;

function NRP_FindByNodeID(var NodeID: TNodeID): PNodeInfo;
var
  i: Integer;
begin
  Result := nil;
  i := 0;
  while i < NodeInfoCache.Count do
  begin
    if NodeInfoCache.AliasSortedArray[i].ID[0] = NodeID[0] then                     // Raw Linear Search
      if NodeInfoCache.AliasSortedArray[i].ID[1] = NodeID[1] then
      begin
        Result := @NodeInfoCache.AliasSortedArray[i];
        Break;
      end;
    Inc(i);
  end;
end;

function NRP_FindByNodeAlias(AliasID: Word): PNodeInfo;
var
  i: Integer;
begin
  Result := nil;
  i := 0;
  while i < NodeInfoCache.Count do
  begin
    if NodeInfoCache.AliasSortedArray[i].AliasID = AliasID then                     // Raw Linear Search
    begin
      Result := @NodeInfoCache.AliasSortedArray[i];
      Break;
    end;
    Inc(i);
  end;
end;

end.