program DoublePulse;

{ Declarations section }

{$DEFINE UART}

const
  {****** MCU Setup Parameters ******}
  // Frequency the CPU is running
  OSCILLATORFREQ = 32e6;
  // How many cycles of the Oscillator for each master timer cycle
  CLOCKDIVIDER = 2;
  // Frequency of the master timer cloc
  CLOCK_FREQ = real( OSCILLATORFREQ/CLOCKDIVIDER);
  // The period of a single clock timer tick (in seconds)
  CLOCK_PERIOD = real( 1/CLOCK_FREQ);

  {****** Engine Parameters *******}
  // Engine cycles
  ENGINE_CYCLE = 4;
  // Number of Cylinders (assuming not a dual point distributor)
  CYLINDERS = 8;
  // Revolutions per Cycle
  REV_PER_CYCLE = ENGINE_CYCLE/2;

  { ****** Sofer parameters to define limits for decision logic in the program ******}
  // How many change notifications (firings) before we claim the user is cranking the engine
  MIN_FIRING_COUNT_TO_DETECT_CRANKING = 4;
  // Smoothing RPM Filter Depth and How many valid RPM spark pulses detected in the pin change notification to
  // move on in the Stat machine before moving out of Cranking
  RPM_FILTER_LEN = 8;
  // How much of a distributor spark period to blank out before looking for the next pin change notification
  BLANK_PERCENT = 0.40;
  
  // Below this and we say we stalled and restart the Statemachine
  STALL_RPM = 50;
  STALL_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE / (STALL_RPM * CYLINDERS));
  
  // Below this and we say we stalled and restart the Statemachine
  MAX_RPM = 7000;
  MAX_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE / (MAX_RPM * CYLINDERS));
  
  // Fixed RPM to send to the FiTech during cranking
  DEFAULT_CRANKING_RPM = 100;
  DEFAULT_CRANKING_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE/ (DEFAULT_CRANKING_RPM * CYLINDERS));
  
  // RPM where the Statemachine converts from Cranking to Running
  DEFAULT_MIN_RUNNING_RPM = 400;
  DEFAULT_MIN_RUNNING_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE / (DEFAULT_MIN_RUNNING_RPM * CYLINDERS));

  // Statemachine states
  STATE_STALLED = 0;               // Engine is not running
  STATE_DETECT_CRANKING = 1;       // Detect the owner has started to crank
  STATE_CRANKING = 2;              // Detects that the engine has started
  STATE_RUNNING = 3;               // RPM indicates we started so start averaging the pin change notification for the FiTech Output
  
  TACH_LO = 1;                     // Pin output for a Tach Lo output (common collector amplifier)
  TACH_HI = 0;                     // Pin output for a Tach Hi output (common collector amplifier)

  COILNEG = B0;    // Bit 0        // The Pin index in the associated Port for the Coil Negative Input
  TACHOUT = B9;    // Bit 9        // The Pin index in the associated Port for the Tach Output

type
  TFilterInfoRec = record
    // RPM Averaging array and index counter
    Distributor_Period_Filter_Array: array[RPM_FILTER_LEN] of real;
    Distributor_Period_Filter_Counter: Integer;
    CurrentAverage: real;
    Previous_Distributor_Period: real;
    Distrbutor_Period_ShortError, Distrbutor_Period_LongError: LongInt;
    DetectedFiringCount: Word;
  end;
  
  TParameters = record
    BlankingPercent: real;
  end;
  
  TDebug = record
    Active: Boolean;
    Trigger: Boolean;
    PulseCount: Integer;
    RPM: LongInt;
  end;
  
var
  CoilNeg_Port: Word at PORTA;
  CoilNeg_Pin: sbit at LATA0_bit;
  CoilNeg_TRIS: sbit at TRISA0_bit;

  TachPort: Word at PORTB;
  TachOut_Pin: sbit at LATB9_bit;
  TachOut_TRIS: sbit at TRISB9_bit;

  HeartBeat_Port: Word at PORTA;
  HeartBeat_Pin: sbit at LATA3_bit;
  HeartBeat_TRIS: sbit at TRISA3_bit;

  Debug_Port: Word at PORTA;
  Debug_Pin: sbit at LATA2_bit;
  Debug_TRIS: sbit at TRISA2_bit;

  State: Byte;
  Last_RPM_Global: real;
  PeriodErrorLogging, RPMLogging, StateLogging, RealtimeRPMLogging, StallIRQLogging, AvgPeriodLogging: Boolean;
  
  FilterInfo: TFilterInfoRec;
  Parameters: TParameters;
  Debug: TDebug;

{$IFDEF UART}
procedure PrintLine(var Buffer: array[128] of char);
begin
  UART_Write_Text(Buffer);
  UART2_Write(#13);
end;

procedure PrintState;
var
  Buffer: array[6] of char;
begin
  IntToStr(State, Buffer);
  PrintLine(Buffer);
end;

procedure PrintReal(AReal: real);
var
  Buffer: array[23] of char;
begin
  FloatToStr(AReal, Buffer);
  PrintLine(Buffer);
end;

procedure PrintRPM;
begin
  PrintReal(Last_RPM_Global);
end;

procedure PrintAveragePeriod;
begin
  PrintReal(FilterInfo.CurrentAverage);
end;

procedure PrintDistributorPeriodErrors;
var
  Buffer: array[10] of char;
begin
  LongWordToStr(FilterInfo.Distrbutor_Period_ShortError, Buffer);
  UART2_Write_Text('Short T: ');
  PrintLine(Buffer);
  LongWordToStr(FilterInfo.Distrbutor_Period_LongError, Buffer);
  UART2_Write_Text('Long T: ');
  PrintLine(Buffer);
end;

procedure PrintHelp;
begin
  PrintLine('0 : Disables all Logging');
  PrintLine('s,S : State Logging');
  PrintLine('r,R : Toggle RPM Logging');
  PrintLine('t,T : Toggle Realtime RPM Logging (can cause interrupt timing overrun issues)');
  PrintLine('p,P : Toggle Peroid Error Logging');
  PrintLine('c,C : Clear Distrbutor_Period_Errors counter');
  PrintLine('i,I : Stall Interrupt Logging');
  PrintLine('a,A : Toggle Average Period Logging');
  PrintLine('b,B : Set Blanking Percent send as 10 (10%), 50 (50%) etc');
end;

{$ENDIF}
// Converts an RPM into a Period Time between each cyclinder firing in Seconds
function RPM_To_Distributor_Period(RPM: real): real;
begin
  Result := 0.0;
  if RPM > 0 then
    Result := real( 60 * REV_PER_CYCLE / (RPM * CYLINDERS ));
end;

// Converts a Period of Time between cylinder firings into RPM
function Distributor_Period_To_RPM(Distributor_Period: real): real;
begin
  Result := 0.0;
  if Distributor_Period > 0.0 then
    Result := real( 60 / Distributor_Period / CYLINDERS * REV_PER_CYCLE)
end;

// Converts a DWORD Timer Count to actual elapsed time (seconds) scaled by the Timer Divider (used 1, 8, 32, 64, etc)
function TimerCounts_To_Time(TimerCounts: DWORD; Divider: Word): real;
begin
  Result := real( TimerCounts) * CLOCK_PERIOD * real( Divider);
end;

// Converts time (seconds) to a DWORD Timer Count using the passed Timer Divider (1, 8, 32, 64, etc)
function Time_To_TimerCounts(Time: real; Divider: Word): DWORD;
begin
  Result := DWORD( Time / (CLOCK_PERIOD * real( Divider)))
end;

// Calculates the average of the items in the Distributor Period Array
function AverageDistributorPeriod: real;
var
  i: Integer;
begin
  Result := 0.0;
  for i := 0 to RPM_FILTER_LEN - 1 do
    Result := Result + FilterInfo.Distributor_Period_Filter_Array[i];
  Result := Result / RPM_FILTER_LEN
end;

function ValidPeriod(Period: real): Boolean;
begin      // Result := True; Exit;
  if State <> STATE_RUNNING then
    Result := (Period < STALL_DISTRIBUTOR_PERIOD) and (Period > (DEFAULT_MIN_RUNNING_DISTRIBUTOR_PERIOD / 2)) // Arbitrary number though it can't be the Min Running RPM or it won't jump to the Running State
  else
    Result := (Period < STALL_DISTRIBUTOR_PERIOD) and (Period > MAX_DISTRIBUTOR_PERIOD)
end;

procedure UpdateDistributorArrayAndAverage(NewDistributorTime: real);
begin
  if ValidPeriod(NewDistributorTime) then
  begin
  // Insert the lastest item in the array
    FilterInfo.Distributor_Period_Filter_Array[FilterInfo.Distributor_Period_Filter_Counter] := NewDistributorTime;
    Inc(FilterInfo.Distributor_Period_Filter_Counter);
    // Update the array counter
    if FilterInfo.Distributor_Period_Filter_Counter >= RPM_FILTER_LEN then
      FilterInfo.Distributor_Period_Filter_Counter := 0;
    FilterInfo.CurrentAverage := AverageDistributorPeriod;
  end
end;

// Sends the delayed blanking pulse to the FiTech and stalls the CN Interrupt for the blanking
procedure TriggerOutput_With_Wait(BlankingTime: real);
begin
  TachOut_Pin := TACH_Hi;
  Delay_Cyc_Long( Time_To_TimerCounts(BlankingTime * Parameters.BlankingPercent, 1));  // Just a bit more than 15 degrees dwell (out of 45
  TachOut_Pin := TACH_LO;
end;

procedure InitializeStalledState;
var
  i: Integer;
begin
  // Shut off the Cranking Trigger Timer if we stalled
  TachOut_Pin := TACH_LO;
  TON_T4CON_bit := 0;
  Last_RPM_Global := 0.0;
  FilterInfo.Distributor_Period_Filter_Counter := 0;
  FilterInfo.DetectedFiringCount := 0;
  FilterInfo.CurrentAverage := 0.0;
  for i := 0 to RPM_FILTER_LEN - 1 do
    FilterInfo.Distributor_Period_Filter_Array[i] := 0.0;
  FilterInfo.Distributor_Period_Filter_Counter := 0;
end;

procedure interrupt_TMR3_RPM_Measurment_And_Stall_Timer(); iv IVT_ADDR_T3INTERRUPT;
begin
  // Reset the RPM/Stall Timer; Keep looking for stalls as that is the only way to enter this
  TMR3HLD := $0000;
  TMR2 := $0000;
  InitializeStalledState;
  State := STATE_STALLED;
  {$IFDEF UART}if StallIRQLogging then PrintLine('Stall Detected - IRQ');{$ENDIF}
  T3IF_bit := 0;                 // Reset Interrupt Flag
end;

procedure interrupt_TMR5_Cranking_FiTech_Triggger_Timer(); iv IVT_ADDR_T5INTERRUPT;
begin
  // Keep firing the FiTech at a predefined rate during cranking
  TachOut_Pin := not(TachOut_Pin);
  T5IF_bit := 0;                 // Reset Interrupt Flag
end;

procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  LastDistributorPeriod: real;
  DistributorPeriodTimerCount: DWord;
begin
  PortCopy := CoilNeg_Port;    // Clear all changes
  // Detect rising edges only
  if PortCopy.COILNEG = 1 then
  begin
    // Capture RPM/Stall Timer contents
    LoWord(DistributorPeriodTimerCount) := TMR2;
    HiWord(DistributorPeriodTimerCount) := TMR3HLD;
    // Reset the RPM/Stall Timer
    TMR3HLD := $0000;
    TMR2 := $0000;
    // Makes sure it can't jump to the stall interrupt
    T3IF_bit := 0;

    if State = STATE_STALLED then
    begin
      Last_RPM_Global := 0.0;
      LastDistributorPeriod := 0.0;
    end else
    begin
      LastDistributorPeriod := TimerCounts_To_Time(DistributorPeriodTimerCount, 1);
      Last_RPM_Global := Distributor_Period_To_RPM(LastDistributorPeriod);
    end;
    
    {$IFDEF UART}if RealtimeRPMLogging then PrintRPM;{$ENDIF}

    case State of
      STATE_STALLED :
        begin
          InitializeStalledState;
          {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          State := STATE_DETECT_CRANKING;
          {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
        end;
      STATE_DETECT_CRANKING :
        begin
          Inc(FilterInfo.DetectedFiringCount);
          
          // Did we reach the correct number of stable pulses to move on?
          if FilterInfo.DetectedFiringCount >= MIN_FIRING_COUNT_TO_DETECT_CRANKING then
          begin
            State := STATE_CRANKING;
            TON_T4CON_bit := 1;                // ON
            {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          end;
        end;
      STATE_CRANKING :
        begin
          // Try to update the average will cranking
          UpdateDistributorArrayAndAverage(LastDistributorPeriod);
          
          // When the average looks like it is running then stop the fixed pulses
          if FilterInfo.CurrentAverage < DEFAULT_MIN_RUNNING_DISTRIBUTOR_PERIOD then
          begin
            TON_T4CON_bit := 0;                // OFF
            State := STATE_RUNNING;
            {$IFDEF UART}if StateLogging then PrintState;{$ENDIF}
          end;
        end;
      STATE_RUNNING :
        begin
          UpdateDistributorArrayAndAverage(LastDistributorPeriod);
          // FUTURE:  Maybe just update the timer with the FiTech timeout for the period?????
          TriggerOutput_With_Wait(FilterInfo.CurrentAverage);
      end else
        State := STATE_STALLED;     // State is messed up, start over
    end;    // Case
  end;
  FilterInfo.Previous_Distributor_Period := LastDistributorPeriod;
  // Some free debounce guarding by putting this at the end
  CNIF_bit := 0;
end;


var
  StrBuffer: array[128] of Char;
  DelimiterStr: string[1];
  TempR: real;
  DebugPeriod, DebugBlankPeriod: real;
  i: Integer;
begin
  { Main program }
  ANSA := 0;        // Make them all Digital
  ANSB := 0;

  State := STATE_STALLED;
  StateLogging := False;
  RPMLogging := False;
  PeriodErrorLogging := False;
  RealtimeRPMLogging := False;
  StallIRQLogging := FAlse;
  AvgPeriodLogging := False;
  FilterInfo.Distributor_Period_Filter_Counter := 0;
  FilterInfo.CurrentAverage := 0.0;
  FilterInfo.Distrbutor_Period_ShortError := 0;
  FilterInfo.Distrbutor_Period_LongError := 0;
  FilterInfo.DetectedFiringCount := 0;
  
  Parameters.BlankingPercent := BLANK_PERCENT;
  
  Debug.Active := False;
  Debug.Trigger := False;
  Debug.PulseCount := 0;
  Debug.RPM := 0;

  TachOut_Pin := TACH_LO;   // Set it low
  HeartBeat_Pin := 0;
  Debug_Pin := 0;

  CoilNeg_TRIS := 1;   // Input
  TachOut_TRIS := 0;   // Tach Output
  HeartBeat_TRIS := 0; // Output
  Debug_TRIS := 0;

  // Clock Setup
  CLKDIV := 0;                      // Set both dividers to 1:1 and don't use the DOZE to reset dividers (power saving feature)
  
  // RPM Timer
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 0;                // OFF
  TON_T3CON_bit := 0;                // OFF
  T32_T2CON_bit := 1;                // 32 Bit mode
  TCS_T2CON_bit := 0;                // Internal source
  TGATE_T2CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T2CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T2CON_bit := 0;
  PR2 := LoWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  PR3 := HiWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  TMR3HLD := 0;
  TMR2 := 0;
  // Upper Timer fires the interrupts
  T3IP_0_bit := 1;                   // priority
  T3IP_1_bit := 0;
  T3IP_2_bit := 0;
  T3IF_bit := 0;                     // clear T1IF
  T3IE_bit := 1;                     // enable Timer1 interrupts
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 1;                // ON
  
  // Fixed Cranking RPM Timer (fires at 1/2 the period)
  // Lower Timer controls the setup Setup
  TON_T4CON_bit := 0;                // OFF
  TON_T5CON_bit := 0;                // OFF
  T32_T4CON_bit := 1;                // 32 Bit mode
  TCS_T4CON_bit := 0;                // Internal source
  TGATE_T4CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T4CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T4CON_bit := 0;
  PR4 := LoWord( DWORD(DEFAULT_CRANKING_DISTRIBUTOR_PERIOD/CLOCK_PERIOD/2));
  PR5 := HiWord( DWORD(DEFAULT_CRANKING_DISTRIBUTOR_PERIOD/CLOCK_PERIOD/2));
  TMR5HLD := 0;
  TMR4 := 0;
  // Upper Timer fires the interrupts
  T5IP_0_bit := 1;                   // priority
  T5IP_1_bit := 0;
  T5IP_2_bit := 0;
  T5IF_bit := 0;                     // clear T1IF
  T5IE_bit := 1;                     // enable Timer1 interrupts


  {$IFDEF UART}
  UART2_Init(115200);
  Delay_ms(100);
  
  UART2_Write_Text('STALL_DISTRIBUTOR_PERIOD=');
  FloatToStr(STALL_DISTRIBUTOR_PERIOD, StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD)=');
  LongWordToStr(DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD), StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('PRL=');
  WordToStr(TMR2, StrBuffer);
  UART2_Write_Text(StrBuffer);
  UART_Write_Text('  PRH=');
  WordToStr(TMR3HLD, StrBuffer);
  UART_Write_Text(StrBuffer);
  UART2_Write(#13);

  PrintHelp;
  {$ENDIF}

  // ALWAYS DO THIS LAST
  // Pin change Notification
  CN2IE_bit := 1;  // Pin Change Notification Interrupt on RA0
  CNIP_0_bit := 1;  // Interrupt priority = 7
  CNIP_1_bit := 1;
  CNIP_2_bit := 1;
  CNIF_bit := 0;    // Clear Pin Change Interrupt flag
  CNIE_bit := 1;    // Enable all Pin Change Interrupts


  while true do
  begin
    Delay_ms(100);
    {$IFDEF UART}
    if UART2_Data_Ready then
    begin
      case UART2_Read of
        '0' :
          begin
            StateLogging := False;
            PeriodErrorLogging := False;
            RealtimeRPMLogging := False;
            StallIRQLogging := False;
            RPMLogging := False;
            AvgPeriodLogging := False;
          end;
        's', 'S' :
          begin
            StateLogging := not StateLogging;
            if StateLogging then PrintLine('State Logging ON') else
              PrintLine('State Logging OFF');
          end;
        'c', 'C' : 
          begin
            FilterInfo.Distrbutor_Period_ShortError := 0;
            FilterInfo.Distrbutor_Period_LongError := 0;
            PrintLine('Counts Cleared');
          end;
        'b', 'B' :
          begin
            DelimiterStr[0] := #13;
            DelimiterStr[1] := $00;
            PrintLine('Reading Blanking Value');
            UART2_Read_Text(StrBuffer, DelimiterStr, 2);
            UART2_Write_Text('Read: ');
            PrintLine(StrBuffer);
            TempR := real( StrToInt(StrBuffer)) * 0.01;
            if TempR > 0.05 then
            begin
              Parameters.BlankingPercent := TempR;  // This could cause a burp if the interrupt uses it
              UART2_Write_Text('New Blanking Value ');
              FloatToStr(Parameters.BlankingPercent * 100, StrBuffer);
              UART2_Write_Text(StrBuffer);
              PrintLine('%');
            end else
            begin
              PrintLine('Value Read was too small must be greater than 5%');
              FloatToStr(Parameters.BlankingPercent * 100, StrBuffer);
              UART2_Write_Text(StrBuffer);
              PrintLine('%');
            end;
          end;
        'p', 'P' :
          begin
            PeriodErrorLogging := not PeriodErrorLogging;
            if PeriodErrorLogging then PrintLine('Period Error Logging ON') else
              PrintLine('Period Error Logging OFF');
          end;
        'r', 'R' :
          begin
            RPMLogging := not RPMLogging;
            if RPMLogging then PrintLine('RPM Logging ON') else
              PrintLine('RPM Logging OFF');
          end;
        't', 'T' :
          begin
            RealtimeRPMLogging := not RealtimeRPMLogging;
            if RealtimeRPMLogging then PrintLine('RealTime RPM Logging ON') else
              PrintLine('RealTime RPM Logging OFF');
          end;
        'i', 'I' :
          begin
            StallIRQLogging := not StallIRQLogging;
            if StallIRQLogging then PrintLine('RealTime RPM Logging ON') else
              PrintLine('RealTime RPM Logging OFF');
          end;
          'a', 'A' :
          begin
            AvgPeriodLogging := not AvgPeriodLogging;
            if StallIRQLogging then PrintLine('Avg T Logging ON') else
              PrintLine('Avg T Logging OFF');
          end;
        '?', 'h', 'H' : 
          begin
            PrintHelp;
          end;
      end;
    end;
    
    If RPMLogging then
      PrintRPM;
    if AvgPeriodLogging then
      PrintAveragePeriod;
    if StateLogging then
      PrintState;
    if PeriodErrorLogging then
      PrintDistributorPeriodErrors;
    {$ENDIF}
    // Waitin for Pin Change Interrupt
    HeartBeat_Pin := not HeartBeat_Pin;
  end;
end.