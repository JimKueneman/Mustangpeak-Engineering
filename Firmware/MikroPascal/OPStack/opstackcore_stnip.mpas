unit opstackcore_stnip;

{$I Options.inc}

uses
  opstack_utilities,
  opstackcore_basic,
  template_node,
  template_vnode,
  opstack_node,
  opstack_buffers,
  opstack_defines,
  template_configuration,
  template_hardware,
  opstack_events,
  template_buffers,
  opstack_types;

procedure SimpleTrainNodeInfoMessage(DestNode: POpenLCBNode; AMessage: POPStackMessage);
function SimpleTrainNodeInfoRequestHandler(Node: POpenLCBNode; var MessageToSend: POPStackMessage; NextMessage: POPStackMessage): Boolean;
procedure SimpleTrainNodeInfoReply(Node: POpenLCBNode; NextMessage: POPStackMessage);

implementation

procedure ReadConfigStringOffset(ConfigOffset: DWord; MultiFrameStringBufferPtr: PMultiFrameStringBuffer);
var
  i, LocalBufferLen: Integer;
  Buffer: string[STNIP_MAX_STR_LEN];
begin
  for i := 0 to STNIP_MAX_STR_LEN - 1 do
    Buffer[i] := #0;
    
  ConfigurationCallback_ReadConfiguration(ConfigOffset, STNIP_MAX_STR_LEN, @Buffer);
  LocalBufferLen := -1;
  for i := 0 to STNIP_MAX_STR_LEN - 1 do
  begin
    if Buffer[i] = #0 then
    begin
      LocalBufferLen := i;
      Break
    end;
  end;

  if LocalBufferLen > -1 then
  begin
    for i := 0 to LocalBufferLen do       // Need to add the Null so run all the way to BufferLen
    begin
      MultiFrameStringBufferPtr^.DataArray[MultiFrameStringBufferPtr^.DataBufferSize] := Ord( Buffer[i]);
      Inc(MultiFrameStringBufferPtr^.DataBufferSize);
    end
  end else
  begin
    MultiFrameStringBufferPtr^.DataArray[MultiFrameStringBufferPtr^.DataBufferSize] := Ord(#0);
    Inc(MultiFrameStringBufferPtr^.DataBufferSize);
  end
end;

procedure ReadConfigByteOffset(ConfigOffset: DWord; MultiFrameStringBufferPtr: PMultiFrameStringBuffer);
begin
  ConfigurationCallback_ReadConfiguration(ConfigOffset, 1, @MultiFrameStringBufferPtr^.DataArray[MultiFrameStringBufferPtr^.DataBufferSize]);
  Inc(MultiFrameStringBufferPtr^.DataBufferSize);
end;

procedure ReadConfigWordOffset(ConfigOffset: DWord; MultiFrameStringBufferPtr: PMultiFrameStringBuffer);
begin
  ReadConfigByteOffset(ConfigOffset, MultiFrameStringBufferPtr);
  ReadConfigByteOffset(ConfigOffset + 1, MultiFrameStringBufferPtr);
end;

procedure SimpleTrainNodeInfoMessage(DestNode: POpenLCBNode; AMessage: POPStackMessage);
begin
  if AMessage^.MTI = MTI_SIMPLE_TRAIN_NODE_INFO_REPLY then                      // Take a crack at all incoming reply
    OPStackNode_IncomingMessageLink(DestNode, AMessage)
  else                                                                          // Incoming reqests need the node to support it first.
  if OpenLCBUtilities_NodeSupportsProtcol(DestNode, PByte(@PIV_PROTOCOL_SIMPLE_TRAIN_NODE_INFO)) then        // If we don't support this protocol drop it
    OPStackNode_IncomingMessageLink(DestNode, AMessage)
end;

function SimpleTrainNodeInfoRequestHandler(Node: POpenLCBNode; var MessageToSend: POPStackMessage; NextMessage: POPStackMessage): Boolean;
var
  MultiFrameStringBufferPtr: PMultiFrameStringBuffer;
  ConfigOffset: DWord;
  i: Integer;
  StringPtr: ^Char;
  STNIP_BufferPtr: PSTNIP_StringBuffer;
  Full_STNIP_Buffer: TMultiFrameStringDataArrayAsString;
begin
  Result := False;
  MessageToSend := nil;

  if OPStackBuffers_Allocate_MultiFrameString_Message(MessageToSend, MTI_SIMPLE_TRAIN_NODE_INFO_REPLY, NextMessage^.Dest, NextMessage^.Source) then
  begin
    MultiFrameStringBufferPtr := PMultiFrameStringBuffer( PByte( MessageToSend^.Buffer));
    MultiFrameStringBufferPtr^.DataBufferSize := 0;

    ConfigOffset := 0;
    if Node^.iIndex > 0 then
      ConfigOffset := (Node^.iIndex * USER_CONFIGURATION_MEMORY_SIZE);

    Hardware_EnableInterrupts;
    
    STNIP_BufferPtr := @Full_STNIP_Buffer;
    ConfigurationCallback_ReadConfiguration(ConfigOffset + STNIP_OFFSET, USER_MAX_MULTIFRAME_STRING_BYTES, @Full_STNIP_Buffer);
    
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_VERSION - STNIP_OFFSET;
    OpenLCBUtilities_AppendBytesToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, 1, False);   // Version Number
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_ROADNAME - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_CLASS - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_ROADNUMBER - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_TRAINNAME - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_MANUFACTURER - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_OWNER - STNIP_OFFSET;
    OpenLCBUtilities_AppendStringToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, STNIP_MAX_STR_LEN);
    StringPtr := @Full_STNIP_Buffer + STNIP_LEGACY_TECHNOLOGY - STNIP_OFFSET;
    OpenLCBUtilities_AppendBytesToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, 1, False);   // Technology ID
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_TRAIN_ID - STNIP_OFFSET;
    OpenLCBUtilities_AppendBytesToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, 2, True);   // Train ID (Little Endian)
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_SHORT_LONG - STNIP_OFFSET;
    OpenLCBUtilities_AppendBytesToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, 1, True);   // Short/Long Address
    StringPtr := @Full_STNIP_Buffer + STNIP_OFFSET_SPEEDSTEPS - STNIP_OFFSET;
    OpenLCBUtilities_AppendBytesToMultiFrameStringBuffer(StringPtr, MultiFrameStringBufferPtr, 1, False);   // Speed Steps

    Hardware_DisableInterrupts;

    Result := UnLinkDeAllocateAndTestForMessageToSend(Node, MessageToSend, NextMessage);    // Keep trying until we release the buffer to send the next one
  end;
end;

procedure SimpleTrainNodeInfoReply(Node: POpenLCBNode; NextMessage: POPStackMessage);
begin
  if OnSimpleTrainNodeInfoReply <> nil then
    OnSimpleTrainNodeInfoReply(Node, NextMessage);
  UnLinkDeAllocateAndTestForMessageToSend(Node, nil, NextMessage);
end;

end.