program EthernetCanHub;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2015.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-08-10:   Created
//
// * Description:

//
// *****************************************************************************

{$DEFINE ENABLE_UART_INTERFACE}

{.$DEFINE IGNORE_BOOTLOADER_MAPPING}
{.$DEFINE SIMULATE_FLASH_WRITE}

const
  CMD_LINK               = $EF;
  CMD_UNLINK             = $EE;
  CMD_SYNC               = $ED;
  CMD_REQEUST_FLASH_DATA = $80;
  CMD_SET_ADDRESS        = $02;
  CMD_RESET              = $81;
  CMD_ERASE_BLOCKS       = $10;
  CMD_WRITE_BLOCK        = $30;
  CMD_WRITE              = $31;
  CMD_PARAMETERLESS_MASK = $80;  // Messages with no paramters have the high bit set

  CMD_SET_ADDRESS_WRITE  = $00;
  CMD_SET_ADDRESS_ERASE  = $01;

const
  DMACHANNEL_1 = 1;
  DMACHANNEL_0 = 0;
  
  
  
// Bootloader
  {$IFDEF dsPIC33EP32GP502}
    __ERASE_INSTRUCTION_PAGE_SIZE = 512;                                        // 512 instructions
  {$ELSE}
    __ERASE_INSTRUCTION_PAGE_SIZE = 1024;                                       // 1024 instructions
  {$ENDIF}
  
  __ADDRESS_DELTA_PER_INSTRUCTION = 2;                                          // dsPIC33 increments the Address by 2 for each instruction
  
  __ERASE_BUFFER_SIZE = DWord((__ERASE_INSTRUCTION_PAGE_SIZE * 3));             //  * 3 bytes per instruction
  __ERASE_BUFFER_ADDRESS_SIZE = __ERASE_INSTRUCTION_PAGE_SIZE * __ADDRESS_DELTA_PER_INSTRUCTION;
  
  __FLASH_INSTRUCTION_SIZE = __FLASH_SIZE div 3;                                // 3 bytes per instruction
  __FLASH_MAX_ADDRESS = __FLASH_INSTRUCTION_SIZE * __ADDRESS_DELTA_PER_INSTRUCTION;
  
  __BOOT_CODE_SIZE    = DWord(2048);                                             // MUST MAKE SURE THIS IS TRUE
  __BOOT_CODE_INSTRUCTION_SIZE = __BOOT_CODE_SIZE div 3;
  __BOOT_CODE_ADDRESS_SIZE =  __BOOT_CODE_INSTRUCTION_SIZE * __ADDRESS_DELTA_PER_INSTRUCTION;
  
  __BOOT_CODE_ADDRESS = ((__FLASH_MAX_ADDRESS - __BOOT_CODE_ADDRESS_SIZE) div __ERASE_BUFFER_ADDRESS_SIZE)*__ERASE_BUFFER_ADDRESS_SIZE;     // MUST MAKE SURE THIS IS TRUE
  __WRITE_BUFFER_SIZE = DWord(128 * 3);                                                   // 64 Instructions * 3 bytes per instruction

  MAX_FLASH_WRITE_LATCH_COUNT = 2;  // dsPIC33EPxxxGP502's have latches for 2 instructions (3*2 = 6 bytes)
  
const
  BOOTLOADER_STATE_OFF = 0;
  BOOTLOADER_STATE_ON = 1;

const
  BOOT_STATE_REPLY_SYNC = 0;
  BOOT_STATE_REPLY_INFO = 1;
  BOOT_STATE_LISTEN = 2;
  BOOT_STATE_REPLY_WITH_INFO = 3;
  BOOT_STATE_SET_ADDRESS = 4;
  BOOT_STATE_ERASE_BLOCKS = 5;
  BOOT_STATE_WRITE_BLOCK = 6;
  BOOT_STATE_WRITE = 7;
  
const
  FAMILY_PIC16F          = $00;
  FAMILY_PIC16F_ENHANCED = $01;
  FAMILY_PIC18F          = $02;
  FAMILY_PIC24           = $03;
  FAMILY_dsPIC30         = $04;
  FAMILY_dsPIC33         = $05;
  FAMILY_PIC32           = $06;

const
  BOOTINFO_REC_SIZE = 61;

type
  TRevision = array[0..1] of Byte;
  
type
  TBootInfo = record
    StructSize: Word;     // Size of this Structure     2+(6*4)+1+2+32=57
    EraseBlockSize: DWord;
    WriteBufferSize: DWord;
    ProgramFlashSize: DWord;
    BootloaderAddress: DWord;
    BootloaderSize: DWord;
    ConfigurationAddress: DWord;
    McuFamily: Byte;
    Revision: TRevision;
    ApplicationName: string[32];
  end;

// Main application

type
  TSpiOutBuffer = record
    GridConnectStr: TGridConnectString;
    OpenLcbBuffer: TOpenLCBCanBuffer;
  end;

var
  SpiOutBuffer: TSpiOutBuffer;
  InvalidSpiReceives: DWord;
  InSync, Bootloading: Boolean;

  
procedure InitBootloader;
begin
  SPIEN_SPI1STAT_bit := 0;
  // Disable the CAN module and DMA
  DMA2IE_bit := 0;
  DMA3IE_bit := 0;
  CHEN_DMA2CON_bit := 0;
  CHEN_DMA3CON_bit := 0;
  DMA2PAD := Word(0);
  DMA3PAD := Word(0);
  DMA2REQ := 0;
  DMA3REQ := 0;
  DMA0CNT := 0;
  DMA1CNT := 0;

  // Diable the SPI module and DMA
  DMA0IE_bit := 0;
  DMA1IE_bit := 0;
  CHEN_DMA0CON_bit := 0;
  CHEN_DMA1CON_bit := 0;
  DMA0PAD := Word(0);
  DMA1PAD := Word(0);
  DMA0REQ := 0;
  DMA1REQ := 0;
  SPI1IE_bit := 0;
  DMA2CNT := 0;
  DMA3CNT := 0;

  // No timers
  TON_T1CON_bit := 0;
  TON_T2CON_bit := 0;
  TON_T3CON_bit := 0;
  TON_T4CON_bit := 0;
  TON_T5CON_bit := 0;

  SPIBEN_SPI1CON2_bit := 0;
end;

procedure SendByte(AByte: Byte);
begin
  while SPITBF_SPI1STAT_bit = 1 do;  // Wait for the Tx Buffer to empty
  SPI1BUF := AByte;
end;

function Flash_Read_24(Address: DWord): DWord;{$IFNDEF IGNORE_BOOTLOADER_MAPPING}org __BOOT_CODE_ADDRESS + $500;{$ENDIF}
begin
  TBLPAG := Higher(Address);
  W0 := Word(Address);
  asm
    TBLRDH [W0],W3 // Read high byte to W3
    TBLRDL [W0],W4 // Read low word to W4
  end;
  Result := W4;
  Higher(Result) := Lo(W3);
end;

procedure Flash_Erase_Block(Address: DWord; Blocks: Integer);{$IFNDEF IGNORE_BOOTLOADER_MAPPING}org __BOOT_CODE_ADDRESS + $500;{$ENDIF}
var
  iBlock: Integer;
begin
  for iBlock := 0 to Blocks - 1 do
  begin
    // Setup the Flash Address to erase
    NVMADRU := Higher(Address);
    NVMADR := Word(Address);
    // Setup the Flash to Write and Erase a Page
    NVMCON := $4003;
    // Disable interrupts for a few cycles
    asm
      DISI #06
      // Write the KEY Sequence
      MOV #0x55, W0 
      MOV W0, NVMKEY 
      MOV #0xAA, W0 
      MOV W0, NVMKEY
      // Start the erase operation
      BSET NVMCON, #15
      // Insert two NOPs after the erase cycle (required)
      NOP
      NOP
    end;
    Address := Address + __ERASE_BUFFER_ADDRESS_SIZE;
  end;
end;

procedure Flash_Write_24(Address: DWord; var Buffer: array[__WRITE_BUFFER_SIZE] of Byte; ByteCount: Integer); {$IFNDEF IGNORE_BOOTLOADER_MAPPING}org __BOOT_CODE_ADDRESS + $400;{$ENDIF}
var 
  InstructionHiWord, InstructionLoWord: Word;
  iBuffer, iLatch, NormalizedByteCount: Integer;
begin
  iBuffer := 0;
  // Make the Byte Count a mulitple of the number of latches
  NormalizedByteCount := ByteCount + (ByteCount mod MAX_FLASH_WRITE_LATCH_COUNT);
  
  // Setup the Flash Address to erase
  NVMADRU := Higher(Address);
  NVMADR := Word(Address);
  // Point to the latches
  TBLPAG := Higher($FA0000);
  W8 := Word($FA0000);
  
  while iBuffer < NormalizedByteCount do
  begin
    // Setup for Word Programming
    asm
      MOV #0x4001, W0
      MOV W0, NVMCON // Initialize NVMCON
    end;
    // Load up the max latches this dsPIC33 supports
    for iLatch := 0 to MAX_FLASH_WRITE_LATCH_COUNT - 1 do
    begin
      // Load a 24 Bit Instruction  
      InstructionLoWord := 0;
      InstructionHiWord := 0;
      if iBuffer < ByteCount then
      begin
        InstructionHiWord     := Buffer[iBuffer+2];
        Hi(InstructionLoWord) := Buffer[iBuffer+1];
        Lo(InstructionLoWord) := Buffer[iBuffer];
      end;
      // Increment the Buffer to the next 24 Bit Instruction
      iBuffer := iBuffer + 3;
      // Move the 24 Bit Instruction into the Latches
      asm
        PUSH W7
        PUSH W9
      end;
      W7 := InstructionHiWord;
      W9 := InstructionLoWord;
      asm
        TBLWTL W9, [W8]     // Write low word into program latch
        TBLWTH W7, [W8++]   // Write high byte into program latch
        POP W9
        POP W7
      end;
    end;
    asm
      DISI #5               // Block all interrupts with priority <7 for next 5 instructions
      MOV #0x55, W0
      MOV W0, NVMKEY        // Write the 55 key
      MOV #0xAA, W1
      MOV W1, NVMKEY        // Write the AA key
      BSET NVMCON, #15      // Start the erase sequence
      NOP
      NOP
      BTSC NVMCON, #15      // and wait for it to be
      BRA $-2               // completed
    end;
    Address := Address + (MAX_FLASH_WRITE_LATCH_COUNT * 2);   // dsPIC33 increment addresses by 2
  end;
end;
  
procedure Flash_RunBootloader;{$IFNDEF IGNORE_BOOTLOADER_MAPPING}org __BOOT_CODE_ADDRESS;{$ENDIF}
var
  DataIn: Byte;
  BootState: Integer;
  WriteAddress, EraseAddress, EraseBlocks, WriteCount: DWord;
  i: Integer;
  s1: string[128];
  RxBuffer: array[__WRITE_BUFFER_SIZE] of Byte;
begin
  // When we enter here it is because we receive an "Enter Bootloader" command, we must reply we have entered it
  
  // no Pin Change Notification Interrupt on B0
  CNIEB0_bit := 0;
  SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
  DataIn := SPI1BUF;        // Flush the buffer
  SPIEN_SPI1STAT_bit := 1;  // Enable and reinitailize the Spi
  
  BootState := BOOT_STATE_LISTEN;
  WriteAddress := $00000000;
  EraseAddress := $00000000;
  EraseBlocks := $00000000;
  
  // Stuck here forever
  while True do
  begin
    case BootState of
      BOOT_STATE_LISTEN :
        begin
          LATA4_bit := 1;
          if SPIRBF_SPI1STAT_bit = 1 then
          begin
            LATB5_bit := 1;
            case SPI1BUF of
              CMD_SYNC               : BootState := BOOT_STATE_REPLY_SYNC;
              CMD_REQEUST_FLASH_DATA : BootState := BOOT_STATE_REPLY_WITH_INFO;
              CMD_SET_ADDRESS        : BootState := BOOT_STATE_SET_ADDRESS;
              CMD_ERASE_BLOCKS       : BootState := BOOT_STATE_ERASE_BLOCKS;
              CMD_WRITE_BLOCK        : BootState := BOOT_STATE_WRITE_BLOCK;
              CMD_WRITE              : BootState := BOOT_STATE_WRITE;
            end;
            LATB5_bit := 0;
          end;
          LATA4_bit := 0;
        end;
      BOOT_STATE_WRITE_BLOCK :
        begin
          WriteCount := __WRITE_BUFFER_SIZE;
          for i := 0 to WriteCount - 1 do
          begin
            while SPIRBF_SPI1STAT_bit = 0 do;
            RxBuffer[i] := SPI1BUF;
          end;
          {$IFDEF SIMULATE_FLASH_WRITE}
          LongWordToHex(WriteAddress, s1);
          UART1_Write_Text('Write Block Address: ' + s1);
          LongWordToStr(__WRITE_BUFFER_SIZE, s1);
          UART1_Write_Text(', Count: ' + s1);
          UART1_Write_Text(LF);
          {$ELSE}
          Flash_Write_24(WriteAddress, RxBuffer, WriteCount);
          {$ENDIF}
          SendByte(CMD_WRITE_BLOCK);
          SendByte($00);
          SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
          BootState := BOOT_STATE_LISTEN;
        end;
      BOOT_STATE_WRITE :
        begin
          WriteCount := 0;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Highest(WriteCount) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Higher(WriteCount) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Hi(WriteCount) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Lo(WriteCount) := SPI1BUF;
          for i := 0 to WriteCount - 1 do
          begin
            while SPIRBF_SPI1STAT_bit = 0 do;
            RxBuffer[i] := SPI1BUF;
          end;
          {$IFDEF SIMULATE_FLASH_WRITE}
          LongWordToHex(WriteAddress, s1);
          UART1_Write_Text('Write Address: ' + s1);
          LongWordToStr(WriteCount, s1);
          UART1_Write_Text(', Count: ' + s1);
          UART1_Write_Text(LF);
          {$ELSE}
          Flash_Write_24(WriteAddress, RxBuffer, WriteCount);
          {$ENDIF}
          SendByte(CMD_WRITE);
          SendByte($00);
          SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
          BootState := BOOT_STATE_LISTEN;
        end;
      BOOT_STATE_ERASE_BLOCKS :
        begin
          EraseBlocks := 0;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Highest(EraseBlocks) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Higher(EraseBlocks) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Hi(EraseBlocks) := SPI1BUF;
          while SPIRBF_SPI1STAT_bit = 0 do;
          Lo(EraseBlocks) := SPI1BUF;
          {$IFDEF SIMULATE_FLASH_WRITE}
          for i := 0 to EraseBlocks - 1 do
          begin
            LongWordToHex(EraseAddress, s1);
            UART1_Write_Text('Erase Address: ' + s1 + LF);
            EraseAddress := EraseAddress + __ERASE_BUFFER_ADDRESS_SIZE;
          end;
          {$ELSE}
          Flash_Erase_Block(EraseAddress, EraseBlocks);
          {$ENDIF}
          SendByte(CMD_ERASE_BLOCKS);
          SendByte($00);
          SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
          BootState := BOOT_STATE_LISTEN;
        end;
      BOOT_STATE_SET_ADDRESS :
        begin
          if SPIRBF_SPI1STAT_bit = 1 then
          begin
            case SPI1BUF of
              CMD_SET_ADDRESS_WRITE :
                begin
                  WriteAddress := 0;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Highest(WriteAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Higher(WriteAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Hi(WriteAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Lo(WriteAddress) := SPI1BUF;
                  SendByte($00);
                  SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
                  BootState := BOOT_STATE_LISTEN;
                end;
              CMD_SET_ADDRESS_ERASE :
                begin
                  EraseAddress := 0;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Highest(EraseAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Higher(EraseAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Hi(EraseAddress) := SPI1BUF;
                  while SPIRBF_SPI1STAT_bit = 0 do;
                  Lo(EraseAddress) := SPI1BUF;
                  SendByte($00);
                  SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
                  BootState := BOOT_STATE_LISTEN;
                end;
            end;
          end;
        end;
      BOOT_STATE_REPLY_SYNC :
        begin
          SendByte($EF);
          SendByte($00);
          SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
          BootState := BOOT_STATE_LISTEN
        end;
      BOOT_STATE_REPLY_WITH_INFO :
        begin
          // Command
          SendByte(CMD_REQEUST_FLASH_DATA);
          // Record Size
          SendByte(Hi(BOOTINFO_REC_SIZE));
          SendByte(Lo(BOOTINFO_REC_SIZE));
          // Erase Block Size
          SendByte(Highest( __ERASE_BUFFER_SIZE));
          SendByte(Higher( __ERASE_BUFFER_SIZE));
          SendByte(Hi( __ERASE_BUFFER_SIZE));
          SendByte(Lo( __ERASE_BUFFER_SIZE));
          // Write Buffer Size
          SendByte(Highest( __WRITE_BUFFER_SIZE));
          SendByte(Higher( __WRITE_BUFFER_SIZE));
          SendByte(Hi( __WRITE_BUFFER_SIZE));
          SendByte(Lo( __WRITE_BUFFER_SIZE));
          // Flash Size
          SendByte(Highest( __FLASH_SIZE));
          SendByte(Higher( __FLASH_SIZE));
          SendByte(Hi( __FLASH_SIZE));
          SendByte(Lo( __FLASH_SIZE));
          // Bootloader Address
          SendByte(Highest( __BOOT_CODE_ADDRESS));
          SendByte(Higher( __BOOT_CODE_ADDRESS));
          SendByte(Hi( __BOOT_CODE_ADDRESS));
          SendByte(Lo( __BOOT_CODE_ADDRESS));
          // Bootloader Size
          SendByte(Highest( __BOOT_CODE_SIZE));
          SendByte(Higher( __BOOT_CODE_SIZE));
          SendByte(Hi( __BOOT_CODE_SIZE));
          SendByte(Lo( __BOOT_CODE_SIZE));
          // Configuration Address
          SendByte(0);
          SendByte(0);
          SendByte(0);
          SendByte(0);
          // McuFamily
          SendByte(FAMILY_dsPIC33);
          // Revision
          SendByte(0);
          SendByte(1);
          // Application
          SendByte(Ord('R'));
          SendByte(Ord('P'));
          SendByte(Ord('i'));
          SendByte(Ord('C'));
          SendByte(Ord('A'));
          SendByte(Ord('N'));
          SendByte(Ord(#0));
          SendByte($00);
          SPIROV_SPI1STAT_bit := 0;  // Reset the receive overflow that could have been set when we transmitted a packet
          BootState := BOOT_STATE_LISTEN;
        end;
    end
  end;
end;

// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Timer_525ms(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;
end;

procedure INTERRUPT_Timer_100ms(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
begin
  T2IF_bit := 0;                                                                // Clear the Flag
end;

procedure interrupt_Spi(); iv IVT_ADDR_SPI1INTERRUPT;
begin
  SPI1IF_bit := 0;
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_Can(); iv IVT_ADDR_C1INTERRUPT;
begin
  C1IF_bit := 0;    // Very little to do with the CAN interrupt with the DMA
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_DMA3_Can_Transmit(); iv IVT_ADDR_DMA3INTERRUPT;
begin
  DMA3IF_bit := 0;       // Called when Transmit is complete.....
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_DMA2_Can_Receive(); iv IVT_ADDR_DMA2INTERRUPT;
var
  OpenLCBCanBufferPtr: POpenLCBCanBuffer;
  Extended: Boolean;
begin
  DMA2IF_bit := 0;
  OpenLCBCanBufferPtr := CanBufferIn_NextEmpty;
  if OpenLCBCanBufferPtr <> nil then
  begin
    Extended := True;
    dsPIC33_DMA_Style_Buffer(OpenLCBCanBufferPtr^, Extended, CAN_DIRECTION_READ, @Can_RawBufferArray[3].Word0);
    C1RXFUL1 := %1111111111110111;  // Clear channel 3 Rx, there is a bug in the silicon for this.  See the errata
  end;
end;
  
//******************************************************************************
// Fired immeditatly after the DMA SPI receive cycle is complete.
//******************************************************************************
procedure interrupt_DMA0_SPI_Receive(); iv IVT_ADDR_DMA0INTERRUPT;
var
  NextCanOutBuffer: POpenLCBCanBuffer;
  GridConnectStr: TGridConnectString;
  i: Integer;
begin
  DMA0IF_bit := 0;
  if InSync then
  begin
    if PingPongASelected(DMACHANNEL_0) then
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // A is selected as this message is coming in, the instant this interrupt is entered the module switches to the B to prepare for the next message
        GridConnectStr[i] := Spi_RxBRawBufferArray[i];
    end else
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // B is selected as this message is coming in, the instant this interrupt is entered the module switches to the A to prepare for the next message
        GridConnectStr[i] := Spi_RxARawBufferArray[i];
    end;

    if (GridConnectStr[0] = ':') then
    begin
      case GridConnectStr[1] of
        'X' : begin
                NextCanOutBuffer := CanBufferOut_NextEmpty;
                if NextCanOutBuffer <> nil then
                  GridConnectStr_ToCanBuffer(@GridConnectStr, NextCanOutBuffer);
              end;
        'B' : begin
                UART1_Write_Text('Entering Bootloader' + LF);
                InitBootloader;
                Bootloading := True;  // Wait till the end of the SS
              end;
      end;
    end else
    begin
      if GridConnectStr[0] <> '' then
      begin
        Inc(InvalidSpiReceives);
        UART1_Write_Text(GridConnectStr + LF);
      end;
    end;
  end;
end;

//******************************************************************************
// Fired immeditatly after the DMA SPI transmit cycle is complete.
//******************************************************************************
procedure interrupt_DMA1_SPI_Transmit(); iv IVT_ADDR_DMA1INTERRUPT;
begin
  DMA1IF_bit := 0;
end;

//******************************************************************************
// Pin Change Interrupt for Chip Select (CS) line.  Here we enable/disable the
// DMA's for SPI.  That way we are always in sync with the the data coming in.  If
// we don't do this we could boot the slave in the middle of the master (RPi) sending
// a message and we will be all out of sync.  We MUST have a mulitple of 29 bytes
// (the current DMA count) or things will get out of sync.
//******************************************************************************
procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  iRawBufferMsg, iRawBuffer, iRawChar, LenGridConnect: Integer;
begin
  CNIF_bit := 0;
  if InSync then
  begin
    PortCopy := PORTB;    // Clear all changes
    if PortCopy.B0 = 1 then     // Just finished a CS low and data transfer, now dormant
    begin
      if Bootloading then
        Flash_RunBootloader;   // When we jump here we never return
      
      DMA1CNT := MAX_RAWBUFFER_BYTES-1;   // DMAxCNT + 1 = number of bytes on DMA transfer
      iRawBufferMsg := 0;
      iRawBuffer := 0;
      // Run all the messages in a single Spi Packet
      for iRawBufferMsg := 0 to MAX_RAWBUFFER_MESSAGES - 1 do
      begin
        while DMA2IE_bit = 1 do DMA2IE_bit := 0;     // Disable the incoming CAN interrupts (higher priority) till we are done with the buffer for CAN in
        if CanBufferIn_NextFull(SpiOutBuffer.OpenLcbBuffer) then  // Do we have something useful to send from the incoming CAN messages?
        begin
          LenGridConnect := GridConnect_BufferToGridConnect(SpiOutBuffer.OpenLcbBuffer, @SpiOutBuffer.GridConnectStr);
          // Run all 30 characters
          for iRawChar := 0 to MAX_SPI_GRIDCONNECT_CHAR_COUNT - 1 do
          begin
            if iRawChar < LenGridConnect then
               Spi_TxARawBufferArray[iRawBuffer] := SpiOutBuffer.GridConnectStr[iRawChar]
            else
              Spi_TxARawBufferArray[iRawBuffer] := 0;
            Inc(iRawBuffer)
          end;
        end else
        begin
          // Run all 30 characters
          for iRawChar := 0 to MAX_SPI_GRIDCONNECT_CHAR_COUNT - 1 do
          begin
            Spi_TxARawBufferArray[iRawBuffer] := 0;
            Inc(iRawBuffer)
          end;
        end;
        DMA2IE_bit := 1;
      end;
    end;
  end else
  begin
    PortCopy := PORTB;    // Clear all changes
    if PortCopy.B0 = 1 then     // Just finished a CS low and data transfer, now dormant
    begin
      EnableSpi(True);
      InSync := True;
    end;
  end
end;

var
  i: Integer;
  s1, s2: string[128];
  LocalOpenLcbBuffer, SendOpenLcbBuffer: TOpenLCBCanBuffer;
  Extended: Boolean;
  Address: DWord;
begin
  { Main program }
  LATA4_bit := 0;
  LATB5_bit := 0;
  TRISB5_bit := 0;
  TRISA4_bit := 0;

  InvalidSpiReceives := 0;
  InSync := False;
  Bootloading := False;

  MCU_Setup_Initialize;
  CanBufferOut_Initialize;
  CanBufferIn_Initialize;
  MCU_Enable_100msTimer;
  MCU_Enable_UART;
  MCU_Enable_SPI;
  EnableSpi(False);
  MCU_Enable_PinChangeNotification;

  TON_T1CON_bit := 1;       // Turn on 500ms timer
  TON_T2CON_bit := 1;       // Turn on 100ms timer

  MCU_Enable_CAN;
  
  UART1_Write_Text('Booting'+LF);

  Address := DWord(@Spi_TxARawBufferArray[0]);
  LongWordToHex(DWord(Address), s1);
  UART1_Write_Text('Address: ' + s1 + LF);

  while True do
  begin
    if not CAN_IsTransmitRequested(0) then
    begin
      while DMA0IE_bit = 1 do DMA0IE_bit := 0;   // Disable incoming SPI interrupts till we are done with the buffer to CAN out
      if CanBufferOut_NextFull(LocalOpenLcbBuffer) then
      begin
        DMA0IE_bit := 1;  // Reinable incoming SPI interrupts
        TransmitOpenLcbBuffer(0, @LocalOpenLcbBuffer);
      end else
        DMA0IE_bit := 1;  // Reinable incoming SPI interrupts
    end;
    
     {$IFDEF ENABLE_UART_INTERFACE}
    if UART1_Data_Ready then
    begin
      case UART1_Read of
          'R' :    begin
                     WordToHex(C1RXFUL1, s1);
                     s2 := 'C1RXFUL1: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXFUL2, s1);
                     s2 := 'C1RXFUL2: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1FCTRL, s1);
                     s2 := 'C1FCTRL: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1FIFO, s1);
                     s2 := 'C1FIFO: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXOVF1, s1);
                     s2 := 'C1RXOVF1: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXOVF2, s1);
                     s2 := 'C1RXOVF2: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                   end;
          'T' :    begin
                     if TryTransmitOpenLcbBuffer(0, @SendOpenLcbBuffer) then
                     begin
                     LongWordToHex(SendOpenLcbBuffer.MTI, s1);
                     s2 := 'Tx MTI: ' + s1;
                     UART1_Write_Text(s2+LF);
                     end else
                       UART1_Write_Text('Transmit Failed');
                   end;
          'E' :    begin
                     WordToHex(DMAPWC, s1);
                     UART1_Write_Text('DMAPWC: 0x' + s1 + LF);

                     WordToHex(DMARQC, s1);
                     UART1_Write_Text('DMARQC: 0x' + s1 + LF);

                     WordToHex(SPI1STAT, s1);
                     UART1_Write_Text('SPI1STAT: 0x' + s1 + LF);

                     WordToHex(SPI1CON1, s1);
                     UART1_Write_Text('SPI1CON1: 0x' + s1 + LF);

                     WordToHex(SPI1CON2, s1);
                     UART1_Write_Text('SPICON2: 0x' + s1 + LF);

                   end;
          'S' :    begin

                     if ForceSpi1Transmit then
                       UART1_Write_Text('Success Tx Force' + LF)
                     else
                       UART1_Write_Text('Fail Tx Force' + LF)
                   end;
          '2' :    begin
                     WordToHex(DMA0STAH, s1);
                     UART1_Write_Text('DMA0STAH: 0x' + s1 + LF);
                     WordToHex(DMA0STAL, s1);
                     UART1_Write_Text('DMA0STAL: 0x' + s1 + LF);
                     UART1_Write_Text('Spi TX A' + LF);
                     for i := 0 to MAX_SPI_GRIDCONNECT_CHAR_COUNT - 1 do
                     begin
                       WordToStr(Spi_TxARawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                     WordToHex(DMA1STAH, s1);
                     UART1_Write_Text('DMA1STAH: 0x' + s1 + LF);
                     WordToHex(DMA1STAL, s1);
                     UART1_Write_Text('DMA1STAL: 0x' + s1 + LF);
                     UART1_Write_Text('Spi RX A' + LF);
                     for i := 0 to MAX_SPI_GRIDCONNECT_CHAR_COUNT - 1 do
                     begin
                       WordToStr(Spi_RxARawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                     UART1_Write_Text('Spi RX B' + LF);
                     for i := 0 to MAX_SPI_GRIDCONNECT_CHAR_COUNT - 1 do
                     begin
                       WordToStr(Spi_RxBRawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                   end;
          '3' :    begin
                     UART1_Write_Text('CAN Rx:' + LF);
                     for i := 0 to MAX_ECAN_BUFFER - 1 do
                     begin
                       WordToHex(Can_RawBufferArray[i].Word0, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word1, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word2, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word3, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word4, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word5, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word6, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word7, s1);
                       UART_Write_Text(s1 + LF);
                     end;
                   end;
          '4' : begin
                PrintDMABuffers;
              end;
          '5' : begin
                  ZeroSpiBuffers
                end;
          '6' : begin
                  IntToStr(CanIn.Count, s1);
                  UART1_Write_Text('CanIn.Count = ' + s1 + LF);
                  IntToStr(CanIn.MaxCount, s1);
                  UART1_Write_Text('CanIn.MaxCount = ' + s1 + LF);
                  LongWordToStr(CanIn.TotalCount, s1);
                  UART1_Write_Text('CanIn.TotalCount = ' + s1 + LF);

                  IntToStr(CanOut.Count, s1);
                  UART1_Write_Text('CanOut.Count = ' + s1 + LF);
                  IntToStr(CanOut.MaxCount, s1);
                  UART1_Write_Text('CanOut.MaxCount = ' + s1 + LF);
                  LongWordToStr(CanOut.TotalCount, s1);
                  UART1_Write_Text('CanOut.TotalCount = ' + s1 + LF);

                  LongWordToStr(InvalidSpiReceives, s1);
                  UART1_Write_Text('InvalidSpiReceives = ' + s1 + LF);
                end;
          '7' : begin
                  InvalidSpiReceives := 0;
                end;
      end;
    end
    {$ENDIF}
  end;
end.