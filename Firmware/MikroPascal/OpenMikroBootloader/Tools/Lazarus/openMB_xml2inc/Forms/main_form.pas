unit main_form;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, StdCtrls,
  Laz2_DOM, laz2_XMLRead;

type

  { TForm1 }

  TForm1 = class(TForm)
    ButtonConvert: TButton;
    Label1: TLabel;
    OpenDialog: TOpenDialog;
    procedure ButtonConvertClick(Sender: TObject);
  private
    { private declarations }
  public
    { public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}

{ TForm1 }

procedure TForm1.ButtonConvertClick(Sender: TObject);
var
  xmlFile: TXMLDocument;
  xmlRoot, xmlMcu, xmlAddr, xmlAddrMin, xmlAddrMax: TDOMNode;
  incFile: TStringList;
  incFileName: string;
  i: Integer;
begin
  if OpenDialog.Execute then
  begin
    for i := 0 to OpenDialog.Files.Count - 1 do
    begin
      Label1.Caption := 'Reading: ' + OpenDialog.Files[i];
      Label1.Update;
      Application.ProcessMessages;
      ReadXMLFile(xmlFile, OpenDialog.Files[i]);
      xmlRoot := xmlFile.FindNode('MCU');
      if Assigned(xmlRoot) then
      begin
        incFileName := StringReplace(OpenDialog.Files[i], ExtractFileExt(OpenDialog.Files[i]), '.inc', [rfIgnoreCase]);
        incFile := TStringList.Create;
        incFile.Add('// generated by openMikroBootloader xml2inc');
        incFile.Add(' ');
        try
          xmlMcu := xmlRoot.FirstChild;
          while Assigned(xmlMcu) do
          begin
            incFile.Add('{$IFDEF ' + xmlMcu.FirstChild.NodeValue + '}');
            xmlAddr := xmlMcu.FindNode('ROM');
            if Assigned(xmlAddr) then
            begin
              xmlAddrMin := xmlAddr.FindNode('MIN_ADDR');
              xmlAddrMax := xmlAddr.FindNode('MAX_ADDR');
              if Assigned(xmlAddrMin) and Assigned(xmlAddrMax) then
              begin
                incFile.Add('  __ombFLASH_START      = $' + IntToHex( StrToInt(xmlAddrMin.FirstChild.NodeValue), 8) + ';');
                incFile.Add('  __ombFLASH_SIZE       = $' + IntToHex((StrToInt(xmlAddrMax.FirstChild.NodeValue) - StrToInt(xmlAddrMin.FirstChild.NodeValue)), 8) + ';');
              end;
            end;
            xmlAddr := xmlMcu.FindNode('BOOTROM');
            if Assigned(xmlAddr) then
            begin
              xmlAddrMin := xmlAddr.FindNode('MIN_ADDR');
              xmlAddrMax := xmlAddr.FindNode('MAX_ADDR');
              if Assigned(xmlAddrMin) and Assigned(xmlAddrMax) then
              incFile.Add('  __ombBOOTFLASH_START  = $' + IntToHex( StrToInt(xmlAddrMin.FirstChild.NodeValue), 8) + ';');
              incFile.Add('  __ombBOOTFLASH_SIZE   = $' + IntToHex((StrToInt(xmlAddrMax.FirstChild.NodeValue) - StrToInt(xmlAddrMin.FirstChild.NodeValue)), 8) + ';');
            end  else
            begin
              incFile.Add('  __ombBOOTFLASH_START  = $00000000;');
              incFile.Add('  __ombBOOTFLASH_SIZE   = $00000000;');
            end;

            xmlAddr := xmlMcu.FindNode('EEPROM');
            if Assigned(xmlAddr) then
            begin
              xmlAddrMin := xmlAddr.FindNode('MIN_ADDR');
              xmlAddrMax := xmlAddr.FindNode('MAX_ADDR');
              if Assigned(xmlAddrMin) and Assigned(xmlAddrMax) then
              incFile.Add('  __ombEEPROM_START     = $' + IntToHex( StrToInt(xmlAddrMin.FirstChild.NodeValue), 8) + ';');
              incFile.Add('  __ombEEPROM_SIZE      = $' + IntToHex((StrToInt(xmlAddrMax.FirstChild.NodeValue) - StrToInt(xmlAddrMin.FirstChild.NodeValue)), 8) + ';');
            end else
            begin
              incFile.Add('  __ombEEPROM_START     = $00000000;');
              incFile.Add('  __ombEEPROM_SIZE      = $00000000;');
            end;

            xmlAddr := xmlMcu.FindNode('CONFIG_ADDR');
            if Assigned(xmlAddr) then
            begin
              incFile.Add('  __ombCONFIG           = $' + IntToHex( StrToInt(xmlAddr.FirstChild.NodeValue), 8) + ';');
            end;

            xmlAddr := xmlMcu.FindNode('ERASE_BLOCK_SIZE');
            if Assigned(xmlAddr) then
              incFile.Add('  __ombERASE_BLOCK_SIZE = $' + IntToHex( StrToInt(xmlAddr.FirstChild.NodeValue), 8) + ';');

            xmlAddr := xmlMcu.FindNode('WRITE_BLOCK_SIZE');
            if Assigned(xmlAddr) then
              incFile.Add('  __ombWRITE_BLOCK_SIZE = $' + IntToHex( StrToInt(xmlAddr.FirstChild.NodeValue), 8) + ';');

            if Pos('P16F', xmlMcu.FirstChild.NodeValue) = 1 then
            begin
               // Look for an enhanced PIC16 PIC16F1xxx or PIC16LF1xxx
              if xmlMcu.FirstChild.NodeValue[5] = '1' then     // P16F1xxx
                incFile.Add('  {DEFINE P16_ENHANCED}')
            end else
            if Pos('P16LF', xmlMcu.FirstChild.NodeValue) = 1 then
            begin
               // Look for an enhanced PIC16 PIC16F1xxx or PIC16LF1xxx
              if xmlMcu.FirstChild.NodeValue[6] = '1' then    // P16LF1xxx
                incFile.Add('  {DEFINE P16_ENHANCED}')
            end;


            incFile.Add('{$ENDIF}');
            incFile.Add(' ');
            xmlMcu := xmlMcu.NextSibling;
          end;
        finally
          incFile.SaveToFile(incFileName);
          FreeAndNil(incFile);
          Label1.Caption := 'Done!';
          Label1.Update;
          Application.ProcessMessages;
        end;
      end;
    end;
  end;
end;

end.
