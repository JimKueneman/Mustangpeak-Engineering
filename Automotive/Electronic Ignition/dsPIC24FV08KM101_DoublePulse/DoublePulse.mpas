program DoublePulse;

{ Declarations section }

{$DEFINE UART}

const
  // How many fake RPM triggers to give the FiTech on startup
  FAKE_RPM_COUNT = 0;
  FAKE_RPM = 2000;
  
  // How many valid RPM spark pulses detected in the pin change notification to
  // move on in the Stat machine before moving out of Cranking
  STABLE_CRANKING_PULSES = 4;  // Means two crank revolutions before it will start pulsing FiTech
  
  // Smoothing RPM Filter Length
  RPM_FILTER_LEN = 8;
  
  // Engine Parameters
  ENGINE_CYCLE = 4;
  CYLINDERS = 8;
  // Below this and we say we stalled and restart the Statemachine
  STALL_RPM = 50;
  // Above this and it is a bad measurement of RPM
  MAX_RPM = 7000;
  // Above this and we move to the Running State
  MIN_RUNNING_RPM = 400;
  
  BLANK_PERCENT = 0.35;
  
  // MCU Setup Parameters
  OSCILLATORFREQ = 32e6;
  CLOCKDIVIDER = 2;
  TIMER_DIVIDER = 256;
  
  // MCU Clock Calculated Parameters
  CLOCK_FREQ = real( OSCILLATORFREQ/CLOCKDIVIDER);
  CLOCK_PERIOD = real( 1/CLOCK_FREQ);
  
  // Revolutions per Cycle
  REV_PER_CYCLE = ENGINE_CYCLE/2;
  
  STALL_DISTRIBUTOR_PERIOD = real( 60/(STALL_RPM*CYLINDERS*REV_PER_CYCLE)*2);
  
  
  // State
  STATE_STALLED = 0;
  STATE_STABLIZE_CRANKING = 1;
  STATE_FAKE_RPM = 2;
  STATE_CRANKING = 3;
  STATE_RUNNING = 4;
  
  TACH_LO = 1;
  TACH_HI = 0;

  COILNEG = B0;    // Bit 0
  TACHOUT = B9;    // Bit 9
var
  CoilNeg_Port: Word at PORTA;
  CoilNeg_Pin: sbit at LATA0_bit;
  CoilNeg_TRIS: sbit at TRISA0_bit;
  
  TachPort: Word at PORTB;
  TachOut_Pin: sbit at LATB9_bit;
  TachOut_TRIS: sbit at TRISB9_bit;
  
  HeartBeat_Port: Word at PORTA;
  HeartBeat_Pin: sbit at LATA3_bit;
  HeartBeat_TRIS: sbit at TRISA3_bit;
  
  Debug_Port: Word at PORTA;
  Debug_Pin: sbit at LATA2_bit;
  Debug_TRIS: sbit at TRISA2_bit;
  
  RPM_Global: real;
  
  Distributor_Period_Array: array[RPM_FILTER_LEN] of real;
  Distributor_Period_Counter: Integer;
  
  State, Stable_Cranking_RPM_Count_Global: Integer;
  
// Converts an RPM into a Period Time between each cyclinder firing in Seconds
function RPM_To_Distributor_Period(RPM: real): real;
begin
  Result := 0.0;
  if RPM > 0 then
    Result := real( 60 / (RPM * CYLINDERS * REV_PER_CYCLE) * REV_PER_CYCLE);
end;

// Converts a Period of Time between cylinder firings into RPM
function Distributor_Period_To_RPM(Distributor_Period: real): real;
begin
  Result := 0.0;
  if Distributor_Period > 0.0 then
    Result := real( 60 / Distributor_Period / CYLINDERS * REV_PER_CYCLE)
end;

// Converts a DWORD Timer Count to actual elapsed time (seconds) scaled by the Timer Divider (used 1, 8, 32, 64, etc)
function TimerCounts_To_Time(TimerCounts: DWORD; Divider: Word): real;
begin
  Result := real( TimerCounts) * CLOCK_PERIOD * Divider;
end;

// Converts time (seconds) to a DWORD Timer Count using the passed Timer Divider (1, 8, 32, 64, etc)
function Time_To_TimerCounts(Time: real; Divider: Word): DWORD;
begin
  Result := DWORD( Time / (CLOCK_PERIOD * Divider))
end;

procedure UpdateDistributorArray(NewDistributorTime: real);
begin
  // Insert the lastest item in the array
  Distributor_Period_Array[Distributor_Period_Counter] := NewDistributorTime;
  Inc(Distributor_Period_Counter);
  // Update the array counter
  if Distributor_Period_Counter >= RPM_FILTER_LEN then 
    Distributor_Period_Counter := 0;
end;

// Sends the delayed blanking pulse to the FiTech and stalls the CN Interrupt for the blanking
procedure TriggerOutput(BlankingTime: real);
begin
  TachOut_Pin := TACH_Hi;
  Delay_Cyc_Long( Time_To_TimerCounts(BlankingTime * BLANK_PERCENT, 1));  // Just a bit more than 15 degrees dwell (out of 45)
  TachOut_Pin := TACH_LO;
end;

// Calculates the average of the items in the Distributor Period Array
function AverageDistributorPeriod: real;
var
  i: Integer;
begin
  Result := 0.0;
  for i := 0 to RPM_FILTER_LEN-1 do
    Result := Result + Distributor_Period_Array[i];
  Result := Result / RPM_FILTER_LEN
end;

procedure interrupt_CCT1_RPM_Measurment_And_Stall_Timer(); iv IVT_ADDR_CCT1INTERRUPT;    // Interrupt for the HiWord Compare 1 (16Bit mode/32Bit mode)
begin
  // Reset the RPM/Stall Timer; Keep looking for stalls as that is the only way to enter this
  CCP1TMRH := $0000;
  CCP1TMRL := $0000;
  CCT1IF_bit := 0;
  State := STATE_STALLED;
  {$IFDEF UART}
  UART1_Write_Text('Stall Detected');
  {$ENDIF}
end;

     {
procedure interrupt_CCT2_Stall_Timer(); iv IVT_ADDR_CCT2INTERRUPT;    // Interrupt for the HiWord Compare 2 (16Bit mode/32Bit mode)
begin
  // Called if the CN interrupt is not called fast enough
  State := STATE_STALLED;
  Debug_Pin := not Debug_Pin;
  CCT2IF_bit := 0;
end;

procedure interrupt_Timer1(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;             // clear T1IF
end;
 }
 
procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  i: Integer;
  BlankTime, NewDistributorPeriod: real;
  TimerCount: DWord;
//  LocalStrBuffer: array[23] of Char;
begin
  PortCopy := CoilNeg_Port;    // Clear all changes
  // Detect rising edges only
  if PortCopy.COILNEG = 1 then
  begin
    // Stop the RPM Timer
    CCPON_CCP1CON1L_bit := 0;
    // Capture it contents
    HiWord(TimerCount) := CCP1TMRH;
    LoWord(TimerCount) := CCP1TMRL;
    // Reset the RPM/Stall Timer
    CCP1TMRH := $0000;
    CCP1TMRL := $0000;   
    // Makes sure it can't jump to the stall interrupt
    CCT1IF_bit := 0;
    // Start the RPM Timer for the next Cylinder Cycle
    CCPON_CCP1CON1L_bit := 1;
    
    
    NewDistributorPeriod := TimerCounts_To_Time(TimerCount, 1);
    RPM_Global := Distributor_Period_To_RPM(NewDistributorPeriod);
    
    case State of
      STATE_STALLED :
        begin
          Stable_Cranking_RPM_Count_Global := 0;
          // Preload with something close
          Distributor_Period_Array[0] := RPM_To_Distributor_Period(200);
          for i := 1 to RPM_FILTER_LEN - 1 do
            Distributor_Period_Array[i] := Distributor_Period_Array[0];
          State := STATE_STABLIZE_CRANKING;
        end;
      STATE_STABLIZE_CRANKING :
        begin
          if (RPM_Global > STALL_RPM) and (RPM_GLOBAL < MAX_RPM) then  // Are we cranking in a stable place yet?
            Inc(Stable_Cranking_RPM_Count_Global)
          else
            Dec(Stable_Cranking_RPM_Count_Global);
            
          if Stable_Cranking_RPM_Count_Global >= STABLE_CRANKING_PULSES then
            State := STATE_FAKE_RPM;                // Yes move on the Cranking
        end;
      STATE_FAKE_RPM :
        begin
          for i := 0 to FAKE_RPM_COUNT -1 do
          begin
            NewDistributorPeriod :=  RPM_To_Distributor_Period(FAKE_RPM);
            TriggerOutput(NewDistributorPeriod);
          end;
          State := STATE_CRANKING;
        end;
      STATE_CRANKING :
        begin
          UpdateDistributorArray(NewDistributorPeriod);
          TriggerOutput(NewDistributorPeriod);
          if RPM_Global > MIN_RUNNING_RPM then
            State := STATE_RUNNING;
        end;
      STATE_RUNNING :
        begin
          UpdateDistributorArray(NewDistributorPeriod);
          TriggerOutput(AverageDistributorPeriod);
      end else
        State := STATE_STALLED;     // State is messed up, start over
    end;    // Case
  end;

  // Some free debounce guarding by putting this many micro seconds past entry
  CNIF_bit := 0;
end;

var
  StrBuffer: array[23] of Char;
begin
  { Main program }
  ANSA := 0;        // Make them all Digital
  ANSB := 0;
  
  Distributor_Period_Array[0] := 0.0;
  Distributor_Period_Array[1] := 0.0;
  Distributor_Period_Array[2] := 0.0;
  Distributor_Period_Array[3] := 0.0;
  Distributor_Period_Array[4] := 0.0;
  Distributor_Period_Array[5] := 0.0;
  Distributor_Period_Array[6] := 0.0;
  Distributor_Period_Array[7] := 0.0;
  Distributor_Period_Counter := 0;
  State := STATE_STALLED;
  Stable_Cranking_RPM_Count_Global := 0;

  TachOut_Pin := TACH_LO;   // Set it low
  HeartBeat_Pin := 0;
  Debug_Pin := 0;
  
  CoilNeg_TRIS := 1;   // Input
  TachOut_TRIS := 0;   // Tach Output
  HeartBeat_TRIS := 0; // Output
  Debug_TRIS := 0;
  
  // Clock Setup
  CLKDIV := 0;                      // Set both dividers to 1:1 and don't use the DOZE to reset dividers (power saving feature)

  // Compare Module Setup as an Event Timer
  CCPON_CCP1CON1L_bit := 0;  // Off
  TRIGEN_CCP1CON1H_bit := 0;
  SYNC_0_CCP1CON1H_bit := 0;
  SYNC_1_CCP1CON1H_bit := 0;
  SYNC_2_CCP1CON1H_bit := 0;
  SYNC_3_CCP1CON1H_bit := 0;
  SYNC_4_CCP1CON1H_bit := 0;
  TMR32_CCP1CON1L_bit := 1; // 32 Bit Timers
  CLKSEL_0_CCP1CON1L_bit := 0;
  CLKSEL_1_CCP1CON1L_bit := 0;
  CLKSEL_2_CCP1CON1L_bit := 0;
  TMRPS_0_CCP1CON1L_bit := 0;
  TMRPS_1_CCP1CON1L_bit := 0;  // Divide by 1
  CCP1TMRH := $0000;
  CCP1TMRL := $0000;
  CCP1PRL := LoWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  CCP1PRH := HiWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  CCT1IP_0_bit := 1;
  CCT1IP_1_bit := 1;
  CCT2IP_2_bit := 0;
  CCT1IF_bit := 0;
  CCT1IE_bit := 1;
  CCPON_CCP1CON1L_bit := 1; // ON, start looking for a stall

{
  // Compare Module Setup as an Event Timer
  TRIGEN_CCP2CON1H_bit := 0;
  SYNC_0_CCP2CON1H_bit := 0;
  SYNC_1_CCP2CON1H_bit := 0;
  SYNC_2_CCP2CON1H_bit := 0;
  SYNC_3_CCP2CON1H_bit := 0;
  SYNC_4_CCP2CON1H_bit := 0;
  TMR32_CCP2CON1L_bit := 1; // 32 Bit Timers
  CLKSEL_0_CCP2CON1L_bit := 0;
  CLKSEL_1_CCP2CON1L_bit := 0;
  CLKSEL_2_CCP2CON1L_bit := 0;
  TMRPS_0_CCP2CON1L_bit := 0;
  TMRPS_1_CCP2CON1L_bit := 0;  // Divide by 1
  CCP2PRL := LoWord( DWORD(STALL_PERIOD/CLOCK_PERIOD*REV_PER_CYCLE));
  CCP2PRH := HiWord( DWORD(STALL_PERIOD/CLOCK_PERIOD*REV_PER_CYCLE));
  CCT2IF_bit := 0;       //  CCT for the High Word in 32 Bit
  CCT2IE_bit := 1;       //  CCT for the High Word in 32 Bit
  CCT2IP_1_bit := 1;     // Low Priority, at least lower than the CN
  CCT2IP_2_bit := 0;
  CCT2IP_2_bit := 0;
  CCPON_CCP2CON1L_bit := 1;

  // Timer Setup
  TMR1 := 0;
  TON_bit := 0;                // OFF
  TCKPS_0_bit := 1;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_bit := 0;
  IPC0 := IPC0 or 0x1000;      // interrupt priority level = 1
  T1IF_bit := 0;               // clear T1IF
  T1IE_bit := 1;               // enable Timer1 interrupts
  TON_bit := 1;                // ON
  }


  {$IFDEF UART}
  UART1_Init(115200);
  Delay_ms(100);
  
  UART1_Write_Text('STALL_DISTRIBUTOR_PERIOD=');
  FloatToStr(STALL_DISTRIBUTOR_PERIOD, StrBuffer);
  UART1_Write_Text(StrBuffer);
  
  UART1_Write_Text('DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD)=');
  LongWordToStr(DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD), StrBuffer);
  UART1_Write_Text(StrBuffer);
  
  UART1_Write_Text('PRL=');
  WordToStr(CCP1PRL, StrBuffer);
  UART1_Write_Text(StrBuffer);
  UART_Write_Text('  PRH=');
  WordToStr(CCP1PRH, StrBuffer);
  UART_Write_Text(StrBuffer);
  UART1_Write(#13);
  {$ENDIF}
  
  // ALWAYS DO THIS LAST
  // Pin change Notification
  CN2IE_bit := 1;  // Pin Change Notification Interrupt on RA0
  CNIP_0_bit := 1;  // Interrupt priority = 7
  CNIP_1_bit := 1;
  CNIP_2_bit := 1;
  CNIF_bit := 0;    // Clear Pin Change Interrupt flag
  CNIE_bit := 1;    // Enable all Pin Change Interrupts

  
  while true do
  begin
    Delay_ms(100);
    {$IFDEF UART}
    UART1_Write_Text('RPM=');
    FloatToStr(RPM_Global, StrBuffer);
    UART1_Write_Text(StrBuffer);
    UART_Write_Text('  State=');
    IntToStr(State, StrBuffer);
    UART_Write_Text(StrBuffer);
    UART1_Write(#13);
    {$ENDIF}
    // Waitin for Pin Change Interrupt
    HeartBeat_Pin := not HeartBeat_Pin;
  end;
end.