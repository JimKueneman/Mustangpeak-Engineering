unit OneWire_base2P;

uses Lib_Delays_LIO,def_io;

function Ow_Reset_2P : boolean;
Procedure Ow_Write_2P(data_ : Byte);
Procedure Ow_Write_PullUp_2P(data_ : Byte);
Function Ow_Read_2P : Byte;
function OWSearch_2P(var ROM_NO_ : array[8] of byte) : boolean;
function OWFirst_2P(var ROM_NO__ : array[1..8] of byte) : boolean;
function OWNext_2P(var ROM_NO__ : array[1..8] of byte) : boolean;

const Table2P : Array[0..255] of Byte = (
            0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
            157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
            35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
            190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
            70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
            219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
            101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
            248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
            140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
            17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
            175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
            50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
            202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
            87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
            233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
            116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53); far;

var ow2p_in : sbit sfr external;
var ow2p_in_lat : sbit sfr external;
var ow2p_in_dir : sbit sfr external;
var ow2p_out_lat : sbit sfr external;
var ow2p_out_dir : sbit sfr external;

implementation

var LastDiscrepancy : byte;
    LastFamilyDiscrepancy : byte;
    LastDeviceFlag : boolean;
    crc8_ : byte;

Function Ow_Reset_2P : boolean;
begin
  result := false;
  ASM
    DISI #16000
  End;
  ow2p_in_dir := 1;
  nop;
  ow2p_out_lat := 0; // OW_HIZ
  nop;
  ow2p_out_dir := 0;
  Delay_60us_;
  ow2p_out_lat := 1; // OW_LO
  Delay_500us_;
  Delay_60us_;
  ow2p_out_lat := 0; // OW_HIZ
  DISICNT := 16000;
  Delay_60us_;
  Delay_60us_;
  If ow2p_in = 0 Then result := true;
  Delay_500us_;
  DISICNT := 0;
End;

Procedure Ow_Write_2P(data_ : Byte);
var i : word;
begin
  ow2p_in_dir := 1;
  nop;
  ow2p_out_lat := 0; // OW_HIZ
  nop;
  ow2p_out_dir := 0;
  Delay_5us_;
  Delay_5us_;
  i := 0;
  While i < 8 do
    begin
      ASM
        DISI #16000
      End;
      ow2p_out_lat := 1; // OW_LO
      Delay_5us_;
      Delay_5us_;
      If data_.i = 1 Then ow2p_out_lat := 0; // OW_HIZ
      Delay_60us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      ow2p_out_lat := 0; // OW_HIZ
      Delay_5us_;
      Delay_5us_;
      DISICNT := 0;
      Inc(i);
    End;
End;

Procedure Ow_Write_PullUp_2P(data_ : Byte);
var i : word;
begin
  ow2p_in_dir := 1;
  nop;
  ow2p_in_lat := 1;
  nop;
  ow2p_out_lat := 0; // OW_HIZ
  nop;
  ow2p_out_dir := 0;
  Delay_5us_;
  Delay_5us_;
  i := 0;
  While i < 8 do
    begin
      ASM
        DISI #16000
      End;
      ow2p_out_lat := 1; // OW_LO
      Delay_5us_;
      Delay_5us_;
      If data_.i = 1 Then ow2p_out_lat := 0; // OW_HIZ
      Delay_60us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      Delay_5us_;
      ow2p_out_lat := 0; // OW_HIZ
      Delay_5us_;
      Delay_5us_;
      DISICNT := 0;
      Inc(i);
    End;
  ow2p_in_dir := 0; // OW_HI and output, Strong PullUp
End;

Function Ow_Read_2P : Byte;
var i : word;
begin
  result := 0;
  ow2p_in_dir := 1;
  nop;
  ow2p_out_lat := 0; // OW_HIZ
  nop;
  ow2p_out_dir := 0;
  Delay_5us_;
  Delay_5us_;
  i := 0;
  While i < 8 do
    begin
      ASM
        DISI #16000
      End;
      ow2p_out_lat := 1; // OW_LO
      Delay_5us_;
      Delay_5us_;
      ow2p_out_lat := 0; // OW_HIZ
      Delay_5us_;
      Delay_5us_;
      Delay_2us_;
      If ow2p_in <> 0 Then result.i := 1;
      Delay_60us_;
      DISICNT := 0;
      Inc(i);
    end;
End;

Procedure Ow_Write_Bit_2P(data_ : Byte);
begin
  ASM
    DISI #16000
  End;
  ow2p_in_dir := 1;
  nop;
  ow2p_out_lat := 1; // OW_LO
  nop;
  ow2p_out_dir := 0;
  Delay_5us_;
  Delay_5us_;
  If data_.0 = 1 Then ow2p_out_lat := 0; // OW_HIZ
  Delay_60us_;
  Delay_5us_;
  Delay_5us_;
  Delay_5us_;
  Delay_5us_;
  Delay_5us_;
  Delay_5us_;
  ow2p_out_lat := 0; // OW_HIZ
  Delay_5us_;
  Delay_5us_;
  DISICNT := 0;
End;

Function Ow_Read_Bit_2P : Byte;
begin
  result := 0;
  ASM
    DISI #16000
  End;
  ow2p_in_dir := 1;
  nop;
  ow2p_out_lat := 1; // OW_LO
  nop;
  ow2p_out_dir := 0;
  Delay_5us_;
  Delay_5us_;
  ow2p_out_lat := 0; // OW_HIZ
  Delay_5us_;
  Delay_5us_;
  Delay_2us_;
  If ow2p_in <> 0 Then result := 1;
  Delay_60us_;
  DISICNT := 0;
End;

//--------------------------------------------------------------------------
// Calculate the CRC8 of the byte value provided with the current
// global 'crc8_' value.
// Returns current global crc8 value
//
function docrc8(value_ : byte) : byte;
begin
  // See Application Note 27
  // TEST BUILD
  crc8_ := Table2P[crc8_ xor value_];
  result := crc8_;
end;

//--------------------------------------------------------------------------
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
function OWSearch_2P(var ROM_NO_ : array[8] of byte) : boolean;
var id_bit_number : byte;
    last_zero, rom_byte_number : byte;
    id_bit, cmp_id_bit : byte;
    rom_byte_mask, search_direction : byte;
begin
  // initialize for search
  id_bit_number := 1;
  last_zero := 0;
  rom_byte_number := 0;
  rom_byte_mask := 1;
  result := false;
  crc8_ := 0;

  // if the last call was not the last one
  if LastDeviceFlag = false then
    begin
      // 1-Wire reset
      if Ow_Reset_2P = false then
        begin
          // reset the search
          LastDiscrepancy := 0;
          LastDeviceFlag := FALSE;
          LastFamilyDiscrepancy := 0;
          result := FALSE;
          exit;
        end;

      // issue the search command
      Ow_Write_2P(0xF0);

      while (rom_byte_number < 8) do
        begin
          // read a bit and its complement
          id_bit := Ow_Read_Bit_2P;
          cmp_id_bit := Ow_Read_Bit_2P;

          // check for no devices on 1-wire
          if (id_bit = 1) and (cmp_id_bit = 1) then break
          else
            begin
              // all devices coupled have 0 or 1
              if (id_bit <> cmp_id_bit) then search_direction := id_bit  // bit write value for search
              else
                begin
                  // if this discrepancy if before the Last Discrepancy
                  // on a previous next then pick the same as last time
                  if (id_bit_number < LastDiscrepancy) then
                    begin
                      if (ROM_NO_[rom_byte_number] and rom_byte_mask) > 0 then search_direction := 1
                      else search_direction := 0;
                    end
                  else
                    begin
                      // if equal to last pick 1, if not then pick 0
                      if (id_bit_number = LastDiscrepancy) then search_direction := 1
                      else search_direction := 0;
                    end;
                  // if 0 was picked then record its position in LastZero
                  if (search_direction = 0) then
                    begin
                      last_zero := id_bit_number;
                      // check for Last discrepancy in family
                      if (last_zero < 9) then LastFamilyDiscrepancy := last_zero;
                    end;
                end;

              // set or clear the bit in the ROM byte rom_byte_number
              // with mask rom_byte_mask
              if (search_direction = 1) then ROM_NO_[rom_byte_number] := ROM_NO_[rom_byte_number] or rom_byte_mask
              else ROM_NO_[rom_byte_number] := ROM_NO_[rom_byte_number] and not(rom_byte_mask);

              // serial number search direction write bit
              Ow_Write_Bit_2P(search_direction);

              // increment the byte counter id_bit_number
              // and shift the mask rom_byte_mask
              inc(id_bit_number);
              rom_byte_mask := rom_byte_mask shl 1; //rom_byte_mask <<= 1;

              // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
              if (rom_byte_mask = 0) then
                begin
                  docrc8(ROM_NO_[rom_byte_number]);  // accumulate the CRC
                  inc(rom_byte_number);
                  rom_byte_mask := 1;
                end;
            end;
        end;

      // if the search was successful then
      if not((id_bit_number < 65) or (crc8_ <> 0)) = true then
        begin
         // search successful so set LastDiscrepancy,LastDeviceFlag,result
         LastDiscrepancy := last_zero;
         // check for last device
         if (LastDiscrepancy = 0) then LastDeviceFlag := TRUE;
         result := TRUE;
        end;
    end;

   // if no device found then reset counters so next 'search' will be like a first
   if (result = false) or (ROM_NO_[0] = 0) then
     begin
       LastDiscrepancy := 0;
       LastDeviceFlag := FALSE;
       LastFamilyDiscrepancy := 0;
       result := FALSE;
     end;
end;

//--------------------------------------------------------------------------
// Find the 'first' devices on the 1-Wire bus
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : no device present
//
function OWFirst_2P(var ROM_NO__ : array[1..8] of byte) : boolean;
begin
   // reset the search state
   LastDiscrepancy := 0;
   LastDeviceFlag := false;
   LastFamilyDiscrepancy := 0;
   result := OWSearch_2P(ROM_NO__);
end;

//--------------------------------------------------------------------------
// Find the 'next' devices on the 1-Wire bus
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
function OWNext_2P(var ROM_NO__ : array[1..8] of byte) : boolean;
begin
   // leave the search state alone
   result := OWSearch_2P(ROM_NO__);
end;

end.