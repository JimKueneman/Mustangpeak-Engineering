unit opstackcore_datagram;

{$IFDEF FPC}
interface
{$ENDIF}

{$I Options.inc}

uses
  opstack_api,
  opstack_node,
  opstack_buffers,
  opstackcore_configmem,
  template_hardware,
  opstack_utilities,
  opstack_defines,
  opstack_types;

const
  MAX_DATAGRAM_RESEND_ATTEMPTS = 5;

procedure OPStackCoreDatagram_Initialize;

procedure DatagramOkReplyHandler(Node: POpenLCBNode; OPStackMessage: POPStackMessage);
procedure DatagramRejectedReplyHandler(Node: POpenLCBNode; OPStackMessage: POPStackMessage);
function DatagramHandler(Node: POpenLCBNode; var MessageToSend: POPStackMessage; DatagramMessage: POPStackMessage): Boolean;

implementation

function FindMessageOnStack(Node: POpenLCBNode; OPStackMessage: POPStackMessage; FirstStackMessage: POPStackMessage): POPStackMessage;
begin
  Result := nil;
  if FirstStackMessage <> nil then
  begin
    if FirstStackMessage^.MTI = MTI_DATAGRAM then
      if OpenLCBUtilities_EqualNodeIDInfo(FirstStackMessage^.Source, OPStackMessage^.Dest) then    // Testing messages coming from opposite directions so need to swap source/dest to be correct
        if OpenLCBUtilities_EqualNodeIDInfo(FirstStackMessage^.Dest, OPStackMessage^.Source) then
          Result := FirstStackMessage
  end;
end;

// *****************************************************************************
//  procedure OPStackCoreDatagram_Initialize;
//    Parameters:
//    Result:
//    Description:
// *****************************************************************************
procedure OPStackCoreDatagram_Initialize;
begin

end;

// *****************************************************************************
//  procedure DatagramHandler;
//    Parameters:
//    Result:
//    Description: This handler does both send and receive.  The creater of the message
//                  must set the DatagramBuffer iStatemachine to the right state to start the
//                  correct action
// *****************************************************************************
function DatagramHandler(Node: POpenLCBNode; var MessageToSend: POPStackMessage; DatagramMessage: POPStackMessage): Boolean;
var
  DatagramBufferPtr: PDatagramBuffer;
begin
  Result := False;

  MessageToSend := nil;
  DatagramBufferPtr := PDatagramBuffer( PByte( DatagramMessage^.Buffer));

  case DatagramBufferPtr^.iStateMachine of
    STATE_DATAGRAM_PROCESS :  // [*Receive_Request*-Send_Ack-Send_Data-Receive_Ack] or [Send_Request-Receive_Ack-*Receive_Data*-Send_Ack]
        begin
          case DatagramBufferPtr^.DataArray[0] of
              DATAGRAM_TYPE_MEMORY_CONFIGURATION :
                  begin
                    case DatagramBufferPtr^.DataArray[1] and $C0 of
                       MCP_COMMAND_READ             : begin CommandReadHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_READ_REPLY_OK    : begin CommandReadReplyOkHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_READ_REPLY_FAIL  : begin CommandReadReplyFailHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_READ_STREAM      : begin CommandReadStreamHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_READ_STREAM_REPLY: begin CommandReadStreamReply(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_WRITE            : begin CommandWriteHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_WRITE_REPLY_OK   : begin CommandWriteReplyOkHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_WRITE_REPLY_FAIL : begin CommandWriteReplyFailHandler(Node, DatagramMessage); Exit; end;
                       MCP_COMMAND_WRITE_STREAM     : begin CommandWriteStreamHandler(Node, DatagramMessage); Exit; end;
                       MCP_OPERATION :
                           begin
                             case DatagramBufferPtr^.DataArray[1] of
                               MCP_OP_GET_CONFIG         : begin OperationGetConfigurationHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_GET_ADD_SPACE_INFO : begin OperationGetSpaceInfoHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_LOCK               : begin OperationLockHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_GET_UNIQUEID       : begin OperationGetUniqueIDHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_FREEZE             : begin OperationFreezeHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_INDICATE           : begin OperationIndicateHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_UPDATE_COMPLETE    : begin OperationUpdateCompleteHandler(Node, DatagramMessage); Exit; end;
                               MCP_OP_RESETS             : begin OperationResetHandler(Node, DatagramMessage); Exit; end
                             else
                               begin DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_DONE; Exit; end;
                             end
                           end
                    else // case
                      begin DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_DONE; Exit; end;
                    end  // case
                  end
            else   // case
              begin DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_DONE; Exit; end;
            end;   // case
          Exit;
        end;
    STATE_DATAGRAM_SEND_ACK :  // [Receive_Request-*Send_Ack*-Send_Data-Receive_Ack] The ack sent in reply to a datagram request from another node
        begin
          if OPStackBuffers_AllocateOPStackMessage(MessageToSend, MTI_DATAGRAM_OK_REPLY, DatagramMessage^.Source, DatagramMessage^.Dest, False) then
          begin
            if DatagramBufferPtr^.AckFlags and DATAGRAM_OK_ACK_REPLY_PENDING = DATAGRAM_OK_ACK_REPLY_PENDING then
            begin
              MessageToSend^.Buffer^.DataBufferSize := 1;
              MessageToSend^.Buffer^.DataArray[0] := DatagramBufferPtr^.AckFlags;
              DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_DONE;          // We will reply with the datagram later, jump out and free this datagram buffer
            end else
            begin
              MessageToSend^.Buffer^.DataBufferSize := 0;
              DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_SEND
            end;
            Result := True;
          end;
          Exit;
        end;
    STATE_DATAGRAM_SEND :  // [Receive_Request-Send_Ack-*Send_Data*-Receive_Ack] or [*Send_Request*-Receive_Ack-Receive_Data-Send_Ack]   The data sent in reply to a datagram request from another node
        begin
          if IsOutgoingBufferAvailable then
          begin
            OutgoingMessage(DatagramMessage, False);
            DatagramMessage^.WatchDog_1s := 0;
            DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_WAITFOR;         // Wait for the remote node to ACK back
          end;
          Exit;
        end;
    STATE_DATAGRAM_SEND_REPLY_ACK :  // [Send_Request-Receive_Ack-Receive_Data-*Send_Ack*]
        begin
          if OPStackBuffers_AllocateOPStackMessage(MessageToSend, MTI_DATAGRAM_OK_REPLY, DatagramMessage^.Dest, DatagramMessage^.Source, False) then
          begin
            MessageToSend^.Buffer^.DataBufferSize := 1;
            MessageToSend^.Buffer^.DataArray[0] := 0;
            OPStackNode_IncomingMessageUnLink(Node, DatagramMessage);
            OPStackBuffers_DeAllocateMessage(DatagramMessage);
            Result := True;                                                     // Done
          end;
          Exit;
        end;
    STATE_DATAGRAM_WAITFOR :
        begin
          if DatagramMessage^.WatchDog_1s > TIMEOUT_MESSAGE_REPLY_WAIT then
            DatagramBufferPtr^.iStateMachine := STATE_DATAGRAM_DONE;
          Exit;
        end;
    STATE_DATAGRAM_DONE :
        begin // Emergency bail, only the correct link will be removed
          OPStackNode_IncomingMessageUnLink(Node, DatagramMessage);
          OPStackNode_OutgoingMessageUnLink(Node, DatagramMessage);
          OPStackBuffers_DeAllocateMessage(DatagramMessage);
        end;
  end;
end;

// *****************************************************************************
//  procedure DatagramOkReplyHandler;
//    Parameters:
//    Result:
//    Description:
// *****************************************************************************
procedure DatagramOkReplyHandler(Node: POpenLCBNode; OPStackMessage: POPStackMessage);
var
  DatagramBuffer: PDatagramBuffer;
  DatagramMessage: POPStackMessage;
  IsIncomingMessage: Boolean;
begin
  // These CAN NOT be linked to the node and processed in the main loop as the main loop
  // links are blocked by the datagram itself.  May need new link system once we get to Streams.
  // This is ok due to the way we block the interupts
  // The send message is the DATAGRAM_OK message and we need to find the original message that is
  // on either the incoming or outgoing message stacks for the node. Since one one datagram conversation
  // in each direction is allowed we can test the source/dest Node IDs to find the right message
  // There are 2 different reasons this is called:
  // 1) A node requested datagram data from us and it sent us an ack saying it received the data
  // 2) We requested data from a node and it sent us an ack saying it received the request

  IsIncomingMessage := False;
  DatagramMessage := FindMessageOnStack(Node, OPStackMessage, Node^.IncomingMessages);
  if DatagramMessage <> nil then
    IsIncomingMessage := True
  else
    DatagramMessage := FindMessageOnStack(Node, OPStackMessage, Node^.OutgoingMessages);

  if DatagramMessage <> nil then
  begin
    DatagramBuffer := PDatagramBuffer( PByte( DatagramMessage^.Buffer));
    if DatagramBuffer^.iStateMachine = STATE_DATAGRAM_WAITFOR then
    begin   // Gotta do this fast before the node sends us another datagram and we still have the buffer plugged up
      if IsIncomingMessage then
        OPStackNode_IncomingMessageUnLink(Node, DatagramMessage)
      else
        OPStackNode_OutgoingMessageUnLink(Node, DatagramMessage);
      OPStackBuffers_DeAllocateMessage(DatagramMessage);
    end;
    Exit;
  end;
end;

// *****************************************************************************
//  procedure DatagramRejectedReplyHandler;
//    Parameters:
//    Result:
//    Description:
// *****************************************************************************
procedure DatagramRejectedReplyHandler(Node: POpenLCBNode; OPStackMessage: POPStackMessage);
var
  DatagramBuffer: PDatagramBuffer;
  DatagramMessage: POPStackMessage;
  ErrorCode: Word;
  IsIncomingMessage: Boolean;
begin
  // These CAN NOT be linked to the node and processed in the main loop as the main loop
  // links are blocked by the datagram itself.  May need new link system once we get to Streams.
  // This is ok due to the way we block the interupts
  // The send message is the DATAGRAM_FAIL message and we need to find the original message that is
  // on either the incoming or outgoing message stacks for the node. Since one one datagram conversation
  // in each direction is allowed we can test the source/dest Node IDs to find the right message
  // There are 2 different reasons this is called:
  // 1) A node requested datagram data from us and it sent us an ack saying it failed on received the data
  // 2) We requested data from a node and it sent us an ack saying it failed on receiving the request

  IsIncomingMessage := False;
  DatagramMessage := FindMessageOnStack(Node, OPStackMessage, Node^.IncomingMessages);
  if DatagramMessage <> nil then
    IsIncomingMessage := True
  else
    DatagramMessage := FindMessageOnStack(Node, OPStackMessage, Node^.OutgoingMessages);

  if DatagramMessage <> nil then
  begin
    DatagramBuffer := PDatagramBuffer( PByte( DatagramMessage^.Buffer));
    if DatagramBuffer^.iStateMachine = STATE_DATAGRAM_WAITFOR then
    begin
      ErrorCode := (OPStackMessage^.Buffer^.DataArray[0] shl 8) or OPStackMessage^.Buffer^.DataArray[1];
      if (ErrorCode and DATAGRAM_RESULT_REJECTED_RESEND_MASK <> 0) and (DatagramBuffer^.ResendCount < MAX_DATAGRAM_RESEND_ATTEMPTS) then
      begin
        Inc(DatagramBuffer^.ResendCount);
        DatagramBuffer^.CurrentCount := 0;
        DatagramBuffer^.iStateMachine := STATE_DATAGRAM_SEND;
      end else
      begin // Gotta do this fast before the node sends us another datagram and we still have the buffer plugged up
        if IsIncomingMessage then
          OPStackNode_IncomingMessageUnLink(Node, DatagramMessage)
        else
          OPStackNode_OutgoingMessageUnLink(Node, DatagramMessage);
        OPStackBuffers_DeAllocateMessage(DatagramMessage);
      end;
    end;
  end;
end;

end.