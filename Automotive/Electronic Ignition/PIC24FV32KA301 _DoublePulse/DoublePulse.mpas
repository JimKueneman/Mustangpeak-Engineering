program DoublePulse;

{ Declarations section }

{$DEFINE UART}

const
  {****** MCU Setup Parameters ******}
  // Frequency the CPU is running
  OSCILLATORFREQ = 32e6;
  // How many cycles of the Oscillator for each master timer cycle
  CLOCKDIVIDER = 2;
  // Frequency of the master timer cloc
  CLOCK_FREQ = real( OSCILLATORFREQ/CLOCKDIVIDER);
  // The period of a single clock timer tick (in seconds)
  CLOCK_PERIOD = real( 1/CLOCK_FREQ);

  {****** Engine Parameters *******}
  // Engine cycles
  ENGINE_CYCLE = 4;
  // Number of Cylinders (assuming not a dual point distributor)
  CYLINDERS = 8;
  // Revolutions per Cycle
  REV_PER_CYCLE = ENGINE_CYCLE/2;

  { ****** Sofer parameters to define limits for decision logic in the program ******}
  // Below this and we say we stalled and restart the Statemachine
  STALL_RPM = 50;
  // Above this and it is a bad measurement of RPM
  MAX_RPM = 7000;
  // Above this and we move to the Running State
  MIN_RUNNING_RPM = 400;
  // How many fake RPM triggers to give the FiTech on startup
  FAKE_RPM_COUNT = 0;
  // What RPM to use for the Fake RPM signal
  FAKE_RPM = real( 7000);
  // Smoothing RPM Filter Depth and How many valid RPM spark pulses detected in the pin change notification to
  // move on in the Stat machine before moving out of Cranking
  RPM_FILTER_LEN = 4;
  // How much of a distributor spark period to blank out before looking for the next pin change notification
  BLANK_PERCENT = 0.40;
  // How long between pin change notification before we claim the engine has stalled
  STALL_DISTRIBUTOR_PERIOD = real( 60 * REV_PER_CYCLE /(STALL_RPM*CYLINDERS));
  // Time to blank if the RPM made no sense at all during cranking
  DEFAULT_CRANKING_RPM = 200;
  DEFAULT_CRANKING_BLANK_PERIOD = real( 60 * REV_PER_CYCLE/(DEFAULT_CRANKING_RPM*CYLINDERS));

  // Statemachine states
  STATE_STALLED = 0;               // Engine is not running
  STATE_STABLIZE_CRANKING = 1;     // Engine is cranking but waiting for the a stable set of pin change notification to occur
  STATE_FAKE_RPM = 2;              // Send the FiTech some fake higher RPM signals to get it to shoot fuel sooner
  STATE_CRANKING = 3;              // Cranking normally but not averaging the pin change notifications yet
  STATE_RUNNING = 4;               // RPM indicates we started so start averaging the pin change notification for the FiTech Output

  TACH_LO = 1;                     // Pin output for a Tach Lo output (common collector amplifier)
  TACH_HI = 0;                     // Pin output for a Tach Hi output (common collector amplifier)

  COILNEG = B0;    // Bit 0        // The Pin index in the associated Port for the Coil Negative Input
  TACHOUT = B9;    // Bit 9        // The Pin index in the associated Port for the Tach Output

var
  CoilNeg_Port: Word at PORTA;
  CoilNeg_Pin: sbit at LATA0_bit;
  CoilNeg_TRIS: sbit at TRISA0_bit;

  TachPort: Word at PORTB;
  TachOut_Pin: sbit at LATB9_bit;
  TachOut_TRIS: sbit at TRISB9_bit;

  HeartBeat_Port: Word at PORTA;
  HeartBeat_Pin: sbit at LATA3_bit;
  HeartBeat_TRIS: sbit at TRISA3_bit;

  Debug_Port: Word at PORTA;
  Debug_Pin: sbit at LATA2_bit;
  Debug_TRIS: sbit at TRISA2_bit;

  // RPM Averaging array and index counter
  Distributor_Period_Filter_Array: array[RPM_FILTER_LEN] of real;
  Distributor_Period_Filter_Counter: Integer;

  State,
  Stable_Cranking_RPM_Count_Global: Integer;
  Last_RPM_Global: real;
  DetailedLogging: Boolean;

{$IFDEF UART}
procedure PrintState;
var
  Buffer: array[6] of char;
begin
  IntToStr(State, Buffer);
  UART_Write_Text(Buffer);
  UART2_Write(#13);
end;

procedure PrintRPM;
var
  Buffer: array[23] of char;
begin
  FloatToStr(Last_RPM_Global, Buffer);
  UART_Write_Text(Buffer);
  UART1_Write(#13);
end;
{$ENDIF}
// Converts an RPM into a Period Time between each cyclinder firing in Seconds
function RPM_To_Distributor_Period(RPM: real): real;
begin
  Result := 0.0;
  if RPM > 0 then
    Result := real( 60 * REV_PER_CYCLE / (RPM * CYLINDERS ));
end;

// Converts a Period of Time between cylinder firings into RPM
function Distributor_Period_To_RPM(Distributor_Period: real): real;
begin
  Result := 0.0;
  if Distributor_Period > 0.0 then
    Result := real( 60 / Distributor_Period / CYLINDERS * REV_PER_CYCLE)
end;

// Converts a DWORD Timer Count to actual elapsed time (seconds) scaled by the Timer Divider (used 1, 8, 32, 64, etc)
function TimerCounts_To_Time(TimerCounts: DWORD; Divider: Word): real;
begin
  Result := real( TimerCounts) * CLOCK_PERIOD ///* real( Divider);
end;

// Converts time (seconds) to a DWORD Timer Count using the passed Timer Divider (1, 8, 32, 64, etc)
function Time_To_TimerCounts(Time: real; Divider: Word): DWORD;
begin
  Result := DWORD( Time / (CLOCK_PERIOD * real( Divider)))
end;

procedure UpdateDistributorArray(NewDistributorTime: real);
begin
  // Insert the lastest item in the array
  Distributor_Period_Filter_Array[Distributor_Period_Filter_Counter] := NewDistributorTime;
  Inc(Distributor_Period_Filter_Counter);
  // Update the array counter
  if Distributor_Period_Filter_Counter >= RPM_FILTER_LEN then
    Distributor_Period_Filter_Counter := 0;
end;

// Sends the delayed blanking pulse to the FiTech and stalls the CN Interrupt for the blanking
procedure TriggerOutput_With_Wait(BlankingTime: real);
begin
  TachOut_Pin := TACH_Hi;
  Delay_Cyc_Long( Time_To_TimerCounts(BlankingTime * BLANK_PERCENT, 1));  // Just a bit more than 15 degrees dwell (out of 45
  TachOut_Pin := TACH_LO;
end;

// Calculates the average of the items in the Distributor Period Array
function AverageDistributorPeriod: real;
var
  i: Integer;
begin
  Result := 0.0;
  for i := 0 to RPM_FILTER_LEN - 1 do
    Result := Result + Distributor_Period_Filter_Array[i];
  Result := Result / RPM_FILTER_LEN
end;

procedure interrupt_TMR3_RPM_Measurment_And_Stall_Timer(); iv IVT_ADDR_T3INTERRUPT;
begin
  // Reset the RPM/Stall Timer; Keep looking for stalls as that is the only way to enter this
  TMR3HLD := $0000;
  TMR2 := $0000;
  State := STATE_STALLED;
  Last_RPM_Global := 0.0;
  {$IFDEF UART}
  UART2_Write_Text('Stall Detected - IRQ');
  UART2_Write(#13);
  {$ENDIF}
  T3IF_bit := 0;                 // Reset Interrupt Flag
end;

procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortCopy: Word;
  i: Integer;
  LastDistributorPeriod: real;
  DistributorPeriodTimerCount: DWord;
begin
  PortCopy := CoilNeg_Port;    // Clear all changes
  // Detect rising edges only
  if PortCopy.COILNEG = 1 then
  begin
    // Capture it contents
    LoWord(DistributorPeriodTimerCount) := TMR2;
    HiWord(DistributorPeriodTimerCount) := TMR3HLD;
    // Reset the RPM/Stall Timer
    TMR3HLD := $0000;
    TMR2 := $0000;
    // Makes sure it can't jump to the stall interrupt
    T3IF_bit := 0;

    if State = STATE_STALLED then
    begin
      Last_RPM_Global := 0.0;
      LastDistributorPeriod := 0.0;
    end else
    begin
      LastDistributorPeriod := TimerCounts_To_Time(DistributorPeriodTimerCount, 1);
      Last_RPM_Global := Distributor_Period_To_RPM(LastDistributorPeriod);
    end;
    
    {$IFDEF UART}
    if DetailedLogging then
      PrintRPM;
    {$ENDIF}

    case State of
      STATE_STALLED :
        begin
          Stable_Cranking_RPM_Count_Global := 0;
          Distributor_Period_Filter_Counter := 0;
          Last_RPM_Global := 0;
          {$IFDEF UART}PrintState;{$ENDIF}
          State := STATE_STABLIZE_CRANKING;
          {$IFDEF UART}PrintState;{$ENDIF}
        end;
      STATE_STABLIZE_CRANKING :
        begin
          // Decision point for if this was a valid signal
          if (Last_RPM_Global > STALL_RPM) and (Last_RPM_Global < MAX_RPM) then  // Are we cranking in a stable place yet?
          begin
            UpdateDistributorArray(LastDistributorPeriod);
            Delay_Cyc_Long( Time_To_TimerCounts(LastDistributorPeriod*BLANK_PERCENT, 1));
            Inc(Stable_Cranking_RPM_Count_Global)
          end else
          begin
            Delay_Cyc_Long( Time_To_TimerCounts(DEFAULT_CRANKING_BLANK_PERIOD*BLANK_PERCENT, 1));
            Dec(Stable_Cranking_RPM_Count_Global);
          end;
          // Did we reach the correct number of stable pulses to move on?
          if Stable_Cranking_RPM_Count_Global >= RPM_FILTER_LEN then
          begin
            State := STATE_FAKE_RPM;
            {$IFDEF UART}PrintState;{$ENDIF}
          end;
        end;
      STATE_FAKE_RPM :
        begin
          for i := 0 to FAKE_RPM_COUNT -1 do
          begin
            TachOut_Pin := TACH_Hi;
            Delay_Cyc_Long( Time_To_TimerCounts(RPM_To_Distributor_Period(FAKE_RPM*BLANK_PERCENT), 1));
            TachOut_Pin := TACH_Lo;
            Delay_Cyc_Long( Time_To_TimerCounts(RPM_To_Distributor_Period(FAKE_RPM*(1-BLANK_PERCENT)), 1));
          end;
          State := STATE_CRANKING;
          {$IFDEF UART}PrintState;{$ENDIF}
        end;
      STATE_CRANKING :
        begin
          UpdateDistributorArray(LastDistributorPeriod);
          TriggerOutput_With_Wait(LastDistributorPeriod);
          if Last_RPM_Global > MIN_RUNNING_RPM then
          begin
            State := STATE_RUNNING;
            {$IFDEF UART}PrintState;{$ENDIF}
          end;
        end;
      STATE_RUNNING :
        begin
          UpdateDistributorArray(LastDistributorPeriod);
          TriggerOutput_With_Wait(AverageDistributorPeriod);
      end else
        State := STATE_STALLED;     // State is messed up, start over
    end;    // Case
  end;

  // Some free debounce guarding by putting this at the end
  CNIF_bit := 0;
end;


var
  StrBuffer: array[23] of Char;
begin
  { Main program }
  ANSA := 0;        // Make them all Digital
  ANSB := 0;

  State := STATE_STALLED;
  DetailedLogging := False;

  TachOut_Pin := TACH_LO;   // Set it low
  HeartBeat_Pin := 0;
  Debug_Pin := 0;

  CoilNeg_TRIS := 1;   // Input
  TachOut_TRIS := 0;   // Tach Output
  HeartBeat_TRIS := 0; // Output
  Debug_TRIS := 0;

  // Clock Setup
  CLKDIV := 0;                      // Set both dividers to 1:1 and don't use the DOZE to reset dividers (power saving feature)
  
  // RPM Timer
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 0;                // OFF
  TON_T3CON_bit := 0;                // OFF
  T32_T2CON_bit := 1;                // 32 Bit mode
  TCS_T2CON_bit := 0;                // Internal source
  TGATE_T2CON_bit := 0;              // Disabled Gated Timer Mode
  TCKPS_0_T2CON_bit := 0;            // 00 = 1; 01 = 8; 10 = 64; 11 = 256
  TCKPS_1_T2CON_bit := 0;
  IPC2 := IPC2 or 0x1000;            // interrupt priority level = 1
  PR2 := LoWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  PR3 := HiWord( DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD));
  TMR3HLD := 0;
  TMR2 := 0;
  // Upper Timer fires the interrupts
  T3IP_0_bit := 1;                   // priority
  T3IP_1_bit := 0;
  T3IP_2_bit := 0;
  T3IF_bit := 0;                     // clear T1IF
  T3IE_bit := 1;                     // enable Timer1 interrupts
  // Lower Timer controls the setup Setup
  TON_T2CON_bit := 1;                // ON

  {$IFDEF UART}
  UART2_Init(115200);
  Delay_ms(100);

  UART2_Write_Text('STALL_DISTRIBUTOR_PERIOD=');
  FloatToStr(STALL_DISTRIBUTOR_PERIOD, StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD)=');
  LongWordToStr(DWORD(STALL_DISTRIBUTOR_PERIOD/CLOCK_PERIOD), StrBuffer);
  UART2_Write_Text(StrBuffer);

  UART2_Write_Text('PRL=');
  WordToStr(TMR2, StrBuffer);
  UART2_Write_Text(StrBuffer);
  UART_Write_Text('  PRH=');
  WordToStr(TMR3HLD, StrBuffer);
  UART_Write_Text(StrBuffer);
  UART2_Write(#13);
  {$ENDIF}

  // ALWAYS DO THIS LAST
  // Pin change Notification
  CN2IE_bit := 1;  // Pin Change Notification Interrupt on RA0
  CNIP_0_bit := 1;  // Interrupt priority = 7
  CNIP_1_bit := 1;
  CNIP_2_bit := 1;
  CNIF_bit := 0;    // Clear Pin Change Interrupt flag
  CNIE_bit := 1;    // Enable all Pin Change Interrupts


  while true do
  begin
    Delay_ms(100);
    {$IFDEF UART}
    if UART2_Data_Ready then
    begin
      case UART2_Read of
        'd', 'D' : DetailedLogging := not DetailedLogging;
      end;
    end;
    
    if not DetailedLogging then
    begin
      UART2_Write_Text('RPM=');
      FloatToStr(Last_RPM_Global, StrBuffer);
      UART2_Write_Text(StrBuffer);
      UART_Write_Text('  State=');
      IntToStr(State, StrBuffer);
      UART_Write_Text(StrBuffer);
      UART2_Write(#13);
    end;
    {$ENDIF}
    // Waitin for Pin Change Interrupt
    HeartBeat_Pin := not HeartBeat_Pin;
  end;
end.