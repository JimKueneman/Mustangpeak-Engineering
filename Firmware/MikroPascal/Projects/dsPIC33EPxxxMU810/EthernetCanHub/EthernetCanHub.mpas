program EthernetCanHub;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2015.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-08-10:   Created
//
// * Description:

//
// *****************************************************************************

{.$DEFINE ENABLE_UART_INTERFACE}

const
  DMACHANNEL_1 = 1;
  DMACHANNEL_0 = 0;
  
type
  TSpiOutBuffer = record
    GridConnectStr: TGridConnectString;
    Valid: Boolean;
  end;
  
var
  InSync, HaveSeenLoCS: Boolean;
  SpiOutBuffer: TSpiOutBuffer;
  InvalidSpiReceives: DWord;
  
// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Timer_525ms(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;
end;

procedure INTERRUPT_Timer_100ms(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
begin
  T2IF_bit := 0;                                                                // Clear the Flag
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_Can(); iv IVT_ADDR_C1INTERRUPT;
begin
  C1IF_bit := 0;    // Very little to do with the CAN interrupt with the DMA
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_DMA3_Can_Transmit(); iv IVT_ADDR_DMA3INTERRUPT;
begin
  DMA3IF_bit := 0;       // Called when Transmit is complete.....
end;

//******************************************************************************
//
//******************************************************************************
procedure interrupt_DMA2_Can_Receive(); iv IVT_ADDR_DMA2INTERRUPT;
var
  OpenLCBCanBufferPtr: POpenLCBCanBuffer;
  Extended: Boolean;
begin
  DMA2IF_bit := 0;
  OpenLCBCanBufferPtr := CanBufferIn_NextEmpty;
  if OpenLCBCanBufferPtr <> nil then
  begin    
    Extended := True;
    dsPIC33_DMA_Style_Buffer(OpenLCBCanBufferPtr^, Extended, CAN_DIRECTION_READ, @Can_RawBufferArray[3].Word0);
    CAN_IsReceiveFull(3, True);  // Rest the hardware "full" flag so we are ready for the next message
  end;
end;

//******************************************************************************
// Fired immeditatly after the DMA SPI receive cycle is complete.
//******************************************************************************
procedure interrupt_DMA0_SPI_Receive(); iv IVT_ADDR_DMA0INTERRUPT;
var
  NextCanOutBuffer: POpenLCBCanBuffer;
  GridConnectStr: TGridConnectString;
  i: Integer;
begin
  DMA0IF_bit := 0;

  if InSync then
  begin
    if PingPongASelected(DMACHANNEL_0) then
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // A is selected as this message is coming in, the instant this interrupt is entered the module switches to the B to prepare for the next message
        GridConnectStr[i] := Spi_RxBRawBufferArray[i];
    end else
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // B is selected as this message is coming in, the instant this interrupt is entered the module switches to the A to prepare for the next message
        GridConnectStr[i] := Spi_RxARawBufferArray[i];
    end;

    if (GridConnectStr[0] = ':') then
    begin
      NextCanOutBuffer := CanBufferOut_NextEmpty;
      if NextCanOutBuffer <> nil then
        GridConnectStr_ToCanBuffer(@GridConnectStr, NextCanOutBuffer);
    end else
    begin
      if GridConnectStr[0] <> '' then
      begin
        Inc(InvalidSpiReceives);
        UART1_Write_Text(GridConnectStr + LF);
      end;
    end;
  end;
end;

//******************************************************************************
// Fired immeditatly after the DMA SPI transmit cycle is complete.
//******************************************************************************
procedure interrupt_DMA1_SPI_Transmit(); iv IVT_ADDR_DMA1INTERRUPT;
var
  i: Integer;
  A_Selected: Boolean;
begin
  DMA1IF_bit := 0;
  
  if InSync and SpiOutBuffer.Valid then
  begin
    if PingPongASelected(DMACHANNEL_0) then                                     // This flag can transition DURING the call to the DMA interrupt depending on timing of the SPI clock on DMACHANNEL_1 (TX)
    begin                                                                       // The DMA0/DMA1 interrupts are not predictable on which will fire first (equal priority) depending on who fires first will shift the interrupt to the place where the flag toggles during it
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do
        Spi_TxBRawBufferArray[i] := SpiOutBuffer.GridConnectStr[i];
    end else
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // B is selected when the first byte is moved to the DMA RAM so it is also the buffer that we must access to receive that data after the last byte is received
        Spi_TxARawBufferArray[i] := SpiOutBuffer.GridConnectStr[i];             // Copy the GridConnectString into the SPI Tx DMA
    end;
    SpiOutBuffer.Valid := False;
  end else
  begin
    if PingPongASelected(DMACHANNEL_0) then
    begin                                                                       // A is selected when the first byte is moved to the DMA RAM so it is also the buffer that we must access to receive that data after the last byte is received
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // Copy the GridConnectString into the SPI Tx DMA
        Spi_TxBRawBufferArray[i] := 0;
    end else
    begin
      for i := 0 to MAX_GRID_CONNECT_LEN-1 do                                   // B is selected when the first byte is moved to the DMA RAM so it is also the buffer that we must access to receive that data after the last byte is received
        Spi_TxARawBufferArray[i] := 0;                                          // Copy the GridConnectString into the SPI Tx DMA
    end;
  end;
end;

//******************************************************************************
// Pin Change Interrupt for Chip Select (CS) line.  Here we enable/disable the
// DMA's for SPI.  That way we are always in sync with the the data coming in.  If
// we don't do this we could boot the slave in the middle of the master (RPi) sending
// a message and we will be all out of sync.  We MUST have a mulitple of 29 bytes
// (the current DMA count) or things will get out of sync.
//******************************************************************************
procedure interrupt_PinChangeNotification(); iv IVT_ADDR_CNINTERRUPT;
var
  PortGCopy: Word;
begin
  CNIF_bit := 0;
  PortGCopy := PORTG;    // Clear all changes
  // CAN NOT reset the DMA modules on a CS (SS) change as the Tx machine is placing
  // data in the FUTURE buffers, if we reset then that could get out of sync
  // can we reset just the DMA counters and not reset the module - NOPE
  if not InSync then
  begin
    if PortGCopy.B9 = 0 then
      HaveSeenLoCS := True
    else begin
      if HaveSeenLoCS then
      begin
        if PortGCopy.B9 =  1 then     // Enable it during the rest side if CS (SS)
        begin
          InSync := True;
          EnableSpi(True);  
          UART_Write_Text('Sync' + LF);
        end;
      end
    end
  end;
end;

var
  i: Integer;
  s1, s2: string[128];
  LocalOpenLcbBuffer, SendOpenLcbBuffer: TOpenLCBCanBuffer;
  Extended: Boolean;
  Address: DWord;
begin
  { Main program }
  SpiOutBuffer.Valid := False;
  InvalidSpiReceives := 0;
  InSync := False;
  HaveSeenLoCS := False;
  MCU_Setup_Initialize;
  CanBufferOut_Initialize;
  CanBufferIn_Initialize;
  MCU_Enable_100msTimer;
  MCU_Enable_UART;
  MCU_Enable_SPI;

  EnableSpi(False);  // Use the Chip Select via the Pin B6 Change Notification interrupt
  MCU_Enable_PinChangeNotification;
  
  TON_T1CON_bit := 1;       // Turn on 500ms timer
  TON_T2CON_bit := 1;       // Turn on 100ms timer
    
  MCU_Enable_CAN;

  TRISB1_bit := 0;
  TRISB2_bit := 0;
  TRISB3_bit := 0;
  TRISB4_bit := 0;

  UART1_Write_Text('Booting'+LF);
  
  Address := DWord(@Spi_TxARawBufferArray[0]);
  LongWordToHex(DWord(Address), s1);
  UART1_Write_Text('Address: ' + s1 + LF);
  
  SendOpenLcbBuffer.MTI := $19490072;
  SendOpenLcbBuffer.PayloadCount := 0;
  SendOpenLcbBuffer.Payload[0] := 0;
  SendOpenLcbBuffer.Payload[1] := 0;
  SendOpenLcbBuffer.Payload[2] := 0;
  SendOpenLcbBuffer.Payload[3] := 0;
  SendOpenLcbBuffer.Payload[4] := 0;
  SendOpenLcbBuffer.Payload[5] := 0;
  SendOpenLcbBuffer.Payload[6] := 0;
  SendOpenLcbBuffer.Payload[7] := 0;
  
  while True do
  begin
    if not CAN_IsTransmitRequested(0) then
    begin
      while DMA0IE_bit = 1 do DMA0IE_bit := 0;   // Disable incoming SPI interrupts till we are done with the buffer to CAN out
      if CanBufferOut_NextFull(LocalOpenLcbBuffer) then
      begin
        DMA0IE_bit := 1;  // Reinable incoming SPI interrupts
        TransmitOpenLcbBuffer(0, @LocalOpenLcbBuffer);
      end else
        DMA0IE_bit := 1;  // Reinable incoming SPI interrupts
    end;
    
    
    while DMA2IE_bit = 1 do DMA2IE_bit := 0;     // Disable the incoming CAN interrupts till we are done with the buffer for CAN in
    while DMA1IE_bit = 1 do DMA1IE_bit := 0;     // Disable the outgoing SPI interrupts till we are done with the buffer for Spi Out in
    if SpiOutBuffer.Valid = False then   // Is the out buffer empty?
    begin
      if CanBufferIn_NextFull(LocalOpenLcbBuffer) then  // Do we have something useful to send from the incoming CAN messages?
      begin
        GridConnect_BufferToGridConnect(LocalOpenLcbBuffer, @SpiOutBuffer.GridConnectStr);  // convert it to grid connect string and place it in the Spi outgoing buffer
        SpiOutBuffer.Valid := True;
      end;
    end;
    DMA1IE_bit := 1;
    DMA2IE_bit := 1;

    {$IFDEF ENABLE_UART_INTERFACE}
    if UART1_Data_Ready then
    begin
      case UART1_Read of
          'R' :    begin
                     WordToHex(C1RXFUL1, s1);
                     s2 := 'C1RXFUL1: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXFUL2, s1);
                     s2 := 'C1RXFUL2: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1FCTRL, s1);
                     s2 := 'C1FCTRL: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1FIFO, s1);
                     s2 := 'C1FIFO: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXOVF1, s1);
                     s2 := 'C1RXOVF1: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                     WordToHex(C1RXOVF2, s1);
                     s2 := 'C1RXOVF2: 0x' + s1;
                     UART1_Write_Text(s2+LF);
                   end;
          'T' :    begin
                     if TryTransmitOpenLcbBuffer(0, @SendOpenLcbBuffer) then
                     begin
                     LongWordToHex(SendOpenLcbBuffer.MTI, s1);
                     s2 := 'Tx MTI: ' + s1;
                     UART1_Write_Text(s2+LF);
                     end else
                       UART1_Write_Text('Transmit Failed');
                   end;
          'E' :    begin
                     WordToHex(DMAPWC, s1);
                     UART1_Write_Text('DMAPWC: 0x' + s1 + LF);
                     
                     WordToHex(DMARQC, s1);
                     UART1_Write_Text('DMARQC: 0x' + s1 + LF);
                     
                     WordToHex(SPI2STAT, s1);
                     UART1_Write_Text('SPI2STAT: 0x' + s1 + LF);
                     
                     WordToHex(SPI2CON1, s1);
                     UART1_Write_Text('SPI2CON1: 0x' + s1 + LF);
                     
                     WordToHex(SPI2CON2, s1);
                     UART1_Write_Text('SPI2CON2: 0x' + s1 + LF);

                   end;
          'S' :    begin
                     
                     if ForceSpi1Transmit then
                       UART1_Write_Text('Success Tx Force' + LF)
                     else
                       UART1_Write_Text('Fail Tx Force' + LF)
                   end;
          '2' :    begin
                     WordToHex(DMA0STAH, s1);
                     UART1_Write_Text('DMA0STAH: 0x' + s1 + LF);
                     WordToHex(DMA0STAL, s1);
                     UART1_Write_Text('DMA0STAL: 0x' + s1 + LF);
                     UART1_Write_Text('Spi TX A' + LF);
                     for i := 0 to MAX_SPI_BUFFER - 1 do
                     begin
                       WordToStr(Spi_TxARawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                     UART1_Write_Text('Spi TX B' + LF);
                     for i := 0 to MAX_SPI_BUFFER - 1 do
                     begin
                       WordToStr(Spi_TxBRawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                     WordToHex(DMA1STAH, s1);
                     UART1_Write_Text('DMA1STAH: 0x' + s1 + LF);
                     WordToHex(DMA1STAL, s1);
                     UART1_Write_Text('DMA1STAL: 0x' + s1 + LF);
                     UART1_Write_Text('Spi RX A' + LF);
                     for i := 0 to MAX_SPI_BUFFER - 1 do
                     begin
                       WordToStr(Spi_RxARawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                     UART1_Write_Text('Spi RX B' + LF);
                     for i := 0 to MAX_SPI_BUFFER - 1 do
                     begin
                       WordToStr(Spi_RxBRawBufferArray[i], s1);
                       UART1_Write_Text(s1 + LF);
                     end;
                   end;
          '3' :    begin
                     UART1_Write_Text('CAN Rx:' + LF);
                     for i := 0 to MAX_ECAN_BUFFER - 1 do
                     begin
                       WordToHex(Can_RawBufferArray[i].Word0, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word1, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word2, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word3, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word4, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word5, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word6, s1);
                       UART_Write_Text(s1 + ' ');
                       WordToHex(Can_RawBufferArray[i].Word7, s1);
                       UART_Write_Text(s1 + LF);
                     end;
                   end;
          '4' : begin
                PrintDMABuffers; 
              end;
          '5' : begin
                  ZeroSpiBuffers
                end;
          '6' : begin
                  IntToStr(CanIn.Count, s1);
                  UART1_Write_Text('CanIn.Count = ' + s1 + LF);
                  IntToStr(CanIn.MaxCount, s1);
                  UART1_Write_Text('CanIn.MaxCount = ' + s1 + LF);
                  LongWordToStr(CanIn.TotalCount, s1);
                  UART1_Write_Text('CanIn.TotalCount = ' + s1 + LF);
                  
                  IntToStr(CanOut.Count, s1);
                  UART1_Write_Text('CanOut.Count = ' + s1 + LF);
                  IntToStr(CanOut.MaxCount, s1);
                  UART1_Write_Text('CanOut.MaxCount = ' + s1 + LF);
                  LongWordToStr(CanOut.TotalCount, s1);
                  UART1_Write_Text('CanOut.TotalCount = ' + s1 + LF);
                  
                  LongWordToStr(InvalidSpiReceives, s1);
                  UART1_Write_Text('InvalidSpiReceives = ' + s1 + LF);
                end;
          '7' : begin
                  InvalidSpiReceives := 0;
                end;
      end;
    end     
    {$ENDIF}
  end;
end.